<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nnnpc.github.io</id>
    <title>Hexo • Posts by &#34;go&#34; tag</title>
    <link href="https://nnnpc.github.io" />
    <updated>2024-04-16T05:58:18.994Z</updated>
    <category term="MISC" />
    <category term="WEB" />
    <category term="流量" />
    <category term="渗透" />
    <category term="python" />
    <category term="GO" />
    <category term="其它" />
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/</id>
        <title>go语言函数</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;函数是基本的代码块，用于执行一个任务。&lt;br&gt;
Go 语言最少有个 main () 函数。&lt;br&gt;
你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。&lt;br&gt;
函数声明告诉了编译器函数的名称，返回类型，和参数。&lt;br&gt;
Go 语言标准库提供了多种可动用的内置的函数。例如，len ()&lt;br&gt;
 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;函数定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数定义&#34;&gt;#&lt;/a&gt; 函数定义&lt;/h1&gt;
&lt;p&gt;函数定义格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func function_name( [parameter list] ) [return_types] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   函数体&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;函数定义解析：&lt;br&gt;
func：函数由 func 开始声明&lt;br&gt;
 function_name：函数名称，参数列表和返回值类型构成了函数签名。&lt;br&gt;
parameter&lt;br&gt;
list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。&lt;br&gt;
return_types：返回类型，函数返回一列值。return_types&lt;br&gt;
 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types&lt;br&gt;
 不是必须的。&lt;br&gt;
函数体：函数定义的代码集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例&lt;/h2&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.994Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%88%9D%E5%AD%A6/</id>
        <title>go语言初学</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%88%9D%E5%AD%A6/"/>
        <content type="html">&lt;h1 id=&#34;go环境搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#go环境搭建&#34;&gt;#&lt;/a&gt; go 环境搭建&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuL2RsLw==&#34;&gt;https://golang.google.cn/dl/&lt;/span&gt;&lt;br&gt;
go 官网下载，我下载的是 msi 版本的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vHP0NQrTy2GjYue7.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一直 next 就行，路径根据自己的想法来安装&lt;/p&gt;
&lt;p&gt;安装完成之后去环境变量里查看一下有无自动添加到环境变量中，没有的话就需要手动添加&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zeiuhJI2y95OKeu2.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看是否添加完成&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kgRMDlp4km6s8K2H.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;windows 中的配置&lt;/p&gt;
&lt;p&gt;终端输入&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 查看Go的环境变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go env&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 清除缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go clean --modcache&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 设置GOBIN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go env -w GOBIN=&amp;quot;D:\go\bin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 配置代理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go env -w GO111MODULE=&amp;quot;on&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go env -w GOPROXY=&amp;quot;https://goproxy.cn,direct&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 再次查看&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go env&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终配置&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/c36nEjWQj7naar7k.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;vscode配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vscode配置&#34;&gt;#&lt;/a&gt; VScode 配置&lt;/h1&gt;
&lt;p&gt;vscode 使用 go 插件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/s7ve54MqQSXSVZNw.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再安装 go 组件，Ctrl+Shift+P，再输入 Go:Install/Update Tools，全选就 ok&lt;/p&gt;
&lt;p&gt;等待一会，全部安装完毕之后就配置完成了&lt;/p&gt;
&lt;h1 id=&#34;编第一个go程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编第一个go程序&#34;&gt;#&lt;/a&gt; 编第一个 go 程序&lt;/h1&gt;
&lt;p&gt;在自己想要的目录下打开终端，输入&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go mod init dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会创建一个 go.mod 文件，在 vscode 中打开该文件夹&lt;br&gt;
创建.go 为扩展名的文件（这里创建了 hello.go）&lt;/p&gt;
&lt;p&gt;需要注意的是在 go 语言中 &amp;quot;{&amp;quot; 不能单独一行&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;Hello, World!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在该 go 文件的同一级目录下打开终端运行文件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go run hello.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/u8jJTlLO4nCMhmQR.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时也可以使用命令生成 exe 文件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go build hello.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/iUjhGypCEvItJbbg.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.992Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%B8%B8%E9%87%8F/</id>
        <title>go语言常量</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%B8%B8%E9%87%8F/"/>
        <content type="html">&lt;h1 id=&#34;常量的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常量的定义&#34;&gt;#&lt;/a&gt; 常量的定义&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常量是一个简单值的标识符，在程序运行时，不会被修改的量。&lt;br&gt;
常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const identifier [type] = value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和变量的声明相似，常量的定义使用关键字 const&lt;br&gt;
 和变量的声明相同，常量也可以省略类型说明符&lt;br&gt;
 [type]（编译器可以根据 value 值来自动判断类型）&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;显式类型定义： const b string = &amp;quot;abc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;隐式类型定义： const b = &amp;quot;abc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;多个相同类型的定义可以缩写为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const c_name1, c_name2 = value1, value2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const LENGTH int = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const WIDTH int = 5  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var area int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   const a, b, c = 1, false, &amp;quot;str&amp;quot; //多重赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   area = LENGTH * WIDTH&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Printf(&amp;quot;面积为 : %d&amp;quot;, area)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   println()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   println(a, b, c)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6CpKCZs3MfFSzFsE.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;常量用来枚举：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Unknown = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Female = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Male = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;0，1，2 分别代表未知性别，男，女&lt;br&gt;
同时，常量可以使用内置函数来计算表达式的值，如 len (), cap (),&lt;br&gt;
unsafe.Sizeof()&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;unsafe&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = &amp;quot;abc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = len(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = unsafe.Sizeof(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    println(a, b, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/d6mIW1xjZcdVd0lA.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;iota&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iota&#34;&gt;#&lt;/a&gt; iota&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;iota，特殊常量，可以认为是一个可以被编译器修改的常量。&lt;br&gt;
iota 在 const 关键字出现时将被重置为 0 (const 内部的第一行之前)，const&lt;br&gt;
 中每新增一行常量声明将使 iota 计数一次 (iota 可理解为 const&lt;br&gt;
 语句块中的行索引)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iota 用来枚举：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = iota&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = iota&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = iota&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一行的 iota 为 0，接下来每增加一行，iota 的值都会加 1&lt;br&gt;
 因此例如 a=0，b=1，c=2 可以简写为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = iota&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vQEPGz1yxPfjQw9t.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZMHzFZ0dgUamqPvA.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;br&gt;
iota 用法：其实就是多加一行 iota 的值就多加 1，除非赋给常量另外的 value，不然每一行的值就是上一行 iota 的值 + 1（iota 的值不会被其它赋值干扰和打断)，用一个实例来简单说明&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a = iota   //0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            b          //1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c          //2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            d = &amp;quot;ha&amp;quot;   //独立值，iota += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e          //&amp;quot;ha&amp;quot;   iota += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f = 100    //iota +=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            g          //100  iota +=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            h = iota   //7,恢复计数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i          //8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(a,b,c,d,e,f,g,h,i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cCIKeGrZ20AiW1uH.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;看个移位实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i=1&amp;lt;&amp;lt;iota&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    j=3&amp;lt;&amp;lt;iota&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    k&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;i=&amp;quot;,i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;j=&amp;quot;,j)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;k=&amp;quot;,k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;l=&amp;quot;,l)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uhT9dMUZtKAZZclO.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iota 表示从 0 开始自动加 1，所以 i=1&amp;lt;&amp;lt;0, j=3&amp;lt;&amp;lt;1（&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt;&lt;br&gt;
 表示左移的意思），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看&lt;br&gt;
 k=3&amp;lt;&amp;lt;2，l=3&amp;lt;&amp;lt;3。&lt;br&gt;
简单表述:&lt;br&gt;
&lt;strong&gt;i=1&lt;/strong&gt;：左移 0 位，不变仍为 1。&lt;br&gt;
&lt;strong&gt;j=3&lt;/strong&gt;：左移 1 位，变为二进制 &lt;strong&gt;110&lt;/strong&gt;，即 6。&lt;br&gt;
&lt;strong&gt;k=3&lt;/strong&gt;：左移 2 位，变为二进制 &lt;strong&gt;1100&lt;/strong&gt;，即 12。&lt;br&gt;
&lt;strong&gt;l=3&lt;/strong&gt;：左移 3 位，变为二进制 &lt;strong&gt;11000&lt;/strong&gt;，即 24。&lt;br&gt;
注：&amp;lt;&amp;lt;n==*(2^n)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，&amp;lt;&amp;lt; 符号代表着向左移位，a&amp;lt;&amp;lt;b 代表着将 a 的二进制位像左移动 b 位，在上述实例的枚举中，赋值给常量的值如果没有进行新的赋值那么就为上一行所赋的值不变，iota 每增加一行就 + 1，因此 k 和 l 都为 3，但是分别左移 2 位和 3 位即 k=3&amp;lt;&amp;lt;2，l=3&amp;lt;&amp;lt;3，即：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i=1&amp;lt;&amp;lt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    j=3&amp;lt;&amp;lt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    K=3&amp;lt;&amp;lt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l=3&amp;lt;&amp;lt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.990Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
        <title>go语言变量作用域</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。&lt;br&gt;
Go 语言中变量可以在三个地方声明：&lt;br&gt;
函数内定义的变量称为局部变量&lt;br&gt;
函数外定义的变量称为全局变量&lt;br&gt;
函数定义中的变量称为形式参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;局部变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#局部变量&#34;&gt;#&lt;/a&gt; 局部变量&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为之前也用过，因此不过多叙述，接下来用简单的代码展示一下局部变量&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var a, b, c int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;结果： a = %d, b = %d and c = %d\n&amp;quot;, a, b, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gY0j2etnawVMnPhP.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上述代码，abc 三个变量在 main 函数中被声明，也就是 abc 的作用域在 main 函数当中，外部无法不声明直接引用这三个变量&lt;/p&gt;
&lt;h1 id=&#34;全局变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局变量&#34;&gt;#&lt;/a&gt; 全局变量&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全局变量之所以被称为全局，也就是在整一个程序中都可以被引用。因此在函数体外进行声明，在任何函数当中都可以使用&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var g int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var a, b int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;结果： a = %d, b = %d and g = %d\n&amp;quot;, a, b, g)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BRUfNatomzmI98nb.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上述程序可以知道，ab 依然为 main 函数中声明的局部变量，只能在 main 函数中使用，但 g 在函数外进行声明，因此 g 为全局变量，main 函数中也可以使用&lt;/p&gt;
&lt;p&gt;这时候可以就会想到一个问题，全局变量和局部变量的变量名相同时会不会引起冲突呢？答案是并不会，但在函数体当中，会优先考虑该函数体中声明的全局变量，如下实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var g int = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var g int = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;结果： g = %d\n&amp;quot;, g)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/o5UWbCRCElJXUFHN.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到变量名同为 g 时，main 函数中的优先输出是局部变量的 g 值&lt;/p&gt;
&lt;h1 id=&#34;形式参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#形式参数&#34;&gt;#&lt;/a&gt; 形式参数&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;形式参数会作为函数的局部变量来使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var a int = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var a int = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var b int = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var c int = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;main()函数中 a = %d\n&amp;quot;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = sum(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;main()函数中 c = %d\n&amp;quot;, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func sum(a, b int) int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;sum() 函数中 a = %d\n&amp;quot;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;sum() 函数中 b = %d\n&amp;quot;, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/qDL0KThcBshap6IG.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;分别来解释一下输出和作用域，在两个函数之外的 a 毋庸置疑是全局变量，作用域在全局，但是 main 函数中也声明了变量 a，因此优先级高于全局的，输出为 10&lt;br&gt;
。接着调用了 sum 函数，而在 sum 函数定义了 a，b 两个形参，作为局部变量，因此作用域仅在 sum 函数中，在接收到 main 函数中 a，b 的值传递后，输出的 a，b 值也就是 main 函数中 a，b 的值，为 10 和 20&lt;br&gt;
。将返回的 a+b 值赋给了 c，因此 main 函数中输出的 c 值为 30&lt;/p&gt;
&lt;p&gt;当函数中没有进行重新声明赋值时，默认使用全局变量&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var a int = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var b int = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var c = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = sum(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;main() 函数中 c = %d\n&amp;quot;, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func sum(a, b int) int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;sum() 函数中 a = %d\n&amp;quot;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;sum() 函数中 b = %d\n&amp;quot;, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fdkdqXXyXfdkcyGP.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;初始化局部和全局变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化局部和全局变量&#34;&gt;#&lt;/a&gt; 初始化局部和全局变量&lt;/h1&gt;
&lt;p&gt;不同类型的局部和全局变量默认值为：&lt;/p&gt;
&lt;p&gt;数据类型   初始化默认值&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;int        0&lt;br&gt;
float32    0&lt;br&gt;
pointer    nil&lt;/p&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.989Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/</id>
        <title>go语言变量</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/"/>
        <content type="html">&lt;p&gt;go 语言中声明变量一般使用 var 关键字&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var identifier type&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以一次声明多个变量&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var identifier1 identifier2 type&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;整体代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//变量的声明&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var a string = &amp;quot;Runoob&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var b, c int = 1, 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(b, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var d = &amp;quot;ddd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(d)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    e := &amp;quot;eee&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行得到&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wRB9S2wwIBouI72F.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;go变量的声明-无初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#go变量的声明-无初始化&#34;&gt;#&lt;/a&gt; go 变量的声明 ------ 无初始化&lt;/h1&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.987Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</id>
        <title>go循环语句</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;因为某些情况下需要重复执行操作，因此就会有需要重复利用到的语句，就出现了循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;for循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环&#34;&gt;#&lt;/a&gt; for 循环&lt;/h1&gt;
&lt;p&gt;go 语言有三种形式的 for 循环&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for init; condition; post &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for condition &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三种形式都在 c 语言中有相对应的形式，第一种和 c 语言中的 for 循环一样，第二种则是与 c 语言中中 while 循环一样，第三种和 c 语言的 for (;😉&lt;br&gt;
一样&lt;br&gt;
其中第一种形式中的 init；condition；post 都代表着特定的书写，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;init： 一般为赋值表达式，给控制变量赋初值；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;condition： 关系表达式或逻辑表达式，循环控制条件；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;post： 一般为赋值表达式，给控制变量增量或减量。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;for 循环的执行过程和其它编程语言一样，首先先赋初值，接着 condition 判断是否满足条件，满足则继续执行循环内的语句，结束之后再执行 post 表达式，进入下一个循环，判断 condition，如果为假则跳出循环&lt;br&gt;
 for 循环的 range 格式可以对&lt;br&gt;
 slice、map、数组、字符串等进行迭代循环，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for key, value := range oldMap &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    newMap[key] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上的 key 和 value 可忽略&lt;br&gt;
如，只想读取 key，可以如下书写：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for key := range oldMap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for key, _ := range oldMap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只想读取 value 同理：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for _, value := range oldMap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;实例1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例1&#34;&gt;#&lt;/a&gt; 实例 1：&lt;/h2&gt;
&lt;p&gt;接下来用 for 循环简单编写一个计算 1-100 的和的代码&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sum := 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i := 0; i &amp;lt;= 100; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sum += i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(sum)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JpMseNfvwSn2fUGS.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然如上文所说用 c 语言的 while 格式也可以，如下：&lt;/p&gt;
&lt;h2 id=&#34;实例2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例2&#34;&gt;#&lt;/a&gt; 实例 2：&lt;/h2&gt;
&lt;p&gt;计算 sum 自加的值&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sum := 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for sum &amp;lt;= 10 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sum += sum&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(sum)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7BQdsYSbpFmiDMk0.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意这里计算 sum 自加的值，sum 的初始值不能为 0，不然一直是 0 自加永远满足条件无法跳出循环进行输出&lt;/p&gt;
&lt;h2 id=&#34;实例3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例3&#34;&gt;#&lt;/a&gt; 实例 3：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;For-each range 循环&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种格式的循环可以对字符串、数组、切片等进行迭代输出元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    strings := []string&amp;#123;&amp;quot;nnnpc&amp;quot;, &amp;quot;good&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i, s := range strings &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(i, s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    strings1 := [6]string&amp;#123;&amp;quot;n&amp;quot;, &amp;quot;n&amp;quot;, &amp;quot;n&amp;quot;, &amp;quot;p&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i, x := range strings1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;第 %d 位 x 的值 = %d\n&amp;quot;, i, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XO9LJ6KpZCK1UCOQ.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上代码可以大体分为两块，第一块是变量 strings，默认赋给了变量两个空间，分别用字符串 nnnpc 和 good 占用，利用 range 将 strings 中的 key 值和 value 值迭代赋值给变量 i 和 s，并且循环将 i，s 输出。第二块则是变量 strings1，确定了六个空间给 strings1，并且五个空间分别用字母占用，同样的将 key 值和 value 值赋给了 i，x，使用 range 来进行迭代循环输出&lt;/p&gt;
&lt;p&gt;如上文所述，可以省略 key 或者 value，只输出自己想要的，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map1 := make(map[int]float32)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map1[1] = 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map1[2] = 2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map1[3] = 3.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    map1[4] = 4.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for key, value := range map1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;key is: %d - value is: %f\n&amp;quot;, key, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for key := range map1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;key is: %d\n&amp;quot;, key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;=================省略value也可如下书写=====================\n&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for key, _ := range map1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;key is: %d\n&amp;quot;, key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&amp;quot;==========================================================\n&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for _, value := range map1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;value is: %f\n&amp;quot;, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/KHvRRhBqoBYKIJw1.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一个 for 循环二者均输出，第二、三个只输出 key，第四个只输出 value&lt;/p&gt;
&lt;h1 id=&#34;循环嵌套&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环嵌套&#34;&gt;#&lt;/a&gt; 循环嵌套&lt;/h1&gt;
&lt;p&gt;顾名思义就是在循环内嵌套循环&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for [condition |  ( init; condition; increment ) | Range]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for [condition |  ( init; condition; increment ) | Range]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      statement(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   statement(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例：&lt;/h2&gt;
&lt;p&gt;输出 2-100 之间的素数&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var i, j int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for i=2; i &amp;lt; 100; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      for j=2; j &amp;lt;= (i/j); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         if(i%j==0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            break; // 如果发现因子，则不是素数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if(j &amp;gt; (i/j)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;%d  是素数\n&amp;quot;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IM55zggVj7CdbSdF.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;循环控制语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环控制语句&#34;&gt;#&lt;/a&gt; 循环控制语句&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;循环控制语句可以控制循环体内语句的执行过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;break语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#break语句&#34;&gt;#&lt;/a&gt; break 语句&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Go 语言中，break 语句用于终止当前循环或者 switch&lt;br&gt;
 语句的执行，并跳出该循环或者 switch 语句的代码块。&lt;br&gt;
break 语句可以用于以下几个方面：&lt;br&gt;
1. 用于循环语句中跳出循环，并开始执行循环之后的语句。&lt;br&gt;
2.break 在 switch 语句中在执行一条 case 后跳出语句的作用。&lt;br&gt;
3.break 可应用在 select 语句中。&lt;br&gt;
4. 在多重循环中，可以用标号 label 标出想 break 的循环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实例 1：在 for 循环中使用 break 语句&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i := 0; i &amp;lt; 10; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if i == 5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Q4QDlJ6hitCu3We0.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上简单的 break 程序当 i 等于 5 的时候跳出循环&lt;/p&gt;
&lt;p&gt;接着说明使用标记与不使用标记的区别&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 不使用标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Println(&amp;quot;---- break ----&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for i := 1; i &amp;lt;= 3; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fmt.Printf(&amp;quot;i: %d\n&amp;quot;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      for i2 := 11; i2 &amp;lt;= 13; i2++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;i2: %d\n&amp;quot;, i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   // 使用标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Println(&amp;quot;---- break label ----&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   re:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      for i := 1; i &amp;lt;= 3; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;i: %d\n&amp;quot;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         for i2 := 11; i2 &amp;lt;= 13; i2++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;i2: %d\n&amp;quot;, i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         break re&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QWdvhj56cAOkLJ6x.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加标记能 break 掉标记指定的循环语句，而没有标记只能 break 当前 break 所在的循环&lt;/p&gt;
&lt;p&gt;实例 2：在 switch 语句中使用 break&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    day := &amp;quot;Tuesday&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    switch day &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;quot;Monday&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;quot;It&amp;#x27;s Monday.&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;quot;Tuesday&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;quot;It&amp;#x27;s Tuesday.&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;quot;Wednesday&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;quot;It&amp;#x27;s Wednesday.&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;刚开始给 day 声明赋值为 Tuesday 而 switch 语句中 case 也是 Tuesday 时执行 break，也就是输出 It’s&lt;br&gt;
Tuesday 并跳出 switch 语句&lt;br&gt;
输出：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mFT2vZPWNnznKn4d.png!thumbnail&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;实例 3：在 select 语句中使用 break&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch1 := make(chan int)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch2 := make(chan int)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    go func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.Sleep(2 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ch1 &amp;lt;- 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    go func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.Sleep(1 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ch2 &amp;lt;- 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;lt;-ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;quot;Received from ch1.&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;lt;-ch2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;quot;Received from ch2.&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        break // 跳出 select 语句&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/71ZBT5zD4b0kgqUh.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Go 语言中，break 语句在 select 语句中的应用是相对特殊的。由于&lt;br&gt;
 select 语句的特性，break 语句并不能直接用于跳出 select 语句本身，因为&lt;br&gt;
 select&lt;br&gt;
 语句是非阻塞的，它会一直等待所有的通信操作都准备就绪。如果需要提前结束&lt;br&gt;
 select 语句的执行，可以使用 return 或者 goto 语句来达到相同的效果。&lt;br&gt;
由于 select 语句是非阻塞的，因此 braek 不能直接跳出 select 语句本身，可以使用 return 和 goto 来达到提前结束 select 语句的效果，如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func process(ch chan int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        case val := &amp;lt;-ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;Received value:&amp;quot;, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if val == 5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                return&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;No value received yet.&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            time.Sleep(500 * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch := make(chan int)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    go process(ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(2 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch &amp;lt;- 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(1 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch &amp;lt;- 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(1 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch &amp;lt;- 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(1 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch &amp;lt;- 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(2 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HY7TfTCc534yWLYM.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到整个程序段最终接收到 7，也就是 val==7，但由于在循环中当接收到的变量值为 5 时进行了 return 操作，效果相当于跳出了 select 语句，也就不会进行后续的接收 7 的操作了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过使用 return，我们可以在 select&lt;br&gt;
 语句中提前终止执行，并返回到调用者的代码中。&lt;br&gt;
需要注意的是，使用 return&lt;br&gt;
 语句会立即终止当前的函数执行，所以请根据实际需求来决定在 select&lt;br&gt;
 语句中使用何种方式来提前结束执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;continue语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#continue语句&#34;&gt;#&lt;/a&gt; continue 语句&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Go 语言的 continue 语句 有点像 break 语句。但是 continue&lt;br&gt;
 不是跳出循环，而是跳过当前循环执行下一次循环语句。&lt;br&gt;
for 循环中，执行 continue 语句会触发 for 增量语句的执行。&lt;br&gt;
在多重循环中，可以用标号 label 标出想 continue 的循环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通俗的来讲 continue 的作用就是跳过本次循环执行下一次循环&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 定义局部变量 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var a int = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* for 循环 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for a &amp;lt; 20 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if a == 15 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         /* 跳过此次循环 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         a = a + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fmt.Printf(&amp;quot;a 的值为 : %d\n&amp;quot;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a++;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2fgVJ2xlGcD9sXat.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;该程序当 a 的值为 15 时就跳过该次循环，也就是不执行输出和自加，通过 a=a+1 之后执行下一次的循环，因此输出里面没有值为 15&lt;/p&gt;
&lt;p&gt;接下来记录一下使用和不使用标记的区别：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 不使用标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;---- continue ---- &amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i := 1; i &amp;lt;= 3; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;i: %d\n&amp;quot;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for i2 := 11; i2 &amp;lt;= 13; i2++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fmt.Printf(&amp;quot;i2: %d\n&amp;quot;, i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 使用标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&amp;quot;---- continue label ----&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    re:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for i := 1; i &amp;lt;= 3; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&amp;quot;i: %d\n&amp;quot;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for i2 := 11; i2 &amp;lt;= 13; i2++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    fmt.Printf(&amp;quot;i2: %d\n&amp;quot;, i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    continue re&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/SNE3qOEI5rlhBVly.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以明显看到没用标记之前每个 i 对应三个 i2，使用之后每个 i 对应一个 i2。正是因为标记 re 在整个大 for 循环外面，当执行一次循环之后直接跳出了本次的大 for 循环，回到了起始位置。而没有标记的只是正常结束之后跳出本次的小 for 循环，进行下一次，直到执行三次后不满足小 for 循环条件之后跳回大 for 循环&lt;/p&gt;
&lt;h2 id=&#34;goto语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#goto语句&#34;&gt;#&lt;/a&gt; goto 语句&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Go 语言的 goto 语句可以无条件地转移到过程中指定的行。&lt;br&gt;
goto 语句通常与条件语句配合使用。可用来实现条件转移，&lt;br&gt;
构成循环，跳出循环体等功能。&lt;br&gt;
但是，在结构化程序设计中一般不主张使用 goto 语句，&lt;br&gt;
以免造成程序流程的混乱，使理解和调试程序都产生困难。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说 goto 可以从一代码无条件跳转到另一代码进行执行&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;goto label;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;label: statement;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /* 定义局部变量 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var a int = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /* 循环 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LOOP:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for a &amp;lt; 20 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if a == 15 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            /* 跳过迭代 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a = a + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            goto LOOP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&amp;quot;a的值为 : %d\n&amp;quot;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;
&lt;img data-src=&#34;https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/CWU6o08mO59Qv8Fr.png!thumbnail&#34; alt=&#34;&#34; title=&#34;fig:&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个和前面的 continue 标记执行效果相同，但是实际作用是不一样的，当 a 的值为 15 时执行 a=a+1 之后直接去到 LOOP 所在的地方不执行输出和自加，而这里 LOOP 恰好就是下一次的循环开始，因此结果中没有输出值为 15 的&lt;/p&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.985Z</updated>
    </entry>
    <entry>
        <id>https://nnnpc.github.io/2024/04/16/go%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</id>
        <title>go条件语句</title>
        <link rel="alternate" href="https://nnnpc.github.io/2024/04/16/go%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true&lt;br&gt;
 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语句           描述&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;if 语句        &lt;strong&gt;if 语句&lt;/strong&gt; 由一个布尔表达式后紧跟一个或多个语句组成。&lt;br&gt;
if else 语句   &lt;strong&gt;if 语句&lt;/strong&gt; 后可以使用可选的 &lt;strong&gt;else 语句&lt;/strong&gt;，else 语句中的表达式在布尔表达式为 false 时执行。&lt;br&gt;
if 嵌套语句    你可以在 &lt;strong&gt;if&lt;/strong&gt; 或 &lt;strong&gt;else if&lt;/strong&gt; 语句中嵌入一个或多个 &lt;strong&gt;if&lt;/strong&gt; 或 &lt;strong&gt;else if&lt;/strong&gt; 语句。&lt;br&gt;
switch 语句    &lt;strong&gt;switch&lt;/strong&gt; 语句用于基于不同条件执行不同动作。&lt;br&gt;
select 语句    &lt;strong&gt;select&lt;/strong&gt; 语句类似于 &lt;strong&gt;switch&lt;/strong&gt; 语句，但是 select 会随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。&lt;/p&gt;
&lt;h1 id=&#34;if语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h1&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if 布尔表达式 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 在布尔表达式为 true 时执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 定义局部变量 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var a int = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 使用 if 语句判断布尔表达式 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if a &amp;lt; 20 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       /* 如果条件为 true 则执行以下语句 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       fmt.Printf(&amp;quot;a 小于 20\n&amp;quot; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Printf(&amp;quot;a 的值为 : %d\n&amp;quot;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;h1 id=&#34;if-else语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if-else语句&#34;&gt;#&lt;/a&gt; if else 语句&lt;/h1&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if 布尔表达式 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 在布尔表达式为 true 时执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  /* 在布尔表达式为 false 时执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;if 在表达式为 true 时执行里面的语句，在表达式为 false 时执行 false 里面的语句&lt;br&gt;
实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 局部变量定义 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var a int = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 判断布尔表达式 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if a &amp;lt; 20 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       /* 如果条件为 true 则执行以下语句 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       fmt.Printf(&amp;quot;a 小于 20\n&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       /* 如果条件为 false 则执行以下语句 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       fmt.Printf(&amp;quot;a 不小于 20\n&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Printf(&amp;quot;a 的值为 : %d\n&amp;quot;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;h1 id=&#34;if嵌套语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if嵌套语句&#34;&gt;#&lt;/a&gt; if 嵌套语句&lt;/h1&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if 布尔表达式 1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 在布尔表达式 1 为 true 时执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if 布尔表达式 2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      /* 在布尔表达式 2 为 true 时执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;嵌套的理解很简单，就是在第一个 if 语句的表达式为 true 时执行第二个 if 语句&lt;br&gt;
实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 定义局部变量 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var a int = 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var b int = 200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 判断条件 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   if a == 100 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       /* if 条件语句为 true 执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if b == 200 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          /* if 条件语句为 true 执行 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          fmt.Printf(&amp;quot;a 的值为 100 ， b 的值为 200\n&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Printf(&amp;quot;a 值为 : %d\n&amp;quot;, a );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Printf(&amp;quot;b 值为 : %d\n&amp;quot;, b );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;h1 id=&#34;switch语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch语句&#34;&gt;#&lt;/a&gt; switch 语句&lt;/h1&gt;
&lt;p&gt;着重记录一下 switch 语句和 select 语句&lt;/p&gt;
&lt;p&gt;条件判断：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;switch var1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case val1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case val2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以理解为寻找匹配的值，在 case 的几个选项中寻找匹配 var1 的值，如果匹配到则执行相应 case 底下的代码，如果都没有匹配到则执行 default 底下的代码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量 var1 可以是任何类型，而 val1 和 val2&lt;br&gt;
 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。&lt;br&gt;
您可以同时测试多个可能符合条件的值，使用逗号分割它们，例如：case val1,&lt;br&gt;
val2, val3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下就是 var1 可以是任意类型，而 val1 和 val2 可以是任意值但是类型必须和 var1 相同，如有多个符合 case 条件的值可以放在同一行，如 case&lt;br&gt;
10,20,30: a=1&lt;/p&gt;
&lt;p&gt;switch 可以有两种表达方式，如下实例所示：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   /* 定义局部变量 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var grade string = &amp;quot;B&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var marks int = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   switch marks &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case 90: grade = &amp;quot;A&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case 80: grade = &amp;quot;B&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case 50,60,70 : grade = &amp;quot;C&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      default: grade = &amp;quot;D&amp;quot;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   switch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case grade == &amp;quot;A&amp;quot; :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;优秀!\n&amp;quot; )    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case grade == &amp;quot;B&amp;quot;, grade == &amp;quot;C&amp;quot; :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;良好\n&amp;quot; )      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case grade == &amp;quot;D&amp;quot; :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;及格\n&amp;quot; )      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case grade == &amp;quot;F&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;不及格\n&amp;quot; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;差\n&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fmt.Printf(&amp;quot;你的等级是 %s\n&amp;quot;, grade );      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;type switch&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;switch 语句还可以被用于 type-switch 来判断某个 interface&lt;br&gt;
 变量中实际存储的变量类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法格式：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;switch x.(type)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case type:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       statement(s);      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case type:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       statement(s); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /* 你可以定义任意个数的case */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default: /* 可选 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       statement(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;判断 x 的类型，当然这也可以声明一个变量来进行接收再用 case 去判断变量所接收的类型&lt;br&gt;
实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   var x interface&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   switch i := x.(type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case nil:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot; x 的类型 :%T&amp;quot;,i)                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case int:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;x 是 int 型&amp;quot;)                      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case float64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;x 是 float64 型&amp;quot;)          &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case func(int) float64:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;x 是 func(int) 型&amp;quot;)                      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      case bool, string:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;x 是 bool 或 string 型&amp;quot; )      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         fmt.Printf(&amp;quot;未知型&amp;quot;)    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;fallthrough&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 fallthrough 会强制执行后面的 case 语句，fallthrough&lt;br&gt;
 不会判断下一条 case 的表达式结果是否为 true。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    switch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case false:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;1、case 条件语句为 false&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case true:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;2、case 条件语句为 true&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case false:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;3、case 条件语句为 false&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case true:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;4、case 条件语句为 true&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case false:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;5、case 条件语句为 false&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;6、默认 case&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2、case 条件语句为 true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3、case 条件语句为 false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4、case 条件语句为 true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单说明一下该实例，第一个 case&lt;br&gt;
true 为第二条，因此第一次进入的便是第二个 case 语句，在第二个 case 语句之后加上了 fallthrough，这时就不管第三个语句是否为 true 都进入执行，第三个后面也加了 fallthrough，不管第四个 case 是否为 true 也是直接进入执行语句，但是第四个 case 末没有 fallthrough，因此第五个 case 就得进行判断，发现是 false 那就不执行。case 中的代码有被执行过，因此 default 中的代码不会被执行。最终输出的为 2、3、4&lt;br&gt;
#&lt;/p&gt;
&lt;h1 id=&#34;select语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#select语句&#34;&gt;#&lt;/a&gt; select 语句&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;select 是 Go 中的一个控制结构，类似于 switch 语句。&lt;br&gt;
select 语句只能用于通道操作，每个 case&lt;br&gt;
 必须是一个通道操作，要么是发送要么是接收。&lt;br&gt;
select&lt;br&gt;
 语句会监听所有指定的通道上的操作，一旦其中一个通道准备好就会执行相应的代码块。&lt;br&gt;
如果多个通道都准备好，那么 select&lt;br&gt;
 语句会随机选择一个通道执行。如果所有通道都没有准备好，那么执行 default&lt;br&gt;
 块中的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  case &amp;lt;- channel1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  case value := &amp;lt;- channel2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  case channel3 &amp;lt;- value:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 你可以定义任意数量的 case&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 所有通道都没有准备好，执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;以下描述了 select 语句的语法：&lt;br&gt;
每个 case 都必须是一个通道&lt;br&gt;
所有 channel 表达式都会被求值&lt;br&gt;
所有被发送的表达式都会被求值&lt;br&gt;
如果任意某个通道可以进行，它就执行，其他被忽略。&lt;br&gt;
如果有多个 case 都可以运行，select&lt;br&gt;
 会随机公平地选出一个执行，其他不会执行。&lt;br&gt;
否则：&lt;br&gt;
如果有 default 子句，则执行该语句。&lt;br&gt;
如果没有 default 子句，select 将阻塞，直到某个通道可以运行；Go&lt;br&gt;
 不会重新对 channel 或值进行求值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用实例 1：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c1 := make(chan string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c2 := make(chan string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    go func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.Sleep(1 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c1 &amp;lt;- &amp;quot;one&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    go func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.Sleep(2 * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c2 &amp;lt;- &amp;quot;two&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for i := 0; i &amp;lt; 2; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        case msg1 := &amp;lt;-c1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;received&amp;quot;, msg1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        case msg2 := &amp;lt;-c2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Println(&amp;quot;received&amp;quot;, msg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个实例中创建了两个通道 c1 和 c2，select 在等待两个通道的数据，如果 c1 收到了就执行 case&lt;br&gt;
msg1，如果 c2 收到了就执行 case msg2&lt;br&gt;
 应用实例 2：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import &amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 定义两个通道&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ch1 := make(chan string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ch2 := make(chan string)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 启动两个 goroutine，分别从两个通道中获取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  go func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ch1 &amp;lt;- &amp;quot;from 1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  go func() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ch2 &amp;lt;- &amp;quot;from 2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 使用 select 语句非阻塞地从两个通道中获取数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    select &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case msg1 := &amp;lt;-ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fmt.Println(msg1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    case msg2 := &amp;lt;-ch2:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fmt.Println(msg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    default:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 如果两个通道都没有可用的数据，则执行这里的语句&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fmt.Println(&amp;quot;no message received&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上述实例中我们定义了两个通道，并启动了两个协程（Goroutine）从这两个通道中获取数据。在&lt;br&gt;
 main 函数中，我们使用 select&lt;br&gt;
 语句在这两个通道中进行非阻塞的选择，如果两个通道都没有可用的数据，就执行&lt;br&gt;
 default 子句中的语句。&lt;br&gt;
以下实例执行后会不断地从两个通道中获取到的数据，当两个通道都没有可用的数据时，会输出&lt;br&gt;
 “no message received”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在第二个实例中，启动了协程从这两个通道中获取数据，更快捷高效，因为没有对 for 循环语句做限制，因此它会不断从通道中获取数据，直到没有数据获取了就执行 default 中的代码，输出 no&lt;br&gt;
message received&lt;/p&gt;
</content>
        <category term="GO" />
        <updated>2024-04-16T05:58:18.984Z</updated>
    </entry>
</feed>
