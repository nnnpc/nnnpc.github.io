{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"go\" tag",
    "description": "",
    "home_page_url": "https://nnnpc.github.io",
    "items": [
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/",
            "title": "go语言函数",
            "date_published": "2024-04-16T05:58:18.994Z",
            "content_html": "<blockquote>\n<p>函数是基本的代码块，用于执行一个任务。<br>\nGo 语言最少有个 main () 函数。<br>\n你可以通过函数来划分不同功能，逻辑上每个函数执行的是指定的任务。<br>\n函数声明告诉了编译器函数的名称，返回类型，和参数。<br>\nGo 语言标准库提供了多种可动用的内置的函数。例如，len ()<br>\n 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。</p>\n</blockquote>\n<h1 id=\"函数定义\"><a class=\"markdownIt-Anchor\" href=\"#函数定义\">#</a> 函数定义</h1>\n<p>函数定义格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func function_name( [parameter list] ) [return_types] &#123;</span><br><span class=\"line\">   函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>函数定义解析：<br>\nfunc：函数由 func 开始声明<br>\n function_name：函数名称，参数列表和返回值类型构成了函数签名。<br>\nparameter<br>\nlist：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。<br>\nreturn_types：返回类型，函数返回一列值。return_types<br>\n 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types<br>\n 不是必须的。<br>\n函数体：函数定义的代码集合。</p>\n</blockquote>\n<h2 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\">#</a> 实例</h2>\n",
            "tags": [
                "GO"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%88%9D%E5%AD%A6/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%88%9D%E5%AD%A6/",
            "title": "go语言初学",
            "date_published": "2024-04-16T05:58:18.992Z",
            "content_html": "<h1 id=\"go环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#go环境搭建\">#</a> go 环境搭建</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuL2RsLw==\">https://golang.google.cn/dl/</span><br>\ngo 官网下载，我下载的是 msi 版本的</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vHP0NQrTy2GjYue7.png!thumbnail\" alt=\"\"></p>\n<p>一直 next 就行，路径根据自己的想法来安装</p>\n<p>安装完成之后去环境变量里查看一下有无自动添加到环境变量中，没有的话就需要手动添加</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/zeiuhJI2y95OKeu2.png!thumbnail\" alt=\"\"></p>\n<p>查看是否添加完成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kgRMDlp4km6s8K2H.png!thumbnail\" alt=\"\"></p>\n<p>windows 中的配置</p>\n<p>终端输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看Go的环境变量</span><br><span class=\"line\">go env</span><br><span class=\"line\"># 清除缓存</span><br><span class=\"line\">go clean --modcache</span><br><span class=\"line\"># 设置GOBIN</span><br><span class=\"line\">go env -w GOBIN=&quot;D:\\go\\bin&quot;</span><br><span class=\"line\"># 配置代理</span><br><span class=\"line\">go env -w GO111MODULE=&quot;on&quot;</span><br><span class=\"line\">go env -w GOPROXY=&quot;https://goproxy.cn,direct&quot;</span><br><span class=\"line\"># 再次查看</span><br><span class=\"line\">go env</span><br></pre></td></tr></table></figure>\n<p>最终配置<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/c36nEjWQj7naar7k.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h1 id=\"vscode配置\"><a class=\"markdownIt-Anchor\" href=\"#vscode配置\">#</a> VScode 配置</h1>\n<p>vscode 使用 go 插件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/s7ve54MqQSXSVZNw.png!thumbnail\" alt=\"\"></p>\n<p>再安装 go 组件，Ctrl+Shift+P，再输入 Go:Install/Update Tools，全选就 ok</p>\n<p>等待一会，全部安装完毕之后就配置完成了</p>\n<h1 id=\"编第一个go程序\"><a class=\"markdownIt-Anchor\" href=\"#编第一个go程序\">#</a> 编第一个 go 程序</h1>\n<p>在自己想要的目录下打开终端，输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init dev</span><br></pre></td></tr></table></figure>\n<p>会创建一个 go.mod 文件，在 vscode 中打开该文件夹<br>\n创建.go 为扩展名的文件（这里创建了 hello.go）</p>\n<p>需要注意的是在 go 语言中 &quot;{&quot; 不能单独一行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;Hello, World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该 go 文件的同一级目录下打开终端运行文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run hello.go</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/u8jJTlLO4nCMhmQR.png!thumbnail\" alt=\"\"></p>\n<p>同时也可以使用命令生成 exe 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build hello.go</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/iUjhGypCEvItJbbg.png!thumbnail\" alt=\"\"></p>\n",
            "tags": [
                "GO"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%B8%B8%E9%87%8F/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%B8%B8%E9%87%8F/",
            "title": "go语言常量",
            "date_published": "2024-04-16T05:58:18.990Z",
            "content_html": "<h1 id=\"常量的定义\"><a class=\"markdownIt-Anchor\" href=\"#常量的定义\">#</a> 常量的定义</h1>\n<blockquote>\n<p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。<br>\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p>\n</blockquote>\n<p>格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const identifier [type] = value</span><br></pre></td></tr></table></figure>\n<p>和变量的声明相似，常量的定义使用关键字 const<br>\n 和变量的声明相同，常量也可以省略类型说明符<br>\n [type]（编译器可以根据 value 值来自动判断类型）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显式类型定义： const b string = &quot;abc&quot;</span><br><span class=\"line\">隐式类型定义： const b = &quot;abc&quot;</span><br></pre></td></tr></table></figure>\n<p>多个相同类型的定义可以缩写为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const c_name1, c_name2 = value1, value2</span><br></pre></td></tr></table></figure>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   const LENGTH int = 10</span><br><span class=\"line\">   const WIDTH int = 5  </span><br><span class=\"line\">   var area int</span><br><span class=\"line\">   const a, b, c = 1, false, &quot;str&quot; //多重赋值</span><br><span class=\"line\">   area = LENGTH * WIDTH</span><br><span class=\"line\">   fmt.Printf(&quot;面积为 : %d&quot;, area)</span><br><span class=\"line\">   println()</span><br><span class=\"line\">   println(a, b, c)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6CpKCZs3MfFSzFsE.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>常量用来枚举：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const (</span><br><span class=\"line\">    Unknown = 0</span><br><span class=\"line\">    Female = 1</span><br><span class=\"line\">    Male = 2</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>0，1，2 分别代表未知性别，男，女<br>\n同时，常量可以使用内置函数来计算表达式的值，如 len (), cap (),<br>\nunsafe.Sizeof()</p>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;unsafe&quot;</span><br><span class=\"line\">const (</span><br><span class=\"line\">    a = &quot;abc&quot;</span><br><span class=\"line\">    b = len(a)</span><br><span class=\"line\">    c = unsafe.Sizeof(a)</span><br><span class=\"line\">)</span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    println(a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/d6mIW1xjZcdVd0lA.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h1 id=\"iota\"><a class=\"markdownIt-Anchor\" href=\"#iota\">#</a> iota</h1>\n<blockquote>\n<p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。<br>\niota 在 const 关键字出现时将被重置为 0 (const 内部的第一行之前)，const<br>\n 中每新增一行常量声明将使 iota 计数一次 (iota 可理解为 const<br>\n 语句块中的行索引)。</p>\n</blockquote>\n<p>iota 用来枚举：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const (</span><br><span class=\"line\">    a = iota</span><br><span class=\"line\">    b = iota</span><br><span class=\"line\">    c = iota</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>第一行的 iota 为 0，接下来每增加一行，iota 的值都会加 1<br>\n 因此例如 a=0，b=1，c=2 可以简写为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const (</span><br><span class=\"line\">    a = iota</span><br><span class=\"line\">    b</span><br><span class=\"line\">    c</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vQEPGz1yxPfjQw9t.png!thumbnail\" alt=\"\"></p>\n<p>输出：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZMHzFZ0dgUamqPvA.png!thumbnail\" alt=\"\" title=\"fig:\"><br>\niota 用法：其实就是多加一行 iota 的值就多加 1，除非赋给常量另外的 value，不然每一行的值就是上一行 iota 的值 + 1（iota 的值不会被其它赋值干扰和打断)，用一个实例来简单说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    const (</span><br><span class=\"line\">            a = iota   //0</span><br><span class=\"line\">            b          //1</span><br><span class=\"line\">            c          //2</span><br><span class=\"line\">            d = &quot;ha&quot;   //独立值，iota += 1</span><br><span class=\"line\">            e          //&quot;ha&quot;   iota += 1</span><br><span class=\"line\">            f = 100    //iota +=1</span><br><span class=\"line\">            g          //100  iota +=1</span><br><span class=\"line\">            h = iota   //7,恢复计数</span><br><span class=\"line\">            i          //8</span><br><span class=\"line\">    )</span><br><span class=\"line\">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cCIKeGrZ20AiW1uH.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>看个移位实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">const (</span><br><span class=\"line\">    i=1&lt;&lt;iota</span><br><span class=\"line\">    j=3&lt;&lt;iota</span><br><span class=\"line\">    k</span><br><span class=\"line\">    l</span><br><span class=\"line\">)</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;i=&quot;,i)</span><br><span class=\"line\">    fmt.Println(&quot;j=&quot;,j)</span><br><span class=\"line\">    fmt.Println(&quot;k=&quot;,k)</span><br><span class=\"line\">    fmt.Println(&quot;l=&quot;,l)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uhT9dMUZtKAZZclO.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<blockquote>\n<p>iota 表示从 0 开始自动加 1，所以 i=1&lt;&lt;0, j=3&lt;&lt;1（<strong>&lt;&lt;</strong><br>\n 表示左移的意思），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看<br>\n k=3&lt;&lt;2，l=3&lt;&lt;3。<br>\n简单表述:<br>\n<strong>i=1</strong>：左移 0 位，不变仍为 1。<br>\n<strong>j=3</strong>：左移 1 位，变为二进制 <strong>110</strong>，即 6。<br>\n<strong>k=3</strong>：左移 2 位，变为二进制 <strong>1100</strong>，即 12。<br>\n<strong>l=3</strong>：左移 3 位，变为二进制 <strong>11000</strong>，即 24。<br>\n注：&lt;&lt;n==*(2^n)。</p>\n</blockquote>\n<p>简单来说，&lt;&lt; 符号代表着向左移位，a&lt;&lt;b 代表着将 a 的二进制位像左移动 b 位，在上述实例的枚举中，赋值给常量的值如果没有进行新的赋值那么就为上一行所赋的值不变，iota 每增加一行就 + 1，因此 k 和 l 都为 3，但是分别左移 2 位和 3 位即 k=3&lt;&lt;2，l=3&lt;&lt;3，即：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const (</span><br><span class=\"line\">    i=1&lt;&lt;0</span><br><span class=\"line\">    j=3&lt;&lt;1</span><br><span class=\"line\">    K=3&lt;&lt;2</span><br><span class=\"line\">    l=3&lt;&lt;3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "GO"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/",
            "title": "go语言变量作用域",
            "date_published": "2024-04-16T05:58:18.989Z",
            "content_html": "<blockquote>\n<p>作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。<br>\nGo 语言中变量可以在三个地方声明：<br>\n函数内定义的变量称为局部变量<br>\n函数外定义的变量称为全局变量<br>\n函数定义中的变量称为形式参数</p>\n</blockquote>\n<h1 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\">#</a> 局部变量</h1>\n<blockquote>\n<p>在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。</p>\n</blockquote>\n<p>因为之前也用过，因此不过多叙述，接下来用简单的代码展示一下局部变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a, b, c int</span><br><span class=\"line\"></span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    b = 20</span><br><span class=\"line\">    c = a + b</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(&quot;结果： a = %d, b = %d and c = %d\\n&quot;, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/gY0j2etnawVMnPhP.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>如上述代码，abc 三个变量在 main 函数中被声明，也就是 abc 的作用域在 main 函数当中，外部无法不声明直接引用这三个变量</p>\n<h1 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\">#</a> 全局变量</h1>\n<blockquote>\n<p>在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。</p>\n</blockquote>\n<p>全局变量之所以被称为全局，也就是在整一个程序中都可以被引用。因此在函数体外进行声明，在任何函数当中都可以使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var g int</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var a, b int</span><br><span class=\"line\"></span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    b = 20</span><br><span class=\"line\">    g = a + b</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(&quot;结果： a = %d, b = %d and g = %d\\n&quot;, a, b, g)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BRUfNatomzmI98nb.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>如上述程序可以知道，ab 依然为 main 函数中声明的局部变量，只能在 main 函数中使用，但 g 在函数外进行声明，因此 g 为全局变量，main 函数中也可以使用</p>\n<p>这时候可以就会想到一个问题，全局变量和局部变量的变量名相同时会不会引起冲突呢？答案是并不会，但在函数体当中，会优先考虑该函数体中声明的全局变量，如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var g int = 20</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var g int = 10</span><br><span class=\"line\">    fmt.Printf(&quot;结果： g = %d\\n&quot;, g)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/o5UWbCRCElJXUFHN.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>可以看到变量名同为 g 时，main 函数中的优先输出是局部变量的 g 值</p>\n<h1 id=\"形式参数\"><a class=\"markdownIt-Anchor\" href=\"#形式参数\">#</a> 形式参数</h1>\n<blockquote>\n<p>形式参数会作为函数的局部变量来使用</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a int = 20</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a int = 10</span><br><span class=\"line\">    var b int = 20</span><br><span class=\"line\">    var c int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(&quot;main()函数中 a = %d\\n&quot;, a)</span><br><span class=\"line\">    c = sum(a, b)</span><br><span class=\"line\">    fmt.Printf(&quot;main()函数中 c = %d\\n&quot;, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func sum(a, b int) int &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;sum() 函数中 a = %d\\n&quot;, a)</span><br><span class=\"line\">    fmt.Printf(&quot;sum() 函数中 b = %d\\n&quot;, b)</span><br><span class=\"line\"></span><br><span class=\"line\">    return a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/qDL0KThcBshap6IG.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>分别来解释一下输出和作用域，在两个函数之外的 a 毋庸置疑是全局变量，作用域在全局，但是 main 函数中也声明了变量 a，因此优先级高于全局的，输出为 10<br>\n。接着调用了 sum 函数，而在 sum 函数定义了 a，b 两个形参，作为局部变量，因此作用域仅在 sum 函数中，在接收到 main 函数中 a，b 的值传递后，输出的 a，b 值也就是 main 函数中 a，b 的值，为 10 和 20<br>\n。将返回的 a+b 值赋给了 c，因此 main 函数中输出的 c 值为 30</p>\n<p>当函数中没有进行重新声明赋值时，默认使用全局变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a int = 20</span><br><span class=\"line\">var b int = 20</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var c = 0</span><br><span class=\"line\">    c = sum(a, b)</span><br><span class=\"line\">    fmt.Printf(&quot;main() 函数中 c = %d\\n&quot;, c)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func sum(a, b int) int &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;sum() 函数中 a = %d\\n&quot;, a)</span><br><span class=\"line\">    fmt.Printf(&quot;sum() 函数中 b = %d\\n&quot;, b)</span><br><span class=\"line\"></span><br><span class=\"line\">    return a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fdkdqXXyXfdkcyGP.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h1 id=\"初始化局部和全局变量\"><a class=\"markdownIt-Anchor\" href=\"#初始化局部和全局变量\">#</a> 初始化局部和全局变量</h1>\n<p>不同类型的局部和全局变量默认值为：</p>\n<p>数据类型   初始化默认值</p>\n<hr>\n<p>int        0<br>\nfloat32    0<br>\npointer    nil</p>\n",
            "tags": [
                "GO"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/",
            "title": "go语言变量",
            "date_published": "2024-04-16T05:58:18.987Z",
            "content_html": "<p>go 语言中声明变量一般使用 var 关键字</p>\n<p>格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var identifier type</span><br></pre></td></tr></table></figure>\n<p>可以一次声明多个变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var identifier1 identifier2 type</span><br></pre></td></tr></table></figure>\n<p>整体代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//变量的声明</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a string = &quot;Runoob&quot;</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    var b, c int = 1, 2</span><br><span class=\"line\">    fmt.Println(b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">    var d = &quot;ddd&quot;</span><br><span class=\"line\">    fmt.Println(d)</span><br><span class=\"line\"></span><br><span class=\"line\">    e := &quot;eee&quot;</span><br><span class=\"line\">    fmt.Println(e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行得到<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wRB9S2wwIBouI72F.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h1 id=\"go变量的声明-无初始化\"><a class=\"markdownIt-Anchor\" href=\"#go变量的声明-无初始化\">#</a> go 变量的声明 ------ 无初始化</h1>\n",
            "tags": [
                "GO"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/",
            "title": "go循环语句",
            "date_published": "2024-04-16T05:58:18.985Z",
            "content_html": "<blockquote>\n<p>因为某些情况下需要重复执行操作，因此就会有需要重复利用到的语句，就出现了循环</p>\n</blockquote>\n<h1 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h1>\n<p>go 语言有三种形式的 for 循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for init; condition; post &#123; &#125;</span><br><span class=\"line\">for condition &#123; &#125;</span><br><span class=\"line\">for &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>三种形式都在 c 语言中有相对应的形式，第一种和 c 语言中的 for 循环一样，第二种则是与 c 语言中中 while 循环一样，第三种和 c 语言的 for (;😉<br>\n一样<br>\n其中第一种形式中的 init；condition；post 都代表着特定的书写，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init： 一般为赋值表达式，给控制变量赋初值；</span><br><span class=\"line\">condition： 关系表达式或逻辑表达式，循环控制条件；</span><br><span class=\"line\">post： 一般为赋值表达式，给控制变量增量或减量。</span><br></pre></td></tr></table></figure>\n<p>for 循环的执行过程和其它编程语言一样，首先先赋初值，接着 condition 判断是否满足条件，满足则继续执行循环内的语句，结束之后再执行 post 表达式，进入下一个循环，判断 condition，如果为假则跳出循环<br>\n for 循环的 range 格式可以对<br>\n slice、map、数组、字符串等进行迭代循环，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for key, value := range oldMap &#123;</span><br><span class=\"line\">    newMap[key] = value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上的 key 和 value 可忽略<br>\n如，只想读取 key，可以如下书写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for key := range oldMap</span><br></pre></td></tr></table></figure>\n<p>也可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for key, _ := range oldMap</span><br></pre></td></tr></table></figure>\n<p>只想读取 value 同理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for _, value := range oldMap</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例1\"><a class=\"markdownIt-Anchor\" href=\"#实例1\">#</a> 实例 1：</h2>\n<p>接下来用 for 循环简单编写一个计算 1-100 的和的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    sum := 0</span><br><span class=\"line\">    for i := 0; i &lt;= 100; i++ &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/JpMseNfvwSn2fUGS.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>当然如上文所说用 c 语言的 while 格式也可以，如下：</p>\n<h2 id=\"实例2\"><a class=\"markdownIt-Anchor\" href=\"#实例2\">#</a> 实例 2：</h2>\n<p>计算 sum 自加的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    sum := 1</span><br><span class=\"line\">    for sum &lt;= 10 &#123;</span><br><span class=\"line\">        sum += sum</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7BQdsYSbpFmiDMk0.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>注意这里计算 sum 自加的值，sum 的初始值不能为 0，不然一直是 0 自加永远满足条件无法跳出循环进行输出</p>\n<h2 id=\"实例3\"><a class=\"markdownIt-Anchor\" href=\"#实例3\">#</a> 实例 3：</h2>\n<p><strong>For-each range 循环</strong></p>\n<blockquote>\n<p>这种格式的循环可以对字符串、数组、切片等进行迭代输出元素。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    strings := []string&#123;&quot;nnnpc&quot;, &quot;good&quot;&#125;</span><br><span class=\"line\">    for i, s := range strings &#123;</span><br><span class=\"line\">        fmt.Println(i, s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    strings1 := [6]string&#123;&quot;n&quot;, &quot;n&quot;, &quot;n&quot;, &quot;p&quot;, &quot;c&quot;&#125;</span><br><span class=\"line\">    for i, x := range strings1 &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;第 %d 位 x 的值 = %d\\n&quot;, i, x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XO9LJ6KpZCK1UCOQ.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>以上代码可以大体分为两块，第一块是变量 strings，默认赋给了变量两个空间，分别用字符串 nnnpc 和 good 占用，利用 range 将 strings 中的 key 值和 value 值迭代赋值给变量 i 和 s，并且循环将 i，s 输出。第二块则是变量 strings1，确定了六个空间给 strings1，并且五个空间分别用字母占用，同样的将 key 值和 value 值赋给了 i，x，使用 range 来进行迭代循环输出</p>\n<p>如上文所述，可以省略 key 或者 value，只输出自己想要的，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    map1 := make(map[int]float32)</span><br><span class=\"line\">    map1[1] = 1.0</span><br><span class=\"line\">    map1[2] = 2.0</span><br><span class=\"line\">    map1[3] = 3.0</span><br><span class=\"line\">    map1[4] = 4.0</span><br><span class=\"line\"></span><br><span class=\"line\">    for key, value := range map1 &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key is: %d - value is: %f\\n&quot;, key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for key := range map1 &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key is: %d\\n&quot;, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;=================省略value也可如下书写=====================\\n&quot;)</span><br><span class=\"line\">    for key, _ := range map1 &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key is: %d\\n&quot;, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;==========================================================\\n&quot;)</span><br><span class=\"line\">    for _, value := range map1 &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;value is: %f\\n&quot;, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/KHvRRhBqoBYKIJw1.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>第一个 for 循环二者均输出，第二、三个只输出 key，第四个只输出 value</p>\n<h1 id=\"循环嵌套\"><a class=\"markdownIt-Anchor\" href=\"#循环嵌套\">#</a> 循环嵌套</h1>\n<p>顾名思义就是在循环内嵌套循环</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for [condition |  ( init; condition; increment ) | Range]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   for [condition |  ( init; condition; increment ) | Range]</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      statement(s);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\">#</a> 实例：</h2>\n<p>输出 2-100 之间的素数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var i, j int</span><br><span class=\"line\">   for i=2; i &lt; 100; i++ &#123;</span><br><span class=\"line\">      for j=2; j &lt;= (i/j); j++ &#123;</span><br><span class=\"line\">         if(i%j==0) &#123;</span><br><span class=\"line\">            break; // 如果发现因子，则不是素数</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if(j &gt; (i/j)) &#123;</span><br><span class=\"line\">         fmt.Printf(&quot;%d  是素数\\n&quot;, i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IM55zggVj7CdbSdF.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h1 id=\"循环控制语句\"><a class=\"markdownIt-Anchor\" href=\"#循环控制语句\">#</a> 循环控制语句</h1>\n<blockquote>\n<p>循环控制语句可以控制循环体内语句的执行过程。</p>\n</blockquote>\n<h2 id=\"break语句\"><a class=\"markdownIt-Anchor\" href=\"#break语句\">#</a> break 语句</h2>\n<blockquote>\n<p>在 Go 语言中，break 语句用于终止当前循环或者 switch<br>\n 语句的执行，并跳出该循环或者 switch 语句的代码块。<br>\nbreak 语句可以用于以下几个方面：<br>\n1. 用于循环语句中跳出循环，并开始执行循环之后的语句。<br>\n2.break 在 switch 语句中在执行一条 case 后跳出语句的作用。<br>\n3.break 可应用在 select 语句中。<br>\n4. 在多重循环中，可以用标号 label 标出想 break 的循环。</p>\n</blockquote>\n<p>实例 1：在 for 循环中使用 break 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    for i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">        if i == 5 &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Q4QDlJ6hitCu3We0.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>以上简单的 break 程序当 i 等于 5 的时候跳出循环</p>\n<p>接着说明使用标记与不使用标记的区别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   // 不使用标记</span><br><span class=\"line\">   fmt.Println(&quot;---- break ----&quot;)</span><br><span class=\"line\">   for i := 1; i &lt;= 3; i++ &#123;</span><br><span class=\"line\">      fmt.Printf(&quot;i: %d\\n&quot;, i)</span><br><span class=\"line\">      for i2 := 11; i2 &lt;= 13; i2++ &#123;</span><br><span class=\"line\">         fmt.Printf(&quot;i2: %d\\n&quot;, i2)</span><br><span class=\"line\">         break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 使用标记</span><br><span class=\"line\">   fmt.Println(&quot;---- break label ----&quot;)</span><br><span class=\"line\">   re:</span><br><span class=\"line\">      for i := 1; i &lt;= 3; i++ &#123;</span><br><span class=\"line\">         fmt.Printf(&quot;i: %d\\n&quot;, i)</span><br><span class=\"line\">         for i2 := 11; i2 &lt;= 13; i2++ &#123;</span><br><span class=\"line\">         fmt.Printf(&quot;i2: %d\\n&quot;, i2)</span><br><span class=\"line\">         break re</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QWdvhj56cAOkLJ6x.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>添加标记能 break 掉标记指定的循环语句，而没有标记只能 break 当前 break 所在的循环</p>\n<p>实例 2：在 switch 语句中使用 break</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    day := &quot;Tuesday&quot;</span><br><span class=\"line\">    switch day &#123;</span><br><span class=\"line\">    case &quot;Monday&quot;:</span><br><span class=\"line\">        fmt.Println(&quot;It&#x27;s Monday.&quot;)</span><br><span class=\"line\">    case &quot;Tuesday&quot;:</span><br><span class=\"line\">        fmt.Println(&quot;It&#x27;s Tuesday.&quot;)</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case &quot;Wednesday&quot;:</span><br><span class=\"line\">        fmt.Println(&quot;It&#x27;s Wednesday.&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始给 day 声明赋值为 Tuesday 而 switch 语句中 case 也是 Tuesday 时执行 break，也就是输出 It’s<br>\nTuesday 并跳出 switch 语句<br>\n输出：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mFT2vZPWNnznKn4d.png!thumbnail\" alt=\"\"></p>\n<p>实例 3：在 select 语句中使用 break</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    ch1 := make(chan int)</span><br><span class=\"line\">    ch2 := make(chan int)</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        time.Sleep(2 * time.Second)</span><br><span class=\"line\">        ch1 &lt;- 1</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        time.Sleep(1 * time.Second)</span><br><span class=\"line\">        ch2 &lt;- 2</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    select &#123;</span><br><span class=\"line\">    case &lt;-ch1:</span><br><span class=\"line\">        fmt.Println(&quot;Received from ch1.&quot;)</span><br><span class=\"line\">    case &lt;-ch2:</span><br><span class=\"line\">        fmt.Println(&quot;Received from ch2.&quot;)</span><br><span class=\"line\">        break // 跳出 select 语句</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/71ZBT5zD4b0kgqUh.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<blockquote>\n<p>在 Go 语言中，break 语句在 select 语句中的应用是相对特殊的。由于<br>\n select 语句的特性，break 语句并不能直接用于跳出 select 语句本身，因为<br>\n select<br>\n 语句是非阻塞的，它会一直等待所有的通信操作都准备就绪。如果需要提前结束<br>\n select 语句的执行，可以使用 return 或者 goto 语句来达到相同的效果。<br>\n由于 select 语句是非阻塞的，因此 braek 不能直接跳出 select 语句本身，可以使用 return 和 goto 来达到提前结束 select 语句的效果，如下</p>\n</blockquote>\n<p>return：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">func process(ch chan int) &#123;</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        select &#123;</span><br><span class=\"line\">        case val := &lt;-ch:</span><br><span class=\"line\">            fmt.Println(&quot;Received value:&quot;, val)</span><br><span class=\"line\">            if val == 5 &#123;</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            fmt.Println(&quot;No value received yet.&quot;)</span><br><span class=\"line\">            time.Sleep(500 * time.Millisecond)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    ch := make(chan int)</span><br><span class=\"line\">    go process(ch)</span><br><span class=\"line\">    time.Sleep(2 * time.Second)</span><br><span class=\"line\">    ch &lt;- 1</span><br><span class=\"line\">    time.Sleep(1 * time.Second)</span><br><span class=\"line\">    ch &lt;- 3</span><br><span class=\"line\">    time.Sleep(1 * time.Second)</span><br><span class=\"line\">    ch &lt;- 5</span><br><span class=\"line\">    time.Sleep(1 * time.Second)</span><br><span class=\"line\">    ch &lt;- 7</span><br><span class=\"line\">    time.Sleep(2 * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HY7TfTCc534yWLYM.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>可以看到整个程序段最终接收到 7，也就是 val==7，但由于在循环中当接收到的变量值为 5 时进行了 return 操作，效果相当于跳出了 select 语句，也就不会进行后续的接收 7 的操作了</p>\n<blockquote>\n<p>通过使用 return，我们可以在 select<br>\n 语句中提前终止执行，并返回到调用者的代码中。<br>\n需要注意的是，使用 return<br>\n 语句会立即终止当前的函数执行，所以请根据实际需求来决定在 select<br>\n 语句中使用何种方式来提前结束执行。</p>\n</blockquote>\n<h2 id=\"continue语句\"><a class=\"markdownIt-Anchor\" href=\"#continue语句\">#</a> continue 语句</h2>\n<blockquote>\n<p>Go 语言的 continue 语句 有点像 break 语句。但是 continue<br>\n 不是跳出循环，而是跳过当前循环执行下一次循环语句。<br>\nfor 循环中，执行 continue 语句会触发 for 增量语句的执行。<br>\n在多重循环中，可以用标号 label 标出想 continue 的循环。</p>\n</blockquote>\n<p>通俗的来讲 continue 的作用就是跳过本次循环执行下一次循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /* 定义局部变量 */</span><br><span class=\"line\">   var a int = 10</span><br><span class=\"line\">   /* for 循环 */</span><br><span class=\"line\">   for a &lt; 20 &#123;</span><br><span class=\"line\">      if a == 15 &#123;</span><br><span class=\"line\">         /* 跳过此次循环 */</span><br><span class=\"line\">         a = a + 1;</span><br><span class=\"line\">         continue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fmt.Printf(&quot;a 的值为 : %d\\n&quot;, a);</span><br><span class=\"line\">      a++;    </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2fgVJ2xlGcD9sXat.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>该程序当 a 的值为 15 时就跳过该次循环，也就是不执行输出和自加，通过 a=a+1 之后执行下一次的循环，因此输出里面没有值为 15</p>\n<p>接下来记录一下使用和不使用标记的区别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    // 不使用标记</span><br><span class=\"line\">    fmt.Println(&quot;---- continue ---- &quot;)</span><br><span class=\"line\">    for i := 1; i &lt;= 3; i++ &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;i: %d\\n&quot;, i)</span><br><span class=\"line\">            for i2 := 11; i2 &lt;= 13; i2++ &#123;</span><br><span class=\"line\">                fmt.Printf(&quot;i2: %d\\n&quot;, i2)</span><br><span class=\"line\">                continue</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 使用标记</span><br><span class=\"line\">    fmt.Println(&quot;---- continue label ----&quot;)</span><br><span class=\"line\">    re:</span><br><span class=\"line\">        for i := 1; i &lt;= 3; i++ &#123;</span><br><span class=\"line\">            fmt.Printf(&quot;i: %d\\n&quot;, i)</span><br><span class=\"line\">                for i2 := 11; i2 &lt;= 13; i2++ &#123;</span><br><span class=\"line\">                    fmt.Printf(&quot;i2: %d\\n&quot;, i2)</span><br><span class=\"line\">                    continue re</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/SNE3qOEI5rlhBVly.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>可以明显看到没用标记之前每个 i 对应三个 i2，使用之后每个 i 对应一个 i2。正是因为标记 re 在整个大 for 循环外面，当执行一次循环之后直接跳出了本次的大 for 循环，回到了起始位置。而没有标记的只是正常结束之后跳出本次的小 for 循环，进行下一次，直到执行三次后不满足小 for 循环条件之后跳回大 for 循环</p>\n<h2 id=\"goto语句\"><a class=\"markdownIt-Anchor\" href=\"#goto语句\">#</a> goto 语句</h2>\n<blockquote>\n<p>Go 语言的 goto 语句可以无条件地转移到过程中指定的行。<br>\ngoto 语句通常与条件语句配合使用。可用来实现条件转移，<br>\n构成循环，跳出循环体等功能。<br>\n但是，在结构化程序设计中一般不主张使用 goto 语句，<br>\n以免造成程序流程的混乱，使理解和调试程序都产生困难。</p>\n</blockquote>\n<p>简单来说 goto 可以从一代码无条件跳转到另一代码进行执行</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goto label;</span><br><span class=\"line\">..</span><br><span class=\"line\">.</span><br><span class=\"line\">label: statement;</span><br></pre></td></tr></table></figure>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    /* 定义局部变量 */</span><br><span class=\"line\">    var a int = 10</span><br><span class=\"line\"></span><br><span class=\"line\">    /* 循环 */</span><br><span class=\"line\">LOOP:</span><br><span class=\"line\">    for a &lt; 20 &#123;</span><br><span class=\"line\">        if a == 15 &#123;</span><br><span class=\"line\">            /* 跳过迭代 */</span><br><span class=\"line\">            a = a + 1</span><br><span class=\"line\">            goto LOOP</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Printf(&quot;a的值为 : %d\\n&quot;, a)</span><br><span class=\"line\">        a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/CWU6o08mO59Qv8Fr.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>这个和前面的 continue 标记执行效果相同，但是实际作用是不一样的，当 a 的值为 15 时执行 a=a+1 之后直接去到 LOOP 所在的地方不执行输出和自加，而这里 LOOP 恰好就是下一次的循环开始，因此结果中没有输出值为 15 的</p>\n",
            "tags": [
                "GO"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/go%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/",
            "url": "https://nnnpc.github.io/2024/04/16/go%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/",
            "title": "go条件语句",
            "date_published": "2024-04-16T05:58:18.984Z",
            "content_html": "<blockquote>\n<p>条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true<br>\n 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。</p>\n</blockquote>\n<p>语句           描述</p>\n<hr>\n<p>if 语句        <strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。<br>\nif else 语句   <strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>，else 语句中的表达式在布尔表达式为 false 时执行。<br>\nif 嵌套语句    你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。<br>\nswitch 语句    <strong>switch</strong> 语句用于基于不同条件执行不同动作。<br>\nselect 语句    <strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是 select 会随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。</p>\n<h1 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句</h1>\n<p>条件判断：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 布尔表达式 &#123;</span><br><span class=\"line\">   /* 在布尔表达式为 true 时执行 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /* 定义局部变量 */</span><br><span class=\"line\">   var a int = 10</span><br><span class=\"line\"> </span><br><span class=\"line\">   /* 使用 if 语句判断布尔表达式 */</span><br><span class=\"line\">   if a &lt; 20 &#123;</span><br><span class=\"line\">       /* 如果条件为 true 则执行以下语句 */</span><br><span class=\"line\">       fmt.Printf(&quot;a 小于 20\\n&quot; )</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Printf(&quot;a 的值为 : %d\\n&quot;, a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#</p>\n<h1 id=\"if-else语句\"><a class=\"markdownIt-Anchor\" href=\"#if-else语句\">#</a> if else 语句</h1>\n<p>条件判断：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 布尔表达式 &#123;</span><br><span class=\"line\">   /* 在布尔表达式为 true 时执行 */</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  /* 在布尔表达式为 false 时执行 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if 在表达式为 true 时执行里面的语句，在表达式为 false 时执行 false 里面的语句<br>\n实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /* 局部变量定义 */</span><br><span class=\"line\">   var a int = 100;</span><br><span class=\"line\"> </span><br><span class=\"line\">   /* 判断布尔表达式 */</span><br><span class=\"line\">   if a &lt; 20 &#123;</span><br><span class=\"line\">       /* 如果条件为 true 则执行以下语句 */</span><br><span class=\"line\">       fmt.Printf(&quot;a 小于 20\\n&quot; );</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">       /* 如果条件为 false 则执行以下语句 */</span><br><span class=\"line\">       fmt.Printf(&quot;a 不小于 20\\n&quot; );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Printf(&quot;a 的值为 : %d\\n&quot;, a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#</p>\n<h1 id=\"if嵌套语句\"><a class=\"markdownIt-Anchor\" href=\"#if嵌套语句\">#</a> if 嵌套语句</h1>\n<p>条件判断：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 布尔表达式 1 &#123;</span><br><span class=\"line\">   /* 在布尔表达式 1 为 true 时执行 */</span><br><span class=\"line\">   if 布尔表达式 2 &#123;</span><br><span class=\"line\">      /* 在布尔表达式 2 为 true 时执行 */</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嵌套的理解很简单，就是在第一个 if 语句的表达式为 true 时执行第二个 if 语句<br>\n实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /* 定义局部变量 */</span><br><span class=\"line\">   var a int = 100</span><br><span class=\"line\">   var b int = 200</span><br><span class=\"line\"> </span><br><span class=\"line\">   /* 判断条件 */</span><br><span class=\"line\">   if a == 100 &#123;</span><br><span class=\"line\">       /* if 条件语句为 true 执行 */</span><br><span class=\"line\">       if b == 200 &#123;</span><br><span class=\"line\">          /* if 条件语句为 true 执行 */</span><br><span class=\"line\">          fmt.Printf(&quot;a 的值为 100 ， b 的值为 200\\n&quot; );</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Printf(&quot;a 值为 : %d\\n&quot;, a );</span><br><span class=\"line\">   fmt.Printf(&quot;b 值为 : %d\\n&quot;, b );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#</p>\n<h1 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\">#</a> switch 语句</h1>\n<p>着重记录一下 switch 语句和 select 语句</p>\n<p>条件判断：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch var1 &#123;</span><br><span class=\"line\">    case val1:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    case val2:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    default:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以理解为寻找匹配的值，在 case 的几个选项中寻找匹配 var1 的值，如果匹配到则执行相应 case 底下的代码，如果都没有匹配到则执行 default 底下的代码</p>\n<blockquote>\n<p>变量 var1 可以是任何类型，而 val1 和 val2<br>\n 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。<br>\n您可以同时测试多个可能符合条件的值，使用逗号分割它们，例如：case val1,<br>\nval2, val3。</p>\n</blockquote>\n<p>总结一下就是 var1 可以是任意类型，而 val1 和 val2 可以是任意值但是类型必须和 var1 相同，如有多个符合 case 条件的值可以放在同一行，如 case<br>\n10,20,30: a=1</p>\n<p>switch 可以有两种表达方式，如下实例所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /* 定义局部变量 */</span><br><span class=\"line\">   var grade string = &quot;B&quot;</span><br><span class=\"line\">   var marks int = 90</span><br><span class=\"line\">   switch marks &#123;</span><br><span class=\"line\">      case 90: grade = &quot;A&quot;</span><br><span class=\"line\">      case 80: grade = &quot;B&quot;</span><br><span class=\"line\">      case 50,60,70 : grade = &quot;C&quot;</span><br><span class=\"line\">      default: grade = &quot;D&quot;  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   switch &#123;</span><br><span class=\"line\">      case grade == &quot;A&quot; :</span><br><span class=\"line\">         fmt.Printf(&quot;优秀!\\n&quot; )    </span><br><span class=\"line\">      case grade == &quot;B&quot;, grade == &quot;C&quot; :</span><br><span class=\"line\">         fmt.Printf(&quot;良好\\n&quot; )      </span><br><span class=\"line\">      case grade == &quot;D&quot; :</span><br><span class=\"line\">         fmt.Printf(&quot;及格\\n&quot; )      </span><br><span class=\"line\">      case grade == &quot;F&quot;:</span><br><span class=\"line\">         fmt.Printf(&quot;不及格\\n&quot; )</span><br><span class=\"line\">      default:</span><br><span class=\"line\">         fmt.Printf(&quot;差\\n&quot; );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Printf(&quot;你的等级是 %s\\n&quot;, grade );      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>type switch</strong></p>\n<blockquote>\n<p>switch 语句还可以被用于 type-switch 来判断某个 interface<br>\n 变量中实际存储的变量类型。</p>\n</blockquote>\n<p>语法格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch x.(type)&#123;</span><br><span class=\"line\">    case type:</span><br><span class=\"line\">       statement(s);      </span><br><span class=\"line\">    case type:</span><br><span class=\"line\">       statement(s); </span><br><span class=\"line\">    /* 你可以定义任意个数的case */</span><br><span class=\"line\">    default: /* 可选 */</span><br><span class=\"line\">       statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>判断 x 的类型，当然这也可以声明一个变量来进行接收再用 case 去判断变量所接收的类型<br>\n实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var x interface&#123;&#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">   switch i := x.(type) &#123;</span><br><span class=\"line\">      case nil:  </span><br><span class=\"line\">         fmt.Printf(&quot; x 的类型 :%T&quot;,i)                </span><br><span class=\"line\">      case int:  </span><br><span class=\"line\">         fmt.Printf(&quot;x 是 int 型&quot;)                      </span><br><span class=\"line\">      case float64:</span><br><span class=\"line\">         fmt.Printf(&quot;x 是 float64 型&quot;)          </span><br><span class=\"line\">      case func(int) float64:</span><br><span class=\"line\">         fmt.Printf(&quot;x 是 func(int) 型&quot;)                      </span><br><span class=\"line\">      case bool, string:</span><br><span class=\"line\">         fmt.Printf(&quot;x 是 bool 或 string 型&quot; )      </span><br><span class=\"line\">      default:</span><br><span class=\"line\">         fmt.Printf(&quot;未知型&quot;)    </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>fallthrough</strong></p>\n<blockquote>\n<p>使用 fallthrough 会强制执行后面的 case 语句，fallthrough<br>\n 不会判断下一条 case 的表达式结果是否为 true。</p>\n</blockquote>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    switch &#123;</span><br><span class=\"line\">    case false:</span><br><span class=\"line\">            fmt.Println(&quot;1、case 条件语句为 false&quot;)</span><br><span class=\"line\">            fallthrough</span><br><span class=\"line\">    case true:</span><br><span class=\"line\">            fmt.Println(&quot;2、case 条件语句为 true&quot;)</span><br><span class=\"line\">            fallthrough</span><br><span class=\"line\">    case false:</span><br><span class=\"line\">            fmt.Println(&quot;3、case 条件语句为 false&quot;)</span><br><span class=\"line\">            fallthrough</span><br><span class=\"line\">    case true:</span><br><span class=\"line\">            fmt.Println(&quot;4、case 条件语句为 true&quot;)</span><br><span class=\"line\">    case false:</span><br><span class=\"line\">            fmt.Println(&quot;5、case 条件语句为 false&quot;)</span><br><span class=\"line\">            fallthrough</span><br><span class=\"line\">    default:</span><br><span class=\"line\">            fmt.Println(&quot;6、默认 case&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2、case 条件语句为 true</span><br><span class=\"line\">3、case 条件语句为 false</span><br><span class=\"line\">4、case 条件语句为 true</span><br></pre></td></tr></table></figure>\n<p>简单说明一下该实例，第一个 case<br>\ntrue 为第二条，因此第一次进入的便是第二个 case 语句，在第二个 case 语句之后加上了 fallthrough，这时就不管第三个语句是否为 true 都进入执行，第三个后面也加了 fallthrough，不管第四个 case 是否为 true 也是直接进入执行语句，但是第四个 case 末没有 fallthrough，因此第五个 case 就得进行判断，发现是 false 那就不执行。case 中的代码有被执行过，因此 default 中的代码不会被执行。最终输出的为 2、3、4<br>\n#</p>\n<h1 id=\"select语句\"><a class=\"markdownIt-Anchor\" href=\"#select语句\">#</a> select 语句</h1>\n<blockquote>\n<p>select 是 Go 中的一个控制结构，类似于 switch 语句。<br>\nselect 语句只能用于通道操作，每个 case<br>\n 必须是一个通道操作，要么是发送要么是接收。<br>\nselect<br>\n 语句会监听所有指定的通道上的操作，一旦其中一个通道准备好就会执行相应的代码块。<br>\n如果多个通道都准备好，那么 select<br>\n 语句会随机选择一个通道执行。如果所有通道都没有准备好，那么执行 default<br>\n 块中的代码。</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#123;</span><br><span class=\"line\">  case &lt;- channel1:</span><br><span class=\"line\">    // 执行的代码</span><br><span class=\"line\">  case value := &lt;- channel2:</span><br><span class=\"line\">    // 执行的代码</span><br><span class=\"line\">  case channel3 &lt;- value:</span><br><span class=\"line\">    // 执行的代码</span><br><span class=\"line\">    // 你可以定义任意数量的 case</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    // 所有通道都没有准备好，执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下描述了 select 语句的语法：<br>\n每个 case 都必须是一个通道<br>\n所有 channel 表达式都会被求值<br>\n所有被发送的表达式都会被求值<br>\n如果任意某个通道可以进行，它就执行，其他被忽略。<br>\n如果有多个 case 都可以运行，select<br>\n 会随机公平地选出一个执行，其他不会执行。<br>\n否则：<br>\n如果有 default 子句，则执行该语句。<br>\n如果没有 default 子句，select 将阻塞，直到某个通道可以运行；Go<br>\n 不会重新对 channel 或值进行求值。</p>\n</blockquote>\n<p>应用实例 1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    c1 := make(chan string)</span><br><span class=\"line\">    c2 := make(chan string)</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        time.Sleep(1 * time.Second)</span><br><span class=\"line\">        c1 &lt;- &quot;one&quot;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        time.Sleep(2 * time.Second)</span><br><span class=\"line\">        c2 &lt;- &quot;two&quot;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    for i := 0; i &lt; 2; i++ &#123;</span><br><span class=\"line\">        select &#123;</span><br><span class=\"line\">        case msg1 := &lt;-c1:</span><br><span class=\"line\">            fmt.Println(&quot;received&quot;, msg1)</span><br><span class=\"line\">        case msg2 := &lt;-c2:</span><br><span class=\"line\">            fmt.Println(&quot;received&quot;, msg2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个实例中创建了两个通道 c1 和 c2，select 在等待两个通道的数据，如果 c1 收到了就执行 case<br>\nmsg1，如果 c2 收到了就执行 case msg2<br>\n 应用实例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  // 定义两个通道</span><br><span class=\"line\">  ch1 := make(chan string)</span><br><span class=\"line\">  ch2 := make(chan string)</span><br><span class=\"line\">  // 启动两个 goroutine，分别从两个通道中获取数据</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">      ch1 &lt;- &quot;from 1&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">      ch2 &lt;- &quot;from 2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  // 使用 select 语句非阻塞地从两个通道中获取数据</span><br><span class=\"line\">  for &#123;</span><br><span class=\"line\">    select &#123;</span><br><span class=\"line\">    case msg1 := &lt;-ch1:</span><br><span class=\"line\">      fmt.Println(msg1)</span><br><span class=\"line\">    case msg2 := &lt;-ch2:</span><br><span class=\"line\">      fmt.Println(msg2)</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      // 如果两个通道都没有可用的数据，则执行这里的语句</span><br><span class=\"line\">      fmt.Println(&quot;no message received&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上述实例中我们定义了两个通道，并启动了两个协程（Goroutine）从这两个通道中获取数据。在<br>\n main 函数中，我们使用 select<br>\n 语句在这两个通道中进行非阻塞的选择，如果两个通道都没有可用的数据，就执行<br>\n default 子句中的语句。<br>\n以下实例执行后会不断地从两个通道中获取到的数据，当两个通道都没有可用的数据时，会输出<br>\n “no message received”。</p>\n</blockquote>\n<p>在第二个实例中，启动了协程从这两个通道中获取数据，更快捷高效，因为没有对 for 循环语句做限制，因此它会不断从通道中获取数据，直到没有数据获取了就执行 default 中的代码，输出 no<br>\nmessage received</p>\n",
            "tags": [
                "GO"
            ]
        }
    ]
}